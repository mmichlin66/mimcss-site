(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["mimcss"] = factory();
	else
		root["mimcss"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/api/ColorAPI.js":
/*!*****************************!*\
  !*** ./lib/api/ColorAPI.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Colors": () => (/* binding */ Colors),
/* harmony export */   "registerColor": () => (/* binding */ registerColor),
/* harmony export */   "rgb": () => (/* binding */ rgb),
/* harmony export */   "hsl": () => (/* binding */ hsl),
/* harmony export */   "lab": () => (/* binding */ lab),
/* harmony export */   "lch": () => (/* binding */ lch),
/* harmony export */   "colorContrast": () => (/* binding */ colorContrast),
/* harmony export */   "colorMix": () => (/* binding */ colorMix),
/* harmony export */   "alpha": () => (/* binding */ alpha)
/* harmony export */ });
/* harmony import */ var _impl_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/Utils */ "./lib/impl/Utils.js");

/**
 * Object whose property names are the well-known Web color names while values correspond to the
 * hexadecimal representation of the RGB separations (without an alpha mask). The properties of
 * this object can be used wherever the [[CssColor]] type can be used. Since the properties are
 * of the `number` type, they can be used for manipulating the color value.
*/
const Colors = {
    black: 0x000000,
    silver: 0xc0c0c0,
    gray: 0x808080,
    white: 0xffffff,
    maroon: 0x800000,
    red: 0xff0000,
    purple: 0x800080,
    fuchsia: 0xff00ff,
    green: 0x008000,
    lime: 0x00ff00,
    olive: 0x808000,
    yellow: 0xffff00,
    navy: 0x000080,
    blue: 0x0000ff,
    teal: 0x008080,
    aqua: 0x00ffff,
    orange: 0xffa500,
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    blanchedalmond: 0xffebcd,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    oldlace: 0xfdf5e6,
    olivedrab: 0x6b8e23,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    whitesmoke: 0xf5f5f5,
    yellowgreen: 0x9acd32,
    rebeccapurple: 0x663399,
};
/**
 * Object where we keep the registered custom colors. We need it to determine whether the color
 * is a standard or a custom one.
 */
const customColors = {};
/**
 * Registers a new custom color or changes the value of the existing custom color. The name of the
 * custom color should have been already added to the [[INamedColors]] interface using the module
 * augmentation technique. Note that values of standard Web colors cannot be changed.
 *
 * @param name Color name. This name cannot be a name of the standard Web color.
 * @param value Color value to assign to the given named color.
 * @returns Flag indicating whether the operation was successful.
 */
const registerColor = (name, value) => {
    if (!name || value == null)
        return false;
    // try to retrieve this name from the CustomColors object. Non-undefined value means that
    // we already have this color registered.
    let customValue = customColors[name];
    // if the color name already exists in the Colors object we will only allow changing its
    // value if this is a custom color.
    if (name in Colors && customValue != null)
        return false;
    // add the value to the Colors and CustomColors objects
    Colors[name] = value;
    customColors[name] = value;
    return true;
};
/**
 * Converts color value from the numeric representation to the CSS color string.
 */
let colorNumber2s = (val) => {
    // if the number is negative, remember that fact and get the positive number
    let isNegative = val < 0;
    let n = isNegative ? -val : val;
    // if the number has a floating point part, separate it into alpha channel
    let a = 0;
    if (!Number.isInteger(n)) {
        let k = Math.floor(n);
        // a = Math.round( (n - k) * 100);
        a = Math.round((n - k) * 255);
        n = k;
    }
    // If the number was negative we revert the color by negating all the bits. In any case,
    // we clear everything beyond the first three bytes.
    n = isNegative ? ~(0xFF000000 | n) : 0x00FFFFFF & n;
    let s = "#" + n.toString(16).padStart(6, "0");
    return a ? s + a.toString(16).padStart(2, "0") : s;
};
/**
 * Converts color style value to the CSS string. We convert numeric values to the #RRGGBBAA
 * representation. If a string value is a custom color added via INamedColors module
 * augmentation we get its number from the `custmColors` object and also convert it to the
 * #RRGGBBAA representation. Standard named colors as well as are returned as is.
 */
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[11] = (val) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    str: v => v in customColors ? colorNumber2s(customColors[v]) : v,
    num: colorNumber2s
});
/**
 * Converts color style value to the CSS string. We convert numeric values to the #RRGGBBAA
 * representation. If a string value is a custom color added via INamedColors module
 * augmentation we get its number from the `custmColors` object and also convert it to the
 * #RRGGBBAA representation. Standard named colors as well as are returned as is.
 */
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[30] = (val) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, { any: 11 /* Color */ });
/**
 * Converts the color separation value to a CSS string.
 */
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[28] = (c) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(c, {
    num: c => {
        c = c < 0 ? -c : c;
        return (c === 0 || c >= 1) ? "" + c : (Math.round(c * 100) + "%");
    }
});
/**
 * Converts the color specified as red, green, blue separation values and an optional alpha
 * mask to a CSS color representation. Each color separation can be represented as a number with
 * the following meaning:
 *   - Integer number -255 to 255. Numbers beyond this range will be clamped. Negative numbers
 *     will be inverted.
 *   - Floating number -1.0 to 1.0 non-inclusive, which is multiplied by 100 treated as percentage.
 *     Floating numbers beyond this range will be rounded and treated as integer numbers. Negative
 *     numbers will be inverted.
 *
 * The alpha mask can be one of the following:
 *   - Floating number 0 to 1 inclusive.
 *   - Integer or floating number 1 to 100, which is divided by 100. Floating numbers will be
 *     rounded. Numbers beyond this range will be clamped.
 *   - The sign of alpha is ignored; that is, only the absolute value is considered.
 *
 * - MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb()
 *
 * @param r Red separation value.
 * @param g Green separation value.
 * @param b Blue separation value.
 * @param a Optional alpha mask as a percentage value.
 * @return The `IRgbFunc` object representing the invocation of the `rgb()` CSS function
 */
const rgb = (r, g, b, a) => {
    return { fn: "rgb", r, g, b, a };
};
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.rgb = {
    p: [["r", 28 /* ColorSeparation */], ["g", 28 /* ColorSeparation */], ["b", 28 /* ColorSeparation */], ["a", 2 /* Percent */, "/"]],
    s: " "
};
/**
 * Converts the color specified as hue-saturation-lightness components and an optional alpha
 * mask to a CSS color representation. This method should be used when defining CSS color
 * values in styleset properties.
 *
 * The Hue component is treated as the CSS `<angle>` type. Numbers are considered degrees.
 *
 * The Saturation and Lightness components are treated as percentages:
 *   - The sign is ignored; that is, only the absolute value is considered.
 *   - Floating number 0 to 1 inclusive are multiplied by 100 and treated as percentage.
 *   - Integer or floating number 1 to 100 are treated as percentage. Floating numbers will be
 *     rounded. Numbers beyond this range will be clamped to 100.
 *
 * The alpha mask can be one of the following:
 *   - Floating number 0 to 1 inclusive.
 *   - Integer or floating number 1 to 100, which is divided by 100. Floating numbers will be
 *     rounded. Numbers beyond this range will be clamped.
 *   - The sign of alpha is ignored; that is, only the absolute value is considered.
 *
 * - MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl()
 *
 * @param h Hue component as an angle value.
 * @param s Saturation component as a percentage value.
 * @param l Lightness component as a percentage value.
 * @param a Optional alpha mask as a percentage value.
 * @return The `IHslFunc` object representing the invocation of the `hsl()` CSS function
 */
const hsl = (h, s, l, a) => {
    return { fn: "hsl", h, s, l, a };
};
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.hsl = {
    p: [["h", 4 /* Angle */], ["s", 2 /* Percent */], ["l", 2 /* Percent */], ["a", 2 /* Percent */, "/"]],
    s: " "
};
/**
 * Converts the color specified as L\*a\*b\* components and an optional alpha
 * mask to a CSS color representation. This method should be used when defining CSS color
 * values in styleset properties.
 *
 * - MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lab()
 *
 * @param l CIE Lightness component
 * @param da Distance along the a axis in the Lab colorspace
 * @param db Distance along the b axis in the Lab colorspace
 * @param a Optional alpha mask as a percentage value.
 * @returns The `ILabFunc` object representing the invocation of the `lab()` CSS function
 */
const lab = (l, da, db, a) => {
    return { fn: "lab", l, da, db, a };
};
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.lab = {
    p: [["l", 27 /* AlwaysPercent */], "da", "db", ["a", 2 /* Percent */, "/"]],
    s: " "
};
/**
 * Converts the color specified as lightness-chroma-hue components and an optional alpha
 * mask to a CSS color representation. This method should be used when defining CSS color
 * values in styleset properties.
 *
 * - MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lch()
 *
 * @param l CIE Lightness component
 * @param c Chroma component
 * @param h Hue component as an angle value.
 * @param a Optional alpha mask as a percentage value.
 * @returns The `ILchFunc` object representing the invocation of the `lch()` CSS function
 */
const lch = (l, c, h, a) => {
    return { fn: "lch", l, c, h, a };
};
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.lch = {
    p: [["l", 27 /* AlwaysPercent */], "c", ["h", 4 /* Angle */], ["a", 2 /* Percent */, "/"]],
    s: " "
};
/**
 * Implements the `color-contrast()` CSS property.
 *
 * - MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-contrast()
 *
 * @param c Color to which the list of colors in the `vs` property will be compared
 * @param vs List of colors from which to select the most contrasting to the base color.
 * @returns The `IColorContrastFunc` object representing the invocation of the `color-contrast()`
 * CSS function
 */
const colorContrast = (c, ...vs) => ({ fn: "color-contrast", c, vs });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["color-contrast"] = {
    p: [
        ["c", (v) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(v, 11 /* Color */) + " vs"],
        ["vs", (v) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.a2s)(v, 11 /* Color */, ",")]
    ],
    s: " "
};
/**
 * Represents an invocation of the CSS `color-mix()` function. This interface is returned from the
 * [[colorMix]] function. Developers can use this structure wherever [[CssColor]] is accepted.
 */
class ColorMixFunc {
    constructor(c, p) {
        this.fn = "color-mix";
        this.c1 = [c, p];
    }
    with(c, p) { this.c2 = [c, p]; return this; }
    in(cs) { this.cs = cs; return this; }
}
/**
 * Implements the `color-mix()` CSS property.
 *
 * - MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-nix()
 *
 * **Examples**
 *
 * ```typescript
 * class MyStyles extends css.StyleDefnition
 * {
 *     // color-mix( "blue", "red")
 *     cls1 = this.$class({
 *         color: css.colorMix("blue").with("red");
 *     })
 *
 *     // color-mix( in srgb, "blue 30%", "red" 60%)
 *     cls2 = this.$class({
 *         color: css.colorMix("blue", 30).with("red", 60).in("srgb");
 *     })
 * }
 * ```
 *
 * @param cs Color space. Default is "lch".
 * @returns The `IColorMixBuilder` object that allows adding colors and optional percentages to mix
 */
const colorMix = (c, p) => new ColorMixFunc(c, p);
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["color-mix"] = [
    ["cs", (v) => v ? "in " + (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(v) : ""],
    ["c1", v => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)([[v[0], 11 /* Color */], [v[1], 2 /* Percent */]])],
    ["c2", v => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)([[v[0], 11 /* Color */], [v[1], 2 /* Percent */]])],
];
/**
 * Converts the given color and the alpha mask to the CSS Color representation. This
 * method should be used when defining CSS color values in styleset properties.
 *
 * The color can be specified as a numeric value or as a color name from the [[INamedColors]]
 * interface - including colors added using the module augmentation technique.
 *
 * The alpha mask is specified as a number:
 *   - The sign is ignored; that is, only the absolute value is considered.
 *   - Number 0 to 1 inclusive, which is treated as percentage.
 *   - Number 1 to 100 inclusive, which is treated as percentage.
 *   - Numbers greater than 100 are clamped to 100;
 *
 * **Examples**
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     // applying alpha to a numeric color
 *     cls1 = this.$class({ color: css.alpha( 0xAA00AA, 0.5) })
 *
 *     // applying alpha to a named color
 *     cls1 = this.$class({ color: css.alpha( "darkolivegreen", 0.5) })
 * }
 * ```
 * @param c Color value as either a number or a named color
 * @param a Alpha channel value
 */
const alpha = (c, a) => ({ fn: "alpha", c, a });
const alpha2s = (c, a) => {
    // if the alpha is 0, return transparent color
    if (a === 0)
        return "#0000";
    // convert color to numeric value (if it's not a number yet). If the color was given as a
    // string that we cannot find in the Colors object, return pure white.
    let n = typeof c === "string" ? Colors[c] : c;
    if (n == null)
        return "#FFF";
    // negative and positive values of alpha are treated identically, so convert to positive
    if (a < 0)
        a = -a;
    // convert alpha to a number with absolute value less than 1 (if it is not yet). If alpha
    // is 1 or 100, then set it to 0 because 0 in the colorNumberToString means "no alpha".
    a = a === 1 || a >= 100 ? 0 : a > 1 ? a / 100 : a;
    // make the new alpha
    return colorNumber2s(n >= 0 ? n + a : n - a);
};
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.alpha = (v) => alpha2s(v.c, v.a);


/***/ }),

/***/ "./lib/api/ColorTypes.js":
/*!*******************************!*\
  !*** ./lib/api/ColorTypes.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/api/CoreAPI.js":
/*!****************************!*\
  !*** ./lib/api/CoreAPI.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selector": () => (/* binding */ selector),
/* harmony export */   "sel": () => (/* binding */ sel),
/* harmony export */   "nstag": () => (/* binding */ nstag),
/* harmony export */   "steps": () => (/* binding */ steps),
/* harmony export */   "cubicBezier": () => (/* binding */ cubicBezier),
/* harmony export */   "media": () => (/* binding */ media),
/* harmony export */   "supports": () => (/* binding */ supports),
/* harmony export */   "raw": () => (/* binding */ raw),
/* harmony export */   "url": () => (/* binding */ url),
/* harmony export */   "cursor": () => (/* binding */ cursor),
/* harmony export */   "attr": () => (/* binding */ attr),
/* harmony export */   "counter": () => (/* binding */ counter),
/* harmony export */   "counters": () => (/* binding */ counters),
/* harmony export */   "usevar": () => (/* binding */ usevar)
/* harmony export */ });
/* harmony import */ var _impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/StyleImpl */ "./lib/impl/StyleImpl.js");
/* harmony import */ var _impl_MiscImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../impl/MiscImpl */ "./lib/impl/MiscImpl.js");
/* harmony import */ var _impl_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/Utils */ "./lib/impl/Utils.js");



///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Selector functions
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Returns a string representation of a selector. This function is a tag function and must be
 * invoked with the template string without parentheses. This function can be used wherever the
 * [[CssSelector]] types are allowed. The parameters embedded into the string
 * must conform to the [[CssSelector]] type.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     // css: ul > li {...}
 *     s1 = this.$style( css.selector`ul > li`, {...})
 *
 *     // css: ul.c1:hover {...}
 *     c1 = this.$class({...})
 *     s2 = this.$style( css.selector`ul.${this.c1}:hover`, {...})
 * }
 * ```
 */
const selector = (parts, ...params) => () => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.tag2s)(parts, params);
/**
 * Array of attribute comparison operation strings - needed to check whether a string is an
 * attribute comparison operation.
 */
const attrComparisonOperations = ["=", "~=", "|=", "^=", "$=", "*="];
// SelectorProcessingInfo object that used several times, so it is "cached" here
const pseudoClassWithSelectorsInfo = { f: wrapAndAddSelectors, a: [","], p: ":" };
/**
 * Object containing information about how properties and methods of the ISelectorBuilder interface
 * should be converted to CssSelector values. If a name of the property is not in this object, it
 * is treated as a non-parameterized pseudo class.
 */
const selectorInfos = {
    // helper methods
    "attr": addAttrSelector,
    "and": { f: addSelectorsWithCombinators, a: [""] },
    "or": { f: addSelectorsWithCombinators, a: [","] },
    "child": { f: addSelectorsWithCombinators, a: [">"] },
    "desc": { f: addSelectorsWithCombinators, a: [" "] },
    "sib": { f: addSelectorsWithCombinators, a: ["~"] },
    "adj": { f: addSelectorsWithCombinators, a: ["+"] },
    // simple pseudo elements
    "after": 1 /* SimplePseudoElement */,
    "backdrop": 1 /* SimplePseudoElement */,
    "before": 1 /* SimplePseudoElement */,
    "cue": 1 /* SimplePseudoElement */,
    "firstLetter": 1 /* SimplePseudoElement */,
    "firstLine": 1 /* SimplePseudoElement */,
    "grammarError": 1 /* SimplePseudoElement */,
    "marker": 1 /* SimplePseudoElement */,
    "placeholder": 1 /* SimplePseudoElement */,
    "selection": 1 /* SimplePseudoElement */,
    "spellingError": 1 /* SimplePseudoElement */,
    // parameterized pseudo classes
    "dir": 2 /* ParameterizedPseudoClass */,
    // "has": pseudoClassWithSelectorsInfo,
    "host$": { f: wrapAndAddSelectors, a: [","], p: ":", n: ":host" },
    "hostContext": pseudoClassWithSelectorsInfo,
    "is": pseudoClassWithSelectorsInfo,
    "lang": 2 /* ParameterizedPseudoClass */,
    "not": pseudoClassWithSelectorsInfo,
    "nthChild": addNthPseudoClass,
    "nthLastChild": addNthPseudoClass,
    "nthOfType": addNthPseudoClass,
    "nthLastOfType": addNthPseudoClass,
    "where": pseudoClassWithSelectorsInfo,
    // parameterized pseudo elements
    "part": 3 /* ParameterizedPseudoElement */,
    "slotted": { f: wrapAndAddSelectors, a: [","], p: "::" },
};
/**
 * Proxy handler that serves as an implementation of the ISelectorBuilder interface.
 */
class SelectorBuilderHandler {
    constructor(items) {
        this.items = [];
        this.items = items;
    }
    get(t, propName, r) {
        if (typeof propName !== "string")
            return undefined;
        // the following makes our object to implement the ISelectorFunc interface
        if (propName === "fn")
            return "sel";
        else if (propName === "items")
            return this.items;
        let info = selectorInfos[propName];
        if (!info)
            return pushSelector.call(this, pseudoCamelTodDash(":", propName));
        else if (info === 1 /* SimplePseudoElement */)
            return pushSelector.call(this, pseudoCamelTodDash("::", propName));
        else if (info === 2 /* ParameterizedPseudoClass */)
            return addParameterizedPseudoEntity.bind(this, pseudoCamelTodDash(":", propName));
        else if (info === 3 /* ParameterizedPseudoElement */)
            return addParameterizedPseudoEntity.bind(this, pseudoCamelTodDash("::", propName));
        else if (typeof info === "function")
            return info.bind(this, propName);
        else {
            propName = info.n ?? (info.p ? pseudoCamelTodDash(info.p, propName) : propName);
            return info.f.bind(this, propName, ...info.a);
        }
    }
    ownKeys(t) { return SelectorBuilderHandler.keys; }
    has(t, p) { return SelectorBuilderHandler.keys.includes(p); }
}
// array of keys that are considered "own": these are the keys from the ISelectorFunc interface
SelectorBuilderHandler.keys = ["fn", "items"];
// adds an attribute selector
function addAttrSelector(propName, attrName, p2, p3, p4, p5) {
    return pushSelector.call(this, attrComparisonOperations.includes(p2)
        ? { fn: "attr-sel", name: attrName, val: p3, op: p2, cf: p4, ns: p5 }
        : { fn: "attr-sel", name: attrName, val: p2, cf: p3, ns: p4 });
}
// Pushes a selector for the given parameterized pseudo entity to the list of items
function addParameterizedPseudoEntity(entity, param) {
    return pushSelector.call(this, { fn: entity, p: param });
}
// Adds the given selectors intermingled with the given combinator to the list of items.
function addSelectorsWithCombinators(entity, combinator, ...newItems) {
    return pushSelectorsWithCombinators.call(this, combinator, true, ...newItems);
}
// Wraps the given selectors with the invocation of the given pseudo entity and pushes them
// to the list of items
function wrapAndAddSelectors(name, combinator, ...newItems) {
    this.items.push(name + "(");
    pushSelectorsWithCombinators.call(this, combinator, false, ...newItems);
    this.items.push(")");
    return this.proxy;
}
// Pushes the "nth" pseudo class with the given parameters to the list of items
function addNthPseudoClass(propName, p1, p2) {
    return pushSelector.call(this, { fn: pseudoCamelTodDash(":", propName), p: p2 != null ? [p1, p2] : p1 });
}
// Pushes the given selectors intermingled with the given combinator to the list of items. The
// "insertBefore" parameter indicates whether the combinator should be inserted before the first
// selector item.
function pushSelectorsWithCombinators(combinator, insertBefore, ...newItems) {
    if (insertBefore && combinator)
        this.items.push(combinator);
    for (let i = 0; i < newItems.length; i++) {
        if (i > 0 && combinator)
            this.items.push(combinator);
        this.items.push(newItems[i]);
    }
    return this.proxy;
}
// Pushes the given argument to the list of items
function pushSelector(item) {
    this.items.push(item);
    return this.proxy;
}
// combines the given prefix with the pseudo entity camel name converted to dash form
const pseudoCamelTodDash = (prefix, name) => prefix + (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.camelToDash)(name);
/**
 * Creates selector builder object that provides means to build complex selectors from multiple
 * selector items of all possible kinds including tags, classess, IDs, attributes, pseudo classes
 * and pseudo elements combined with CSS combinators. This function returns the [[ISelectorBuilder]]
 * interface, which has methods and properties for all selector items.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     cls = this.$class({...})
 *     myID = this.$id({...})
 *
 *     // produces CSS: label.cls1[for="myID"]:hover {...}
 *     s1 = this.$style( css.sel("label").and(this.cls1)).attr("for", this.myID).hover, {...})
 * }
 * ```
 * @param items List of selector items to initialize the complex selector. If multiple items are
 * specified, they are treated as list; that is, they are combined with the `","` combinator.
 * @returns
 */
const sel = (...items) => {
    let handler = new SelectorBuilderHandler(items);
    let proxy = new Proxy({}, handler);
    // the handler should reference the proxy in order to return it from methods (and properties)
    // to allow chain calls.
    handler.proxy = proxy;
    return proxy;
};
_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.fdo.sel = v => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.a2s)(v.items, { sep: "", recursive: true }, "");
/**
 * Creates a new selector for the given element tags with the given namespace prefix. The
 * `ns` parameter specifies the namespace prefix as either a string or a reference to the
 * namespace rule. The `tags` parameter specifies either a single tag or an array of tags. In
 * addition, an asterisk symbol (`"*"`) can be specified to target all elements.
 *
 * When multiple tags are specified, they will be combied using the selector combinators
 * specified by the `comb` parameter.
 *
 * **Examples:**
 *
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     // define HTML as default namespace and "svg" as a prefix for SVG namespace
 *     htmlNS = this.$namespace( css.WebNamespaces.HTML)
 *     svgNS = this.$namespace( css.WebNamespaces.SVG, "svg")
 *
 *     // produces CSS "svg|a {}", which will match only SVG `<a>` elements
 *     rule1 = this.$style( css.nstag( this.svgNS, "a"), {})
 *
 *     // produces CSS "*|a {}", which will match both HTML and SVG `<a>` elements
 *     rule2 = this.$style( css.nstag( "*", "a"), {})
 *
 *     // produces CSS "svg|circle, svg|ellipse {}"
 *     rule3 = this.$style( css.nstag( this.svgNS, ["circle", "ellipse"]), {})
 * }
 * ```
 *
 * @param ns Namespace prefix string or reference to a namespace rule. This can also be `"*"`,
 * in which case tags of all naespaces are selected
 * @param tags One or more element tag names.
 * @param comb Optional selector combinator if more than one tag is given. Default is `","`.
 * @returns Object representing parameters from which namespaced tag selector is created.
 */
const nstag = (ns, tags, comb = ",") => ({ fn: "nstag", ns, tags, comb });
_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.fdo.nstag = (v) => {
    let prefix = typeof v.ns === "string" ? v.ns + "|" : v.ns.prefix ? v.ns.prefix + "|" : "";
    return typeof v.tags === "string" ? prefix + v.tags : v.tags.map(tag => prefix + tag).join(v.comb);
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Animation and transition timing functions.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Returns a function representing an invocation of the CSS `steps()` function.
 *
 * @category Transition and Animation
 */
const steps = (n, j) => ({ fn: "steps", n, j });
_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.fdo.steps = ["n", "j"];
/**
* Returns a function representing an invocation of the CSS `cubic-bezier()` function.
*
* @category Transition and Animation
*/
const cubicBezier = (n1, n2, n3, n4) => ({ fn: "cubic-bezier", n1, n2, n3, n4 });
_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.fdo["cubic-bezier"] = ["n1", "n2", "n3", "n4"];
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// @media and @supports queries.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Tag function that represents a media query. This function allows expressing media queries in
 * a natural string form while embedding media feature values in type safe manner. The string can
 * contain any media expressions while the embedded objects must be of type [[IMediaFeatureset]].
 * Multiple features in the feature set will be expanded into clauses combined with the "and"
 * operator.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends StyleDefinition
 * {
 *     // screen and (min-width: 400px) and (max-width: 600px) and (orientation: portrait)
 *     ifNarrowDevice = this.$media(
 *         css.media`screen and ${{width:[400,600], orientation: "portrait"}}`, ...)
 * }
 * ```
 */
const media = (parts, ...params) => () => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.tag2s)(parts, params, v => typeof v === "string" ? v : (0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_1__.media2s)(v));
/**
 * Tag function that represents a supports query. This function allows expressing supports
 * queries in a natural string form while embedding media feature values in type safe manner. The
 * string can contain any supports expressions while the embedded objects must be of type
 * Styleset. Multiple properties in the styleset will be expanded into clauses combined with the
 * "or" operator.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends StyleDefinition
 * {
 *     // not (transform-origin: 30px 30px 30px)
 *     ifNoTransformOrigin = this.$supports(
 *         css.supports`not (${{transform-origin: [30, 30, 30]}})`, ...)
 * }
 * ```
 */
const supports = (parts, ...params) => () => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.tag2s)(parts, params, v => typeof v === "string" ? v : (0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_1__.supports2s)(v));
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Utility functions
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * The `raw` function allows specifying arbitrary text for properties whose type normally doesn't
 * allow strings.This function is a tag function and must be invoked with the template string
 * without parentheses. The `raw` function can be used for any style property. Note, however, that
 * no validation checks are performed on the structure of the string. If the string isn't valid
 * for the style property, the property will not become part of the style rule inserted into the
 * DOM.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     poly = this.$class({
 *         clipPath: css.raw`polygon(50% 20%, 90% 80%, 10% 80%)`
 *     })
 * }
 * ```
 */
const raw = (parts, ...params) => () => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.tag2s)(parts, params);
/**
 * Returns a function representing the CSS `url()` function. The string parameter
 * will be wrapped in a `url()` invocation. The function can also accept the IIDRule object to
 * create url(#element) invocation, which is often used to address SVG elements by their IDs.
 */
const url = (p) => ({ fn: "url", p });
_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.fdo.url = [["p", { str: 23 /* Quoted */ }]];
// Implementation
function cursor(url, x, y) {
    return { fn: "cursor", url, x, y };
}
_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.fdo.cursor = (v) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.mv2s)([url(v.url), v.x, v.y]);
/**
 * Returns a function representing the `attr()` CSS function. It returns [[IStringProxy]] and
 * theoretically can be used in any style property wherever the CSS `<string>` type is accepted;
 * however, its use by browsers is currently limited to the `content` property. Also not all
 * browsers currently support type, units or fallback values.
 *
 * @param attrName Name of the attribute whose value should be returned.
 * @param typeOrUnit Optional type or unit keyword that determines the returned CSS type.
 * @param fallback Optional value that is used if the attribute is not found on the element.
 * @returns
 */
const attr = (attrName, typeOrUnit, fallback) => () => `attr(${(0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.mv2s)([(0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.mv2s)([attrName, typeOrUnit]), fallback], ",")})`;
/**
 * Returns a representation of the CSS `counter()` function with an optional counter style.
 *
 * @param c Counter name or counter rule object
 * @returns ICounterFunc object representing the invocation of the `counter()` CSS function
 */
const counter = (counterObj, style) => () => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.f2s)("counter", [counterObj, style]);
/**
 * Returns a representation of the CSS `counters()` function with the given separator and
 * an optional counter style.
 *
 * @param counterObj Counter name or counter rule object
 * @param sep Separator string between multiple counters
 * @param style Counter style
 * @returns ICounterFunc object representing the invocation of the `counter()` CSS function
 */
const counters = (counterObj, sep, style) => () => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.f2s)("counters", [counterObj, [sep, 23 /* Quoted */], style]);
/**
 * Returns a function representing the invocation of the `var()` CSS function for the given custom
 * CSS property with optional fallbacks. Usually, when you want to refer to a custom CSS property
 * in style rules, it is enough to just refer to the style definition property created using the
 * [[$var]] function; however, if you want to provide a fallback value, you must use this function.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends StyleDefinition
 * {
 *     // create custom CSS property but without an assigned value; it can be assigned
 *     // later programmatically
 *     bgColor = this.$var( "color")
 *
 *     div = this.$tag( "div", {
 *         // use the custom CSS property with the given fallback value
 *         backgroundColor: css.usevar( this.bgColor, "beige")
 *     })
 * }
 * ```
 *
 * @typeparam K Key of the [[IVarTemplateStyleset]] interface that determines the type of the
 * custom CSS property and of the fallback value.
 * @param varObj Custom CSS property object created using the [[$var]] function.
 * @param fallback Fallback value that will be used if the custom CSS property isnt set.
 * @returns The `IRawProxy` callable interface, whcih allows the `usevar` function to be called
 * in any context.
 */
const usevar = (varObj, fallback) => () => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.f2s)("var", [varObj.cssName, (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.sp2s)(varObj.template, fallback)]);


/***/ }),

/***/ "./lib/api/CoreTypes.js":
/*!******************************!*\
  !*** ./lib/api/CoreTypes.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic types.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
;



/***/ }),

/***/ "./lib/api/CounterTypes.js":
/*!*********************************!*\
  !*** ./lib/api/CounterTypes.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/api/FontTypes.js":
/*!******************************!*\
  !*** ./lib/api/FontTypes.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/api/MediaTypes.js":
/*!*******************************!*\
  !*** ./lib/api/MediaTypes.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/api/NumericAPI.js":
/*!*******************************!*\
  !*** ./lib/api/NumericAPI.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Num": () => (/* binding */ Num),
/* harmony export */   "Percent": () => (/* binding */ Percent),
/* harmony export */   "percent": () => (/* binding */ percent),
/* harmony export */   "Len": () => (/* binding */ Len),
/* harmony export */   "Q": () => (/* binding */ Q),
/* harmony export */   "ch": () => (/* binding */ ch),
/* harmony export */   "cm": () => (/* binding */ cm),
/* harmony export */   "em": () => (/* binding */ em),
/* harmony export */   "ex": () => (/* binding */ ex),
/* harmony export */   "ic": () => (/* binding */ ic),
/* harmony export */   "inch": () => (/* binding */ inch),
/* harmony export */   "lh": () => (/* binding */ lh),
/* harmony export */   "mm": () => (/* binding */ mm),
/* harmony export */   "pc": () => (/* binding */ pc),
/* harmony export */   "pt": () => (/* binding */ pt),
/* harmony export */   "px": () => (/* binding */ px),
/* harmony export */   "vb": () => (/* binding */ vb),
/* harmony export */   "vh": () => (/* binding */ vh),
/* harmony export */   "vi": () => (/* binding */ vi),
/* harmony export */   "vw": () => (/* binding */ vw),
/* harmony export */   "rem": () => (/* binding */ rem),
/* harmony export */   "rlh": () => (/* binding */ rlh),
/* harmony export */   "vmin": () => (/* binding */ vmin),
/* harmony export */   "vmax": () => (/* binding */ vmax),
/* harmony export */   "fr": () => (/* binding */ fr),
/* harmony export */   "Angle": () => (/* binding */ Angle),
/* harmony export */   "deg": () => (/* binding */ deg),
/* harmony export */   "rad": () => (/* binding */ rad),
/* harmony export */   "grad": () => (/* binding */ grad),
/* harmony export */   "turn": () => (/* binding */ turn),
/* harmony export */   "Time": () => (/* binding */ Time),
/* harmony export */   "ms": () => (/* binding */ ms),
/* harmony export */   "s": () => (/* binding */ s),
/* harmony export */   "Resolution": () => (/* binding */ Resolution),
/* harmony export */   "dpi": () => (/* binding */ dpi),
/* harmony export */   "dpcm": () => (/* binding */ dpcm),
/* harmony export */   "dppx": () => (/* binding */ dppx),
/* harmony export */   "x": () => (/* binding */ x),
/* harmony export */   "Frequency": () => (/* binding */ Frequency),
/* harmony export */   "hz": () => (/* binding */ hz),
/* harmony export */   "khz": () => (/* binding */ khz),
/* harmony export */   "fitContent": () => (/* binding */ fitContent),
/* harmony export */   "ratio": () => (/* binding */ ratio),
/* harmony export */   "rect": () => (/* binding */ rect)
/* harmony export */ });
/* harmony import */ var _impl_NumericImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/NumericImpl */ "./lib/impl/NumericImpl.js");
/* harmony import */ var _impl_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../impl/Utils */ "./lib/impl/Utils.js");


// Helper function for units conversion
const toUnitsProxy = (n, unit) => () => n + unit;
/**
 * The `Num` object contains methods that implement CSS mathematic functions on the `<number>`
 * CSS type. It implements the [[INumericMath]] interface and thus allows using the methods such
 * as [[min]], [[max]], [[calc]] and [[clamp]] with parameters of the [[CssNumber]] type.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     // define custom CSS property - note that its value can be changed
 *     // programmatically
 *     columnQty = this.$var( "CssNumber", 3)
 *
 *     // max( 5, var(--columnQty))
 *     cls1 = this.$class({
 *         columns: css.Num.max( 5, this.columnQty)
 *     })
 * }
 * ```
 */
const Num = _impl_NumericImpl__WEBPACK_IMPORTED_MODULE_0__.NumberMath;
/**
 * The `Percent` object contains methods that implement CSS mathematic functions on the
 * `<percentage>` CSS type. It implements the [[INumericMath]] interface and thus allows using
 * the methods such as [[min]], [[max]], [[calc]] and [[clamp]] with parameters of the
 * [[CssPercent]] type.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     initialZoom = css.var( "CssPercent", 1.5)
 *
 *     // min( 0.5, var(--initialZoom))
 *     cls1 = this.$class({
 *         zoom: css.Percent.min( 0.5, this.initialZoom)
 *     })
 * }
 * ```
 */
const Percent = _impl_NumericImpl__WEBPACK_IMPORTED_MODULE_0__.PercentMath;
/**
 * Creates percent value by appenfing the `"%"` sign to the given number. This function should be
 * used whenever a `<percentage>` CSS type is used for a style property or value.
 * @category Units
 */
const percent = (n) => toUnitsProxy(n, "%");
/**
 * The `Len` object contains methods that implement CSS mathematic functions on the
 * `<length> | <percentage>` CSS type. It implements the [[INumericMath]] interface and thus
 * allows using the methods such as [[min]], [[max]], [[calc]] and [[clamp]] with parameters
 * of the [[CssLength]] type.
 *
 * **Example:**
 *
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     defaultPadding = css.var( "CssLength", 8)
 *
 *     // calc( 200px - (2 * var(--defaultPadding)))
 *     cls1 = this.$class({
 *         width: css.Len.calc` 200px - (2 * ${this.defaultPadding})`
 *     })
 * }
 * ```
 */
const Len = _impl_NumericImpl__WEBPACK_IMPORTED_MODULE_0__.LengthMath;
/**
 * Creates length value in quarters of an inch.
 * @category Units
 */
const Q = (n) => toUnitsProxy(n, "Q");
/**
 * Creates length value in ch units, which is equal to the used advance measure of the `“0”` (ZERO,
 * U+0030) glyph found in the font used to render it. (The advance measure of a glyph is its
 * advance width or height, whichever is in the inline axis of the element.)
 * @category Units
 */
const ch = (n) => toUnitsProxy(n, "ch");
/**
 * Creates length value in cantimeters.
 * @category Units
 */
const cm = (n) => toUnitsProxy(n, "cm");
/**
 * Creates length value in calculated font-sizes of the element.
 * @category Units
 */
const em = (n) => toUnitsProxy(n, "em");
/**
 * Creates length value in heights of lowercase letter 'x' in the font.
 * @category Units
 */
const ex = (n) => toUnitsProxy(n, "ex");
/**
 * Creates length value in ic units.
 * @category Units
 */
const ic = (n) => toUnitsProxy(n, "ic");
/**
 * Creates length value in inches.
 * @category Units
 */
const inch = (n) => toUnitsProxy(n, "in");
/**
 * Creates length value in line-heights of the element.
 * @category Units
 */
const lh = (n) => toUnitsProxy(n, "lh");
/**
 * Creates length value in millimeters.
 * @category Units
 */
const mm = (n) => toUnitsProxy(n, "mm");
/**
 * Creates length value in picas.
 * @category Units
 */
const pc = (n) => toUnitsProxy(n, "pc");
/**
 * Creates length value in points.
 * @category Units
 */
const pt = (n) => toUnitsProxy(n, "pt");
/**
 * Creates length value in pixels.
 * @category Units
 */
const px = (n) => toUnitsProxy(n, "px");
/**
 * Creates length value in 1% of the size of the initial containing block, in the direction
 * of the root element’s block axis.
 * @category Units
 */
const vb = (n) => toUnitsProxy(n, "vb");
/**
 * Creates length value in 1% of the height of the viewport's initial containing block.
 * @category Units
 */
const vh = (n) => toUnitsProxy(n, "vh");
/**
 * Creates length value in 1% of the size of the initial containing block, in the direction
 * of the root element’s inline axis.
 * @category Units
 */
const vi = (n) => toUnitsProxy(n, "vi");
/**
 * Creates length value in 1% of the width of the viewport's initial containing block.
 * @category Units
 */
const vw = (n) => toUnitsProxy(n, "vw");
/**
 * Creates length value in font-sizes of the root element (<html>).
 * @category Units
 */
const rem = (n) => toUnitsProxy(n, "rem");
/**
 * Creates length value in line-heights of the root element (<html>).
 * @category Units
 */
const rlh = (n) => toUnitsProxy(n, "rlh");
/**
 * Creates length value in the units which are a smaller value between vw and vh.
 * @category Units
 */
const vmin = (n) => toUnitsProxy(n, "vmin");
/**
 * Creates length value in the units which are a larger value between vw and vh.
 * @category Units
 */
const vmax = (n) => toUnitsProxy(n, "vmax");
/**
 * Creates length value for flex.
 * @category Units
 */
const fr = (n) => toUnitsProxy(n, "fr");
/**
 * The `Angle` object contains methods that implement CSS mathematic functions on the
 * `<angle> | <percentage>` CSS type. It implements the [[INumericMath]] interface and thus
 * allows using the methods such as [[min]], [[max]], [[calc]] and [[clamp]] with parameters
 * of the [[CssAngle]] type.
 */
const Angle = _impl_NumericImpl__WEBPACK_IMPORTED_MODULE_0__.AngleMath;
/**
 * Creates angle value in degrees.
 * @category Units
 */
const deg = (n) => toUnitsProxy(n, "deg");
/**
 * Creates angle value in radians.
 * @category Units
 */
const rad = (n) => toUnitsProxy(n, "rad");
/**
 * Creates angle value in gradians.
 * @category Units
 */
const grad = (n) => toUnitsProxy(n, "grad");
/**
 * Creates angle value in turns.
 * @category Units
 */
const turn = (n) => toUnitsProxy(n, "turn");
/**
 * The `Time` object contains methods that implement CSS mathematic functions on the `<time>`
 * CSS type. It implements the [[INumericMath]] interface and thus allows using the methods such
 * as [[min]], [[max]], [[calc]] and [[clamp]] with parameters of the [[CssTime]] type.
 */
const Time = _impl_NumericImpl__WEBPACK_IMPORTED_MODULE_0__.TimeMath;
/**
* Creates time value in milliseconds.
* @category Units
*/
const ms = (n) => toUnitsProxy(n, "ms");
/**
 * Creates time value in seconds.
 * @category Units
 */
const s = (n) => toUnitsProxy(n, "s");
/**
 * The `Resolution` object contains methods that implement CSS mathematic functions on the
 * `<resolution>` CSS type. It implements the [[INumericMath]] interface and thus allows using
 * the methods such as [[min]], [[max]], [[calc]] and [[clamp]] with parameters of the
 * [[CssResolution]] type.
 */
const Resolution = _impl_NumericImpl__WEBPACK_IMPORTED_MODULE_0__.ResolutionMath;
/**
* Creates resolution value in DPI.
* @category Units
*/
const dpi = (n) => toUnitsProxy(n, "dpi");
/**
 * Creates resolution value in DPCM.
 * @category Units
 */
const dpcm = (n) => toUnitsProxy(n, "dpcm");
/**
 * Creates resolution value in DPPX.
 * @category Units
 */
const dppx = (n) => toUnitsProxy(n, "dppx");
/**
 * Creates resolution value in X.
 * @category Units
 */
const x = (n) => toUnitsProxy(n, "x");
/**
 * The `Frequency` object contains methods that implement CSS mathematic functions on the `<frequency>`
 * CSS type. It implements the [[INumericMath]] interface and thus allows using the methods such
 * as [[min]], [[max]], [[calc]] and [[clamp]] with parameters of the [[CssFrequency]] type.
 */
const Frequency = _impl_NumericImpl__WEBPACK_IMPORTED_MODULE_0__.FrequencyMath;
/**
* Creates frequency value in Hertz.
* @category Units
*/
const hz = (n) => toUnitsProxy(n, "hz");
/**
 * Creates frequency value in Kilo-Hertz.
 * @category Units
 */
const khz = (n) => toUnitsProxy(n, "khz");
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Utility functions
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Returns an [[IFitContentProxy]] function representing the `fit-content()` CSS function
 * ([MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/fit-content())).
 */
const fitContent = (size) => () => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_1__.f2s)("fit-content", [[size, 3 /* Length */]]);
/**
 * Returns an [[IAspectRatioProxy]] function representing the `<ratio>` CSS type.
 */
const ratio = (w, h) => () => [w, h].join("/");
/**
 * Returns an [[IRectProxy]] function representing the `rect()` CSS function used for the `clip`
 * style property.
 * @deprecated The CSS `clip` property and `rect()` function are deprecated.
 */
const rect = (top, right, bottom, left) => () => `rect(${(0,_impl_Utils__WEBPACK_IMPORTED_MODULE_1__.a2s)([top, right, bottom, left], 3 /* Length */, ",")})`;


/***/ }),

/***/ "./lib/api/NumericTypes.js":
/*!*********************************!*\
  !*** ./lib/api/NumericTypes.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
;
;
;
;
;
;
;



/***/ }),

/***/ "./lib/api/RuleAPI.js":
/*!****************************!*\
  !*** ./lib/api/RuleAPI.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleDefinition": () => (/* binding */ StyleDefinition),
/* harmony export */   "embedded": () => (/* binding */ embedded),
/* harmony export */   "configNameGeneration": () => (/* binding */ configNameGeneration),
/* harmony export */   "classes": () => (/* binding */ classes),
/* harmony export */   "chooseClass": () => (/* binding */ chooseClass),
/* harmony export */   "virtual": () => (/* binding */ virtual),
/* harmony export */   "ThemeDefinition": () => (/* binding */ ThemeDefinition),
/* harmony export */   "activate": () => (/* binding */ activate),
/* harmony export */   "deactivate": () => (/* binding */ deactivate),
/* harmony export */   "getActiveTheme": () => (/* binding */ getActiveTheme),
/* harmony export */   "startSSR": () => (/* binding */ startSSR),
/* harmony export */   "stopSSR": () => (/* binding */ stopSSR),
/* harmony export */   "startHydration": () => (/* binding */ startHydration),
/* harmony export */   "stopHydration": () => (/* binding */ stopHydration)
/* harmony export */ });
/* harmony import */ var _rules_Rule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../rules/Rule */ "./lib/rules/Rule.js");
/* harmony import */ var _rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rules/RuleContainer */ "./lib/rules/RuleContainer.js");
/* harmony import */ var _rules_StyleRules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../rules/StyleRules */ "./lib/rules/StyleRules.js");
/* harmony import */ var _rules_AnimationRule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../rules/AnimationRule */ "./lib/rules/AnimationRule.js");
/* harmony import */ var _rules_VarRule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../rules/VarRule */ "./lib/rules/VarRule.js");
/* harmony import */ var _rules_CounterRules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../rules/CounterRules */ "./lib/rules/CounterRules.js");
/* harmony import */ var _rules_GridRules__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../rules/GridRules */ "./lib/rules/GridRules.js");
/* harmony import */ var _rules_MiscRules__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../rules/MiscRules */ "./lib/rules/MiscRules.js");
/* harmony import */ var _rules_GroupRules__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../rules/GroupRules */ "./lib/rules/GroupRules.js");
/* harmony import */ var _impl_Utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../impl/Utils */ "./lib/impl/Utils.js");
/* harmony import */ var _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../impl/SchedulingImpl */ "./lib/impl/SchedulingImpl.js");











/**
 * The `StyleDefinition` class is a base for all classes that contain defininitions of CSS rules.
 * Style definition classes are regular TypeScript classes and as such can have any fields and
 * methods - both instance and static. Normally, however, they contain instance properties
 * initialized with functions returning style rules and at-rules, such as [[$class]],
 * [[$tag]], [[$media]], [[$counter]] and others.
 *
 * **Examples**
 *
 * ```typescript
 * // top-level style definition class
 * class MyStyles extends css.StyleDefinition
 * {
 *     cls = this.$class({ color: "red"})
 *
 *     // using style-definition class for @media rule
 *     ifNarrowScreen = this.$media( { maxWidth: 800 },
 *         class extends css.StyleDefinition<MyStyles>
 *         {
 *             cls = this.$class({ color: "pink"})
 *         }
 *     )
 * }
 * ```
 *
 * @typeparam P Parent style definition class. Parent of a top-level class is null.
 */
class StyleDefinition {
    /**
     * Style definition instances are created directly only by the *styled components* - that is,
     * components that use different styles for each instance. Otherwise, style definition
     * instances are created when either the [[$use]] method or [[activate]] function is called.
     * @param parent Reference to the parent style definition class
     */
    constructor(parent) {
        this.$parent = parent;
        // Style Definition instance points to rule container
        let rc = new _rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.RuleContainer(this);
        this[_rules_Rule__WEBPACK_IMPORTED_MODULE_0__.symRC] = rc;
        // instead of returning an instance of our class, the constructor returns a proxy. This
        // allows creating proxies for all properties defined in the class.
        return new Proxy(this, rc);
    }
    /**
     * Creates a new abstract rule, which defines a styleset that can be extended by other style rules.
     * Abstract rules don't have selectors and are not inserted into the DOM. Abstract rules can
     * themselves extend other rules - both abstract and non-abstract.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     colorBox = this.$abstract({
     *         backgroundColor: "orange",
     *         borderRadius: css.percent(10),
     *         border: [4, "solid", "red"],
     *         ":hover": {
     *             opacity: 0.7
     *         }
     *     })
     *
     *     box = this.$class({
     *         "+": this.colorBox,
     *         width: 200,
     *         height: 200,
     *     })
     *
     *     specialElm = this.$id({
     *         "+": this.colorBox,
     *         width: 600,
     *         height: 400,
     *     })
     * }
     * ```
     *
     * @param styleset One or more styleset objects that will be inherited by style rules that
     * extend this abstract rule.
     * @returns `IStyleRule` object that should be used by the derived rules in the `"+"` property.
     */
    $abstract(styleset) {
        return new _rules_StyleRules__WEBPACK_IMPORTED_MODULE_2__.AbstractRule(this, styleset);
    }
    /**
     * Creates a new class rule. The class name will be created when the rule is processed as part of
     * the style definition class. The name can be also overridden by providing either an explicit
     * name or another class rule. The function can be called without parameters just to "declare"
     * the class. Such class can be later used either in conditional grouping rules or in derived
     * style definition classes.
     *
     * The returned [[IClassRule]] interface has the `name` property that should be used to assign
     * the class to an HTML element
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     vbox = this.$class({
     *         display: "flex",
     *         flexDirection: "column",
     *         alignItems: "center"
     *     })
     * }
     * ...
     * let styles = css.activate( MyClasses);
     * ...
     * render
     * {
     *     return <div class={styles.vbox.name}>
     *         <span>Hello</span>
     *         <span>World!</span>
     *     </div>
     * }
     * ```
     *
     * @param styleset One or more styleset objects that define style properties of the class.
     * @param nameOverride string or another `IClassRule` object that determines the name of the
     * class. If this optional parameter is defined, the name will override the Mimcss name
     * assignment mechanism. This might be useful if there is a need for the class to match a name
     * of another, probably external, class. If this parameter is defined as a string, it should
     * not have the `"."` prefix.
     * @returns `IClassRule` object that should be used for getting the class name and for accessing
     * the style properties if needed.
     */
    $class(styleset, nameOverride) {
        return new _rules_StyleRules__WEBPACK_IMPORTED_MODULE_2__.ClassRule(this, styleset, nameOverride);
    }
    /**
     * Creates a new class name rule, which combines one or more other class names. This creates a
     * "synonym" that is easier to apply to an element's class attribute than an array of two or
     * more class rules.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     // declare class - just to be used later
     *     spaced = css.class({gap: 8})
     *
     *     vbox = this.$class({
     *         display: "flex",
     *         flexDirection: "column"
     *     })
     *
     *     // use $classname rule to combine the names of classes vbox and spaced
     *     spacedVbox = this.$classname( this.vbox, this.spaced)
     * }
     * ...
     * let styles = css.activate( MyClasses);
     * ...
     * render
     * {
     *     // without spacedVbox, the class would be: {[styles.vbox.name, styles.spaced.name]}
     *     return <div class={styles.spacedVbox.name}>
     *         <span>Hello</span>
     *         <span>World!</span>
     *     </div>
     * }
     * ```
     *
     * @param ...classes List of class names specified either as a string or [[IClassRule]] or
     * [[IClassNameRule]] objects.
     * @returns `IClassNameRule` object whose `name` property contains the combined class name, e.g.
     * `"class1 class2"`. The `cssClassName` property contains the combined selector, e.g.
     * `".class1.class2"`.
     */
    $classname(...classes) {
        return new _rules_MiscRules__WEBPACK_IMPORTED_MODULE_7__.ClassNameRule(this, classes);
    }
    /**
     * Creates a new ID rule. The ID name will be created when the rule is processed as part of
     * the style definition class. The name can be also overridden by providing either an explicit
     * name or another ID rule. The function can be called without parameters just to "declare"
     * the ID. Such ID can be later used either in conditional grouping rules or in derived
     * style definition classes.
     *
     * The returned [[IIDRule]] interface has the `name` property that should be used to assign
     * the ID to an HTML element.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     container = this.$id({
     *         display: "flex",
     *         flexDirection: "column",
     *         alignItems: "center"
     *     })
     * }
     * ...
     * let styles = css.activate( MyClasses);
     * ...
     * render
     * {
     *     return <div id={styles.container.name}>
     *         <span>Hello</span>
     *         <span>World!</span>
     *     </div>
     * }
     * ```
     *
     * @param styleset One or more styleset objects that define style properties of the element.
     * @param nameOverride string or another `IIDRule` object that determines the name of the ID.
     * If this optional parameter is defined, the name will override the Mimcss name assignment
     * mechanism. This might be useful if there is a need for the ID to match a name of another ID.
     * If this parameter is defined as a string, it should not have the `"."` prefix.
     * @returns `IIDRule` object that should be used for getting the ID name and for accessing
     * the style properties if needed.
     */
    $id(styleset, nameOverride) {
        return new _rules_StyleRules__WEBPACK_IMPORTED_MODULE_2__.IDRule(this, styleset, nameOverride);
    }
    /**
     * Creates a new style rule for the given HTML or SVG element tags. The `tag` parameter specifies
     * either a single tag or an array of tags. In addition, an asterisk symbol (`"*"`) can be
     * specified to target all elements.
     *
     * When multiple tags are specified, they will be treated as a selector list; that is, they will
     * be separated by commas.
     *
     * **Examples:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     // using string for selecting a single elemenet tag;
     *     // produces CSS "tr {}"
     *     tr = this.$tag( "tr", {})
     *
     *     // using array for selecting multiple elemenet tags;
     *     // produces CSS "h1, h2, h3 {}"
     *     header123 = this.$tag( ["h1", "h2", "h3"], {})
     *
     *     // using asterisk to address all elements
     *     // produces CSS "* {}"
     *     all = this.$tag( "*", {})
     * }
     * ```
     *
     * @param tag One or more element tags
     * @param styleset One or more styleset objects that define style properties for the tags.
     * @returns `IStyleRule` object representing the tag rule.
     */
    $tag(tag, styleset) {
        return new _rules_StyleRules__WEBPACK_IMPORTED_MODULE_2__.SelectorRule(this, Array.isArray(tag) ? tag.join(",") : tag, styleset);
    }
    /**
     * Creates a new style rule with an arbitrary complex selector. Selectors can be specified as
     * one or array of [[SelectorItem]] objects where each `SelectorItem` is one of the following
     * types:
     * - string - allows any content but lacks type-safety checks.
     * - any style rule, that is a rule that implements the [[IStyleRule]] interface. This allows
     *   using prevously defined tag, class, ID and other style rules as selector items
     * - [[selector]] function - a tag function that allows convenient mixing of free-format strings
     *   and strongly typed style rules.
     *
     * When multiple selector items are specified, they will be concatenated into a single string.
     *
     * Note that although style rules can be used for selecting element tags, the [[$tag]] function would
     * be more appropriate because it will catch misspellings of tag names.
     *
     * **Examples:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     // using a string
     *     style1 = this.$style( "li::before", {})
     *
     *     id = this.$id()
     *     cls = this.$class()
     *
     *     // using an array of style rules. The selector will be "#id.cls"
     *     style2 = this.$style( [this.id, this.cls], {})
     *
     *     // using the selector function. The selector will be "#id > .cls"
     *     style3 = this.$style( css.selector`${this.id} > ${this.cls}`, {})
     *
     *     // using a string for selecting element tag.
     *     h1 = this.$style( "h1", {})
     * }
     * ```
     *
     * @param selector Style rule selector
     * @param styleset One or more styleset objects that define style properties for this selector.
     * @returns `IStyleRule` object representing the style rule.
     */
    $style(selector, styleset) {
        return new _rules_StyleRules__WEBPACK_IMPORTED_MODULE_2__.SelectorRule(this, selector, styleset);
    }
    /**
     * Creates new animation rule. The animation name will be created when the rule is processed as
     * part of the style definition class. The name can be also overridden by providing either an
     * explicit name or another animation rule. The function can be called without parameters just to
     * "declare" the animation. Such animation can be later used either in conditional grouping rules
     * or in derived style definition classes.
     *
     * The returned [[IAnimationRule]] interface represents an object that should be used when
     * using the keyframes name in the `animation-name` or `animation` style properties.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     vanish = this.$keyframes([
     *         [0, { opacity: 100 }],
     *     	   [100, { opacity: 0 }],
     *     ])
     *
     *     vanishingBlock = this.$class({
     *         animation: { name: this.vanish, duration: 2000, count: "infinite", direction: "alternate" }
     *     })
     * }
     * ```
     *
     * @param frames Array of [[AnimationFrame]] objects. Each animation frame contains a waypoint
     * and a styleset.
     * @param nameOverride String or another `IAnimationRule` object that determines the name of the
     * animation. If this optional parameter is defined, the name will override the Mimcss name
     * assignment mechanism. This might be useful if there is a need for the name to match a name of
     * another animation.
     * @returns `IAnimationRule` object that should be used for getting the animation name.
     */
    $keyframes(frames, nameOverride) {
        return new _rules_AnimationRule__WEBPACK_IMPORTED_MODULE_3__.AnimationRule(this, frames, nameOverride);
    }
    /**
     * Creates new custom variable object that defines a custom CSS property. The variable name will
     * be created when the rule is processed as part of the style definition class. The name can be
     * also overridden by providing either an explicit name or another custom variable rule. The
     * function can be called without specifying the value just to "declare" the variable. Such
     * variable can be later used either in conditional grouping rules or in derived style definition
     * classes.
     *
     * Custom properties defined using the `$var` function are included into the `:root {}` block;
     * however, they can be redefined with different values under any style rule.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     // define and use custom CSS property
     *     importantTextColor = this.$var( "color", "red")
     *     important = this.$class({
     *         color: this.importantTextColor
     *     })
     *
     *     // use different value for the custom property under another CSS class
     *     special = this.$class({
     *         "+": this.important,
     *         "--": [ [this.importantTextColor, "maroon"] ]
     *     })
     * }
     * ```
     *
     * @param template Either a name of a style property (in camel-case) or a name of the property from
     * the [[IVarTemplateStyleset]] interface. The type corresponding to this property defines the type
     * of the second parameter.
     * @param value The value assigned to the property.
     * @param nameOverride String or another `IVarRule` object that determines the name of the
     * custom property. If this optional parameter is defined, the name will override the Mimcss name
     * assignment mechanism. This might be useful if there is a need for the name to match a name of
     * existing property. If this parameter is defined as a string, it should not have the `"."` prefix.
     * @returns The `IVarRule` object that represents the custom property. Any usage of this object in
     * style properties or function parameters is substituted by the `var()` CSS function invocation.
     */
    $var(template, value, nameOverride) {
        return new _rules_VarRule__WEBPACK_IMPORTED_MODULE_4__.VarRule(this, template, value, nameOverride);
    }
    // implementation
    $property(syntax, initValue, inherits = true, nameOverride) {
        return new _rules_VarRule__WEBPACK_IMPORTED_MODULE_4__.PropertyRule(this, syntax, initValue, inherits, nameOverride);
    }
    /**
     * Creates a "constant" that can be used anywhere the type defined by the `template` parameter can
     * be used. They are called constants, because they provide a convenient and lightweight way of
     * defining values that are unchanged during the application lifetime. Although constants are
     * defined very similarly to custom properties (see the [[$var]] function), they cannot participate
     * in the cascade and cannot be redefined under style rules. Constant can use any expression that
     * satisfies the type defined by the `template` parameter including other constants, custom
     * properties and functions.
     *
     * No CSS rules are created for constants and, due to this fact, constants are preferable to custom
     * properties unless the intention is to change the variable value at run-time or to redefine its
     * value under different style rules.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     // defining and using custom CSS property
     *     defaultTextColor = this.$const( "color", "red")
     *     para = this.$style( "p", {
     *         color: this.defaultTextColor
     *     })
     * }
     * ```
     *
     * @param template Either a name of a style property (in camel-case) or a name of the property from
     * the [[IVarTemplateStyleset]] interface. The type corresponding to that property defines the type
     * of the second parameter.
     * @param value The value assigned to the constant.
     * @returns The `IConstRule` object that represents the value of the constant. The value is
     * computed once when the style definition is processed.
     */
    $const(template, value) {
        return new _rules_VarRule__WEBPACK_IMPORTED_MODULE_4__.ConstRule(this, template, value);
    }
    /**
     * Creates new counter object. The counter name will be created when the rule is processed as
     * part of the style definition class. The name can be also overridden by providing either an
     * explicit name or another counter rule.
     *
     * Counter rules don't create any CSS rules, but they create unique names that can be used
     * for `counter-reset` and `counter-increment` style properties. Counter rules are usually used
     * in conjunction with the [[counter]] and [[counters]] functions.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     counter = this.$counter()
     *     ol = this.$style( "ol", { counterReset: this.counter, listStyleType: "none" })
     *     li = this.$style( "li", {
     *         counterIncrement: this.counter,
     *         "::before": { content: css.counters( this.counter) }
     *     })
     * }
     * ```
     *
     * @param nameOverride String or another `ICounterRule` object that determines the name of the
     * counter. If this optional parameter is defined, the name will override the Mimcss name
     * assignment mechanism. This might be useful if there is a need for the name to match a name of
     * existing counter.
     * @returns The `ICounterRule` object that represents the counter.
     */
    $counter(nameOverride) {
        return new _rules_CounterRules__WEBPACK_IMPORTED_MODULE_5__.CounterRule(this, nameOverride);
    }
    /**
     * Creates new counter style rule. The counter style name will be created when the rule is
     * processed as part of the style definition class. The name can be also overridden by providing
     * either an explicit name or another counter style rule.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     counterStyle = this.$counterStyle({
     *         system: "cyclic",
     *         symbols: ["one", "two", "three"],
     *         suffix: " - "
     *     })
     * }
     * ```
     *
     * @param counterStyleset An object that defines counter style features.
     * @param nameOverride String or another `ICounterStyleRule` object that determines the name of the
     * counter style. If this optional parameter is defined, the name will override the Mimcss name
     * assignment mechanism. This might be useful if there is a need for the name to match a name of
     * existing counter style.
     * @returns The `ICounterStyleRule` object that represents the counter style.
     */
    $counterStyle(counterStyleset, nameOverride) {
        return new _rules_CounterRules__WEBPACK_IMPORTED_MODULE_5__.CounterStyleRule(this, counterStyleset, nameOverride);
    }
    /**
     * Creates a new grid line rule. The line name will be created when the rule is processed as
     * part of the style definition class. The name can be also overridden by providing either an
     * explicit name or another grid line rule. The grid line rules are used to define values of
     * style properties `grid-row-start/end` and `grid-column-start/end`.
     *
     * No CSS rule is created for grid lines - these objects are solely used for creating names, which
     * can be type-safely referred to from style rules.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     gridLineFirst = this.$gridline()
     *     gridLineLast = this.$gridline()
     *
     *     grid = this.$class({
     *         display: "grid",
     *         gridTemplateColumns: [ [this.gridLineFirst], "1fr", "2fr", [this.gridLineLast] ],
     *         gridTemplateRows: css.repeat( 2, "1fr"),
     *     })
     *
     *     first = this.$class({
     *         gridColumnStart: this.gridLineFirst,
     *     })
     *
     *     last = this.$class({
     *         gridColumnEnd: this.gridLineLast,
     *     })
     * }
     * ```
     *
     * @param nameOverride String or another `IGridLineRule` object that determines the name of the
     * line. If this optional parameter is defined, the name will override the Mimcss name
     * assignment mechanism. This might be useful if there is a need for the name to match a name of
     * existing grid line.
     * @param isStartEndOrNone Flag indicating whether the `"-start"` or `"-end"` suffix should be
     * appended to the rule name. If the flag is true, `"-start"` is appended; if the flag is false,
     * `"-end"` is appended; if the flag is undefined, no suffix is appended to the rule name.
     * @returns The `IGridLineRule` object that represents the grid line.
     */
    $gridline(nameOverride, isStartEndOrNone) {
        return new _rules_GridRules__WEBPACK_IMPORTED_MODULE_6__.GridLineRule(this, nameOverride, isStartEndOrNone);
    }
    /**
     * Creates a new grid area rule. The area name will be created when the rule is processed as
     * part of the style definition class. The name can be also overridden by providing either an
     * explicit name or another grid area rule. The grid area rules are used to define values of
     * style properties `grid-area`, `grid-row-start/end`, `grid-column-start/end` and
     * `grid-template-areas`.
     *
     * No CSS rule is created for grid areas - these objects are solely used for creating names, which
     * can be type-safely referred to from style rules.
     *
     * Every grid area defines two grid line rules in each direction, which can be accessed using the
     * [[IGridAreaRule.startLine]] and [[IGridAreaRule.endLine]] properties.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     headerArea = this.$gridarea();
     *     mainArea = this.$gridarea();
     *
     *     grid = this.$class({
     *         display: "grid",
     *         gridTemplateColumns: "1fr",
     *         gridTemplateRows: ["3em", "1fr"],
     *         gridTemplateAreas: [
     *             [this.headerArea, 1,1, 1,1],
     *             [this.mainArea, 2,1, 2,1],
     *         ],
     *     })
     *
     *     header = this.$class({
     *         gridArea: this.headerArea,
     *         backgroundColor: "blue"
     *     })
     *
     *     main = this.$class({
     *         gridArea: this.mainArea,
     *         backgroundColor: "lightgrey"
     *     })
     * }
     * ```
     *
     * @param nameOverride String or another `IGridAreaRule` object that determines the name of the
     * area. If this optional parameter is defined, the name will override the Mimcss name
     * assignment mechanism. This might be useful if there is a need for the name to match a name of
     * existing grid area.
     * @returns The `IGridAreaRule` object that represents the grid area.
     */
    $gridarea(nameOverride) {
        return new _rules_GridRules__WEBPACK_IMPORTED_MODULE_6__.GridAreaRule(this, nameOverride);
    }
    /**
     * Creates a new `@font-face` rule.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     font = this.$fontface({
     *         fontFamily: "Roboto",
     *         fontStyle: "italic",
     *         fontWeight: 700,
     *         src: {url: 'roboto.woff', format: 'woff'}
     *     });
     * }
     * ```
     *
     * @param fontface Object implementing the `IFontFace` interface defining the parameter of the
     * font to use.
     * @returns The `IFontFaceRule` object that represents the @font-face rule.
     */
    $fontface(fontface) {
        return new _rules_MiscRules__WEBPACK_IMPORTED_MODULE_7__.FontFaceRule(this, fontface);
    }
    /**
     * Creates a new `@import` rule referencing the given CSS file.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     importedCssFiles = [
     *         this.$import( "common-3rdparty.css"),
     *         this.$import( "small-screen-3rdparty.css", {maxWidth: 600}),
     *     ]
     * }
     * ```
     *
     * @param url URL to the CSS file. Relative URLs are resolved relative to the base URL of the
     * page where the Mimcss library is invoked.
     * @returns The `IImportRule` object that represents the `@import` rule.
     */
    $import(url, mediaQuery, supportsQuery) {
        return new _rules_MiscRules__WEBPACK_IMPORTED_MODULE_7__.ImportRule(this, url, mediaQuery, supportsQuery);
    }
    /**
     * Creates new `@namespace` rule.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     init = [
     *         this.$namespace( css.WebNamespaces.SVG, "svg")
     *     ]
     * }
     * ```
     *
     * @param namespace Namespace string - use the [[WebNamespaces]] for well-known namespaces.
     * @param prefix Prefix string to use for the namespace.
     * @returns The `INamespaceRule` object that represents the namespace rule.
     */
    $namespace(namespace, prefix) {
        return new _rules_MiscRules__WEBPACK_IMPORTED_MODULE_7__.NamespaceRule(this, namespace, prefix);
    }
    /**
     * Creates new `@page` rule.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     init = [
     *         this.$page( ":first", { margin: "auto" })
     *     ]
     * }
     * ```
     *
     * @param pseudoClass Optional name of the page pseudo style.
     * @param styleset Styles to apply.
     * @returns The `IPageRule` object that represents the page rule.
     */
    $page(pseudoClass, styleset) {
        return new _rules_StyleRules__WEBPACK_IMPORTED_MODULE_2__.PageRule(this, pseudoClass, styleset);
    }
    /**
     * Creates a new `@supports` rule.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     cls = this.$class({ color: "red"})
     *
     *     ifGridSupported = this.$media( { display: "grid" },
     *         class extends css.StyleDefinition<MyStyles>
     *         {
     *             cls = this.$class({ color: "pink"})
     *         }
     *     )
     * }
     * ```
     *
     * @param statement Supports statement containing one or more supports queries.
     * @param instOrClass Either style definition class or an instance of a style defintion class.
     * @returns `ISupportsRule` object representing the supports rule
     */
    $supports(statement, instOrClass) {
        return new _rules_GroupRules__WEBPACK_IMPORTED_MODULE_8__.SupportsRule(this, statement, instOrClass);
    }
    /**
     * Creates new `@media` rule.
     *
     * **Example:**
     *
     * ```typescript
     * class MyStyles extends css.StyleDefinition
     * {
     *     cls = this.$class({ color: "red"})
     *
     *     ifNarrowScreen = this.$media( { maxWidth: 800 },
     *         class extends css.StyleDefinition<MyStyles>
     *         {
     *             cls = this.$class({ color: "pink"})
     *         }
     *     )
     * }
     * ```
     *
     * @param statement Media statement containing one or more media queries.
     * @param instOrClass Either style definition class or an instance of a style defintion class.
     * @returns `IMediaRule` object representing the media rule
     */
    $media(statement, instOrClass) {
        return new _rules_GroupRules__WEBPACK_IMPORTED_MODULE_8__.MediaRule(this, statement, instOrClass);
    }
    /**
     * Processes the given style definition class or instance and creates unique names for all named
     * entities. For a given style definition class only a single instance is created, no matter how
     * many times this function is invoked. However, if an instance, which has not yet been processed,
     * is passed, then a new set of unique names will be created for it.
     *
     * The `$use` method is used to reference a style definition from another style definition, for
     * example:
     *
     * ```typescript
     * class CommonStyles extends css.StyleDefinition
     * {
     *     error = this.$class({ color: "red"})
     * }
     *
     * class PageStyles extends css.StyleDefinition
     * {
     *     common = this.$use( CommonStyles)
     *
     *     erroMessage = this.$class({
     *         "+": this.common.error,
     *         fontWeight: "bold"
     *     })
     * }
     * ```
     *
     * When the `$use` method is called, the rules from the referenced style definition are not
     * inserted into the DOM; they will be inserted when the style definition class that contains
     * the `$use` call is activated. The same style definition class can be used from several
     * other style definitions: as long as there is at least one referencing style definition that
     * is activated, the rules will be in the DOM; as soon as all referencing style definitions are
     * deactivated, the rules from the referenced definition are removed from the DOM.
     *
     * @param instOrClass Either style definition class or an instance of a style definition class.
     * @returns An instance of the style definition class, which will be activated and deactivated
     * along with the enclosing style definition.
     */
    $use(instOrClass) {
        return (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.processSD)(instOrClass);
    }
}
/**
 * Decorator function for style definition classes that will be embedded into an embedding
 * container for the given category. All style definitions for a given category will be activated
 * and deactivated together and their rules will be inserted into a single `<style>` element.
 *
 * **Example:**
 * ```typescript
 * @css.embedded("widgets")
 * class FirstWidgetStyles extends css.StyleDefinition {...}
 *
 * @css.embedded("widgets")
 * class SecondWidgetStyles extends css.StyleDefinition {...}
 * ```
 */
const embedded = (category) => 
// we return the function that is the actual decorator.
_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.embeddedDecorator.bind(undefined, category);
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Name generation.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Sets the method uses to generate names of CSS entities. If yes, the names will be created by
 * appending a unique number to the given prefix. If the prefix is not specified, the standard
 * prefix "n" will be used.
 *
 * By default the development version of the library (mimcss.dev.js) uses the [[UniqueScoped]]
 * method and the production version (mimcss.js) uses the [[Optimized]] method. This function can
 * be called to switch to the alternative method of name generation in either the development or
 * the production builds.
 *
 * @param method Indicates what method to use.
 * @param prefix Optional string that will serve as a prefix to which unique numbers will be added
 * to generate optimized names. Ignored if the `method` parameter is anything other than
 * [[NameGenerationMethod.Optimized]].
 */
const configNameGeneration = (method, prefix) => (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.configNames)(method, prefix);
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Helper functions.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Concatenates the names of the given classes into a single string that can be assigned to a
 * `class` property of an HTML element. This can be useful when an element should have multiple
 * classes assigned to it and some of these classes are specified as [[IClassRule]] or
 * [[IClassNameRule]] while others are specified as strings.
 *
 * @param classProps Variable argument list of either class names or class rule objects.
 * @returns The string that combines all class names (separated with space) from the input array.
 */
const classes = (...classProps) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_9__.v2s)(classProps, {
    obj: (v) => v.name,
    item: classes
});
/**
 * Chooses the first non-empty name from the given list of classes. This is useful when an element
 * should have a single class applied to it while the class can be chosen from an ordered list or
 * hierarchy of possible choices.
 *
 * @param classProps Variable argument list of either class names or class rule objects.
 * @returns The first non-empty class name from the input array or null if all inputs are empty.
 */
const chooseClass = (...classProps) => {
    for (let classProp of classProps) {
        let name = typeof classProp === "string" ? classProp :
            Array.isArray(classProp) ? chooseClass(classProp) :
                classProp && classProp.name;
        // if non-null and non-empty name - return it
        if (name)
            return name;
    }
    return "";
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Rule virtualization and theming.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Decorator that should be applied to a rule if it is defined and used in the same style
 * definition class but then is overridden in a derived style definition class. The problem
 * this solves is this: when a rule is defined in a base class and then overridden in a derived
 * class, when an instance of the derived class is created, the rules that are created in the
 * base and derived classes see different values of the rule. Since our rules are defined as
 * part of the constructor, the base class constructor's code only sees the value assigned in that
 * code. If another rule in the base class uses this first rule, this value is remembered.
 *
 * The `@virtual` decorator creates a Proxy object for the rule with the handler that keeps the
 * most recent value set. Thus when a rule in the base class's constructor uses a virtualized
 * rule, the first rule will see the overridden value of the rule when accessed in the
 * post-constructor code.
 *
 * @deprecated This decorator is deprecated as all rules defined in style definition classes are
 * always virtualized.
 */
const virtual = (target, name) => { };
/**
 * The `ThemeDefinition` class is a base for all classes that define themes. In addition to
 * being a style definition class, themes provide some extra capabilities related to style
 * inheritance and theme activation.
 *
 * @typeparam P Parent style definition class. Parent of a top-level class is null.
 */
class ThemeDefinition extends StyleDefinition {
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Activation.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Activates the given style definition class or instance and inserts all its rules into DOM. If
 * the class is not yet associated with an instance, the instance is first created and processed.
 * Note that each style definition instance maintains a reference counter of how many times it was
 * activated and deactivated. The rules are inserted into DOM only upon first activation.
 *
 * Activating a class (as opposed to activating a directly created instance) is intended for
 * "global" CSS entities - that is, entities that are used throughout the application or
 * application area. No matter how many times a class is activated or how many times it is used
 * from other style definitions, a single instance is created and used by Mimcss.
 *
 * **Example**
 * ```typescript
 * class CommonStyles extends css.StyleDefinition
 * {
 *     red = this.$class({ color: red })
 * }
 *
 * class MyComponent
 * {
 *     private styles: CommonStyles;
 *
 *     // Activate class
 *     willMount() { this.styles = css.activate( CommonStyles); }
 *     willUnmount() { css.deactivate( this.styles); }
 *     render() { return <div className={this.styles.red.name}</div> }
 * }
 * ```
 *
 * Activating an instance (as opposed to activating a class) is intended for "scoped" CSS entities -
 * that is, entities that apply to instances of certain components, a.k.a. *Styled Components*.
 * In this approach, every instance of a component creates its own instance of the style definition
 * class and Mimcss will create independent instances of CSS rules specific (*scoped*) to each
 * component instance.
 *
 * **Example**
 * ```typescript
 * class MyStyles extends css.StyleDefinition
 * {
 *     red = this.$class({ color: red })
 * }
 *
 * class MyComponent
 * {
 *     // Create style definition directly
 *     private styles = new MyStyles();
 *
 *     // Activate instance
 *     willMount() { this.styles = css.activate( this.styles); }
 *     willUnmount() { css.deactivate( this.styles); }
 *     render() { return <div className={this.styles.red.name}</div> }
 * }
 * ```
 *
 * @typeparam T Type of the style definition class or instance passed to the function. This is
 * also the type, which is returned form the function.
 * @param instOrClass Style definition class or instance
 * @param schedulerType Identifier of a pre-defined or registered scheduler. If not specified, the
 * scheduler set as default will be used.
 * @returns Instance of the style definition class - either created (if this was the first
 * activation of the class) or already associated with the class. If the input parameter is an
 * instance (as opposed to a class), the return value is the same instance.
 */
const activate = (instOrClass, schedulerType) => {
    let instance = (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.processSD)(instOrClass);
    if (instance)
        (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_10__.getActivator)(schedulerType).activate(instance);
    return instance;
};
/**
 * Deactivates the given style definition instance by removing its rules from DOM. Note that each
 * style definition instance maintains a counter of how many times it was activated and
 * deactivated. The rules are removed from DOM only when this counter goes down to 0.
 *
 * @param sd Instance of a style definition class to be deactivated.
 * @param schedulerType Identifier of a pre-defined or registered scheduler. If not specified, the
 * scheduler set as default will be used.
 */
const deactivate = (sd, schedulerType) => (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_10__.getActivator)(schedulerType).deactivate(sd);
/**
 * Returns the theme definition object, which is currently active for the given theme declaration
 * class.
 * @param themeClass Theme declaration class
 * @returns Theme instance, which is currently active for the given theme class or undefined
 * if no instance is currently active.
 */
const getActiveTheme = (themeClass) => (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.getCurrentTheme)(themeClass);
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// SSR support.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Starts server-side activation functionality. Throws an error if non-default activation
 * context is already set. This function should be called before any style definitions that
 * are part of the application are activated.
 *
 * Calling this function causes all activated style definitions to be serialized to a string,
 * which can be retrieved by calling the [[stopSSR]] function.
 */
const startSSR = () => (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.s_startSSR)();
/**
 * Stops server-side activation functionality and returns a string with serialized styles style
 * definitions that were activated during application rendering. The string should be added to
 * the `<head>` element of the HTML page using `insertAdjacentHTML()` method.
 *
 * Throws an error if SSR has not been started.
 * @returns String containing serialized styles.
 */
const stopSSR = () => (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.s_stopSSR)();
/**
 * Starts hydration activation functionality. Throws an error if non-default activation context is
 * already set.
 *
 * Calling this function causes all activated style definitions to find appropriate `<style>`
 * elements instead of creating new ones. The functionality assumes that those elements were put
 * to the HTML during server-side page rendering. It also assumes that the style definitions and
 * the rules defined in these style definitions are exaclty the same, and the rules are in the same
 * order as they were during the server-side rendering. Otherwise the behavior is unpredictable.
 */
const startHydration = () => (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.s_startHydration)();
/**
 * Stops hydration activation functionality and restore the default activation context. After this
 * function is called, all style activations will create new `<style>` elements in the HTML.
 *
 * Throws an error if SSR has not been started.
 */
const stopHydration = () => (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.s_stopHydration)();


/***/ }),

/***/ "./lib/api/RuleTypes.js":
/*!******************************!*\
  !*** ./lib/api/RuleTypes.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/api/SchedulingAPI.js":
/*!**********************************!*\
  !*** ./lib/api/SchedulingAPI.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "forceDOMUpdate": () => (/* binding */ forceDOMUpdate),
/* harmony export */   "cancelDOMUpdate": () => (/* binding */ cancelDOMUpdate),
/* harmony export */   "setDefaultScheduler": () => (/* binding */ setDefaultScheduler),
/* harmony export */   "registerScheduler": () => (/* binding */ registerScheduler)
/* harmony export */ });
/* harmony import */ var _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/SchedulingImpl */ "./lib/impl/SchedulingImpl.js");

///////////////////////////////////////////////////////////////////////////////////////////////
//
// Scheduling.
//
///////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Writes to DOM all style changes caused by the calls to the activate and deactivate functions
 * accumulated since the last activation of the given scheduling type.
 */
const forceDOMUpdate = (schedulerType) => _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_0__.getActivator(schedulerType).forceDOMUpdate();
/**
 * Removes all scheduled activations caused by the calls to the activate and deactivate functions
 * accumulated since the last activation of the given scheduling type.
 */
const cancelDOMUpdate = (schedulerType) => _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_0__.getActivator(schedulerType).cancelDOMUpdate();
/**
 * Sets the default scheduling type that is used by activate and deactivate functions that are
 * called without explicitly providing value to the scheduling parameter. Returns the type of the
 * previous default activator or 0 if an error occurs (e.g. the given scheduler type ID is not
 * registered).
 */
const setDefaultScheduler = (schedulerType) => _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_0__.setDefaultScheduler(schedulerType);
/**
 * Registers the given scheduler object and returns the scheduler type identifier, which
 * should be used when calling activate and deactivate functions.
 */
const registerScheduler = (scheduler) => _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_0__.registerScheduler(scheduler);


/***/ }),

/***/ "./lib/api/SchedulingTypes.js":
/*!************************************!*\
  !*** ./lib/api/SchedulingTypes.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/api/ShapeAPI.js":
/*!*****************************!*\
  !*** ./lib/api/ShapeAPI.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linearGradient": () => (/* binding */ linearGradient),
/* harmony export */   "radialGradient": () => (/* binding */ radialGradient),
/* harmony export */   "conicGradient": () => (/* binding */ conicGradient),
/* harmony export */   "crossFade": () => (/* binding */ crossFade),
/* harmony export */   "imageSet": () => (/* binding */ imageSet),
/* harmony export */   "registerPaintWorklet": () => (/* binding */ registerPaintWorklet),
/* harmony export */   "paint": () => (/* binding */ paint),
/* harmony export */   "brightness": () => (/* binding */ brightness),
/* harmony export */   "contrast": () => (/* binding */ contrast),
/* harmony export */   "grayscale": () => (/* binding */ grayscale),
/* harmony export */   "invert": () => (/* binding */ invert),
/* harmony export */   "opacity": () => (/* binding */ opacity),
/* harmony export */   "saturate": () => (/* binding */ saturate),
/* harmony export */   "sepia": () => (/* binding */ sepia),
/* harmony export */   "blur": () => (/* binding */ blur),
/* harmony export */   "dropShadow": () => (/* binding */ dropShadow),
/* harmony export */   "hueRotate": () => (/* binding */ hueRotate),
/* harmony export */   "matrix": () => (/* binding */ matrix),
/* harmony export */   "matrix3d": () => (/* binding */ matrix3d),
/* harmony export */   "perspective": () => (/* binding */ perspective),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "rotateX": () => (/* binding */ rotateX),
/* harmony export */   "rotateY": () => (/* binding */ rotateY),
/* harmony export */   "rotateZ": () => (/* binding */ rotateZ),
/* harmony export */   "rotate3d": () => (/* binding */ rotate3d),
/* harmony export */   "scale": () => (/* binding */ scale),
/* harmony export */   "scaleX": () => (/* binding */ scaleX),
/* harmony export */   "scaleY": () => (/* binding */ scaleY),
/* harmony export */   "scaleZ": () => (/* binding */ scaleZ),
/* harmony export */   "scale3d": () => (/* binding */ scale3d),
/* harmony export */   "skew": () => (/* binding */ skew),
/* harmony export */   "skewX": () => (/* binding */ skewX),
/* harmony export */   "skewY": () => (/* binding */ skewY),
/* harmony export */   "translate": () => (/* binding */ translate),
/* harmony export */   "translateX": () => (/* binding */ translateX),
/* harmony export */   "translateY": () => (/* binding */ translateY),
/* harmony export */   "translateZ": () => (/* binding */ translateZ),
/* harmony export */   "translate3d": () => (/* binding */ translate3d),
/* harmony export */   "inset": () => (/* binding */ inset),
/* harmony export */   "circle": () => (/* binding */ circle),
/* harmony export */   "ellipse": () => (/* binding */ ellipse),
/* harmony export */   "polygon": () => (/* binding */ polygon),
/* harmony export */   "path": () => (/* binding */ path),
/* harmony export */   "ray": () => (/* binding */ ray),
/* harmony export */   "minmax": () => (/* binding */ minmax),
/* harmony export */   "repeat": () => (/* binding */ repeat),
/* harmony export */   "span": () => (/* binding */ span)
/* harmony export */ });
/* harmony import */ var _impl_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/Utils */ "./lib/impl/Utils.js");
/* harmony import */ var _impl_StyleImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../impl/StyleImpl */ "./lib/impl/StyleImpl.js");


///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Images and gradients.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
const gradientNameToString = (val) => `${val.repeat ? "repeating-" : ""}${val.fn}`;
const gradientStopsOrHintsToString = (val, math) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    item: {
        num: 11 /* Color */,
        arr: { 1: [math], any: [11 /* Color */, math, math] }
    },
    sep: ","
});
/**
 * Function returning the ILinearGradientBuilder interface representing the `linear-gradient` CSS functions.
 *
 * *Examples:*
 *
 * ```typescript
 * backgroundImage: linearGradient( "red", "blue")
 *
 * backgroundImage: linearGradient( ["red", 30], ["green", 50, 60], ["blue", 80]).repeating()
 *
 * backgroundImage: linearGradient( "red", "blue").to( 45)
 * ```
 *
 * @param stops Variable argument list specifying stops or hints that will be added to
 * the gradient definition.
 *
 * @category Image
 */
const linearGradient = (...stops) => new LinearGradientBuilder(stops);
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["linear-gradient"] = {
    fn: gradientNameToString,
    f: (val) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)([
        (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val.angle, { num: 4 /* Angle */, str: v => "to " + v }),
        gradientStopsOrHintsToString(val.stops, 3 /* Length */)
    ], ",")
};
/**
 * Function returning the IRadialGradient interface representing the `radial-gradient` CSS functions.
 *
 * *Examples:*
 *
 * ```typescript
 * backgroundImage: radialGradient( "red", "blue")
 *
 * backgroundImage: radialGradient( "red", "blue").circle( css.percent(30)).at( ["center", css.percent(65)])
 *
 * backgroundImage: radialGradient( "red", "blue").circle( 200).repeating()
 *
 * backgroundImage: radialGradient( "red", "blue").ellipse( "closest-side")
 * ```
 *
 * @param stops Variable argument list specifying stops or hints that will be added to
 * the gradient definition.
 *
 * @category Image
 */
const radialGradient = (...stops) => new RadialGradientBuilder(stops);
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["radial-gradient"] = {
    fn: gradientNameToString,
    f: (val) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)([
        (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)([val.shape, [val.size, 13 /* MultiLengthWithSpace */], [val.pos, 9 /* AtPosition */]]),
        gradientStopsOrHintsToString(val.stops, 3 /* Length */)
    ], ",")
};
/**
 * Function returning the IConicGradient interface representing the `radial-gradient` CSS functions.
 *
 * *Examples:*
 *
 * ```typescript
 * backgroundImage: conicGradient( "red", "blue")
 *
 * backgroundImage: conicGradient().repeating().add( "red", "blue")
 *
 * backgroundImage: conicGradient( "red", "blue").from( 0.25).at( ["center", css.percent(65)])
 * ```
 *
 * @param stops Variable argument list specifying stops or hints that will be added to
 * the gradient definition.
 *
 * @category Image
 */
const conicGradient = (...stops) => new ConicGradientBuilder(stops);
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["conic-gradient"] = {
    fn: gradientNameToString,
    f: (val) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)([
        (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)([[val.angle, (v) => "from " + (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(v, 4 /* Angle */)], [val.pos, 9 /* AtPosition */]]),
        gradientStopsOrHintsToString(val.stops, 4 /* Angle */)
    ], ",")
};
/**
 * Base class for gradient implementation
 */
class GradientBuilder {
    constructor(stops) {
        this.stops = stops ?? [];
    }
    repeating(flag) {
        this.repeat = flag == null ? true : flag;
        return this;
    }
    add(...stopsOrHints) {
        this.stops.push(...stopsOrHints);
        return this;
    }
}
/**
 * Implements functionality of linear gradients
 */
class LinearGradientBuilder extends GradientBuilder {
    constructor() {
        super(...arguments);
        this.fn = "linear-gradient";
    }
    to(angle) { this.angle = angle; return this; }
}
/**
 * Implements functionality of radial gradients
 */
class RadialGradientBuilder extends GradientBuilder {
    constructor() {
        super(...arguments);
        this.fn = "radial-gradient";
    }
    circle(sizeOrExtent) {
        this.shape = "circle";
        this.size = sizeOrExtent;
        return this;
    }
    ellipse(...params) {
        this.shape = "ellipse";
        this.size =
            params.length === 1 ? params[0] :
                params.length === 2 ? [params[0], params[1]] :
                    undefined;
        return this;
    }
    extent(extent) { this.size = extent; return this; }
    at(pos) { this.pos = pos; return this; }
}
/**
 * Implements functionality of conic gradients
 */
class ConicGradientBuilder extends GradientBuilder {
    constructor() {
        super(...arguments);
        this.fn = "conic-gradient";
    }
    from(angle) { this.angle = angle; return this; }
    at(pos) { this.pos = pos; return this; }
}
/** Implementation */
function crossFade() {
    return new CrossFadeBuilder(...arguments);
}
/**
 * Implements functionality of cross-fade()
 */
class CrossFadeBuilder {
    constructor() {
        this.fn = "cross-fade";
        let p1 = arguments[0];
        if (Array.isArray(p1) && p1.length === 3) {
            // this is the old signature
            this.old = p1;
        }
        else {
            // this is the new signature
            this.add(...arguments);
        }
    }
    add(...images) {
        if (!this.images)
            this.images = [];
        for (let item of images)
            this.images.push(Array.isArray(item) ? item : [item]);
        return this;
    }
    color(c) { this.c = c; return this; }
}
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["cross-fade"] = (val) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.f2s)("cross-fade", [
    val.images
        ? (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)([[val.images, { item: { arr: [0 /* Default */, 2 /* Percent */] }, sep: "," }], [val.c, 11 /* Color */]], ",")
        : (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val.old, { arr: [0 /* Default */, 0 /* Default */, 2 /* Percent */], sep: "," })
]);
/**
 * Returns an IImageSetFunc object representing the `image-set()` CSS function.
 *
 * @param items One or more items specifying an image and optionally image type and resolution.
 * @returns
 *
 * @category Image
 */
const imageSet = (...items) => ({ fn: "image-set", items });
const imageTypeToString = (val) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    str: v => `type("${v.indexOf("/") > 0 ? val : "image/" + val}")`
});
const imageResolutionToString = (val) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    num: v => v + "x"
});
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["image-set"] = [
    [
        "items", {
            item: {
                str: 23 /* Quoted */,
                arr: {
                    1: [23 /* Quoted */],
                    2: [23 /* Quoted */, { str: imageTypeToString, num: imageResolutionToString }],
                    3: [23 /* Quoted */, imageTypeToString, imageResolutionToString],
                }
            },
            sep: ","
        }
    ]
];
/**
 * Registers a paint worklet with the given name, optional argument syntax and optional URL of
 * the worklet module. The worklet name should have been added to the [[IPaintWorklets]] interface
 * using the module augmentation technique. Although it is possible to use paint worklets without
 * adding them to the [[IPaintWorklets]] interface, this will prevent Mimcss from enforcing the
 * types of arguments when the [[paint]] function is invoked.
 * @param name Worklet name
 * @param syntax Tuple containing syntax definitions for worklet arguments.
 * @param url URL to the worklet module. If specified, the module will be automatically added.
 */
const registerPaintWorklet = async (name, syntax = [], url) => {
    if (CSS.paintWorklet) {
        if (!registeredPaintWorkletInfos[name]) {
            registeredPaintWorkletInfos[name] = { syntax, url };
            // if URL is specified use it to add worklet module
            if (url && !addedPaintWorkletModules.has(url)) {
                addedPaintWorkletModules.add(url);
                try {
                    await CSS.paintWorklet.addModule(url);
                }
                catch (x) {
                    console.error(`Error adding module '${url}' for paint worklet '${name}'`, x);
                }
            }
        }
    }
};
/**
 * Information about registered paint worklets.
 */
let registeredPaintWorkletInfos = {};
/**
 * Set of URLs of already added paint worklet modules.
 */
let addedPaintWorkletModules = new Set();
/**
 * Returns the IPaintFunc object describing an invocation of the `paint()` CSS function.
 *
 * @param name Paint worklet name.
 * @param args Parameters to be passed to the paint worklet.
 *
 * @category Image
 *
 * @ts-expect-error: Erroneously reports TS2370 although the rest's type is an array (a tuple) */
const paint = (name, ...args) => ({ fn: "paint", name: name, args: args });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.paint = (v) => {
    if (!v?.args?.length)
        return `paint(${v.name})`;
    let info = registeredPaintWorkletInfos[v.name];
    let buf = [];
    for (let i = 0; i < v.args.length; i++) {
        let syntax = info?.syntax[i];
        buf.push(syntax ? (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_1__.sp2s)(syntax, v.args[i]) : (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(v.args[i]));
    }
    return `paint(${v.name},${buf.filter(v => !!v).join(",")})`;
};
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Filters
//
///////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Returns an IFilterProxy function representing one of the filter CSS function.
 */
const filterPercent = (fn, p) => ({ fn, p });
/**
 * Returns an [[IPercentFilterFunc]] object representing the `brightness()` CSS function.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: brightness(150%)
 *     bright = this.$class({ filter: css.brightness(150)})
 *
 *     // filter: brightness(50%)
 *     dim = this.$class({ filter: css.brightness(0.5)})
 * }
 * ```
 *
 * @param p Value interpreted as percentage. Integer number is used as is while  floating point
 * numbers are multiplied by 100.
 * @returns The `IPercentFilterFunc` interface containing percentage value
 * @category Filter
 */
const brightness = (p) => filterPercent("brightness", p);
/**
 * Returns an [[IPercentFilterFunc]] object representing the `contrast()` CSS function.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: contrast(150%)
 *     highContrast = this.$class({ filter: css.contrast(150)})
 *
 *     // filter: contrast(50%)
 *     lowContrast = this.$class({ filter: css.contrast(0.5)})
 * }
 * ```
 *
 * @param p Value interpreted as percentage. Integer number is used as is while  floating point
 * numbers are multiplied by 100.
 * @returns The `IPercentFilterFunc` interface containing percentage value
 * @category Filter
 */
const contrast = (p) => filterPercent("contrast", p);
/**
 * Returns an [[IPercentFilterFunc]] object representing the `grayscale()` CSS function.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: grayscale(100%)
 *     gray = this.$class({ filter: css.grayscale(100)})
 *
 *     // filter: grayscale(50%)
 *     halfColor = this.$class({ filter: css.grayscale(0.5)})
 * }
 * ```
 *
 * @param p Value interpreted as percentage. Integer number is used as is while  floating point
 * numbers are multiplied by 100.
 * @returns The `IPercentFilterFunc` interface containing percentage value
 * @category Filter
 */
const grayscale = (p) => filterPercent("grayscale", p);
/**
 * Returns an [[IPercentFilterFunc]] object representing the `invert()` CSS function.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: invert(100%)
 *     inverted = this.$class({ filter: css.invert(100)})
 *
 *     // filter: invert(75%)
 *     somewhatnverted = this.$class({ filter: css.invert(0.75)})
 *
 *     // filter: invert(50%)
 *     gray = this.$class({ filter: css.invert(0.5)})
 * }
 * ```
 *
 * @param p Value interpreted as percentage. Integer number is used as is while  floating point
 * numbers are multiplied by 100.
 * @returns The `IPercentFilterFunc` interface containing percentage value
 * @category Filter
 */
const invert = (p) => filterPercent("invert", p);
/**
 * Returns an [[IPercentFilterFunc]] object representing the `opacity()` CSS function.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: opacity(50%)
 *     halfTransparent = this.$class({ filter: css.opacity(0.5)})
 * }
 * ```
 *
 * @param p Value interpreted as percentage. Integer number is used as is while  floating point
 * numbers are multiplied by 100.
 * @returns The `IPercentFilterFunc` interface containing percentage value
 * @category Filter
 */
const opacity = (p) => filterPercent("opacity", p);
/**
 * Returns an [[IPercentFilterFunc]] object representing the `saturate()` CSS function.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: saturate(150%)
 *     superSaturated = this.$class({ filter: css.saturate(150)})
 *
 *     // filter: saturate(50%)
 *     underSaturated = this.$class({ filter: css.saturate(0.5)})
 * }
 * ```
 *
 * @param p Value interpreted as percentage. Integer number is used as is while  floating point
 * numbers are multiplied by 100.
 * @returns The `IPercentFilterFunc` interface containing percentage value
 * @category Filter
 */
const saturate = (p) => filterPercent("saturate", p);
/**
 * Returns an [[IPercentFilterFunc]] object representing the `sepia()` CSS function.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: sepia(100%)
 *     vintage = this.$class({ filter: css.sepia(100)})
 * }
 * ```
 *
 * @param p Value interpreted as percentage. Integer number is used as is while  floating point
 * numbers are multiplied by 100.
 * @returns The `IPercentFilterFunc` interface containing percentage value
 * @category Filter
 */
const sepia = (p) => filterPercent("sepia", p);
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.brightness = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.contrast = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.grayscale = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.invert = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.opacity = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.saturate =
    _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.sepia = 2 /* Percent */;
/**
 * Returns an [[IBlurFunc]] object representing the `blur()` CSS function parameters.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: blur(0)
 *     sharp = this.$class({ filter: css.blur(0)})
 *
 *     // filter: blur(2px)
 *     blurred = this.$class({ filter: css.blur(2)})
 *
 *     // filter: blur(1.5em)
 *     superBlurred = this.$class({ filter: css.blur(1.5)})
 * }
 * ```
 *
 * @param r Radius of the blur.
 * @returns The `IBlurFunc` interface containing the blur radius
 * @category Filter
 */
const blur = (r) => ({ fn: "blur", r });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.blur = 3 /* Length */;
/**
 * Returns an [[IDropShadowFunc]] object representing the `dropShadow()` CSS function parameters.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: drop-shadow(30px 10px 4px blue)
 *     blurredShadow = this.$class({ filter: css.dropShadow( 30, 10, "blue", 4)})
 *
 *     // filter: drop-shadow(2.5em -1.5em green)
 *     sharpShadow = this.$class({ filter: css.dropShadow( 2.5, -1.5, "green")})
 *
 *     // filter: drop-shadow(0 0 20px orange)
 *     haloShadow = this.$class({ filter: css.dropShadow( 0, 0, "orange", 20px)})
 * }
 * ```
 *
 * @param x Horizontal offset of the shadow.
 * @param y Vertical offset of the shadow.
 * @param color Color of the shadow. If undefined, the color of the shadow is taken from the color
 * property.
 * @param blur Value of the shadow's blurring. If undefined, the shadow will be sharp (not blurred).
 * @returns The `IDropShadowFunc` interface containing the shadow parameters.
 *
 * @category Filter
 */
const dropShadow = (x, y, color, blur) => ({ fn: "drop-shadow", x, y, color, blur });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["drop-shadow"] = {
    p: ["x", "y", "blur", ["color", 11 /* Color */]],
    do: 3 /* Length */,
    s: " "
};
/**
 * Returns an [[IHueRotateFunc]] object representing the `hue-rotate()` CSS function parameters.
 *
 * **Example**
 *
 * ```tsx
 * class MyStyles extends css.StyleDefinition
 * {
 *     // filter: hue-rotate(90deg)
 *     toTheRight = this.$class({ filter: css.hueRotate(90)})
 *
 *     // filter: hue-rotate(-0.25turn)
 *     toTheLeft = this.$class({ filter: css.blur(-0.25)})
 * }
 * ```
 *
 * @param a The relative change in hue of the input sample.
 * @returns The `IHueRotateFunc` interface containing the hue rotation angle
 * @category Filter
 */
const hueRotate = (a) => ({ fn: "hue-rotate", a });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["hue-rotate"] = 4 /* Angle */;
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Transforms
//
///////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Returns an IMatrixFunc object representing the `matrix()` CSS function.
 *
 * @category Transform
 */
const matrix = (a, b, c, d, tx, ty) => ({ fn: "matrix", a, b, c, d, tx, ty });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.matrix = ["a", "b", "c", "d", "tx", "ty"];
/**
 * Returns an IMatrix3dFunc function representing the `matrix3d()` CSS function.
 *
 * @category Transform
 */
const matrix3d = (a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4) => ({ fn: "matrix3d", a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4 });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.matrix = ["a1", "b1", "c1", "d1", "a2", "b2", "c2", "d2", "a3", "b3", "c3", "d3", "a4", "b4", "c4", "d4"];
/**
 * Returns an IPerspectiveFunc function representing the `perspective()` CSS function.
 *
 * @category Transform
 */
const perspective = (d) => ({ fn: "perspective", d });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.perspective = 3 /* Length */;
/**
 * Returns an IRotateFunc function representing the `rotate()` CSS function.
 *
 * @category Transform
 */
const rotate = (a) => ({ fn: "rotate", a });
/**
 * Returns an ITransformProxy function representing the `rotateX()` CSS function.
 *
 * @category Transform
 */
const rotateX = (a) => ({ fn: "rotateX", a });
/**
 * Returns an ITransformProxy function representing the `rotateY()` CSS function.
 *
 * @category Transform
 */
const rotateY = (a) => ({ fn: "rotateY", a });
/**
 * Returns an ITransformProxy function representing the `rotateZ()` CSS function.
 *
 * @category Transform
 */
const rotateZ = (a) => ({ fn: "rotateZ", a });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.rotate = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.rotateX = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.rotateY = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.rotateZ = 4 /* Angle */;
/**
 * Returns an IRotate3dFunc function representing the `rotate3d()` CSS function.
 *
 * @category Transform
 */
const rotate3d = (x, y, z, a) => ({ fn: "rotate3d", x, y, z, a });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.rotate3d = ["x", "y", "z", ["a", 4 /* Angle */]];
/**
 * Returns an IScaleFunc function representing the `scale()` CSS function.
 *
 * @category Transform
 */
const scale = (sx, sy) => ({ fn: "scale", sx, sy });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.scale = ["sx", "sy"];
/**
 * Returns an IScale1dFunc function representing the `scaleX()` CSS function.
 *
 * @category Transform
 */
const scaleX = (s) => ({ fn: "scaleX", s });
/**
 * Returns an IScale1dFunc function representing the `scaleY()` CSS function.
 *
 * @category Transform
 */
const scaleY = (s) => ({ fn: "scaleY", s });
/**
 * Returns an IScale1dFunc function representing the `scaleZ()` CSS function.
 *
 * @category Transform
 */
const scaleZ = (s) => ({ fn: "scaleZ", s });
/**
 * Returns an IScale3dFunc function representing the `scale3d()` CSS function.
 *
 * @category Transform
 */
const scale3d = (sx, sy, sz) => ({ fn: "scale3d", sx, sy, sz });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.scale3d = ["sx", "sy", "sz"];
/**
 * Returns an ISkewFunc function representing the `skew()` CSS function.
 *
 * @category Transform
 */
const skew = (ax, ay) => ({ fn: "skew", ax, ay });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.skew = {
    p: ["ax", "ay"],
    do: 4 /* Angle */
};
/**
 * Returns an ISkew1dFunc function representing the `skewX()` CSS function.
 *
 * @category Transform
 */
const skewX = (a) => ({ fn: "skewX", a });
/**
 * Returns an ISkew1dFunc function representing the `skewY()` CSS function.
 *
 * @category Transform
 */
const skewY = (a) => ({ fn: "skewY", a });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.skewX = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.skewY = 4 /* Angle */;
/**
 * Returns an ITranslateFunc function representing the `translate()` CSS function.
 *
 * @category Transform
 */
const translate = (x, y) => ({ fn: "translate", x, y });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.translate = {
    p: ["x", "y"],
    do: 3 /* Length */
};
/**
 * Returns an ITranslate1dFunc function representing the `translateX()` CSS function.
 *
 * @category Transform
 */
const translateX = (d) => ({ fn: "translateX", d });
/**
 * Returns an ITranslate1dFunc function representing the `translateY()` CSS function.
 *
 * @category Transform
 */
const translateY = (d) => ({ fn: "translateY", d });
/**
 * Returns an ITranslate1dFunc function representing the `translateZ()` CSS function.
 *
 * @category Transform
 */
const translateZ = (d) => ({ fn: "translateZ", d });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.translateX = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.translateY = _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.translateZ = 3 /* Length */;
/**
 * Returns an ITranslate3dFunc function representing the `translate3d()` CSS function.
 *
 * @category Transform
 */
const translate3d = (x, y, z) => ({ fn: "translate3d", x, y, z });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.translate3d = {
    p: ["x", "y", "z"],
    do: 3 /* Length */
};
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic shapes
//
///////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Returns an IInsetBuilder object representing the `inset()` CSS function.
 *
 * *Example:*
 *
 * ```typescript
 * clipPath: inset( css.percent(15))
 *
 * clipPath: inset( 10, 12, 14, 16).round( 8)
 * ```
 *
 * @category Basic Shape
 */
const inset = (o1, o2, o3, o4) => ({
    fn: "inset", o1, o2, o3, o4,
    round(r) { this.r = r; return this; }
});
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.inset = {
    p: ["o1", "o2", "o3", "o4", ["r", v => "round " + _impl_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[20](v)]],
    do: 3 /* Length */,
    s: " "
};
/**
 * Returns an ICircleBuilder object representing the `circle()` CSS function.
 *
 * *Example:*
 *
 * ```typescript
 * clipPath: circle( 100)
 *
 * clipPath: circle( 100).at( ["center", css.percent(30)])
 * ```
 *
 * @category Basic Shape
 */
const circle = (r) => ({
    fn: "circle", r,
    at(pos) { this.pos = pos; return this; }
});
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.circle = {
    p: [["r", 3 /* Length */], ["pos", 9 /* AtPosition */]],
    s: " "
};
// implementation
function ellipse() {
    return {
        fn: "ellipse", rx: arguments[0], ry: arguments[1],
        at(pos) { this.pos = pos; return this; }
    };
}
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.ellipse = {
    p: ["rx", "ry", ["pos", 9 /* AtPosition */]],
    do: 3 /* Length */,
    s: " "
};
/**
 * Returns an IPolygon object representing the `polygon()` CSS function.
 *
 * *Example:*
 *
 * ```typescript
 * clipPath: css.polygon( [0,100], [50,0], [100,100])
 *
 * clipPath: css.polygon( [0,100], [50,0], [100,100]).fill( "evenodd")
 * ```
 *
 * @category Basic Shape
 */
const polygon = (...points) => ({
    fn: "polygon", points: points ?? [],
    add(...points) { this.points.push(...points); return this; },
    fill(rule) { this.rule = rule; return this; }
});
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.polygon = [
    "rule",
    ["points", { item: 13 /* MultiLengthWithSpace */, sep: "," }],
];
/**
 * Returns an IPathBuilder object that allows building a CSS path.
 *
 * @category Basic Shape
 */
const path = (fillRule) => new PathBuilder(fillRule);
/**
 * The IPathBuilder interface represents the object that accumulates path commands that are then
 * converted to a string parameter of the CSS `path()` function.
 */
class PathBuilder {
    constructor(rule) {
        this.fn = "path";
        this.items = [];
        this.rule = rule;
    }
    // Adds the given command and parameters to the path.
    add(command, params) {
        this.items.push([command, params]);
        return this;
    }
    M(...params) { return this.add("M", params); }
    m(...params) { return this.add("m", params); }
    L(...params) { return this.add("L", params); }
    l(...params) { return this.add("l", params); }
    H(...params) { return this.add("H", params); }
    h(...params) { return this.add("h", params); }
    V(...params) { return this.add("V", params); }
    v(...params) { return this.add("v", params); }
    C(...params) { return this.add("C", params); }
    c(...params) { return this.add("c", params); }
    S(...params) { return this.add("S", params); }
    s(...params) { return this.add("s", params); }
    Q(...params) { return this.add("Q", params); }
    q(...params) { return this.add("q", params); }
    T(...params) { return this.add("T", params); }
    t(...params) { return this.add("t", params); }
    A(...params) { return this.add("A", params); }
    a(...params) { return this.add("a", params); }
    z() { return this.add("z"); }
}
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.path = ["rule", ["items", (v) => `"${(0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.a2s)(v)}"`]];
/**
 * Returns an IRay object representing invocation of the `ray()` CSS function.
 *
 * @category Basic Shape
 */
const ray = (angle, size, contain) => ({ fn: "ray", angle, size, contain });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.ray = {
    p: [
        ["angle", 4 /* Angle */],
        ["size", 3 /* Length */],
        ["contain", (v) => (v ? "contain" : "")]
    ],
    s: " "
};
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Grids
//
///////////////////////////////////////////////////////////////////////////////////////////////
/**
* Returns an IMinMax function representing the `minmax()` CSS function.
*
* @category Grid
*/
const minmax = (min, max) => ({ fn: "minmax", min, max });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.minmax = [["min", 3 /* Length */], ["max", 3 /* Length */]];
/**
 * Returns an IRepeat function representing the `repeat()` CSS function.
 *
 * @category Grid
 */
const repeat = (count, ...tracks) => ({ fn: "repeat", count, tracks });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.repeat = ["count", ["tracks", { item: 22 /* GridTrack */ }]];
/**
 * Returns an IGridSpanFunc function representing the `span` expression for grid layouts. If the first
 * parameter is a number, the second parameter (if defined) must be a name; if the first parameter
 * is a name, the second parameter (if defined) must be a number.
 *
 * @category Grid
 */
const span = (p1, p2) => ({ fn: "span", p1, p2 });
_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo.span = (v) => (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_0__.mv2s)(["span", v.p1, v.p2]);


/***/ }),

/***/ "./lib/api/ShapeTypes.js":
/*!*******************************!*\
  !*** ./lib/api/ShapeTypes.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/api/StyleAPI.js":
/*!*****************************!*\
  !*** ./lib/api/StyleAPI.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerStyleProperty": () => (/* binding */ registerStyleProperty),
/* harmony export */   "getStylePropValue": () => (/* binding */ getStylePropValue),
/* harmony export */   "setElementStyle": () => (/* binding */ setElementStyle),
/* harmony export */   "setElementStringStyle": () => (/* binding */ setElementStringStyle),
/* harmony export */   "stylesetToString": () => (/* binding */ stylesetToString),
/* harmony export */   "stylesetToStringStyleset": () => (/* binding */ stylesetToStringStyleset),
/* harmony export */   "diffStylesets": () => (/* binding */ diffStylesets),
/* harmony export */   "mediaToString": () => (/* binding */ mediaToString),
/* harmony export */   "supportsToString": () => (/* binding */ supportsToString)
/* harmony export */ });
/* harmony import */ var _impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/StyleImpl */ "./lib/impl/StyleImpl.js");
/* harmony import */ var _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../impl/SchedulingImpl */ "./lib/impl/SchedulingImpl.js");
/* harmony import */ var _impl_MiscImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/MiscImpl */ "./lib/impl/MiscImpl.js");



///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Styleset manipulation
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Registers the given function to be used for converting values of the given style property to
 * string. The `registerStyleProperty` function must be used after adding the property to the
 * [[IStyleset]] interface via the module augmentation technique if the conversion to string
 * requires non-standard operations. This function should not be called for propeties whose
 * values only include numbers, strings, functions returning a string, objects whose `toString`
 * method produces the necessary string or arrays of the above types.
 *
 * This function can be used for style properties that are not yet supported by Mimcss. This is
 * also the way to support properties with vendor prefixes.
 */
const registerStyleProperty = (name, toStringFunc) => (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.s_registerSP)(name, toStringFunc);
/**
 * Converts the given value corresponding to the given style property to a CSS string.
 * @param stylePropName Style property name that determines how the value should be converted
 * to a CSS compliant string.
 * @param stylePropValue Value to convert.
 */
const getStylePropValue = (stylePropName, stylePropValue) => (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.sp2s)(stylePropName, stylePropValue);
// Sets style property on HTML or SVG element
const setElementStyleProp = (elm, name, value, schedulerType) => (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_1__.getActivator)(schedulerType).updateStyle(elm, name, (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.sp2s)(name, value), false);
/**
 * Sets values of the style properties from the given Styleset object to the `style` attribute
 * of the given HTML element.
 * @param elm HTML/SVG element whose styles will be set.
 * @param styleset Styleset object which provides values for style properties.
 */
const setElementStyle = (elm, styleset, schedulerType) => setElementStringStyle(elm, styleset ? stylesetToStringStyleset(styleset) : null, schedulerType);
/**
 * Sets values of the style properties from the given StringStyleset object to the `style` attribute
 * of the given HTML element.
 * @param elm HTML/SVG element whose styles will be set.
 * @param styleset [[StringStyleset]] object which provides values for style properties.
 */
const setElementStringStyle = (elm, styleset, schedulerType) => (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_1__.getActivator)(schedulerType).updateStyle(elm, null, styleset, false);
/**
 * Serializes the given [[Styleset]] to a string.
 * @param styleset
 */
const stylesetToString = (styleset) => (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.s2s)(styleset);
/**
 * Converts the given [[Styleset]] object into an object, where each Styleset's property is
 * converted to its string value.
 * @param styleset
 */
const stylesetToStringStyleset = (styleset) => (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.s2ss)(styleset);
/**
 * Compares two Styleset objects by converting style properties to strings and returns an object
 * that contains string values of properties that were new or have different values in the new
 * styleset and undefined values for properties that exist in the old styleset but don't exist
 * in the new one.
 * @param oldStyleset
 * @param newStyleset
 * @returns StringStyleset object with properties that have different values in the old and new
 * stylesets. Properties that existed in the old but don't exist in the new styleset, will have
 * their values set to `"unset"`. If there is no differences between the two stylesets null is
 * returned.
 */
const diffStylesets = (oldStyleset, newStyleset) => {
    if (!oldStyleset && !newStyleset)
        return null;
    else if (!oldStyleset)
        return (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.s2ss)(newStyleset);
    else if (!newStyleset)
        return (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.s2ss)(oldStyleset);
    // first convert both stylesets to their string versions
    let oldStringStyleset = (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.s2ss)(oldStyleset);
    let newStringStyleset = (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.s2ss)(newStyleset);
    let updateVal = null;
    // loop over keys in the old style object and find those that are not in the new one. These
    // will be removed.
    for (let key in oldStringStyleset) {
        let newStringVal = newStringStyleset[key];
        if (newStringVal == null) {
            updateVal = updateVal || {};
            updateVal[key] = "unset";
        }
        else {
            let oldStringVal = oldStringStyleset[key];
            if (oldStringVal !== newStringVal) {
                updateVal = updateVal || {};
                updateVal[key] = newStringVal;
            }
        }
    }
    // loop over keys in the new style object and find those that are not in the old one. These
    // will be added.
    for (let key in newStringStyleset) {
        let oldStringVal = oldStringStyleset[key];
        if (oldStringVal == null) {
            updateVal = updateVal || {};
            updateVal[key] = newStringStyleset[key];
        }
    }
    return updateVal;
};
// Sets style property on HTML or SVG element
HTMLElement.prototype.setStyleProp = SVGElement.prototype.setStyleProp =
    function (name, value, schedulerType) {
        setElementStyleProp(this, name, value, schedulerType);
    };
// Sets styleset on HTML or SVG element
HTMLElement.prototype.setStyleset = SVGElement.prototype.setStyleset =
    function (styleset, schedulerType) {
        setElementStyle(this, styleset, schedulerType);
    };
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// @media and @supports queries.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Converts the given media query value to the CSS media query string. This function can be used
 * by libraries that allow specifying [[MediaStatement]] for the `media` attribute of elements
 * such as `<link>`, `<style>` and `<source>`
 */
const mediaToString = (query) => (0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_2__.media2s)(query);
/**
 * Converts the given supports query value to the CSS supports query string.
 */
const supportsToString = (query) => (0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_2__.supports2s)(query);


/***/ }),

/***/ "./lib/api/StyleTypes.js":
/*!*******************************!*\
  !*** ./lib/api/StyleTypes.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/api/Stylesets.js":
/*!******************************!*\
  !*** ./lib/api/Stylesets.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./lib/impl/CoreImpl.js":
/*!******************************!*\
  !*** ./lib/impl/CoreImpl.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selector2s": () => (/* binding */ selector2s)
/* harmony export */ });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./lib/impl/Utils.js");

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// CSS selector.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Returns a string representation of a selector.
 */
const selector2s = (val) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, { sep: "", recursive: true });
// Converting attribute selector definition to string
_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo["attr-sel"] = (v) => `[${v.ns ? (typeof v.ns === "string" ? v.ns : v.ns.prefix) + "|" : ""}${v.name}` +
    (v.val == null ? "]" : `${v.op ?? "="}"${v.val}"${v.cf ? " " + v.cf : ""}]`);
// Converting "nth" pseudo classes to string
_Utils__WEBPACK_IMPORTED_MODULE_0__.fdo[":nth-child"] = _Utils__WEBPACK_IMPORTED_MODULE_0__.fdo[":nth-last-child"] = _Utils__WEBPACK_IMPORTED_MODULE_0__.fdo[":nth-of-type"] = _Utils__WEBPACK_IMPORTED_MODULE_0__.fdo[":nth-last-of-type"] = [
    ["p", {
            arr: [
                v => v + "n",
                v => !v ? "" : v > 0 ? "+" + v : "-" + -v
            ],
            sep: ""
        }]
];
// // Converting pseudo entities that accept CssSelector to string
// fdo[":is"] = fdo[":has"] = fdo[":host-context"] = fdo[":not"] = fdo[":where"] = fdo["::slotted"] = [
//     ["p", selector2s]
//     // ["p", {sep: ",", recursive: true}]
// ]


/***/ }),

/***/ "./lib/impl/MiscImpl.js":
/*!******************************!*\
  !*** ./lib/impl/MiscImpl.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "media2s": () => (/* binding */ media2s),
/* harmony export */   "supports2s": () => (/* binding */ supports2s),
/* harmony export */   "fontFace2s": () => (/* binding */ fontFace2s),
/* harmony export */   "counterStyleset2s": () => (/* binding */ counterStyleset2s)
/* harmony export */ });
/* harmony import */ var _StyleImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StyleImpl */ "./lib/impl/StyleImpl.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./lib/impl/Utils.js");


///////////////////////////////////////////////////////////////////////////////////////////////////
//
// CSS @media rule.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Converts the given media query object to the CSS media query string
 */
const media2s = (statement) => (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(statement, {
    any: mediaQuery2s,
    sep: ","
});
/**
 * Converts the given media query object to the CSS media query string
 */
const mediaQuery2s = (query) => (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.propSet2s)(query, mediaFeatureInfos, {
    separator: " and ",
    propFunc: mediaFeature2s,
});
/**
 * Converts the given media feature to the CSS media query string
 */
const mediaFeature2s = (dashName, camelName, val, options) => {
    if (val == null)
        return "";
    // if defaultValue is defined and the property value is equal to it, no value should be returned.
    let defaultValue = mediaFeatureDefaultValues.get(camelName);
    if (defaultValue !== undefined && val === defaultValue)
        return dashName;
    let isRange = rangeMediaFeatures.has(camelName);
    if (isRange && Array.isArray(val)) {
        return `(${"min-" + dashName}:${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(val[0], options)}) and (${"max-" + dashName}:${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(val[1], options)})`;
        // this syntax is not widely supported yet
        // return `${s1} <= ${dashName} <= ${s2}`;
    }
    else
        return `(${dashName}:${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(val, options)})`;
};
const mediaFeatureInfos = {
    aspectRatio: {
        num: (v) => v + "/1"
    },
    height: 3 /* Length */,
    minHeight: 3 /* Length */,
    maxHeight: 3 /* Length */,
    resolution: 6 /* Resolution */,
    minResolution: 6 /* Resolution */,
    maxResolution: 6 /* Resolution */,
    width: 3 /* Length */,
    minWidth: 3 /* Length */,
    maxWidth: 3 /* Length */,
};
// Set of media features that allow range of values
const rangeMediaFeatures = new Set(["aspectRatio", "color", "colorIndex", "height", "monochrome", "resolution", "width"]);
// Map of media features to default values
const mediaFeatureDefaultValues = new Map([
    ["color", 0],
    ["colorIndex", 0],
    ["monochrome", 0]
]);
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// CSS @supports rule.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/** Converts the given supports statement to its string representation */
const supports2s = (statement) => (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(statement, {
    any: supportsQuery2s,
    sep: " or "
});
/** Converts the given supports query to its string representation */
const supportsQuery2s = (query) => (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(query, {
    obj: (v) => {
        let propNames = Object.keys(v);
        if (propNames.length === 0)
            return "";
        return `(${propNames.map((propName) => `${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.camelToDash)(propName)}:${(0,_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.sp2s)(propName, query[propName])}`).join(") and (")})`;
    }
});
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// CSS @font-face rule.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Converts the given font face object to the CSS style string.
 */
const fontFace2s = (fontface) => (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.propSet2s)(fontface, fontFacePropertyInfos);
_Utils__WEBPACK_IMPORTED_MODULE_1__.wkf[24] = v => (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(v, {
    num: v => `oblique ${_Utils__WEBPACK_IMPORTED_MODULE_1__.wkf[4](v)}`,
    arr: v => `oblique ${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.a2s)(v, 4 /* Angle */)}`
});
/**
 * Map of property names to the V2SOptions objects describing custom actions necessary to
 * convert the property value to the CSS-compliant string.
 */
const fontFacePropertyInfos = {
    ascentOverride: 2 /* Percent */,
    descentOverride: 2 /* Percent */,
    fontStretch: { any: 2 /* Percent */ },
    fontStyle: 24 /* FontStyle */,
    fontWeight: { any: 1 /* Number */ },
    lineGapOverride: 2 /* Percent */,
    src: {
        any: {
            obj: [
                ["local", v => `local(${v})`],
                ["url", v => `url(${v})`],
                ["format", {
                        any: v => `format(\"${v}\")`,
                        sep: ","
                    }]
            ]
        },
        sep: ","
    },
    sizeAdjust: 2 /* Percent */,
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// CSS @counter-style rule.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Converts the given counter styleset property to the CSS style string. Property name can be in
 * either dash or camel form.
 */
const counterStylesetProp2s = (propName, propVal, includeName) => {
    if (!propName)
        return "";
    // convert the value to string based on the information object for the property (if defined)
    let stringValue = (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(propVal, counterStylePropertyInfos[(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.dashToCamel)(propName)]);
    // if the resulting string is empty and the name should be included, then we return
    // "name:; otherwise we will return an empty string.
    if (!stringValue && includeName)
        stringValue = "";
    return includeName ? `${(0,_Utils__WEBPACK_IMPORTED_MODULE_1__.camelToDash)(propName)}:${stringValue}` : stringValue;
};
/**
 * Converts the given counter styleset object to the CSS media query string
 */
const counterStyleset2s = (counterStyleset) => {
    if (!counterStyleset)
        return "";
    let s = "";
    for (let name in counterStyleset)
        s += counterStylesetProp2s(name, counterStyleset[name], true) + ";";
    return s;
};
/**
* Map of property names to the V2SOptions objects describing custom actions necessary to
* convert the property value to the CSS-compliant string.
*/
const counterStylePropertyInfos = {
    system: {
        num: v => "fixed " + v,
        arr: v => "extends " + (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.v2s)(v[0])
    },
    negative: {
        any: 23 /* Quoted */
    },
    prefix: 23 /* Quoted */,
    suffix: 23 /* Quoted */,
    range: {
        arr2: { sep: "," }
    },
    pad: {
        item: 23 /* Quoted */
    },
    symbols: {
        item: 23 /* Quoted */
    },
    additiveSymbols: {
        arr2: { item: { item: 23 /* Quoted */ }, sep: "," },
        any: 23 /* Quoted */
    },
};


/***/ }),

/***/ "./lib/impl/NumericImpl.js":
/*!*********************************!*\
  !*** ./lib/impl/NumericImpl.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NumericMath": () => (/* binding */ NumericMath),
/* harmony export */   "NumberMath": () => (/* binding */ NumberMath),
/* harmony export */   "PercentMath": () => (/* binding */ PercentMath),
/* harmony export */   "LengthMath": () => (/* binding */ LengthMath),
/* harmony export */   "AngleMath": () => (/* binding */ AngleMath),
/* harmony export */   "TimeMath": () => (/* binding */ TimeMath),
/* harmony export */   "ResolutionMath": () => (/* binding */ ResolutionMath),
/* harmony export */   "FrequencyMath": () => (/* binding */ FrequencyMath)
/* harmony export */ });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./lib/impl/Utils.js");

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Numbers
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Converts a single numeric value to a CSS string optionally appending units that can be different
 * for integer and floating point numbers.
 * @param n Number to convert to string representation.
 * @param intUnit Units to append if the number is integer.
 * @param floatUnit Units to append if the number is floating point.
 */
const numberToString = (n, intUnit = "", floatUint = "") => n + (Number.isInteger(n) ? intUnit : floatUint);
/**
 * The NumericMath class contains methods that implement CSS mathematic functions on the
 * numeric CSS types. When arguments for these functions are of the number JavaScript type they
 * are converted to strings by calling a function specified in the constructor.
 */
class NumericMath {
    constructor(n2s) {
        this.n2s = n2s;
    }
    v2s(val) {
        return (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, { num: this.n2s });
    }
    mv2s(val, separator) {
        return (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
            any: v => this.v2s(v),
            sep: separator
        });
    }
    /** Creates CssLength value from the number and the given unit. */
    units(n, unit) {
        return () => n + unit;
    }
    min(...params) {
        return () => this.m("min", params);
    }
    max(...params) {
        return () => this.m("max", params);
    }
    clamp(min, pref, max) {
        // return () => mathFunc( "clamp", [min, pref, max], this.n2s);
        return () => this.m("clamp", [min, pref, max]);
    }
    calc(formulaParts, ...params) {
        return () => `calc(${(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.tag2s)(formulaParts, params, (v) => this.v2s(v))})`;
    }
    m(name, params) {
        return `${name}(${this.mv2s(params, ",")})`;
    }
}
/**
 * The NumberMath object contains methods that implement CSS mathematic functions on the `<number>`
 * CSS type.
 */
const NumberMath = new NumericMath(n => n.toString());
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[1] = v => NumberMath.v2s(v);
/**
 * The PercentMath object contains methods that implement CSS mathematic functions on the
 * `<percentage>` CSS type by appending a "%" unit suffix. If the number is between -1 and 1 (non
 * inclusive), multiplies the number by 100.
 */
const PercentMath = new NumericMath(n => (n >= 1 || n <= -1 ? n : Math.round(n * 100)) + "%");
/**
 * Converts the given number to string using the following rules:
 * - if the number is between -1 and 1 (non inclusive), multiplies the number by 100 and appends "%"
 * - otherwise, converts the number to string without appending any units.
 */
const unitlessOrPercentToString = (n) => n >= 1 || n <= -1 ? n.toString() : (Math.round(n * 100) + "%");
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[2] = v => PercentMath.v2s(v);
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[17] = unitlessOrPercentToString;
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[27] = v => v + "%";
/**
 * The LengthMath object contains methods that implement CSS mathematic functions on the `<length>`
 * CSS type by appending a length unit suffix.
 * Integer numbers use "px"; floating point numbers use "em".
 */
const LengthMath = new NumericMath(n => numberToString(n, "px", "em"));
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[3] = v => LengthMath.v2s(v);
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[13] = v => LengthMath.mv2s(v, " ");
/**
 * The AngleMath object contains methods that implement CSS mathematic functions on the `<angle>`
 * CSS type by appending an angle unit suffix.
 * Integer numbers use "deg"; floating point numbers use "turn".
 */
const AngleMath = new NumericMath(n => numberToString(n, "deg", "turn"));
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[4] = v => AngleMath.v2s(v);
/**
 * The TimeMath object contains methods that implement CSS mathematic functions on the `<time>`
 * CSS type by appending a time unit suffix.
 * Integer numbers use "ms"; floating point numbers use "s".
 */
const TimeMath = new NumericMath(n => numberToString(n, "ms", "s"));
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[5] = v => TimeMath.v2s(v);
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[14] = v => TimeMath.mv2s(v, ",");
/**
 * The ResolutionMath object contains methods that implement CSS mathematic functions on the
 * `<resolution>` CSS type by appending a resolution unit suffix.
 * Integer numbers use "dpi"; floating point numbers use "x".
 */
const ResolutionMath = new NumericMath(n => numberToString(n, "dpi", "x"));
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[6] = v => ResolutionMath.v2s(v);
/**
 * The FrequencyMath object contains methods that implement CSS mathematic functions on the
 * `<frequency>` CSS type by appending a frequency unit suffix.
 * Integer numbers use "Hz"; floating point numbers use "kHz".
 */
const FrequencyMath = new NumericMath(n => numberToString(n, "Hz", "kHz"));
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[7] = v => FrequencyMath.v2s(v);
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Size, Point, Position, Radius
//
///////////////////////////////////////////////////////////////////////////////////////////////////
// Converts single position style value to the CSS string.
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[8] = (val) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, { any: 3 /* Length */ });
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[9] = (v) => v == null ? "" : "at " + _Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[8](v);
// Converts multi-position style value to the CSS string.
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[12] = (val) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    arr2: { any: 8 /* Position */, sep: "," },
    any: 8 /* Position */
});
// Converts corner radius style value to the CSS string.
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[18] = (v) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(v, { any: 3 /* Length */ });
/**
 * Converts border radius style value to the CSS string.
 */
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[20] = (val) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    arr2: { any: { any: 3 /* Length */ }, sep: "/" },
    any: 3 /* Length */
});


/***/ }),

/***/ "./lib/impl/SchedulingImpl.js":
/*!************************************!*\
  !*** ./lib/impl/SchedulingImpl.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getActivator": () => (/* binding */ getActivator),
/* harmony export */   "setDefaultScheduler": () => (/* binding */ setDefaultScheduler),
/* harmony export */   "registerScheduler": () => (/* binding */ registerScheduler)
/* harmony export */ });
/* harmony import */ var _rules_RuleContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../rules/RuleContainer */ "./lib/rules/RuleContainer.js");

/**
 * Set the value of either a single property or a set of properties in the given
 * CSS style object.
 */
const updateStyleProperty = (ruleOrElm, name, value, important) => {
    if (!name && value == null) {
        if (ruleOrElm instanceof CSSStyleRule)
            ruleOrElm.cssText = "";
        else
            ruleOrElm.removeAttribute("style");
    }
    else if (name) {
        if (value == null)
            ruleOrElm.style.removeProperty(name);
        else
            ruleOrElm.style.setProperty(name, value, important ? "important" : undefined);
    }
    else {
        let styleset = value;
        for (let propName in styleset)
            ruleOrElm.style[propName] = styleset[propName];
    }
};
/**
 * The SynchronousActivator class represents the synchronous activation mechanism, which writes
 * style changes to the DOM when the activate and deactivate functions are called.
 */
class SynchronousActivator {
    /**
     * Instructs to activate the given style definition instance. This method is called when the
     * activate function is called for this activation mechanism.
     * @param definition
     */
    activate(definition) {
        (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_0__.activateSD)(definition);
    }
    /**
     * Instructs to deactivate the given style definition instance. This method is called when the
     * deactivate function is called for this activation mechanism.
     * @param definition
     */
    deactivate(definition) {
        (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_0__.deactivateSD)(definition);
    }
    /**
     * Instructs to set the value of either a single property or a set of properties in the given
     * CSS style object.
     */
    updateStyle(ruleOrElm, name, value, important) {
        updateStyleProperty(ruleOrElm, name, value, important);
    }
    /**
     * Performs activation/deactivation for all style definitions accumulated since the last
     * activation/deactivation. This method is called when the forceDOMUpdate function is called
     * for this activation mechanism.
     */
    forceDOMUpdate() { }
    /**
     * Cancels activation/deactivation for all style definitions accumulated since the last
     * activation/deactivation. This method is called when the cancelDOMUpdate function is called
     * for this activation mechanism.
     */
    cancelDOMUpdate() { }
}
/**
 * The SchedulingActivator class keeps a map of StyleDefinition instances that are scheduled for
 * activation or deactivation. Each instance is mapped to a refernce count, which is incremented
 * upon the activate calls and decremented upon the deactivate calls. When the doActivation
 * method is called The style definition will be either activated or deactivated based on whether
 * the reference count is positive or negative.
 */
class SchedulingActivator {
    constructor(scheduler) {
        // Array of functions that will be invoked when the scheduled update runs.
        this.actions = [];
        if (scheduler) {
            scheduler.init(() => this.doDOMUpdate());
            this.scheduler = scheduler;
        }
    }
    /**
     * Instructs to activate the given style definition instance.
     */
    activate(definition) {
        if (this.isSchedulingNeeded)
            this.scheduler.scheduleDOMUpdate();
        this.actions.push(() => (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_0__.activateSD)(definition));
    }
    /**
     * Instructs to deactivate the given style definition instance.
     */
    deactivate(definition) {
        if (this.isSchedulingNeeded)
            this.scheduler.scheduleDOMUpdate();
        this.actions.push(() => (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_0__.deactivateSD)(definition));
    }
    /**
     * Instructs to set the value of either a single property or a set of properties in the given
     * CSS style object.
     */
    updateStyle(ruleOrElm, name, value, important) {
        if (this.isSchedulingNeeded)
            this.scheduler.scheduleDOMUpdate();
        this.actions.push(() => updateStyleProperty(ruleOrElm, name, value, important));
    }
    /**
     * Performs activation/deactivation for all style definitions in our internal map.
     */
    forceDOMUpdate() {
        if (this.actions.length > 0) {
            this.doDOMUpdate();
            this.scheduler && this.scheduler.cancelDOMUpdate();
        }
    }
    /**
     * Cancels activation/deactivation for all style definitions accumulated since the last
     * activation/deactivation.
     */
    cancelDOMUpdate() {
        if (this.actions.length > 0) {
            this.actions = [];
            this.scheduler && this.scheduler.cancelDOMUpdate();
        }
    }
    get isSchedulingNeeded() {
        return !!this.scheduler && !this.actions.length;
    }
    /**
     * Performs activation/deactivation and property set operations accumulated internally. This
     * method should be used by the derived classes when scheduled activations should be performed.
     */
    doDOMUpdate() {
        // update style properties
        for (let action of this.actions)
            action();
        this.actions = [];
    }
}
/**
 * The AnimationFrameScheduler implements scheduling using animation frames.
 */
class AnimationFrameScheduler {
    constructor() {
        // Handle returned by requestAnimationFrame function.
        this.h = 0;
        /**
         * Is invoked when animation frame should be executed.
         */
        this.onFrame = () => {
            this.h = 0;
            this.cb();
        };
    }
    /**
     * Initializes the scheduler object and provides the callback that should be invoked when the
     * scheduler decides to make changes to the DOM.
     */
    init(doDOMUpdate) {
        this.cb = doDOMUpdate;
    }
    /**
     * Is invoked when the scheduler needs to schedule its callback or event.
     */
    scheduleDOMUpdate() {
        this.h = requestAnimationFrame(this.onFrame);
    }
    /**
     * Is invoked when the scheduler needs to cancels its scheduled callback or event.
     */
    cancelDOMUpdate() {
        if (this.h > 0) {
            cancelAnimationFrame(this.h);
            this.h = 0;
        }
    }
}
/**
 * Returns the activator for the given scheduler type. If scheduler type is not specified returns
 * the activator currently set as default. If, for some reason, the default activator is not set,
 * returns the synchronous activator.
 */
const getActivator = (schedulerType) => (schedulerType == null ? s_defaultActivator : s_registeredActivators.get(schedulerType)) ?? s_synchronousActivator;
/**
 * Sets the default scheduling type that is used by activate and deactivate functions that are
 * called without explicitly providing value to the scheduling parameter. Returns the type of the
 * previous default activator or 0 if an error occurs (e.g. the given scheduler type ID is not
 * registered).
 */
const setDefaultScheduler = (schedulerType) => {
    // check that the given number is in our map of registered activators
    let activator = s_registeredActivators.get(schedulerType);
    if (!activator)
        return 0;
    let prevSchedulerType = s_defaultSchedulerType;
    s_defaultSchedulerType = schedulerType;
    s_defaultActivator = activator;
    return prevSchedulerType;
};
/**
 * Registers the given scheduler object and returns the scheduler type identifier, which
 * should be used when calling activate and deactivate functions.
 */
const registerScheduler = (scheduler) => {
    // get the registration ID for this scheduler
    let id = s_nextCustomSchedulerType++;
    s_registeredActivators.set(id, new SchedulingActivator(scheduler));
    return id;
};
/**
 * Current default scheduler. This scheduler will be used if scheduler type is not explicitly
 * specified in calls such as activate or IStyleRule.setProp.
 */
let s_defaultSchedulerType = 1 /* Sync */;
/**
 * Synchronous activator instance.
 */
const s_synchronousActivator = new SynchronousActivator();
/**
 * Current default activator. This activator will be used if scheduler type is not explicitly
 * specified in calls such as activate or IStyleRule.setProp.
 */
let s_defaultActivator = s_synchronousActivator;
/**
 * Scheduler type identifier to be assigned to the first custom scheduler to be registered.
 * All custom scheduler identifiers are greater or equal to this number.
 */
const s_firstCustomSchedulerType = 1001;
/**
 * Scheduler type identifier to be assigned to the next custom scheduler to be registered.
 */
let s_nextCustomSchedulerType = s_firstCustomSchedulerType;
/**
 * Map of registered built-in and custom activators.
 */
const s_registeredActivators = new Map();
/**
 * Register built-in and custom activators.
 */
s_registeredActivators.set(1 /* Sync */, s_synchronousActivator);
s_registeredActivators.set(2 /* AnimationFrame */, new SchedulingActivator(new AnimationFrameScheduler()));
s_registeredActivators.set(3 /* Manual */, new SchedulingActivator());


/***/ }),

/***/ "./lib/impl/StyleImpl.js":
/*!*******************************!*\
  !*** ./lib/impl/StyleImpl.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sp2s": () => (/* binding */ sp2s),
/* harmony export */   "s2s": () => (/* binding */ s2s),
/* harmony export */   "s2ss": () => (/* binding */ s2ss),
/* harmony export */   "s_registerSP": () => (/* binding */ s_registerSP)
/* harmony export */ });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./lib/impl/Utils.js");
/* harmony import */ var _rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rules/RuleContainer */ "./lib/rules/RuleContainer.js");


///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Functions for converting CSS property types to strings.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
const borderImageToString = (val) => {
    // if width is specified, but slice is not, we need to set slice to the default 100% value;
    // if outset is specified but width is not. we need to set width to the default 1 value;
    let valCopy = Object.assign({}, val);
    if (val.slice == null && (val.width != null || val.outset != null))
        valCopy.slice = "100%";
    if (val.width == null && val.outset != null)
        valCopy.width = 1;
    return (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.o2s)(valCopy, [
        "source",
        "slice",
        ["width", undefined, "/"],
        ["outset", undefined, "/"],
        "repeat",
        "mode"
    ]);
};
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[25] = (val) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    obj: [
        ["inset", (v) => v ? "inset" : ""],
        ["x", 3 /* Length */],
        ["y", 3 /* Length */],
        ["blur", 3 /* Length */],
        ["spread", 3 /* Length */],
        ["color", 11 /* Color */]
    ]
});
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[26] = (val) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    obj: 25 /* BoxShadowSingle */,
    item: 25 /* BoxShadowSingle */,
    sep: ","
});
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[19] = (val) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    num: 3 /* Length */,
    arr: arr => {
        let numbersProcessed = 0;
        return (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.a2s)(arr, item => typeof item === "number"
            ? (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(item, numbersProcessed++ ? 11 /* Color */ : 3 /* Length */)
            : (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(item));
    },
});
const gridTemplateAreasToString = (val) => 
// val can be array of strings or GridTemplateArea_Definition touples
(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
    arr: v => typeof v[0] === "string" ? (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.a2s)(v, 23 /* Quoted */) : createGridTemplateAreasFromDefinitions(v)
});
/**
 * Converts the array of GridTemplateArea_Definition objects to a string that is suitable for
 * the grid-template-areas format.
 */
const createGridTemplateAreasFromDefinitions = (defs) => {
    // calculate total size of the matrix from the areas' sizes
    let rowCount = 0, colCount = 0;
    for (let def of defs) {
        rowCount = Math.max(rowCount, def[3]);
        colCount = Math.max(colCount, def[4]);
    }
    if (rowCount === 0 || colCount === 0)
        return "";
    // create array of rows where every element is an array of cells
    let matrix = new Array(rowCount);
    for (let i = 0; i < rowCount; i++)
        matrix[i] = new Array(colCount);
    // go over definitions and fill the appropriate places in the cells with area names
    for (let def of defs) {
        let name = (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(def[0]);
        for (let i = def[1]; i <= def[3]; i++) {
            for (let j = def[2]; j <= def[4]; j++)
                matrix[i - 1][j - 1] = name;
        }
    }
    // go over our matrix and for every row create a quoted string. Since our cell arrays may be
    // sparse, use dot for the undefined cells
    let s = "";
    for (let i = 0; i < rowCount; i++) {
        let rowNames = [];
        for (let j = 0; j < rowCount; j++) {
            let name = matrix[i][j];
            rowNames.push(name ? name : ".");
        }
        s += `"${rowNames.join(" ")}"\n`;
    }
    return s;
};
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[22] = (v) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(v, {
    num: 3 /* Length */,
    arr: v => `[${(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.a2s)(v)}]`
});
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[21] = (v) => (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(v, {
    num: 3 /* Length */,
    item: 22 /* GridTrack */
});
_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[29] = (val) => {
    return (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(val, {
        obj: v => `url(#${v.name})`
    });
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Functions for handling Stylesets.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Converts the given style property to the CSS style string. Property name can be in either
 * dash or camel form.
 */
const sp2s = (propName, propVal) => {
    if (!propName)
        return "";
    // handle special properties "!" and "[]"
    let impFlag = false;
    if (typeof propVal === "object") {
        if ("!" in propVal) {
            // if the property value is an object with the "!" property, then the actual value is
            // the value of this property and we also need to set the "!important" flag.
            propVal = propVal["!"];
            impFlag = true;
        }
        else if ("[]" in propVal) {
            // If the property value is an object with the "[]" property, then we take the last
            // value from this property's array.
            let arr = propVal["[]"];
            if (!arr || arr.length === 0)
                return "";
            // recurse with the last value from the array
            return sp2s(propName, arr[arr.length - 1]);
        }
    }
    // try to find information object for the property - either defined in stylePropertyInfos or
    // matches a key in partialStylePropertyInfos
    let camelPropName = (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.dashToCamel)(propName);
    let options = stylePropertyInfos[camelPropName];
    if (!options) {
        for (let tuple of partialStylePropertyProcessedInfos) {
            if (tuple[0].test(camelPropName)) {
                options = tuple[1];
                break;
            }
        }
    }
    // convert the value to string based on the information object for the property (if defined)
    let stringValue = (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.v2s)(propVal, options);
    if (!stringValue)
        return "";
    if (impFlag)
        stringValue += " !important";
    return stringValue;
};
/** Converts the given styleset to its string representation */
const s2s = (styleset) => {
    if (!styleset)
        return "{}";
    let s = "{";
    // enumerate all styleset properties retrieving also vendor-prefixed variants
    forAllPropsInStylset(styleset, (name, value, isCustom, isPrefixed) => {
        s += isCustom
            ? `${name}:${value};`
            : `${isPrefixed ? "-" : ""}${(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.camelToDash)(name)}:${value};`;
    });
    return s + "}";
};
/**
 * Converts the given Styleset object into a StringStyleset object, where each Styleset's property
 * is converted to its string value.
 */
const s2ss = (styleset) => {
    // enumerate all styleset properties without retrieving vendor-prefixed variants
    let res = {};
    forAllPropsInStylset(styleset, (name, value) => { res[name] = value; });
    return res;
};
/**
 * Extracts name, template and string tuples from the given custom CSS property definition.
 * @param customVars
 */
const getVarsNTVs = (customVars) => {
    if (Array.isArray(customVars)) {
        let varName;
        let template;
        let value;
        if (customVars.length === 2) {
            varName = customVars[0].name;
            template = customVars[0].template;
            value = customVars[1];
        }
        else {
            varName = customVars[0];
            template = customVars[1];
            value = customVars[2];
        }
        if (!varName || !template)
            return [];
        if (!varName.startsWith("--"))
            varName = "--" + varName;
        return [[varName, template, sp2s(template, value)]];
    }
    else {
        let varRules = (0,_rules_RuleContainer__WEBPACK_IMPORTED_MODULE_1__.getVarsFromSD)(customVars);
        return varRules.map(varRule => [varRule.cssName, varRule.template,
            sp2s(varRule.template, varRule.getValue())]);
    }
};
/**
 * For each property - regular and custom - in the given styleset invokes the appropriate
 * function that gets the property name and the value converted to string.
 * @param styleset
 * @param callback
 * @param getPrefixedVariants Flag indicating whether we need to retrieve property variants with
 * vendor prefixes
 */
const forAllPropsInStylset = (styleset, callback) => {
    for (let propName in styleset) {
        // special handling of the "--" property, which is an array where each item is
        // a two-item or three-item array
        if (propName === "--") {
            let customVars = styleset[propName];
            for (let customVar of customVars) {
                if (!customVar)
                    continue;
                // in each tuple, the first element is var name, the second is template property and
                // the third is the value;
                let ntvs = getVarsNTVs(customVar);
                for (let ntv of ntvs)
                    callback(ntv[0], ntv[2], true, false);
            }
        }
        else {
            let propVal = styleset[propName];
            if (propVal == null)
                continue;
            else {
                // check whether the property contains an array of values behind the object with
                // the "[]" property. If not, convert the single value to an array, so that we can
                // iterate over it.
                let propArray = propVal["[]"];
                if (!propArray)
                    propArray = [propVal];
                for (let propVal of propArray) {
                    // get the string representation of the property value
                    let propString = sp2s(propName, propVal);
                    if (!propString)
                        continue;
                    // get vendor-prefixed variants
                    let variants = getPrefixVariants(propName, propString);
                    if (variants) {
                        for (let variant of variants)
                            callback(variant[0], variant[1], false, variant[0] !== propName);
                    }
                    // invoke the callback for the originally found prop name and with (perhaps updated)
                    // value
                    callback(propName, propString, false, false);
                }
            }
        }
    }
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Registry of CSS properties that specifies how their values should be converted to strings.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
const s_registerSP = (name, toStringFunc) => name in stylePropertyInfos ? false : (stylePropertyInfos[name] = toStringFunc, true);
/**
 * Map of property names to the V2SOptions objects describing custom actions necessary to
 * convert the property value to the CSS-compliant string.
 */
const stylePropertyInfos = {
    animation: {
        any: { obj: [
                ["duration", 5 /* Time */],
                "func",
                ["delay", 5 /* Time */],
                ["count", 1 /* Number */],
                "direction",
                "mode",
                "state",
                "name"
            ] },
        sep: ",",
    },
    animationIterationCount: 15 /* OneOrManyWithComma */,
    animationFillMode: 15 /* OneOrManyWithComma */,
    animationName: 15 /* OneOrManyWithComma */,
    animationPlayState: 15 /* OneOrManyWithComma */,
    background: {
        num: 11 /* Color */,
        any: {
            num: 11 /* Color */,
            obj: [
                ["color", 11 /* Color */],
                "image",
                ["position", 8 /* Position */],
                ["size", 13 /* MultiLengthWithSpace */, "/"],
                "repeat",
                "attachment",
                "origin",
                "clip"
            ]
        },
        sep: ",",
    },
    backgroundAttachment: 15 /* OneOrManyWithComma */,
    backgroundBlendMode: 15 /* OneOrManyWithComma */,
    backgroundClip: 15 /* OneOrManyWithComma */,
    backgroundImage: 15 /* OneOrManyWithComma */,
    backgroundOrigin: 15 /* OneOrManyWithComma */,
    backgroundRepeat: 15 /* OneOrManyWithComma */,
    backgroundSize: {
        num: 3 /* Length */,
        item: { any: 3 /* Length */ },
        sep: ","
    },
    baselineShift: 3 /* Length */,
    blockSize: 3 /* Length */,
    borderImage: {
        obj: borderImageToString,
    },
    borderRadius: 20 /* BorderRadius */,
    borderSpacing: 13 /* MultiLengthWithSpace */,
    bottom: 3 /* Length */,
    boxShadow: 26 /* BoxShadow */,
    clip: {
        arr: v => `rect(${_Utils__WEBPACK_IMPORTED_MODULE_0__.wkf[13](v)}`
    },
    columnGap: 3 /* Length */,
    columnRule: 19 /* Border */,
    content: {
        str: 23 /* Quoted */,
        item: 23 /* Quoted */
    },
    cursor: 15 /* OneOrManyWithComma */,
    fill: 11 /* Color */,
    fillOpacity: 2 /* Percent */,
    flex: {
        num: 3 /* Length */,
        arr: {
            3: [1 /* Number */, 1 /* Number */, 3 /* Length */]
        }
    },
    flexBasis: 3 /* Length */,
    font: {
        item: 3 /* Length */,
        obj: [
            ["style", 24 /* FontStyle */],
            "variant",
            "weight",
            "stretch",
            ["size", 3 /* Length */],
            ["lineHeight", undefined, "/"],
            "family"
        ]
    },
    fontSize: 3 /* Length */,
    fontStretch: 2 /* Percent */,
    fontStyle: 24 /* FontStyle */,
    gap: 13 /* MultiLengthWithSpace */,
    gridColumnGap: 3 /* Length */,
    gridGap: 13 /* MultiLengthWithSpace */,
    gridRowGap: 3 /* Length */,
    gridArea: 16 /* OneOrManyWithSlash */,
    gridAutoColumns: 21 /* GridAxis */,
    gridAutoRows: 21 /* GridAxis */,
    gridColumn: 16 /* OneOrManyWithSlash */,
    gridRow: 16 /* OneOrManyWithSlash */,
    gridTemplateAreas: gridTemplateAreasToString,
    gridTemplateColumns: 21 /* GridAxis */,
    gridTemplateRows: 21 /* GridAxis */,
    height: 3 /* Length */,
    inlineSize: 3 /* Length */,
    left: 3 /* Length */,
    letterSpacing: 3 /* Length */,
    markerEnd: 29 /* Marker */,
    markerMid: 29 /* Marker */,
    markerStart: 29 /* Marker */,
    maskBorder: {
        obj: borderImageToString,
    },
    maskClip: 15 /* OneOrManyWithComma */,
    maskComposite: 15 /* OneOrManyWithComma */,
    maskImage: 15 /* OneOrManyWithComma */,
    maskMode: 15 /* OneOrManyWithComma */,
    maskOrigin: 15 /* OneOrManyWithComma */,
    maskRepeat: 15 /* OneOrManyWithComma */,
    maskSize: {
        num: 3 /* Length */,
        item: { any: 3 /* Length */ },
        sep: ","
    },
    offset: {
        obj: [
            ["position", 8 /* Position */],
            "path",
            ["distance", 3 /* Length */],
            ["rotate", { any: 4 /* Angle */ }],
            ["anchor", 8 /* Position */, "/"],
        ]
    },
    offsetAnchor: 8 /* Position */,
    offsetDistance: 3 /* Length */,
    offsetRotate: {
        any: 4 /* Angle */
    },
    outline: 19 /* Border */,
    outlineOffset: 3 /* Length */,
    perspective: 3 /* Length */,
    perspectiveOrigin: 13 /* MultiLengthWithSpace */,
    quotes: {
        item: {
            str: 23 /* Quoted */,
            item: 23 /* Quoted */,
        }
    },
    right: 3 /* Length */,
    rotate: {
        num: 4 /* Angle */,
        arr: {
            2: [0 /* Default */, 4 /* Angle */],
            any: [0 /* Default */, 0 /* Default */, 0 /* Default */, 4 /* Angle */],
        }
    },
    rowGap: 3 /* Length */,
    stroke: 11 /* Color */,
    textCombineUpright: {
        num: v => `digits ${v}`
    },
    textDecoration: {
        num: 11 /* Color */,
        obj: [
            "line",
            "style",
            ["color", 11 /* Color */],
            ["thickness", 3 /* Length */],
        ]
    },
    textDecorationThickness: 3 /* Length */,
    textEmphasis: 11 /* Color */,
    textIndent: 13 /* MultiLengthWithSpace */,
    textShadow: 26 /* BoxShadow */,
    textSizeAdjust: 2 /* Percent */,
    top: 3 /* Length */,
    transformOrigin: 13 /* MultiLengthWithSpace */,
    transition: {
        any: { obj: [
                ["property", _Utils__WEBPACK_IMPORTED_MODULE_0__.camelToDash],
                ["duration", 5 /* Time */],
                "func",
                ["delay", 5 /* Time */]
            ] },
        sep: ",",
    },
    translate: 13 /* MultiLengthWithSpace */,
    verticalAlign: 3 /* Length */,
    willChange: {
        str: _Utils__WEBPACK_IMPORTED_MODULE_0__.camelToDash
    },
    wordSpacing: 3 /* Length */,
    zoom: 2 /* Percent */,
    // properties for CSS syntax values
    "<number>#": 15 /* OneOrManyWithComma */,
    "<length>": 3 /* Length */,
    "<length>+": 13 /* MultiLengthWithSpace */,
    "<length>#": { any: 3 /* Length */, sep: "," },
    "<percentage>": 2 /* Percent */,
    "<percentage>+": { any: 2 /* Percent */ },
    "<percentage>#": { any: 2 /* Percent */, sep: "," },
    "<length-percentage>": 3 /* Length */,
    "<length-percentage>+": 13 /* MultiLengthWithSpace */,
    "<length-percentage>#": { any: 3 /* Length */, sep: "," },
    "<angle>": 4 /* Angle */,
    "<angle>+": { any: 4 /* Angle */ },
    "<angle>#": { any: 4 /* Angle */, sep: "," },
    "<time>": 5 /* Time */,
    "<time>+": { any: 5 /* Time */ },
    "<time>#": 14 /* MultiTimeWithComma */,
    "<resolution>": 6 /* Resolution */,
    "<resolution>+": { any: 6 /* Resolution */ },
    "<resolution>#": { any: 6 /* Resolution */, sep: "," },
    "<color>": 11 /* Color */,
    "<color>+": 30 /* Colors */,
    "<color>#": { any: 11 /* Color */, sep: "," },
    "<image>#": 15 /* OneOrManyWithComma */,
    "<custom-ident>#": 15 /* OneOrManyWithComma */,
    // special properties for IVarRule types
    "<string>": 23 /* Quoted */,
    "<frequency>": 7 /* Frequency */,
    "<size>": 3 /* Length */,
    "<point>": 13 /* MultiLengthWithSpace */,
    "<position>": 8 /* Position */,
    "<multi-position>": 12 /* MultiPosition */,
    "<radius>": 18 /* Radius */,
};
/**
 * Map of partial property names to the V2SOptions objects describing custom actions necessary to
 * convert the property value to the CSS-compliant string. This allows properties that have some
 * common pattern and common string serialization to not be listed individually in the
 * stylePropertyInfos object ssaving some space. The keys in this object are regular expressions.
 */
const partialStylePropertyInfos = {
    // most style properties that have "color" at the end have a single color value; however, some
    // allow multiple colors; therefore we specify the option as WKF.Colors (plural).
    "[C|c]olor$": 30 /* Colors */,
    // most style properties that have "width" at the end have a single length value; however, some
    // allow multiple length separated by spaces.
    "[W|w]idth$": 13 /* MultiLengthWithSpace */,
    "[M|m]argin": 13 /* MultiLengthWithSpace */,
    "[P|p]adding": 13 /* MultiLengthWithSpace */,
    "Radius$": 18 /* Radius */,
    "Position": 12 /* MultiPosition */,
    "border(?!Image)": 19 /* Border */,
    "^inset": 13 /* MultiLengthWithSpace */,
    "^max": 3 /* Length */,
    "^min": 3 /* Length */,
    "Delay$": 14 /* MultiTimeWithComma */,
    "Duration$": 14 /* MultiTimeWithComma */,
    "TimingFunction$": 15 /* OneOrManyWithComma */,
};
/**
 * Array of two element tuples which maps processed RegEx from `partialStylePropertyInfos` object
 * in the first element and the corresponding `V2SOptions` in the second. This is needed to only
 * create RegEx objects once for each key in `partialStylePropertyInfos` object;
 */
const partialStylePropertyProcessedInfos = [];
// fill `partialStylePropertyProcessedInfos` based on `partialStylePropertyInfos`
for (let key in partialStylePropertyInfos)
    partialStylePropertyProcessedInfos.push([new RegExp(key), partialStylePropertyInfos[key]]);
// Vendor prefixes with indexes from the VendorPrefix enumeration. The first one is only here to
// allow the first enumeration value to be 1 and not zero.
const vendorPrefixStrings = ["", "webkit", "moz", "ms"];
const getPrefixVariants = (name, value) => {
    let info = propPrefixInfos[name];
    if (!info)
        return null;
    if (typeof info === "string")
        return [[info, value]];
    if (typeof info === "number")
        return [[(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.dashToCamel)(`${vendorPrefixStrings[info]}-${name}`), value]];
    let variants = [];
    for (let item of info) {
        if (typeof item === "string")
            variants.push([item, value]);
        else if (typeof item === "number")
            variants.push([(0,_Utils__WEBPACK_IMPORTED_MODULE_0__.dashToCamel)(`${vendorPrefixStrings[item]}-${name}`), value]);
        else {
            let prefixString = vendorPrefixStrings[item.p];
            // determine whether the property name should be prefixed. Note that even if we decide
            // here that it should not be prefixed, it can change when we go over property values.
            let shouldPrefixProperty = !item.valsOnly;
            // if property values are defined, try to replace them with prefixed versions. Note that
            // this can also set the flag indicating that the property name should be prefixed too.
            let newPropValue = "";
            if (value && item.vals) {
                for (let valueInfo of item.vals) {
                    let valueToSearch = valueInfo.val;
                    if (value.indexOf(valueToSearch) < 0)
                        continue;
                    if (valueInfo.mode !== 2 /* PropertyOnly */) {
                        newPropValue = value.split(valueToSearch).join(valueInfo.alt ? valueInfo.alt : `-${prefixString}-${valueToSearch}`);
                        value = newPropValue;
                    }
                    if (valueInfo.mode !== 1 /* ValueOnly */)
                        shouldPrefixProperty = true;
                }
            }
            let newPropName = "";
            if (shouldPrefixProperty)
                newPropName = item.alt ? item.alt : (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.dashToCamel)(`${prefixString}-${name}`);
            if (newPropName || newPropValue)
                variants.push([newPropName || name, newPropValue || value]);
        }
    }
    return variants.length > 0 ? variants : null;
};
// Prefix information for size-like properties that accept "stretch" value
const sizePrefixInfos = [
    { p: 1 /* webkit */, valsOnly: true, vals: [{ val: "stretch", mode: 1 /* ValueOnly */, alt: "-webkit-fill-available" }] },
];
// Prefix information for properties that accept "cross-fade" and "image-set" functions (that is, images)
const imageFuncsPrefixInfo = {
    p: 1 /* webkit */, valsOnly: true, vals: [
        { val: "cross-fade", mode: 1 /* ValueOnly */ },
        { val: "image-set", mode: 1 /* ValueOnly */ }
    ]
};
const imageFuncsPrefixInfos = [imageFuncsPrefixInfo];
const propPrefixInfos = {
    appearance: [1 /* webkit */, 2 /* moz */],
    backgroundClip: [
        { p: 1 /* webkit */, valsOnly: true, vals: [{ val: "text", mode: 2 /* PropertyOnly */ }] }
    ],
    blockSize: sizePrefixInfos,
    boxDecorationBreak: 1 /* webkit */,
    background: imageFuncsPrefixInfos,
    backgroundImage: imageFuncsPrefixInfos,
    borderImage: imageFuncsPrefixInfos,
    borderImageSource: imageFuncsPrefixInfos,
    clipPath: 1 /* webkit */,
    colorAdjust: "webkitPrintColorAdjust",
    content: imageFuncsPrefixInfos,
    height: sizePrefixInfos,
    hyphens: [1 /* webkit */, 2 /* moz */, 3 /* ms */],
    initialLetter: 1 /* webkit */,
    inlineSize: sizePrefixInfos,
    lineClamp: 1 /* webkit */,
    mask: 1 /* webkit */,
    maskBorder: ["webkitMaskBoxImage", imageFuncsPrefixInfo],
    maskBorderOutset: "webkitMaskBoxImageOutset",
    maskBorderRepeat: "webkitMaskBoxImageRepeat",
    maskBorderSlice: "webkitMaskBoxImageSlice",
    maskBorderSource: "webkitMaskBoxImageSource",
    maskBorderWidth: "webkitMaskBoxImageWidth",
    maskClip: 1 /* webkit */,
    maskComposite: 1 /* webkit */,
    maskImage: [1 /* webkit */, imageFuncsPrefixInfo],
    maskMode: 1 /* webkit */,
    maskOrigin: 1 /* webkit */,
    maskPosition: 1 /* webkit */,
    maskRepeat: 1 /* webkit */,
    maskSize: 1 /* webkit */,
    maskType: 1 /* webkit */,
    maxBlockSize: sizePrefixInfos,
    maxHeight: sizePrefixInfos,
    maxInlineSize: sizePrefixInfos,
    maxWidth: sizePrefixInfos,
    minBlockSize: sizePrefixInfos,
    minHeight: sizePrefixInfos,
    minInlineSize: sizePrefixInfos,
    minWidth: sizePrefixInfos,
    shapeOutside: imageFuncsPrefixInfos,
    scrollbarColor: 1 /* webkit */,
    scrollbarWidth: 1 /* webkit */,
    textEmphasis: 1 /* webkit */,
    textEmphasisColor: 1 /* webkit */,
    textEmphasisPosition: 1 /* webkit */,
    textEmphasisStyle: 1 /* webkit */,
    textFillColor: 1 /* webkit */,
    textOrientation: 1 /* webkit */,
    textSizeAdjust: [1 /* webkit */, 2 /* moz */, 3 /* ms */],
    textStroke: 1 /* webkit */,
    textStrokeColor: 1 /* webkit */,
    textStrokeWidth: 1 /* webkit */,
    userSelect: [
        { p: 1 /* webkit */, vals: [{ val: "none", mode: 2 /* PropertyOnly */ }] }
    ],
    width: sizePrefixInfos,
};


/***/ }),

/***/ "./lib/impl/Utils.js":
/*!***************************!*\
  !*** ./lib/impl/Utils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dashToCamel": () => (/* binding */ dashToCamel),
/* harmony export */   "camelToDash": () => (/* binding */ camelToDash),
/* harmony export */   "symV2S": () => (/* binding */ symV2S),
/* harmony export */   "wkf": () => (/* binding */ wkf),
/* harmony export */   "v2s": () => (/* binding */ v2s),
/* harmony export */   "a2s": () => (/* binding */ a2s),
/* harmony export */   "t2s": () => (/* binding */ t2s),
/* harmony export */   "o2s": () => (/* binding */ o2s),
/* harmony export */   "mv2s": () => (/* binding */ mv2s),
/* harmony export */   "f2s": () => (/* binding */ f2s),
/* harmony export */   "tag2s": () => (/* binding */ tag2s),
/* harmony export */   "propSet2s": () => (/* binding */ propSet2s),
/* harmony export */   "fdo": () => (/* binding */ fdo),
/* harmony export */   "fdo2s": () => (/* binding */ fdo2s)
/* harmony export */ });
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Case conversions for property names.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Converts dashe-case to camelCase, e.g. font-size to fontSize.
 * @param dash
 */
const dashToCamel = (dash) => !dash ? dash : dash.replace(/-([a-zA-Z])/g, (x, $1) => $1.toUpperCase());
/**
 * Converts camelCase to dash-case, e.g. fontSize to font-size.
 * @param camel
 */
const camelToDash = (camel) => camel.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Conversion of values to strings.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Symbol under which a function is defined that converts an object to a string. We need a special
 * symbol because the standard method toString exists on every object and we only want some to
 * explicitly provide this support.
 */
const symV2S = Symbol();
/**
 * Array of well known conversion functions. Indexes are the identifier of well known functions
 * from the WellKnownFunc enumeration
 */
let wkf = new Array(31 /* Last */);
/**
 * Converts a value of an arbitrary type to a single string. The options parameter
 * can define how specific types are converted.
 */
const v2s = (val, options) => {
    // if options is not specified, do standard processing
    if (options == null) {
        if (typeof val === "string")
            return val;
        else if (Array.isArray(val))
            return a2s(val);
        else if (typeof val === "function")
            return v2s(val());
        else if (val == null)
            return "";
        else if (typeof val[symV2S] === "function")
            return val[symV2S]();
        else if (typeof val.fn === "string")
            return fdo2s(val);
        else
            return val.toString();
    }
    // do different things for different types of options
    if (typeof options == "number")
        return wkf[options] ? wkf[options](val) : "";
    else if (typeof options == "function")
        return options(val);
    else {
        // processing with options. For all types except null and string, if the type-specific
        // property is not defined, use options.any if defined.
        let newOptions = undefined;
        if (val == null)
            return options.nil ? typeof options.nil === "string" ? options.nil : options.nil(val) : "";
        else if (typeof val === "number")
            newOptions = options.num ?? options.any;
        else if (typeof val === "function")
            return v2s(val());
        else if (Array.isArray(val)) {
            if (val.length === 0)
                return "";
            else if (typeof options.arr === "object") // this can also be an array
                return t2s(val, options.arr, options.sep);
            else if (options.arr2 && Array.isArray(val[0]))
                newOptions = options.arr2;
            else if (options.arr)
                newOptions = options.arr;
            else
                return a2s(val, options.item ?? options.any ?? (options.recursive ? options : undefined), options.sep);
        }
        else if (typeof val === "object") {
            if (typeof val[symV2S] === "function")
                return val[symV2S]();
            else if (typeof val.fn === "string")
                return fdo2s(val);
            else if (options.obj || options.any) {
                if (Array.isArray(options.obj))
                    return o2s(val, options.obj, options.sep);
                else
                    newOptions = options.obj ?? options.any;
            }
            else
                return val.toString();
        }
        else if (typeof val === "string")
            newOptions = options.str ?? options.any;
        else if (typeof val === "boolean")
            return options.bool ? options.bool(val) : val.toString();
        else
            return "";
        return v2s(val, newOptions);
    }
};
wkf[0 /* Default */] = v2s;
wkf[15 /* OneOrManyWithComma */] = v => v2s(v, { sep: "," });
wkf[16 /* OneOrManyWithSlash */] = v => v2s(v, { sep: "/" });
wkf[23 /* Quoted */] = v => typeof v === "string" ? `"${v}"` : v2s(v);
/**
 * Converts the given array to a single string by converting every item using the given otions
 * and joining the results with the given delimiter.
 */
const a2s = (val, options, separator = " ") => !val || val.length === 0
    ? ""
    : val.map(v => v2s(v, options)).filter(v => !!v).join(separator);
/**
 * Converts the given array to a single string by converting every item using the given otions
 * and joining the results with the given delimiter.
 */
const t2s = (val, options, separator = " ") => {
    let v2sOptions = Array.isArray(options) ? options : (options[val.length] ?? options.any);
    if (!v2sOptions)
        return a2s(val, undefined, separator);
    let buf = [];
    for (let i = 0; i < v2sOptions.length; i++)
        buf.push(v2s(val[i], v2sOptions[i]));
    return buf.filter(v => !!v).join(separator);
};
/**
 * Converts properties of the given object to string by converting each property from the options
 * array and joining them using the given separator.
 * @param val Object to convert to string
 * @param options array of property names or tuples with property names, options and prefixes.
 * @param separator Separator character.
 * @param defaultOptions - V2SOptions for those properties in the "params" array that don't
 * define their own. This should be used in the case when all function parameters are of the
 * same type
 * @param defaultPrefix - prefix to use for those properties in the "params" array that don't
 * define their own prefix
 */
const o2s = (val, options, separator, defaultOptions, defaultPrefix) => {
    if (val == null)
        return "";
    let params = [];
    for (let nameOrTuple of options) {
        // get the name of the property in the value to be converted and the corresponding value;
        // if the properties value is not defined, skip it.
        let propName = typeof nameOrTuple === "string" ? nameOrTuple : nameOrTuple[0];
        let propVal = val[propName];
        if (propVal == null)
            continue;
        // check whether we have a prefix
        let prefix = typeof nameOrTuple === "string" ? defaultPrefix : nameOrTuple[2];
        if (prefix)
            params.push(prefix);
        params.push(v2s(propVal, typeof nameOrTuple === "string" ? defaultOptions : nameOrTuple[1]));
    }
    return params.filter(v => !!v).join(separator ?? " ");
};
/**
 * Converts the given array of values to a single string according to the specified options and
 * using the given separator. For each item in the array, the v2s function is called to convert
 * it to string.
 * @param values
 * @param separator
 */
const mv2s = (values, separator = " ") => {
    if (values == null || values.length === 0)
        return "";
    let arr = [];
    for (let item of values) {
        let val;
        let options;
        if (Array.isArray(item)) {
            val = item[0];
            options = item[1];
        }
        else
            val = item;
        if (val || (options && options.nil))
            arr.push(v2s(val, options));
    }
    return arr.filter(v => !!v).join(separator);
};
/**
 * Converts the given values as parameters to the given CSS function invocation.
 * @param name
 * @param values
 * @param separator
 */
const f2s = (name, values, separator = ",") => `${name}(${mv2s(values, separator)})`;
/**
 * The tag2s is a tag function helper that converts the template string with
 * parameters to a string using the given options object.
 */
const tag2s = (parts, params, options) => {
    // number of parameters is always 1 less than the number of string parts
    let paramsLen = params.length;
    if (paramsLen === 0)
        return parts[0];
    let s = "";
    for (let i = 0; i < paramsLen; i++)
        s += parts[i] + v2s(params[i], options);
    // add the last part
    return s + parts[paramsLen];
};
/**
 * Converts the given property set object to the CSS style string.
 */
const propSet2s = (val, infos, options) => v2s(val, {
    obj: v => {
        let propNames = Object.keys(v);
        if (propNames.length === 0)
            return "";
        let func = options?.propFunc ?? propInPropSet2s;
        let arr = propNames.map((propName) => {
            let dashPropName = camelToDash(propName);
            let camelPropName = dashToCamel(propName);
            return func(dashPropName, camelPropName, v[propName], infos[camelPropName]);
        });
        return (options?.prefix ?? "") + `${arr.join(options?.separator ?? ";")}` + (options?.suffix ?? "");
    }
});
// convert the value to string based on the information object for the property (if defined)
const propInPropSet2s = (dashName, camelName, val, options) => `${dashName}:${v2s(val, options)}`;
// This object is filled in in the XxxAPI files where the functions corresponding to CSS functions
// are defined.
const fdo = {};
/**
 * Converts the given function definition object to string. Conversion is performed according
 * to the type found in the "fdo" object for the property name equal to the "fn" property of
 * the given value. If no such property exist in the "fdo" object, all object's properties except
 * "fn" will be converted to strings using v2s and concatenated with comma.
 *
 * @param val Function definition object that has the "fn" property defining the function name.
 * @returns String representation of CSS function invocation.
 */
const fdo2s = (val) => {
    let options = fdo[val.fn];
    if (!options)
        return goOverProps(val);
    else if (typeof options === "number")
        return goOverProps(val, options);
    else if (typeof options === "function")
        return options(val);
    else if (Array.isArray(options))
        return `${val.fn}(${o2s(val, options, ",")})`;
    else {
        let fn = options.fn;
        fn = !fn ? val.fn : typeof fn === "string" ? fn : fn(val);
        return options.p
            ? `${fn}(${o2s(val, options.p, options.s ?? ",", options.do, options.dp)})`
            : options.f
                ? `${fn}(${options.f(val)})`
                : "";
    }
};
/**
 * Helper function that goes over the props of the given object except the "fn" property,
 * serializes all the props using the given options and concatenates them with the given
 * separator (comma by default).
 * @param val
 * @param options
 * @param sep
 * @returns
 */
const goOverProps = (val, options, sep) => {
    let buf = [];
    for (let p in val) {
        if (p !== "fn")
            buf.push(v2s(val[p], options));
    }
    return `${val.fn}(${buf.filter(v => !!v).join(sep ?? ",")})`;
};


/***/ }),

/***/ "./lib/rules/AnimationRule.js":
/*!************************************!*\
  !*** ./lib/rules/AnimationRule.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationRule": () => (/* binding */ AnimationRule)
/* harmony export */ });
/* harmony import */ var _Rule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Rule */ "./lib/rules/Rule.js");
/* harmony import */ var _StyleRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StyleRules */ "./lib/rules/StyleRules.js");
/* harmony import */ var _impl_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/Utils */ "./lib/impl/Utils.js");



/**
 * The AnimationRule class describes a @keyframes CSS rule.
 */
class AnimationRule extends _Rule__WEBPACK_IMPORTED_MODULE_0__.Rule {
    constructor(sd, frames, nameOverride) {
        super(sd);
        if (frames)
            this.frameRules = frames.map(frame => new AnimationFrameRule(sd, frame[0], frame[1]));
        this.nameOverride = nameOverride;
    }
    // This function is called to convert an object to a string. Animation rule returns its name.
    toString() { return this.name; }
    // Processes the given rule.
    process(ruleName) {
        super.process(ruleName);
        this.name = this.rc.getScopedName(ruleName, this.nameOverride);
        for (let keyframeRule of this.frameRules)
            keyframeRule.process(null);
    }
    // Inserts this rule into the given parent rule or stylesheet.
    insert(ruleBag) {
        if (!this.frameRules)
            return;
        let mimcssRule = ruleBag.addKeyframes(this.name);
        if (mimcssRule) {
            this.cssRule = mimcssRule?.cssRule;
            for (let frameRule of this.frameRules) {
                // although the cssRule in the frame is typed as CSSStyleRule, we know that in
                // practice, it is of the CSSKeyframeRule type.
                frameRule.cssRule = mimcssRule.addFrame(frameRule.toCss())?.cssRule;
            }
        }
    }
}
/**
 * The AnimationFrameRule class represents a single keyframe clause in the animation rule.
 */
class AnimationFrameRule extends _StyleRules__WEBPACK_IMPORTED_MODULE_1__.StyleRule {
    constructor(sd, waypoint, styleset) {
        super(sd, styleset);
        this.waypoint = waypoint;
    }
    // Returns the selector part of the style rule.
    getSel() {
        return (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.v2s)(this.waypoint, { any: 2 /* Percent */, sep: "," });
    }
    /**
     * SOM keyframe rule. Although the cssRule in the frame is typed as CSSStyleRule, we know that
     * in practice, it is of the CSSKeyframeRule type.
     */
    get cssKeyframeRule() { return this.cssRule; }
    ;
}


/***/ }),

/***/ "./lib/rules/CounterRules.js":
/*!***********************************!*\
  !*** ./lib/rules/CounterRules.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CounterRule": () => (/* binding */ CounterRule),
/* harmony export */   "CounterStyleRule": () => (/* binding */ CounterStyleRule)
/* harmony export */ });
/* harmony import */ var _impl_MiscImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/MiscImpl */ "./lib/impl/MiscImpl.js");
/* harmony import */ var _Rule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rule */ "./lib/rules/Rule.js");


/**
 * The CounterRule class describes a named counter definition. Use this rule to create
 * counter objects that can be used in counter-increment, counter-reset and counter-set style
 * properties. No CSS rule is created for counters - they are needed only to provide type-safe
 * counter definitions.
 */
class CounterRule extends _Rule__WEBPACK_IMPORTED_MODULE_1__.RuleLike {
    constructor(sd, nameOverride) {
        super(sd);
        this.nameOverride = nameOverride;
    }
    // This function is used when the object is specified as a value of a style property.
    // We return the counter name.
    toString() { return this.name; }
    // Processes the given rule.
    process(ruleName) {
        this.name = this.rc.getScopedName(ruleName, this.nameOverride);
    }
    /** Name of the counter */
    get counterName() { return this.name; }
}
/**
 * The CounterStyleRule class describes the CSS @nounter-style at-rule.
 */
class CounterStyleRule extends _Rule__WEBPACK_IMPORTED_MODULE_1__.Rule {
    constructor(sd, counterStyleset, nameOverride) {
        super(sd);
        this.counterStyleset = counterStyleset ?? {};
        this.nameOverride = nameOverride;
    }
    // This function is used when the object is specified as a value in a style property or in
    // another counter style rule. We return the counter style name.
    toString() { return this.name; }
    // Processes the given rule.
    process(ruleName) {
        this.name = this.rc.getScopedName(ruleName, this.nameOverride);
    }
    // Inserts this rule into the given parent rule or stylesheet.
    insert(ruleBag) {
        let ruleText = `@counter-style ${this.name} {${(0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_0__.counterStyleset2s)(this.counterStyleset)}}`;
        this.cssRule = ruleBag.add(ruleText)?.cssRule;
    }
}


/***/ }),

/***/ "./lib/rules/GridRules.js":
/*!********************************!*\
  !*** ./lib/rules/GridRules.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GridLineRule": () => (/* binding */ GridLineRule),
/* harmony export */   "GridAreaRule": () => (/* binding */ GridAreaRule)
/* harmony export */ });
/* harmony import */ var _Rule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Rule */ "./lib/rules/Rule.js");

/**
 * The GridLineRule class describes a named grid line definition. No CSS rule is created for grid
 * lines - they are needed only to provide type-safe grid line definitions.
 */
class GridLineRule extends _Rule__WEBPACK_IMPORTED_MODULE_0__.RuleLike {
    // if the nameOverride is an area rule object, the isStartEndOrNone flag is always defined
    // because this constructor can only be invoked for the start and end lines of the GridAreaRule
    // object.
    constructor(sd, nameOverride, isStartEndOrNone) {
        super(sd);
        this.nameOverride = nameOverride;
        this.isStartEndOrNone = isStartEndOrNone;
    }
    // This function is used when the object is specified as a value of a style property.
    // We return the line name.
    toString() { return this.name; }
    // Processes the given rule.
    process(ruleName) {
        super.process(ruleName);
        let name;
        let areaName;
        let isStartEndOrNone = this.isStartEndOrNone;
        let nameOverride = this.nameOverride;
        if (nameOverride instanceof GridLineRule) {
            name = nameOverride.name;
            this.isStartEndOrNone = nameOverride.isStartEndOrNone;
            areaName = nameOverride.areaName;
        }
        else if (nameOverride instanceof GridAreaRule) {
            name = nameOverride.name + (isStartEndOrNone === true ? "-start" : isStartEndOrNone === false ? "-end" : "");
            areaName = nameOverride.name;
        }
        else {
            name = this.rc.getScopedName(ruleName, nameOverride);
            // if the obtained name doesn't have "-start" or "-end" but the isStartEndOrNone flag is
            // defined (that is, it is either start or end line), we need to append the suffix. If the
            // obtained name already has "-start" or "-end" and the isStartEndOrNone flag is not
            // defined, we set this flag to either true or false depending on the suffix. Note that if
            // the nameOverride is an area rule object, the isStartEndOrNone flag is always defined.
            let nameHasStart = name.endsWith("-start");
            let nameHasEnd = name.endsWith("-end");
            if (nameHasStart) {
                this.isStartEndOrNone = true;
                areaName = name.substr(0, name.length - 6 /* "-start".length */);
            }
            else if (nameHasEnd) {
                isStartEndOrNone = false;
                areaName = name.substr(0, name.length - 4 /* "-end".length */);
            }
            else if (isStartEndOrNone === true) {
                areaName = name;
                name += "-start";
            }
            else if (isStartEndOrNone === false) {
                areaName = name;
                name += "-end";
            }
        }
        this.name = name;
        this.areaName = areaName;
        this.isStartEndOrNone = isStartEndOrNone;
    }
}
/**
 * The GridAreaRule class describes a named grid area definition. No CSS rule is created for grid
 * areas - they are needed only to provide type-safe grid area definitions.
 */
class GridAreaRule extends _Rule__WEBPACK_IMPORTED_MODULE_0__.RuleLike {
    // if the nameOverride is an area rule object, the isStartEndOrNone flag is always defined
    // because this constructor can only be invoked for the start and end lines of the GridAreaRule
    // object.
    constructor(sd, nameOverride) {
        super(sd);
        this.nameOverride = nameOverride;
        // create line rules
        this.startLine = new GridLineRule(sd, this, true);
        this.endLine = new GridLineRule(sd, this, false);
    }
    // This function is used when the object is specified as a value of a style property.
    // We return the area name.
    toString() { return this.name; }
    // Processes the given rule.
    process(ruleName) {
        super.process(ruleName);
        this.name = this.rc.getScopedName(ruleName, this.nameOverride);
        // process line rules
        this.startLine.process(null);
        this.endLine.process(null);
    }
}


/***/ }),

/***/ "./lib/rules/GroupRules.js":
/*!*********************************!*\
  !*** ./lib/rules/GroupRules.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroupRule": () => (/* binding */ GroupRule),
/* harmony export */   "SupportsRule": () => (/* binding */ SupportsRule),
/* harmony export */   "MediaRule": () => (/* binding */ MediaRule)
/* harmony export */ });
/* harmony import */ var _RuleContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RuleContainer */ "./lib/rules/RuleContainer.js");
/* harmony import */ var _Rule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rule */ "./lib/rules/Rule.js");
/* harmony import */ var _impl_MiscImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/MiscImpl */ "./lib/impl/MiscImpl.js");



/**
 * The GroupRule class serves as a base class for all grouping CSS rules.
 */
class GroupRule extends _Rule__WEBPACK_IMPORTED_MODULE_1__.Rule {
    constructor(sd, rn, instOrClass) {
        super(sd);
        this.rn = rn;
        this.instOrClass = instOrClass;
    }
    // Processes the given rule.
    process(ruleName) {
        super.process(ruleName);
        // container to which our grouping rule belongs becomes the parent container for the
        // style definition instance
        this.gsd = (0,_RuleContainer__WEBPACK_IMPORTED_MODULE_0__.processSD)(this.instOrClass, this.sd);
        this.grc = this.gsd[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC];
    }
    // Inserts this rule into the given parent rule or stylesheet.
    insert(ruleBag) {
        let mimcssRule = ruleBag.addGroup(`@${this.rn} ${this.condition}`);
        if (mimcssRule) {
            this.cssRule = mimcssRule?.cssRule;
            // insert sub-rules
            this.grc.insert(mimcssRule);
        }
    }
    // Condition of this grouping rule.
    get condition() {
        if (!this._cond)
            this._cond = this.getCond();
        return this._cond ?? "";
    }
    // Clers the CSS rule object.
    clear() {
        super.clear();
        // clear sub-rules
        this.grc.clear();
    }
}
/**
 * The SupportRule class describes a CSS @supports rule.
 */
class SupportsRule extends GroupRule {
    constructor(sd, statement, instOrClass) {
        super(sd, "supports", instOrClass);
        this.stmt = statement;
    }
    /** Flag indicated whether the browser supports this rule's query */
    get isSupported() {
        return window && CSS.supports(this.condition);
    }
    // Returns the condition string of this grouping rule.
    getCond() {
        return (0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_2__.supports2s)(this.stmt);
    }
}
/**
 * The MediaRule class describes a CSS @media rule.
 */
class MediaRule extends GroupRule {
    constructor(sd, statement, instOrClass) {
        super(sd, "media", instOrClass);
        this.stmt = statement;
    }
    // Returns the condition string of this grouping rule.
    getCond() {
        return (0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_2__.media2s)(this.stmt);
    }
    /**
     * Returns `MediaQueryList` object that allows programmatic checking whether the document matches
     * the media statement and also allows listening to its `change` event.
     */
    get queryList() {
        return window && matchMedia(this.condition);
    }
}


/***/ }),

/***/ "./lib/rules/MiscRules.js":
/*!********************************!*\
  !*** ./lib/rules/MiscRules.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImportRule": () => (/* binding */ ImportRule),
/* harmony export */   "NamespaceRule": () => (/* binding */ NamespaceRule),
/* harmony export */   "FontFaceRule": () => (/* binding */ FontFaceRule),
/* harmony export */   "ClassNameRule": () => (/* binding */ ClassNameRule)
/* harmony export */ });
/* harmony import */ var _impl_MiscImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/MiscImpl */ "./lib/impl/MiscImpl.js");
/* harmony import */ var _Rule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rule */ "./lib/rules/Rule.js");
/* harmony import */ var _impl_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/Utils */ "./lib/impl/Utils.js");




/**
 * The MiscRule class serves as a base class for simple rules.
 */
class MiscRule extends _Rule__WEBPACK_IMPORTED_MODULE_1__.Rule {
    constructor(sd) {
        super(sd);
    }
    // Inserts this rule into the given parent rule or stylesheet.
    insert(ruleBag) {
        this.cssRule = ruleBag.add(this.toCss())?.cssRule;
    }
}
/**
 * The ImportRule class describes a CSS @import rule.
 */
class ImportRule extends MiscRule {
    constructor(sd, url, mediaStatement, supportsStatement) {
        super(sd);
        this.url = url;
        this.mediaStatement = mediaStatement;
        this.supportsStatement = supportsStatement;
    }
    // Returns CSS string for this rule.
    toCss() {
        let url;
        if (this.url.startsWith("url") || this.url.startsWith("\"") || this.url.startsWith("'"))
            url = this.url;
        else
            url = `url(${this.url})`;
        let supportsQueryString = !this.supportsStatement ? "" : (0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_0__.supports2s)(this.supportsStatement);
        if (supportsQueryString && !supportsQueryString.startsWith("supports"))
            supportsQueryString = `supports( ${supportsQueryString} )`;
        let mediaQueryString = !this.mediaStatement ? "" : (0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_0__.media2s)(this.mediaStatement);
        return `@import ${url} ${supportsQueryString} ${mediaQueryString}`;
    }
}
/**
 * The NamespaceRule class describes a CSS @namespace rule.
 */
class NamespaceRule extends MiscRule {
    constructor(sd, namespace, prefix) {
        super(sd);
        this.namespace = namespace;
        this.prefix = prefix;
    }
    // Returns CSS string for this rule.
    toCss() {
        let url = this.namespace.startsWith("url(") ? this.namespace : `url(${this.namespace})`;
        return `@namespace ${this.prefix ? this.prefix : ""} ${url}`;
    }
}
/**
 * The FontFaceRule class describes a @font-face CSS rule.
 */
class FontFaceRule extends MiscRule {
    constructor(sd, fontface) {
        super(sd);
        this.fontface = fontface;
    }
    // Returns CSS string for this rule.
    toCss() {
        return `@font-face {${(0,_impl_MiscImpl__WEBPACK_IMPORTED_MODULE_0__.fontFace2s)(this.fontface)}}`;
    }
}
/**
 * The PageRule class represents the CSS @page rule.
 */
class ClassNameRule extends _Rule__WEBPACK_IMPORTED_MODULE_1__.RuleLike {
    constructor(sd, classes) {
        super(sd);
        this.classes = classes;
    }
    // This function is used when the object is specified as a value of a style property.
    // We return the CSS class name.
    [_impl_Utils__WEBPACK_IMPORTED_MODULE_2__.symV2S]() { return this.cssName; }
    /** CSS rule selector string */
    get selectorText() {
        return this.cssName;
    }
    // Processes the given rule.
    process(ruleName) {
        this.name = this.classes.map(v => typeof v === "string" ? v : v.name).join(" ");
        this.cssName = "." + this.name.replace(/ /g, ".");
    }
    // Implementation of the toString method returns the combined name of the classes (without
    // the CSS prefixes).
    toString() {
        return this.name;
    }
}


/***/ }),

/***/ "./lib/rules/Rule.js":
/*!***************************!*\
  !*** ./lib/rules/Rule.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "symRC": () => (/* binding */ symRC),
/* harmony export */   "RuleLike": () => (/* binding */ RuleLike),
/* harmony export */   "Rule": () => (/* binding */ Rule)
/* harmony export */ });
/**
 * Symbol on the style definition instance pointing to the RuleContainer object that is
 * responsible for processing rules.
 */
const symRC = Symbol("rc");
/**
 * The RuleLike abstract class is a base for all "rules" defined in the style definition classes -
 * whether they correspond to real CSS rules (and thus derive from the Rule class) or not (such as
 * counters, grid lines and grid areas).
 */
class RuleLike {
    constructor(sd) {
        this.sd = sd;
        this.rc = sd[symRC];
    }
    /**
     * Processes the rule assigned to the property with the given name. Property name can be null
     * for rules not assigned to a property; e.g. dependent rules defined in the CombinedStyleset.
     */
    process(propName) { }
}
/**
 * The Rule class is used as a base class for all rules.
 */
class Rule extends RuleLike {
    // Clers the CSS rule object. This method is called when the style definition class, to which
    // this rule belongs, is deactivated.
    clear() { this.cssRule = null; }
}


/***/ }),

/***/ "./lib/rules/RuleContainer.js":
/*!************************************!*\
  !*** ./lib/rules/RuleContainer.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RuleContainer": () => (/* binding */ RuleContainer),
/* harmony export */   "configNames": () => (/* binding */ configNames),
/* harmony export */   "processSD": () => (/* binding */ processSD),
/* harmony export */   "getVarsFromSD": () => (/* binding */ getVarsFromSD),
/* harmony export */   "activateSD": () => (/* binding */ activateSD),
/* harmony export */   "deactivateSD": () => (/* binding */ deactivateSD),
/* harmony export */   "embeddedDecorator": () => (/* binding */ embeddedDecorator),
/* harmony export */   "getCurrentTheme": () => (/* binding */ getCurrentTheme),
/* harmony export */   "s_startSSR": () => (/* binding */ s_startSSR),
/* harmony export */   "s_stopSSR": () => (/* binding */ s_stopSSR),
/* harmony export */   "s_startHydration": () => (/* binding */ s_startHydration),
/* harmony export */   "s_stopHydration": () => (/* binding */ s_stopHydration)
/* harmony export */ });
/* harmony import */ var _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/RuleAPI */ "./lib/api/RuleAPI.js");
/* harmony import */ var _Rule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rule */ "./lib/rules/Rule.js");
/* harmony import */ var _VarRule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VarRule */ "./lib/rules/VarRule.js");
/* harmony import */ var _MiscRules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MiscRules */ "./lib/rules/MiscRules.js");
/* harmony import */ var _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../impl/SchedulingImpl */ "./lib/impl/SchedulingImpl.js");





/** Symbol on the style definition class pointing to the singleton instance. */
const symInstance = Symbol("sd");
/**
 * Symbol on the style definition instance pointing to the StyleDefinition class for which
 * this instance was created.
 */
const symClass = Symbol("sdc");
/**
 * Flag indicating that a rule container is created not directly (as for styled components)
 * but from the processClass function. This variable is set to true before instantiating the
 * style definition class (and thus the RuleContainer object) and is set back to false after
 * it is used in the RuleContainer constructor.
 */
let s_processingStyleDefinitionClass = false;
/**
 * The RuleContainer class is a shadow structure that accompanies every processed style definition
 * object. Since StyleDefinition class is an exported class visible to developers, we don't want
 * to have a lot of functionality in it. The RuleContainer object is linked to the StyleDefinition
 * object via the [symContainer] symbol. It contains all the functionality for parsing rule
 * definitions, name assignment and activation/deactivation.
 */
class RuleContainer {
    constructor(sd) {
        // List of references to other style definitions creaed via the $use function.
        this.refs = [];
        // List of @import rules
        this.imports = [];
        // List of @namespace rules
        this.namespaces = [];
        // List of custom variable rules.
        this.vars = [];
        // List of rules that are not imports, namespaces, custom vars, references or grouping rules.
        this.rules = [];
        // Reference count of activation requests.
        this.refCount = 0;
        this.sd = sd;
        this.sdc = sd.constructor;
        this.psd = sd.$parent;
        this.ec = this.sdc[symEmbeddingContainer];
        // get parent and top level containers
        if (this.psd)
            this.pc = this.psd[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC];
        // set the name for our container. For optimized name generation mode, generate unique
        // name. Otherwise, if the container is created for a class from the
        // processClass function, then the flag s_processingStyleDefinitionClass is defined
        // and the name is generated depending on the current generation method. If this flag is
        // false, that means that the container is created from a direct "new" call on the style
        // definition class and the name is generated uniquely.
        if (s_nameGeneratonMethod === 2 /* Optimized */)
            this.name = generateUniqueName();
        else {
            let className = this.sdc.name;
            let name = className ? "" : generateUniqueName();
            if (s_processingStyleDefinitionClass) {
                s_processingStyleDefinitionClass = false;
                name = !className
                    ? generateUniqueName()
                    : s_nameGeneratonMethod === 1 /* UniqueScoped */
                        ? generateUniqueName(className + "_")
                        : className;
            }
            else {
                name = generateUniqueName();
                if (className)
                    name += "_" + className;
            }
            // if our container has parent container, prefix our name with the upper one
            this.name = this.pc ? `${this.pc.name}_${name}` : name;
        }
    }
    // ProxyHandler method, which virtualizes all RuleLike properties
    set(t, p, v, r) {
        if (typeof p !== "string" || typeof v !== "object")
            t[p] = v;
        else {
            // we only virtualize rule-like objects. We don't virtualize arrays because there
            // is no trap for isArray() method, which we use later in the processProperty()
            // method. We also don't virtualize primitive types because there is no trap for
            // typeof operation (needed when converting values to strings). We also don't
            // virtualize style definition instances (results of $use() method invocations).
            let isRuleLike = v instanceof _Rule__WEBPACK_IMPORTED_MODULE_1__.RuleLike;
            if (p in t) {
                if (isRuleLike)
                    v.process(p);
                t[p] = v;
            }
            else {
                if (isRuleLike)
                    virtualize(t, p);
                t[p] = v;
                this.processProperty(p, t[p]);
            }
        }
        return true;
    }
    // Processes the properties of the style definition instance. This creates names for classes,
    // IDs, animations and custom variables.
    processProperty(propName, propVal) {
        if (propVal instanceof _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.StyleDefinition)
            this.refs.push(propVal);
        // else if (propVal instanceof Array)
        else if (Array.isArray(propVal)) {
            // loop over array elements and recursively process them. Index becomes part of the
            // rule name.
            let i = 0;
            for (let item of propVal)
                this.processProperty(`${propName}_${i++}`, item);
        }
        else {
            if (propVal instanceof _Rule__WEBPACK_IMPORTED_MODULE_1__.RuleLike)
                propVal.process(propName);
            if (propVal instanceof _VarRule__WEBPACK_IMPORTED_MODULE_2__.VarRule)
                this.vars.push(propVal);
            else if (propVal instanceof _MiscRules__WEBPACK_IMPORTED_MODULE_3__.ImportRule)
                this.imports.push(propVal);
            else if (propVal instanceof _MiscRules__WEBPACK_IMPORTED_MODULE_3__.NamespaceRule)
                this.namespaces.push(propVal);
            else if (propVal instanceof _Rule__WEBPACK_IMPORTED_MODULE_1__.Rule)
                this.rules.push(propVal);
        }
    }
    // Sets the given value for the custom CSS roperty with the given name.
    setVarValue(name, value, important, schedulerType) {
        if (this.varRootRule)
            (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_4__.getActivator)(schedulerType).updateStyle(this.varRootRule, name, value, important);
    }
    /**
     * Generates a globally unique CSS name for the given rule name unless this rule name already
     * exists either in a base class or in the chain of parent grouping rules.
     */
    getScopedName(ruleName, nameOverride) {
        if (nameOverride)
            return typeof nameOverride === "string" ? nameOverride : nameOverride.name;
        else if (!ruleName)
            return generateUniqueName();
        else if (ruleName in this.sd && "name" in this.sd[ruleName])
            // this handles cases when a "named" rule already exists in the style definition;
            // for example when a derived class overrides the value of a base class
            return this.sd[ruleName].name;
        else {
            // find out if there is a rule with this name defined in a stylesheet instance created
            // for a class from the prototype chain of the style definition class. Otherwise, if
            // there is a parent container, recurse to it; otherwise, generate the name.
            let existingName = findNameForRuleInPrototypeChain(this.sdc, ruleName);
            if (existingName)
                return existingName;
            else if (this.pc)
                return this.pc.getScopedName(ruleName);
            else
                return generateName(this.name, ruleName);
        }
    }
    /** Inserts all rules defined in this container to either the style sheet or grouping rule. */
    insert(ruleBag) {
        // insert @import and @namespace rules as they must be before other rules. If the parent is a grouping
        // rule, don't insert @import and @namespace rules at all
        if (!this.psd) {
            this.imports.forEach(rule => rule.insert(ruleBag));
            this.namespaces.forEach(rule => rule.insert(ruleBag));
        }
        // activate referenced style definitions
        for (let ref of this.refs)
            ref[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC].activate(this.elm);
        // insert our custom variables into the ":root" rule
        if (this.vars.length > 0)
            this.varRootRule = ruleBag.add(getRootCssForVars(this.vars))?.cssRule;
        // insert all other rules
        this.rules.forEach(rule => rule.insert(ruleBag));
    }
    /** Clears all CSS rule objects defined in this container. */
    clear() {
        // import and namespace rules can only exist in the top-level style definition class
        if (!this.psd) {
            this.imports.forEach(rule => rule.clear());
            this.namespaces.forEach(rule => rule.clear());
        }
        this.varRootRule = undefined;
        this.rules.forEach(rule => rule.clear());
        // deactivate imported stylesheets
        for (let ref of this.refs)
            ref[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC].deactivate();
    }
    /**
     * Inserts this stylesheet into DOM.
     *
     * @param insertBefore Optional HTML element before which the new '<style>' element should be
     * inserted. If not specified, the new element will be inserted as the last element under the
     * '<head>' element.
     */
    activate(insertBefore) {
        // activation context may not exist if the code is executing on a server and SSR has
        // not been started
        if (!s_activationContext || ++this.refCount > 1)
            return;
/////////////////////
        let timeLabel = `Activating style definition '${this.name}'`;
        console.time(timeLabel);
//////////////////
        // only the top-level not-embedded style definitions create the `<style>` element
        if (!this.pc) {
            if (this.ec)
                this.elm = this.ec.elm;
            else {
                // themes are inserted before the special placeholder element, which is created
                // at the top of the '<head>' element
                if (this.sd instanceof _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.ThemeDefinition)
                    insertBefore = s_activationContext?.getThemePlaceholder();
                this.elm = s_activationContext?.createStyleElm(this.name, insertBefore);
            }
        }
        else
            this.elm = this.pc.elm;
        // if this is a theme class activation, check whether the instance is set as the current
        // one for its theme base class. If no, then deactivate the theme instance currently set
        // as active. In any case, set our new instance as the currently active one. We ignore
        // theme declaration classes - those that directly derive from ThemeDefinition
        if (isThemeImplementation(this.sd)) {
            let themeClass = this.sdc;
            if (themeClass) {
                let currInstance = getCurrentTheme(themeClass);
                if (currInstance && currInstance !== this.sd) {
                    let currContainer = currInstance[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC];
                    currContainer.deactivate();
                }
                setCurrentTheme(this.sd);
            }
        }
        this.insert(this.elm);
/////////////////////
        console.timeEnd(timeLabel);
//////////////////
    }
    /** Removes this stylesheet from DOM. */
    deactivate() {
        // guard from extra deactivate calls
        if (this.refCount === 0) {
/////////////////////////
            console.error(`Extra call to deactivate() for style definition class '${this.name}'`);
//////////////////////
            return;
        }
        if (--this.refCount > 0)
            return;
/////////////////////
        let timeLabel = `Deactivating style definition '${this.name}'`;
        console.time(timeLabel);
//////////////////
        this.clear();
        // only the top-level not-embedded style defiitions create the `<style>` element
        if (!this.psd && !this.ec)
            this.elm.remove();
        this.elm = undefined;
        // if this is a theme class deactivation, check whether the instance is set as the current
        // one for its theme base class. If yes, remove it as the currently active one.
        if (isThemeImplementation(this.sd)) {
            let themeClass = this.sdc;
            if (themeClass) {
                let currInstance = getCurrentTheme(themeClass);
                if (currInstance === this.sd)
                    removeCurrentTheme(themeClass);
            }
        }
/////////////////////
        console.timeEnd(timeLabel);
//////////////////
    }
    getVars() { return this.vars; }
}
const getRootCssForVars = (vars) => `:root {${vars.map(varObj => varObj.toCss()).filter(v => !!v).join(";")}}`;
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Name generation
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Sets the flag indicating whether to use optimized (short) rule names. If yes, the names
 * will be created by appending a unique number to the given prefix. If the prefix is not
 * specified, the standard prefix "n" will be used.
 * @param enable
 * @param prefix
 */
const configNames = (method, prefix) => {
    s_nameGeneratonMethod = method;
    s_uniqueStyleNamesPrefix = prefix ? prefix : "n";
};
/**
 * Flag indicating whether to use optimized names for style elements (classes,  animations, etc.)
 * By default this flag is true in the Release build of the library and false in the Debug build.
 */
let s_nameGeneratonMethod = 2 /* Optimized */;
/////////////
s_nameGeneratonMethod = 3 /* Scoped */;
//////////
/**
 * Prefix to use when generating unique style names. If undefined, a standard prefix "n" will be used.
 */
let s_uniqueStyleNamesPrefix = "n";
/** Next number to use when generating unique identifiers. */
let s_nextUniqueID = 1;
/**
 * Generates name to use for the given rule from the given style sheet.
 */
const generateName = (sheetName, ruleName) => {
    switch (s_nameGeneratonMethod) {
        case 1 /* UniqueScoped */: return `${sheetName}_${ruleName}_${s_nextUniqueID++}`;
        case 2 /* Optimized */: return generateUniqueName();
        case 3 /* Scoped */: return `${sheetName}_${ruleName}`;
    }
};
/**
 * Generates a unique name, which can be used either for style element's ID or or class,
 * identifier or animation name. Names are generated using a simple incrementing number.
 */
const generateUniqueName = (prefix) => (prefix ? prefix : s_uniqueStyleNamesPrefix) + s_nextUniqueID++;
// Looks up a property with the given name in the prototype chain of the given style definition
// class. If found and if the property is a rule, then returns the name assigned for it.
const findNameForRuleInPrototypeChain = (definitionClass, ruleName) => {
    if (!definitionClass)
        return null;
    // loop over prototypes
    for (let baseClass = Object.getPrototypeOf(definitionClass); baseClass !== _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.StyleDefinition && baseClass !== _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.ThemeDefinition; baseClass = Object.getPrototypeOf(baseClass)) {
        // check if the base class already has an associated instance; if yes, check whether
        // it has a property with the given rule name. If yes, then use this rule's already
        // generated name (if exists).
        if (baseClass.hasOwnProperty(symInstance)) {
            let baseInst = baseClass[symInstance];
            if (baseInst && baseInst[ruleName] != null && "name" in baseInst[ruleName])
                return baseInst[ruleName].name;
        }
    }
    return null;
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Processing functions
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Processes the given stylesheet definition class or instance and assigns names to its rules.
 * If the parameter is a style definition class we check whether there is an instance already
 * created for it as a class will have only a single associated instane no matter how many times
 * this function is called.
 *
 * If the parameter is an object (an instance of the StyleDefinition class) then we check whether
 * it has already been processed. If yes, we just return it back; if no, we assign new unique names
 * to its rules.
 */
const processSD = (instOrClass, parent) => 
// instOrClass has type "object" if it is an instance and "function" if it is a class
typeof instOrClass === "object" ? instOrClass : processClass(instOrClass, parent);
/**
 * Processes the given style definition class by creating its instance and associating a
 * rule container object with it. The class will be associated with the instance using a
 * Symbol property. The parent parameter is a reference to the parent style defiition
 * object or null if the given class is itself a top-level class (that is, is not a class
 * that defines rules within nested grouping rules).
 */
const processClass = (sdc, parent) => {
    // check whether this definition class is already associated with an instance. Note that we
    // use hasOwnProperty() because otherwise, this could return instance for the base style
    // definition class.
    if (sdc.hasOwnProperty(symInstance))
        return sdc[symInstance];
    // recursively process all base classes so that rule names are generated. We don't activate styles
    // for these classes because derived classes will have all the rules from all the base classes
    // as their own and so these rules will be activated as part of the derived class.
    let baseClass = Object.getPrototypeOf(sdc);
    if (baseClass !== _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.StyleDefinition && baseClass !== _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.ThemeDefinition)
        processClass(baseClass, parent);
    try {
        // create the instance of the definition class
        s_processingStyleDefinitionClass = true;
        let sd = new sdc(parent);
        // associate the definition class with the created definition instance
        sdc[symInstance] = sd;
        sd[symClass] = sdc;
        return sd;
    }
    finally {
        s_processingStyleDefinitionClass = false;
    }
};
/**
 * Processes the given style definition instance and assigns names to its rules. If the
 * instance has already been processed, we do nothing; otherwise, we assign new unique names
 * to its rules.
 */
const getVarsFromSD = (instOrClass) => processSD(instOrClass)[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC].getVars();
/**
 * Activates the given style definition and inserts all its rules into DOM. If the input object is
 * not a style definition but a style definition class, obtain style definition by calling the $use
 * function. Note that each style definition object maintains a reference counter of how many times
 * it was activated and deactivated. The rules are inserted to DOM only when this reference counter
 * goes from 0 to 1.
 */
const activateSD = (instance) => {
    let ruleContainer = instance[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC];
    if (!ruleContainer)
        return;
    // if this container has an embedding container, activate the embedding container; otherwise,
    // activate the rule container itself.
    (ruleContainer.ec ?? ruleContainer).activate();
};
/**
 * Deactivates the given style definition by removing its rules from DOM. Note that each style
 * definition object maintains a reference counter of how many times it was activated and
 * deactivated. The rules are removed from DOM only when this reference counter goes from 1 to 0.
 */
const deactivateSD = (instance) => {
    let ruleContainer = instance[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC];
    if (!ruleContainer)
        return;
    // if this container has an embedding container, deactivate the embedding container; otherwise,
    // deactivate the rule container itself.
    (ruleContainer.ec ?? ruleContainer).deactivate();
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Embedding
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/** Symbol used in style definition classes to point to an embedding container */
let symEmbeddingContainer = Symbol("ec");
/**
 * The EmbeddingContainer class contains multiple style definition classes, which are activated and
 * deactivated together under a single `<style>` node. Style definition classes are added to the
 * embedding container by being decorated with the `@embedded` decorator.
 */
class EmbeddingContainer {
    constructor(id) {
        this.id = id;
        this.refCount = 0;
        this.sdcs = new Set();
    }
    /**
     * Adds the given style definition class to the list of embedded classes. If the container is
     * currently activated, the class will be activated too.
     */
    add(cls) {
        // add the class to our container
        this.sdcs.add(cls);
        // set the symbol on our class to point to the container
        cls[symEmbeddingContainer] = this;
        // if the embedding container is currently activated, we need to activate the added
        // style definition class using the currently default activator
        if (this.refCount > 0)
            (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_4__.getActivator)().activate(processClass(cls));
    }
    /**
     * Inserts all stylesheets in this container into DOM.
     */
    activate() {
        // only if this is the first activation call, create the style element and insert all
        // rules from all the style definition classes.
        if (++this.refCount === 1) {
            this.elm = s_activationContext?.createStyleElm(this.id);
            for (let cls of this.sdcs) {
                // definition class may be already associated with an instance; if not -
                // process it now.
                let instance = cls.hasOwnProperty(symInstance)
                    ? cls[symInstance]
                    : processClass(cls);
                instance[_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC].activate();
            }
        }
    }
    /**
     * Removes all stylesheets in this container into DOM.
     */
    deactivate() {
        // only if this is the last deactivation call, remove the style element and remove all
        // rules from all the style definition classes.
        if (--this.refCount === 0) {
            this.elm?.remove();
            this.elm = undefined;
            for (let cls of this.sdcs) {
                // definition class must be already associated with an instance
                if (!cls.hasOwnProperty(symInstance))
                    continue;
                cls[symInstance][_Rule__WEBPACK_IMPORTED_MODULE_1__.symRC].deactivate();
            }
        }
    }
}
/**
 * Map of category names to embedding container objects containing style definitions for the given
 * category.
 */
let s_embeddingContainers = new Map();
/**
 * Decorator function for style definition classes that will be embedded into an embedding
 * container for the given category. All style definitions for a given category will be activated
 * and deactivated together and their rules will be inserted into a single `<style>` element.
 */
const embeddedDecorator = (category, target) => {
    // check whether we already have container for this category; if not, add it
    let ec = s_embeddingContainers.get(category);
    if (!ec) {
        // generate unique ID for our container, which will be the ID of the `<style>` element
        let id = `${category}_${s_nextUniqueID++}`;
        ec = new EmbeddingContainer(id);
        s_embeddingContainers.set(category, ec);
    }
    // add our class to the container
    ec.add(target);
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Rule virtualization.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Decorator that should be applied to a rule if it is defined and used in the same style
 * definition class but then is overridden in a derived style definition class. The problem
 * this solves is this: when a rule is defined in a base class and then overridden in a derived
 * class, when an instance of the derived class is created, the rules that are created in the
 * base and derived classes see different values of the rule. Since our rules are defined as
 * part of the constructor, the base class constructor's code only sees the value assigned in that
 * code. If another rule in the base class uses this first rule, this value is remembered.
 *
 * The `virtualize` function creates a Proxy object for the rule with the handler that keeps the
 * most recent value set. Thus when a rule in the base class's constructor uses a virtualized
 * rule, the first rule will see the overridden value of the rule when accessed in the
 * post-constructor code.
 */
const virtualize = (target, name) => {
    // we may directly create the handler and the proxy because this function will be invoked
    // for every StyleDefinition instance (as opposed to once per class).
    let handler = new VirtHandler();
    handler.x = new Proxy({}, handler);
    Object.defineProperty(target, name, {
        enumerable: true,
        // return the proxy object
        get() { return handler.x; },
        // set the new value to the handler so that it will use it from now on.
        set(v) { handler.t = v; }
    });
};
/**
 * Handler for the proxy created by the `virtualize` function. It keeps the current value of a
 * rule so that the most recent value is used whenever the proxy is accessed.
 */
class VirtHandler {
    // interesting things happen in the get method
    get(t, p, r) {
        // if our value is null or undefined and the requested property is a well-known symbol
        // toPrimitive we return a function that returns either null or undefined. This will help
        // if our proxy either participate in an arithmetic expression or is combined with a
        // string.
        if (this.t == null && p === Symbol.toPrimitive)
            return () => this.t;
        // get the value of the request property; if the value is null or undefined, an exception
        // will be thrown - which is expected.
        let pv = Reflect.get(this.t, p, r);
        // if the requested property is a function, bind the original method to the target object
        return typeof pv === "function" ? pv.bind(this.t) : pv;
    }
    // the rest of the methods mostly delegate the calls to the latest target instead of the
    // original target. In some cases, we check whether the target is null or undefined so that
    // we don't throw exceptions where we can avoid it.
    getPrototypeOf(t) { return this.t == null ? null : Reflect.getPrototypeOf(this.t); }
    // setPrototypeOf(t: any, v: any): boolean
    //     { return Reflect.setPrototypeOf( this.t, v); }
    // isExtensible(t: any): boolean
    //     { return this.t == null ? false : Reflect.isExtensible( this.t); }
    // preventExtensions(t: any): boolean
    //     { return this.t == null ? false : Reflect.preventExtensions( this.t); }
    getOwnPropertyDescriptor(t, p) { return Reflect.getOwnPropertyDescriptor(this.t, p); }
    has(t, p) { return this.t == null ? false : Reflect.has(this.t, p); }
    set(t, p, v, r) { return Reflect.set(this.t, p, v, r); }
    deleteProperty(t, p) { return Reflect.deleteProperty(this.t, p); }
    defineProperty(t, p, attrs) { return Reflect.defineProperty(this.t, p, attrs); }
    ownKeys(t) { return Reflect.ownKeys(this.t); }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Theming support.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Map of them definition classes to the instances that are currently active for these classes.
 */
let s_themeInstanceMap = new Map();
/**
 * Determines whether this style definition class is an implementatin of a theme - that is, it is
 * an instance of ThemeDeclaration class but doesn't derive directly from ThemeDeclaration. It can
 * serve as type guard.
 *
 * @param sd Style definition instance
 * @returns boolean
 */
const isThemeImplementation = (sd) => sd instanceof _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.ThemeDefinition && Object.getPrototypeOf(sd[symClass]) !== _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.ThemeDefinition;
/**
 * Returns the theme base class for the given theme class.
 * @param themeClass ThemeDefinition-derived class
 * @returns Theme base class.
 */
const getThemeBaseClass = (themeClass) => {
    // make sure we are not passed the ThemeDefinition class itself
    if (themeClass === _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.ThemeDefinition)
        return undefined;
    // loop over prototypes until we find the class, which derives directly from ThemeDefinition.
    // This is the theme base class
    let themeBaseClass = themeClass;
    for (let cls = Object.getPrototypeOf(themeClass); cls !== _api_RuleAPI__WEBPACK_IMPORTED_MODULE_0__.ThemeDefinition; cls = Object.getPrototypeOf(cls))
        themeBaseClass = cls;
    return themeBaseClass;
};
/**
 * Returns the theme definition object, which is currently activated for the given theme.
 * @param themeClass Theme definition class
 * @returns Theme instance, which is currently activated for the given theme class or null
 * if no istance is currently activated.
 */
const getCurrentTheme = (themeClass) => {
    let themeBaseClass = getThemeBaseClass(themeClass);
    return themeBaseClass && s_themeInstanceMap.get(themeBaseClass);
};
/**
 * Sets the theme definition object as the instance that is currently activated for the
 * corresponding base theme class.
 * @param theme theme instance to set as current for the corresponding base theme class
 */
const setCurrentTheme = (theme) => {
    let themeBaseClass = getThemeBaseClass(theme.constructor);
    themeBaseClass && s_themeInstanceMap.set(themeBaseClass, theme);
};
/**
 * Removes a theme definition object set as the instance that is currently activated for the
 * corresponding base theme class.
 * @param themeClass Theme definition class
 */
const removeCurrentTheme = (themeClass) => {
    let themeBaseClass = getThemeBaseClass(themeClass);
    themeBaseClass && s_themeInstanceMap.delete(themeBaseClass);
};
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Client-side rendering implementation
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Style element that divides between theme and non-theme style elements. This is needed to always
 * place theme styles before the non-theme ones.
 */
let s_clientThemePlaceholderElm = undefined;
/**
 * ID of the style element that divides between theme and non-theme style elements.
 */
const s_themePlaceholderElmID = "__mimcss_themes__";
// Inserts the given rule into the given parent grouping rule or stylesheet.
const addDomRule = (ruleText, parent) => {
    try {
        let index = parent.insertRule(ruleText, parent.cssRules.length);
        return parent.cssRules[index];
    }
    catch (x) {
        console.error(`Cannot add CSS rule '${ruleText}'`, x);
        return null;
    }
};
/**
 * Client-side implementation of activation context.
 */
class ClientActivationContext {
    getThemePlaceholder() {
        if (!s_clientThemePlaceholderElm) {
            let domElm = document.createElement("style");
            domElm.id = s_themePlaceholderElmID;
            document.head.insertBefore(domElm, document.head.firstElementChild);
            s_clientThemePlaceholderElm = new ClientMimcssStyleElement(domElm);
        }
        return s_clientThemePlaceholderElm;
    }
    createStyleElm(id, insertBefore) {
        let domElm = document.createElement("style");
        domElm.id = id;
        document.head.insertBefore(domElm, insertBefore ? insertBefore.domElm : null);
        return new ClientMimcssStyleElement(domElm);
    }
}
/**
 * Client-side implementation of an object to which rules can be added.
 */
class ClientMimcssRuleBag {
    constructor(domRuleBag) {
        this.domRuleBag = domRuleBag;
    }
    add(ruleText) {
        let cssRule = addDomRule(ruleText, this.domRuleBag);
        return cssRule ? new ClientMimcssRule(cssRule) : null;
    }
    addGroup(selector) {
        let cssRule = addDomRule(`${selector} {}`, this.domRuleBag);
        return cssRule ? new ClientMimcssGroupingRule(cssRule) : null;
    }
    addKeyframes(name) {
        let cssRule = addDomRule(`@keyframes ${name} {}`, this.domRuleBag);
        return cssRule ? new ClientMimcssKeyframesRule(cssRule) : null;
    }
}
/**
 * Client-side implementation of a style element.
 */
class ClientMimcssStyleElement extends ClientMimcssRuleBag {
    constructor(domElm) {
        super(domElm.sheet);
        this.domElm = domElm;
    }
    remove() {
        this.domElm?.remove();
    }
}
/**
 * Client-side implementation of a base interface for CSS rule.
 */
class ClientMimcssRule {
    constructor(cssRule) {
        this.cssRule = cssRule;
    }
}
/**
 * Client-side implementation of a grouping rule to which rules can be added.
 */
class ClientMimcssGroupingRule extends ClientMimcssRuleBag {
    constructor(cssRule) {
        super(cssRule);
        this.cssRule = cssRule;
    }
}
/**
 * Client-side implementation of keyframes rule to which frames can be added.
 */
class ClientMimcssKeyframesRule extends ClientMimcssRule {
    addFrame(frameText) {
        try {
            this.cssRule.appendRule(frameText);
            let cssFrameRule = this.cssRule.cssRules.item(this.cssRule.cssRules.length - 1);
            return cssFrameRule ? new ClientMimcssRule(cssFrameRule) : null;
        }
        catch (x) {
            console.error("Cannot add CSS keyframe rule", x);
            return null;
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Hydration-side rendering implementation
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Hydration-side implementation of activation context.
 */
class HydrationActivationContext {
    getThemePlaceholder() {
        if (!s_clientThemePlaceholderElm) {
            let domElm = document.getElementById(s_themePlaceholderElmID);
            if (domElm)
                s_clientThemePlaceholderElm = new HydrationMimcssStyleElement(domElm);
            else
                throw new Error("Theme placeholder element was requested but was not found");
        }
        return s_clientThemePlaceholderElm;
    }
    createStyleElm(id, insertBefore) {
        let domElm = document.getElementById(id);
        if (domElm)
            return new HydrationMimcssStyleElement(domElm);
        else
            throw new Error(`Style element with ID '${id}' was requested but was not found`);
    }
}
/**
 * Hydration-side implementation of an object to which rules can be added.
 */
class HydrationMimcssRuleBag {
    constructor(domRuleBag) {
        this.domRuleBag = domRuleBag;
        // index of the rule in the list of rules under the stylesheet or grouping rule
        this.index = 0;
    }
    add(ruleText) {
        let cssRule = this.domRuleBag.cssRules[this.index++];
        return cssRule ? new HydrationMimcssRule(cssRule) : null;
    }
    addGroup(selector) {
        let cssRule = this.domRuleBag.cssRules[this.index++];
        return cssRule ? new HydrationMimcssGroupingRule(cssRule) : null;
    }
    addKeyframes(name) {
        let cssRule = this.domRuleBag.cssRules[this.index++];
        return cssRule ? new HydrationMimcssKeyframesRule(cssRule) : null;
    }
}
/**
 * Hydration-side implementation of a style element.
 */
class HydrationMimcssStyleElement extends HydrationMimcssRuleBag {
    constructor(domElm) {
        super(domElm.sheet);
        this.domElm = domElm;
    }
    remove() {
        this.domElm?.remove();
    }
}
/**
 * Hydration-side implementation of a base interface for CSS rule.
 */
class HydrationMimcssRule {
    constructor(cssRule) {
        this.cssRule = cssRule;
    }
}
/**
 * Hydration-side implementation of a grouping rule to which rules can be added.
 */
class HydrationMimcssGroupingRule extends HydrationMimcssRuleBag {
    constructor(cssRule) {
        super(cssRule);
        this.cssRule = cssRule;
    }
}
/**
 * Hydration-side implementation of keyframes rule to which frames can be added.
 */
class HydrationMimcssKeyframesRule extends HydrationMimcssRule {
    constructor() {
        super(...arguments);
        // index of the frame in the list of frames under the keyframes rule
        this.index = 0;
    }
    addFrame(frameText) {
        let cssFrameRule = this.cssRule.cssRules[this.index++];
        return cssFrameRule ? new HydrationMimcssRule(cssFrameRule) : null;
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Server-side rendering implementation
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Server-side implementation of activation context.
 */
class ServerActivationContext {
    constructor() {
        this.elms = [];
    }
    getThemePlaceholder() {
        if (!this.themeElm)
            this.elms.splice(0, 0, this.themeElm = new ServerMimcssStyleElement(s_themePlaceholderElmID));
        return this.themeElm;
    }
    createStyleElm(id, insertBefore) {
        let elm = new ServerMimcssStyleElement(id);
        if (insertBefore)
            this.elms.splice(this.elms.indexOf(insertBefore), 0, elm);
        else
            this.elms.push(elm);
        return elm;
    }
    serialize() {
        return this.elms.map(elm => elm.serialize()).join("");
    }
}
/**
 * Server-side implementation of an object to which rules can be added.
 */
class ServerMimcssRuleBag {
    constructor() {
        this.rules = [];
    }
    add(ruleText) {
        let rule = new ServerMimcssRule(ruleText);
        this.rules.push(rule);
        return rule;
    }
    addGroup(selector) {
        let rule = new ServerMimcssGroupingRule(selector);
        this.rules.push(rule);
        return rule;
    }
    addKeyframes(name) {
        let rule = new ServerMimcssKeyframesRule(name);
        this.rules.push(rule);
        return rule;
    }
    serialize() {
        return this.rules.map(rule => rule.serialize()).join("");
    }
}
/**
 * Server-side implementation of a style element.
 */
class ServerMimcssStyleElement extends ServerMimcssRuleBag {
    constructor(id) {
        super();
        this.id = id;
        this.domElm = null;
    }
    remove() { }
    serialize() {
        return `<style id="${this.id}">${super.serialize()}</style>`;
    }
}
/**
 * Server-side implementation of a base interface for CSS rule.
 */
class ServerMimcssRule {
    constructor(ruleText) {
        this.ruleText = ruleText;
        this.cssRule = null;
    }
    serialize() {
        return this.ruleText;
    }
}
/**
 * Server-side implementation of a grouping rule to which rules can be added.
 */
class ServerMimcssGroupingRule extends ServerMimcssRuleBag {
    constructor(selector) {
        super();
        this.selector = selector;
        this.cssRule = null;
    }
    serialize() {
        return `${this.selector}{${super.serialize()}}`;
    }
}
/**
 * Server-side implementation of a keyframes rule to which frames can be added.
 */
class ServerMimcssKeyframesRule {
    constructor(name) {
        this.name = name;
        this.cssRule = null;
        this.frames = [];
    }
    addFrame(frameText) {
        let frame = new ServerMimcssRule(frameText);
        this.frames.push(frame);
        return frame;
    }
    serialize() {
        return `@keyframes ${this.name}{${this.frames.map(frame => frame.serialize()).join("")}}`;
    }
}
/**
 * Client activation context. In the client environment, it is ClientActivationContext instance;
 * in the server environment, it is undefined.
 */
const s_clientActivationContext = document?.head ? new ClientActivationContext() : undefined;
/**
 * Activation context to use. In the client environment, it is by default ClientActivationContext
 * but can be changed (temporarily) to HydrationActivationContext. In the server environment, it
 * is by default undefined, but can be changed to ServerActivationContext.
 */
let s_activationContext = s_clientActivationContext;
/**
 * Scheduler type remembered upon starting SSR or hydration process. This will be used to restore
 * the sceduler when SSR or hydration process is stopped.
 */
let s_rememberedSchedulerType = 0;
/**
 * Sets server-side activation context. Throws an error if non-default activation context is
 * already set.
 */
const s_startSSR = () => {
    if (s_activationContext !== s_clientActivationContext)
        throw new Error("SSR already started");
    else {
        s_activationContext = new ServerActivationContext();
        s_rememberedSchedulerType = (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_4__.setDefaultScheduler)(1 /* Sync */);
    }
};
/**
 * Stops server-side activation functionality and returns a string with serialized styles. The
 * string should be added to the `<head>` element using `insertAdjacentHTML()` method.
 * Throws an error if SSR has not been started.
 * @returns String containing serialized styles
 */
const s_stopSSR = () => {
    if (!s_activationContext || !(s_activationContext instanceof ServerActivationContext))
        throw new Error("SSR not started");
    else {
        // restore scheduler type existed before we started SSR
        (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_4__.setDefaultScheduler)(s_rememberedSchedulerType);
        s_rememberedSchedulerType = 0;
        let s = s_activationContext.serialize();
        s_activationContext = s_clientActivationContext;
        return s;
    }
};
/**
 * Sets hydration activation context. Throws an error if non-default activation context is
 * already set.
 */
const s_startHydration = () => {
    if (s_activationContext !== s_clientActivationContext)
        throw new Error("Hydration already started");
    else {
        s_activationContext = new HydrationActivationContext();
        s_rememberedSchedulerType = (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_4__.setDefaultScheduler)(1 /* Sync */);
    }
};
/**
 * Stops hydration activation functionality and restore the default activation context.
 * @returns String containing serialized styles
 */
const s_stopHydration = () => {
    if (!s_activationContext || !(s_activationContext instanceof HydrationActivationContext))
        throw new Error("Hydration not started");
    else {
        // restore scheduler type existed before we started SSR
        (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_4__.setDefaultScheduler)(s_rememberedSchedulerType);
        s_rememberedSchedulerType = 0;
        s_activationContext = s_clientActivationContext;
    }
};


/***/ }),

/***/ "./lib/rules/StyleRules.js":
/*!*********************************!*\
  !*** ./lib/rules/StyleRules.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleRule": () => (/* binding */ StyleRule),
/* harmony export */   "AbstractRule": () => (/* binding */ AbstractRule),
/* harmony export */   "ClassRule": () => (/* binding */ ClassRule),
/* harmony export */   "IDRule": () => (/* binding */ IDRule),
/* harmony export */   "SelectorRule": () => (/* binding */ SelectorRule),
/* harmony export */   "PageRule": () => (/* binding */ PageRule)
/* harmony export */ });
/* harmony import */ var _Rule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Rule */ "./lib/rules/Rule.js");
/* harmony import */ var _impl_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../impl/Utils */ "./lib/impl/Utils.js");
/* harmony import */ var _impl_StyleImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/StyleImpl */ "./lib/impl/StyleImpl.js");
/* harmony import */ var _impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../impl/SchedulingImpl */ "./lib/impl/SchedulingImpl.js");
/* harmony import */ var _impl_CoreImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../impl/CoreImpl */ "./lib/impl/CoreImpl.js");





/**
 * The StyleRule class is used as a base class for rules that contain a style rule. This class
 * implements the parsing of the CombinedStyleset object.
 */
class StyleRule extends _Rule__WEBPACK_IMPORTED_MODULE_0__.Rule {
    // The styleset can be an CombinedStyleset for many rules; however, for some it is just
    // of the Styleset type.
    constructor(sd, inputStyleset) {
        super(sd);
        // Selector string cached after it is first obtained. Needed to not invoke getSelectorString
        // multiple times in the presence of dependent rules.
        this._sel = null;
        this.styleset = {};
        this.dependentRules = {};
        if (inputStyleset) {
            if (Array.isArray(inputStyleset))
                inputStyleset.forEach(v => this.parse(sd, v));
            else
                this.parse(sd, inputStyleset);
        }
    }
    /**
     * This function allows the object to particpate in "v2s" serialization. Whenever the
     * StyleRule-derived object is encountered by the `v2s` function, the rule's selector will be
     * used.
     */
    [_impl_Utils__WEBPACK_IMPORTED_MODULE_1__.symV2S]() { return this.selectorText; }
    /**
     * The `toString()` method is used whenever there is the need to convert the object to string.
     * In `v2s` context, the `toString()` method has lower precedence than the `symV2S` property
     * and this allows the `toString()` to be overridden in derived classes without changing the
     * `syV2S` functionality. For example, the `toString()` for class and ID rules will return
     * the clas and ID names (without the prefixes) respectively, while the basic (this)
     * implementation returns the selector text.
     */
    toString() { return this.selectorText; }
    /**
     * Goes over properties in the given styleset and parses them into proper styleset, set of
     * important properties and dependent rules.
     */
    parse(sd, inputStyleset) {
        for (let propName in inputStyleset) {
            let propVal = inputStyleset[propName];
            if (propVal == null)
                continue;
            else if (propName === "+") {
                // the value is a single StyleRule or an array of StyleRules to copy properties from
                let parentRules = propVal instanceof StyleRule ? [propVal] : propVal;
                for (let parent of parentRules) {
                    mergeStylesets(this.styleset, parent.styleset);
                    this.copyDepRules(parent);
                }
            }
            else if (propName === "--")
                mergeCustomProps(this.styleset, propVal);
            else if (propName.startsWith(":")) {
                // if the value is an array, then this is an array of tuples representing
                // parameterised pseudo entities where the first element is the parameter value
                // (string) and the second the CombinedStyleset. Otherwise, the value is just a
                // CombinedStyleset.
                if (Array.isArray(propVal)) {
                    this.dependentRules[propName] = propVal.map((tuple) => new DepRule(sd, propName, tuple[0], tuple[1], this));
                }
                else
                    this.dependentRules[propName] = new DepRule(sd, "&" + propName, undefined, propVal, this);
            }
            else if (propName.includes("&")) {
                // value is an array of two-element tuples with selector and styleset
                let tuples = propVal;
                if (tuples.length > 0) {
                    this.dependentRules[propName] = tuples.map(tuple => {
                        let newSelector = propName === "&"
                            ? tuple[0]
                            : propName.startsWith("&")
                                ? [propName, tuple[0]]
                                : [tuple[0], propName];
                        return new DepRule(sd, newSelector, undefined, tuple[1], this);
                    });
                }
            }
            else if (this.parseSP(propName, propVal)) {
                // this is a regular CSS property: copy the property value to our internal styleset
                mergePropValues(this.styleset, propName, propVal);
            }
        }
    }
    // Processes the given rule.
    process(ruleName) {
        this.forEachDepRule((depRule) => depRule.process(null));
    }
    // Converts the rule to CSS string representing the rule.
    toCss() {
        return this.selectorText + (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_2__.s2s)(this.styleset);
    }
    // Inserts this rule into the given parent rule or stylesheet.
    insert(ruleBag) {
        if (Object.keys(this.styleset).length > 0)
            this.cssRule = ruleBag.add(this.toCss())?.cssRule;
        // insert dependent rules under the same parent
        this.forEachDepRule((depRule) => depRule.insert(ruleBag));
    }
    // Clers the CSS rule object.
    clear() {
        super.clear();
        // clear dependent rules
        this.forEachDepRule((depRule) => depRule.clear());
    }
    // Invoke the given function for each of the dependent rules.
    forEachDepRule(func) {
        for (let propName in this.dependentRules) {
            let propVal = this.dependentRules[propName];
            if (Array.isArray(propVal))
                for (let depRule of propVal)
                    func(depRule);
            else
                func(propVal);
        }
    }
    /** CSS rule selector string */
    get selectorText() {
        if (this._sel == null)
            this._sel = this.getSel();
        return this._sel;
    }
    // Copies dependent rules from another style rule object.
    copyDepRules(src) {
        let srsDepRules = src.dependentRules;
        let thisDepRules = this.dependentRules;
        for (let propName in srsDepRules) {
            let srcRuleOrArr = srsDepRules[propName];
            if (Array.isArray(srcRuleOrArr)) {
                if (srcRuleOrArr.length > 0) {
                    let thisArr = thisDepRules[propName];
                    if (!thisArr)
                        thisDepRules[propName] = thisArr = [];
                    for (let srcDepRule of srcRuleOrArr)
                        thisArr.push(srcDepRule.clone(this));
                }
            }
            else
                thisDepRules[propName] = srcRuleOrArr.clone(this);
        }
    }
    // Allows the derived classes to process style properties that the StyleRule doesn't know about.
    // If false is returned, the property with the given name will not be added to the styleset.
    parseSP(propName, propVal) { return true; }
    /**
     * Adds/replaces the value of the given CSS property in this rule.
     * @param name Name of the CSS property.
     * @param value New value of the CSS property.
     * @param important Flag indicating whether to set the "!important" flag on the property value.
     * @param schedulerType ID of a registered scheduler type that is used to write the property
     * value to the DOM. If undefined, the current default scheduler will be used.
     */
    setProp(name, value, important, schedulerType) {
        // first set/remove the value in our internal styleset object
        if (value == null)
            delete this.styleset[name];
        else
            this.styleset[name] = important ? { "!": value } : value;
        // second, if CSSRule alredy exists, set/remove the property value there
        if (this.cssRule) {
            (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_3__.getActivator)(schedulerType).updateStyle(this.cssRule, (0,_impl_Utils__WEBPACK_IMPORTED_MODULE_1__.camelToDash)(name), value == null ? null : (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_2__.sp2s)(name, value), important);
        }
    }
    /**
     * Adds/replaces the value of the given custom CSS property in this rule.
     * @param varObj IVarRule object defining a custom CSS property.
     * @param varValue New value of the custom CSS property.
     * @param important Flag indicating whether to set the "!important" flag on the property value.
     * @param schedulerType ID of a registered scheduler type that is used to write the property
     * value to the DOM. If undefined, the current default scheduler will be used.
     */
    setCustomProp(varObj, value, important, schedulerType) {
        if (!varObj)
            return;
        // first set/remove the value in our internal styleset object
        let currCustomProps = this.styleset["--"];
        if (currCustomProps || value != null) {
            if (value == null) {
                let index = currCustomProps.findIndex(item => item[0] === varObj);
                if (index >= 0)
                    currCustomProps.splice(index, 1);
            }
            else if (!currCustomProps)
                this.styleset["--"] = [[varObj, value]];
            else {
                let index = currCustomProps.findIndex(item => item[0] === varObj);
                if (index >= 0)
                    currCustomProps[index][1] = value;
                else
                    currCustomProps.push([varObj, value]);
            }
        }
        // second, if CSSRule alredy exists, set/remove the property value there
        if (this.cssRule) {
            (0,_impl_SchedulingImpl__WEBPACK_IMPORTED_MODULE_3__.getActivator)(schedulerType).updateStyle(this.cssRule, varObj.cssName, value == null ? null : (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_2__.sp2s)(varObj.template, value), important);
        }
    }
}
/**
 * The DependentRule class describes a styleset that depends on the containing style rule. This
 * is used for pseudo classes, pseudo elements, combinators and other selectors that combine the
 * containing rule's selector with additional selector items.
 */
class DepRule extends StyleRule {
    // for regular selectors, pseudo classes and pseudo elements, the selector already contains
    // the ampersand and the selectorParam is undefined. For parameterized pseudo classes, pseudo
    // elements and combinators, the selectorParam is defined and the selector is just the entity
    // name.
    constructor(sd, selector, param, styleset, parent) {
        super(sd, styleset);
        this.selector = selector;
        this.parent = parent;
        this.param = param;
    }
    // Creates a copy of the rule but with new parent (containing rule).
    clone(containingRule) {
        let newRule = new DepRule(this.sd, this.selector, this.param, undefined, containingRule);
        // this method is called on a newly created object so we don't have any properties in
        // our own styleset yet
        mergeStylesets(newRule.styleset, this.styleset);
        newRule.copyDepRules(this);
        return newRule;
    }
    // Returns the selector part of the style rule.
    getSel() {
        let parentSelector = this.parent.selectorText;
        if (this.param) {
            // the "param" value is only set for parameterized pseudo entities, so we convert it to
            // the "func" object form. We also know that the selector is a string - name of the entity.
            return `${parentSelector}${(0,_impl_Utils__WEBPACK_IMPORTED_MODULE_1__.fdo2s)({ fn: this.selector, p: this.param })}`;
        }
        else {
            // convert selector to string.
            let selector = (0,_impl_CoreImpl__WEBPACK_IMPORTED_MODULE_4__.selector2s)(this.selector);
            // if the selector string doesn't have any occurrences of the ampersand symbol, we
            // simply append the selector to the parent selector; otherwise, we replace all
            // occurrences of the ampersand symbol in the selector string with the selector
            // string of the parent rule.
            return selector.indexOf("&") < 0
                ? `${parentSelector}${selector}`
                : selector.replace(/&/g, parentSelector);
        }
    }
}
/**
 * The AbstractRule class describes a styleset that can only be used as a base for other style
 * rules.
 */
class AbstractRule extends StyleRule {
    // Overrides the StyleRule's implementation to do nothing. No CSSStyleRule is created for
    // abstract rules.
    insert(ruleBag) { }
    // Overrides the StyleRule's implementation to do nothing.
    clear() { }
    // Returns the selector part of the style rule.
    getSel() { return ""; }
}
/**
 * The NamedStyleRule class is a base for style rule classes that are also named entities - such
 * as class rule and ID rule.
 */
class NamedStyleRule extends StyleRule {
    constructor(sd, styleset, nameOverride) {
        super(sd, styleset);
        this.nameOverride = nameOverride;
    }
    // Processes the given rule.
    process(ruleName) {
        super.process(ruleName);
        this.name = this.rc.getScopedName(ruleName, this.nameOverride);
        this.cssName = this.prefix + this.name;
    }
    // Returns the selector part of the style rule.
    getSel() {
        return this.cssName;
    }
    // Implementation of the toString method returns the name of the rule (without the CSS prefix).
    toString() {
        return this.name;
    }
}
/**
 * The ClassRule class describes a styleset that applies to elements identified by a CSS class.
 */
class ClassRule extends NamedStyleRule {
    constructor() {
        super(...arguments);
        // Prefix for CSS classes.
        this.prefix = ".";
    }
    // Allows the derived classes to process style properties that the StyleRule doesn't know about.
    // If returns false, the property with the given name will not be added to the styleset.
    parseSP(propName, propVal) {
        if (propName == "++") {
            let rules = propVal;
            if (rules)
                this.parents = Array.isArray(rules) ? rules : [rules];
            return false;
        }
        return super.parseSP(propName, propVal);
    }
    // Processes the given rule.
    process(ruleName) {
        super.process(ruleName);
        // by now our name and cssName properties have been set to reflect a single name. Now
        // look at the parent class rues defined using the "++" property and take names from the
        // referenced class rules and append them to the name.
        if (this.parents) {
            this.name += " " + this.parents.map(v => typeof v === "string" ? v : v.name).join(" ");
            this.cssName = "." + this.name.replace(/ /g, ".");
        }
    }
}
/**
 * The IDRule class describes a styleset that applies to elements identified by an ID.
 */
class IDRule extends NamedStyleRule {
    constructor() {
        super(...arguments);
        // Prefix for CSS element identifiers.
        this.prefix = "#";
    }
}
/**
 * The SelectorRule type describes a styleset that applies to elements identified by a CSS selector.
 */
class SelectorRule extends StyleRule {
    constructor(sd, selector, styleset) {
        super(sd, styleset);
        this.selector = selector;
    }
    // Returns the selector part of the style rule.
    getSel() {
        return (0,_impl_CoreImpl__WEBPACK_IMPORTED_MODULE_4__.selector2s)(this.selector);
    }
}
/**
 * The PageRule class represents the CSS @page rule.
 */
class PageRule extends StyleRule {
    constructor(sd, pseudoClass, style) {
        super(sd, style);
        this.pseudoClass = pseudoClass;
    }
    // Returns the selector part of the style rule.
    getSel() {
        return `@page ${this.pseudoClass ? this.pseudoClass : ""}`;
    }
}
/**
 * Merges properties from the source styleset to the target styleset. All regular properties are
 * replaced. The "--" property gets special treatment because it is an array.
 * @param target Target Styleset object - cannot be null or undefined;
 * @param source Source Styleset object - cannot be null or undefined.
 * @param source
 */
const mergeStylesets = (target, source) => {
    // copy all other properties from the source
    if (Object.keys(target).length === 0)
        Object.assign(target, source);
    else {
        for (let propName in source) {
            if (propName === "--")
                mergeCustomProps(target, source[propName]);
            else
                mergePropValues(target, propName, source[propName]);
        }
    }
};
/**
 * Merges "--" property from the source styleset to the target styleset.
 */
const mergeCustomProps = (target, sourceVars) => {
    let targetVars = target["--"];
    target["--"] = !targetVars ? sourceVars.slice() : targetVars.concat(sourceVars);
};
/**
 * Merges values of the given property from the source styleset to the target styleset. Note that
 * both source or target value can be either single value or an object with the `"[]"` property
 * that contains multiple values.
 * @param target Target Styleset object - cannot be null or undefined.
 * @param propName Name of the property.
 * @param sourceVal Value from the source styleset to merge with the target value - cannot be null
 * or undefined.
 */
const mergePropValues = (target, propName, sourceVal) => {
    let targetVal = target[propName];
    if (targetVal == null) {
        // if property doesn't exist in the target or its value is null or undefined, just
        // take the source's value
        target[propName] = sourceVal;
    }
    else {
        let targetArray = targetVal["[]"];
        if (!targetArray)
            target[propName] = { "[]": targetArray = [targetVal] };
        let sourceArray = sourceVal["[]"];
        if (!sourceArray)
            targetArray.push(sourceVal);
        else
            targetArray.push(...sourceArray);
    }
};


/***/ }),

/***/ "./lib/rules/VarRule.js":
/*!******************************!*\
  !*** ./lib/rules/VarRule.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VarRule": () => (/* binding */ VarRule),
/* harmony export */   "PropertyRule": () => (/* binding */ PropertyRule),
/* harmony export */   "ConstRule": () => (/* binding */ ConstRule)
/* harmony export */ });
/* harmony import */ var _impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../impl/StyleImpl */ "./lib/impl/StyleImpl.js");
/* harmony import */ var _Rule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rule */ "./lib/rules/Rule.js");


/**
 * The VarBaseRule class contains functionality common for VarRule class describing a custom CSS
 * property definition in the `:root` rule and for PropertyRule class describing the `@property`
 * at-rule.
 */
class VarBaseRule extends _Rule__WEBPACK_IMPORTED_MODULE_1__.Rule {
    constructor(sd, template, value, nameOverride) {
        super(sd);
        // Prefix for CSS classes.
        this.prefix = "--";
        this.template = template;
        this.value = value;
        this.nameOverride = nameOverride;
    }
    // This function is used when the object is specified as a value of a style property.
    // We return the var(--name) expression.
    toString() {
        return `var(${this.cssName})`;
    }
    // Processes the given rule.
    process(ruleName) {
        this.name = this.rc.getScopedName(ruleName, this.nameOverride);
        this.cssName = "--" + this.name;
    }
    /**
     * Gets the value of the property.
     */
    getValue() {
        return this.value;
    }
    /**
     * Sets new value of this custom CSS property.
     * @param value New value for the CSS property.
     * @param schedulerType ID of a registered scheduler type that is used to write the property
     * value to the DOM. If undefined, the current default scheduler will be used.
     */
    setValue(value, schedulerType) {
        this.value = value;
        if (this.rc) {
            let important = false;
            if (value != null && typeof value === "object" && "!" in value) {
                important = true;
                value = value["!"];
            }
            this.rc.setVarValue(this.cssName, value == null
                ? null
                : (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.sp2s)(this.template, value), important, schedulerType);
        }
    }
}
/**
 * The VarRule class describes a custom CSS property. VarRule is not a real CSS rule; however, in
 * many aspects it repeats the Rule's functionality. In particular it has the process function that
 * allows it to obtain an actual name, which will be used when defining and using this custom
 * property in CSS.
 */
class VarRule extends VarBaseRule {
    constructor(sd, template, value, nameOverride) {
        super(sd, template, value, nameOverride);
    }
    // Inserts this rule into the given parent rule or stylesheet. This method is called when the
    // style definition class, to which this rule belongs, is activated.
    insert(ruleBag) { }
    // Converts the rule to CSS string.
    toCss() {
        return this.value == null ? null : `${this.cssName}: ${(0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.sp2s)(this.template, this.value)}`;
    }
}
/**
 * The PropertyRule class describes the `@property` at-rule.
 */
class PropertyRule extends VarBaseRule {
    constructor(sd, syntax, initValue, inherits = true, nameOverride) {
        if (Array.isArray(syntax)) {
            super(sd, "*", initValue, nameOverride);
            this.syntax = syntax[0];
        }
        else {
            super(sd, syntax, initValue, nameOverride);
            this.syntax = syntax;
        }
        this.inherits = inherits;
    }
    // Inserts this rule into the given parent rule or stylesheet. This method is called when the
    // style definition class, to which this rule belongs, is activated.
    insert(ruleBag) {
        let ruleText = `@property ${this.cssName}{syntax:'${this.syntax}';` +
            `inherits:${this.inherits};initial-value:${(0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.sp2s)(this.template, this.value)};}`;
        this.cssRule = ruleBag.add(ruleText)?.cssRule;
    }
}
/**
 * The IConstRule interface represents a "constant" that can be used anywhere the type defined by
 * the `template` parameter can be used. These are called constants, because they provide the
 * convenient and lightweight way of defining values that are unchanged during the application
 * lifetime. Although constants are defined very similarly to custom properties (see the
 * [[IVarRule]] function), they cannot participate in the cascade and cannot be redefined under
 * elements. Constant can, however, use any expression that satisfies the type defined by the
 * `template` parameter including other constants, custom properties and functions.
 * Objects implementing this interface are returned from the [[$const]] function.
 */
class ConstRule extends _Rule__WEBPACK_IMPORTED_MODULE_1__.RuleLike {
    constructor(sd, template, value) {
        super(sd);
        this.template = template;
        this.value = value;
        this.s = (0,_impl_StyleImpl__WEBPACK_IMPORTED_MODULE_0__.sp2s)(template, value);
    }
    // This function is used when the object is specified as a value of a style property.
    toString() { return this.s; }
    /**
     * Gets the value of the property.
     */
    getValue() {
        return this.value;
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attr": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.attr),
/* harmony export */   "counter": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.counter),
/* harmony export */   "counters": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.counters),
/* harmony export */   "cubicBezier": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.cubicBezier),
/* harmony export */   "cursor": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.cursor),
/* harmony export */   "media": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.media),
/* harmony export */   "nstag": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.nstag),
/* harmony export */   "raw": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.raw),
/* harmony export */   "sel": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.sel),
/* harmony export */   "selector": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.selector),
/* harmony export */   "steps": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.steps),
/* harmony export */   "supports": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.supports),
/* harmony export */   "url": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.url),
/* harmony export */   "usevar": () => (/* reexport safe */ _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__.usevar),
/* harmony export */   "Angle": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.Angle),
/* harmony export */   "Frequency": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.Frequency),
/* harmony export */   "Len": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.Len),
/* harmony export */   "Num": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.Num),
/* harmony export */   "Percent": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.Percent),
/* harmony export */   "Q": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.Q),
/* harmony export */   "Resolution": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.Resolution),
/* harmony export */   "Time": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.Time),
/* harmony export */   "ch": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.ch),
/* harmony export */   "cm": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.cm),
/* harmony export */   "deg": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.deg),
/* harmony export */   "dpcm": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.dpcm),
/* harmony export */   "dpi": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.dpi),
/* harmony export */   "dppx": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.dppx),
/* harmony export */   "em": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.em),
/* harmony export */   "ex": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.ex),
/* harmony export */   "fitContent": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.fitContent),
/* harmony export */   "fr": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.fr),
/* harmony export */   "grad": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.grad),
/* harmony export */   "hz": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.hz),
/* harmony export */   "ic": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.ic),
/* harmony export */   "inch": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.inch),
/* harmony export */   "khz": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.khz),
/* harmony export */   "lh": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.lh),
/* harmony export */   "mm": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.mm),
/* harmony export */   "ms": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.ms),
/* harmony export */   "pc": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.pc),
/* harmony export */   "percent": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.percent),
/* harmony export */   "pt": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.pt),
/* harmony export */   "px": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.px),
/* harmony export */   "rad": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.rad),
/* harmony export */   "ratio": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.ratio),
/* harmony export */   "rect": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.rect),
/* harmony export */   "rem": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.rem),
/* harmony export */   "rlh": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.rlh),
/* harmony export */   "s": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.s),
/* harmony export */   "turn": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.turn),
/* harmony export */   "vb": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.vb),
/* harmony export */   "vh": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.vh),
/* harmony export */   "vi": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.vi),
/* harmony export */   "vmax": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.vmax),
/* harmony export */   "vmin": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.vmin),
/* harmony export */   "vw": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.vw),
/* harmony export */   "x": () => (/* reexport safe */ _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__.x),
/* harmony export */   "Colors": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.Colors),
/* harmony export */   "alpha": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.alpha),
/* harmony export */   "colorContrast": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.colorContrast),
/* harmony export */   "colorMix": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.colorMix),
/* harmony export */   "hsl": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.hsl),
/* harmony export */   "lab": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.lab),
/* harmony export */   "lch": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.lch),
/* harmony export */   "registerColor": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.registerColor),
/* harmony export */   "rgb": () => (/* reexport safe */ _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__.rgb),
/* harmony export */   "blur": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.blur),
/* harmony export */   "brightness": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.brightness),
/* harmony export */   "circle": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.circle),
/* harmony export */   "conicGradient": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.conicGradient),
/* harmony export */   "contrast": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.contrast),
/* harmony export */   "crossFade": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.crossFade),
/* harmony export */   "dropShadow": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.dropShadow),
/* harmony export */   "ellipse": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.ellipse),
/* harmony export */   "grayscale": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.grayscale),
/* harmony export */   "hueRotate": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.hueRotate),
/* harmony export */   "imageSet": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.imageSet),
/* harmony export */   "inset": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.inset),
/* harmony export */   "invert": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.invert),
/* harmony export */   "linearGradient": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.linearGradient),
/* harmony export */   "matrix": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.matrix),
/* harmony export */   "matrix3d": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.matrix3d),
/* harmony export */   "minmax": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.minmax),
/* harmony export */   "opacity": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.opacity),
/* harmony export */   "paint": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.paint),
/* harmony export */   "path": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.path),
/* harmony export */   "perspective": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.perspective),
/* harmony export */   "polygon": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.polygon),
/* harmony export */   "radialGradient": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.radialGradient),
/* harmony export */   "ray": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.ray),
/* harmony export */   "registerPaintWorklet": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.registerPaintWorklet),
/* harmony export */   "repeat": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.repeat),
/* harmony export */   "rotate": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.rotate),
/* harmony export */   "rotate3d": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.rotate3d),
/* harmony export */   "rotateX": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.rotateX),
/* harmony export */   "rotateY": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.rotateY),
/* harmony export */   "rotateZ": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.rotateZ),
/* harmony export */   "saturate": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.saturate),
/* harmony export */   "scale": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.scale),
/* harmony export */   "scale3d": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.scale3d),
/* harmony export */   "scaleX": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.scaleX),
/* harmony export */   "scaleY": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.scaleY),
/* harmony export */   "scaleZ": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.scaleZ),
/* harmony export */   "sepia": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.sepia),
/* harmony export */   "skew": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.skew),
/* harmony export */   "skewX": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.skewX),
/* harmony export */   "skewY": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.skewY),
/* harmony export */   "span": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.span),
/* harmony export */   "translate": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.translate),
/* harmony export */   "translate3d": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.translate3d),
/* harmony export */   "translateX": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.translateX),
/* harmony export */   "translateY": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.translateY),
/* harmony export */   "translateZ": () => (/* reexport safe */ _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__.translateZ),
/* harmony export */   "StyleDefinition": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.StyleDefinition),
/* harmony export */   "ThemeDefinition": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.ThemeDefinition),
/* harmony export */   "activate": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.activate),
/* harmony export */   "chooseClass": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.chooseClass),
/* harmony export */   "classes": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.classes),
/* harmony export */   "configNameGeneration": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.configNameGeneration),
/* harmony export */   "deactivate": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.deactivate),
/* harmony export */   "embedded": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.embedded),
/* harmony export */   "getActiveTheme": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.getActiveTheme),
/* harmony export */   "startHydration": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.startHydration),
/* harmony export */   "startSSR": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.startSSR),
/* harmony export */   "stopHydration": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.stopHydration),
/* harmony export */   "stopSSR": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.stopSSR),
/* harmony export */   "virtual": () => (/* reexport safe */ _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__.virtual),
/* harmony export */   "cancelDOMUpdate": () => (/* reexport safe */ _api_SchedulingAPI__WEBPACK_IMPORTED_MODULE_16__.cancelDOMUpdate),
/* harmony export */   "forceDOMUpdate": () => (/* reexport safe */ _api_SchedulingAPI__WEBPACK_IMPORTED_MODULE_16__.forceDOMUpdate),
/* harmony export */   "registerScheduler": () => (/* reexport safe */ _api_SchedulingAPI__WEBPACK_IMPORTED_MODULE_16__.registerScheduler),
/* harmony export */   "setDefaultScheduler": () => (/* reexport safe */ _api_SchedulingAPI__WEBPACK_IMPORTED_MODULE_16__.setDefaultScheduler),
/* harmony export */   "diffStylesets": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.diffStylesets),
/* harmony export */   "getStylePropValue": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.getStylePropValue),
/* harmony export */   "mediaToString": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.mediaToString),
/* harmony export */   "registerStyleProperty": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.registerStyleProperty),
/* harmony export */   "setElementStringStyle": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.setElementStringStyle),
/* harmony export */   "setElementStyle": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.setElementStyle),
/* harmony export */   "stylesetToString": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.stylesetToString),
/* harmony export */   "stylesetToStringStyleset": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.stylesetToStringStyleset),
/* harmony export */   "supportsToString": () => (/* reexport safe */ _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__.supportsToString)
/* harmony export */ });
/* harmony import */ var _api_CoreTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/CoreTypes */ "./lib/api/CoreTypes.js");
/* harmony import */ var _api_NumericTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api/NumericTypes */ "./lib/api/NumericTypes.js");
/* harmony import */ var _api_ColorTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api/ColorTypes */ "./lib/api/ColorTypes.js");
/* harmony import */ var _api_CounterTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api/CounterTypes */ "./lib/api/CounterTypes.js");
/* harmony import */ var _api_ShapeTypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./api/ShapeTypes */ "./lib/api/ShapeTypes.js");
/* harmony import */ var _api_FontTypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./api/FontTypes */ "./lib/api/FontTypes.js");
/* harmony import */ var _api_MediaTypes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./api/MediaTypes */ "./lib/api/MediaTypes.js");
/* harmony import */ var _api_RuleTypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api/RuleTypes */ "./lib/api/RuleTypes.js");
/* harmony import */ var _api_SchedulingTypes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./api/SchedulingTypes */ "./lib/api/SchedulingTypes.js");
/* harmony import */ var _api_StyleTypes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./api/StyleTypes */ "./lib/api/StyleTypes.js");
/* harmony import */ var _api_Stylesets__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./api/Stylesets */ "./lib/api/Stylesets.js");
/* harmony import */ var _api_CoreAPI__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./api/CoreAPI */ "./lib/api/CoreAPI.js");
/* harmony import */ var _api_NumericAPI__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./api/NumericAPI */ "./lib/api/NumericAPI.js");
/* harmony import */ var _api_ColorAPI__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./api/ColorAPI */ "./lib/api/ColorAPI.js");
/* harmony import */ var _api_ShapeAPI__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./api/ShapeAPI */ "./lib/api/ShapeAPI.js");
/* harmony import */ var _api_RuleAPI__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./api/RuleAPI */ "./lib/api/RuleAPI.js");
/* harmony import */ var _api_SchedulingAPI__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./api/SchedulingAPI */ "./lib/api/SchedulingAPI.js");
/* harmony import */ var _api_StyleAPI__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./api/StyleAPI */ "./lib/api/StyleAPI.js");
// Type definitions for mimcss



















})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWltY3NzLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNQNEQ7QUFJNUQ7Ozs7O0VBS0U7QUFDSyxNQUFNLE1BQU0sR0FDbkI7SUFDSSxLQUFLLEVBQW1CLFFBQVE7SUFDaEMsTUFBTSxFQUFrQixRQUFRO0lBQ2hDLElBQUksRUFBb0IsUUFBUTtJQUNoQyxLQUFLLEVBQW1CLFFBQVE7SUFDaEMsTUFBTSxFQUFrQixRQUFRO0lBQ2hDLEdBQUcsRUFBcUIsUUFBUTtJQUNoQyxNQUFNLEVBQWtCLFFBQVE7SUFDaEMsT0FBTyxFQUFpQixRQUFRO0lBQ2hDLEtBQUssRUFBbUIsUUFBUTtJQUNoQyxJQUFJLEVBQW9CLFFBQVE7SUFDaEMsS0FBSyxFQUFtQixRQUFRO0lBQ2hDLE1BQU0sRUFBa0IsUUFBUTtJQUNoQyxJQUFJLEVBQW9CLFFBQVE7SUFDaEMsSUFBSSxFQUFvQixRQUFRO0lBQ2hDLElBQUksRUFBb0IsUUFBUTtJQUNoQyxJQUFJLEVBQW9CLFFBQVE7SUFDaEMsTUFBTSxFQUFrQixRQUFRO0lBQ2hDLFNBQVMsRUFBZSxRQUFRO0lBQ2hDLFlBQVksRUFBWSxRQUFRO0lBQ2hDLFVBQVUsRUFBYyxRQUFRO0lBQ2hDLEtBQUssRUFBbUIsUUFBUTtJQUNoQyxLQUFLLEVBQW1CLFFBQVE7SUFDaEMsTUFBTSxFQUFrQixRQUFRO0lBQ2hDLGNBQWMsRUFBVSxRQUFRO0lBQ2hDLFVBQVUsRUFBYyxRQUFRO0lBQ2hDLEtBQUssRUFBbUIsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxVQUFVLEVBQWMsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxLQUFLLEVBQW1CLFFBQVE7SUFDaEMsY0FBYyxFQUFVLFFBQVE7SUFDaEMsUUFBUSxFQUFnQixRQUFRO0lBQ2hDLE9BQU8sRUFBaUIsUUFBUTtJQUNoQyxJQUFJLEVBQW9CLFFBQVE7SUFDaEMsUUFBUSxFQUFnQixRQUFRO0lBQ2hDLFFBQVEsRUFBZ0IsUUFBUTtJQUNoQyxhQUFhLEVBQVcsUUFBUTtJQUNoQyxRQUFRLEVBQWdCLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsUUFBUSxFQUFnQixRQUFRO0lBQ2hDLFNBQVMsRUFBZSxRQUFRO0lBQ2hDLFdBQVcsRUFBYSxRQUFRO0lBQ2hDLGNBQWMsRUFBVSxRQUFRO0lBQ2hDLFVBQVUsRUFBYyxRQUFRO0lBQ2hDLFVBQVUsRUFBYyxRQUFRO0lBQ2hDLE9BQU8sRUFBaUIsUUFBUTtJQUNoQyxVQUFVLEVBQWMsUUFBUTtJQUNoQyxZQUFZLEVBQVksUUFBUTtJQUNoQyxhQUFhLEVBQVcsUUFBUTtJQUNoQyxhQUFhLEVBQVcsUUFBUTtJQUNoQyxhQUFhLEVBQVcsUUFBUTtJQUNoQyxhQUFhLEVBQVcsUUFBUTtJQUNoQyxVQUFVLEVBQWMsUUFBUTtJQUNoQyxRQUFRLEVBQWdCLFFBQVE7SUFDaEMsV0FBVyxFQUFhLFFBQVE7SUFDaEMsT0FBTyxFQUFpQixRQUFRO0lBQ2hDLE9BQU8sRUFBaUIsUUFBUTtJQUNoQyxVQUFVLEVBQWMsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxXQUFXLEVBQWEsUUFBUTtJQUNoQyxXQUFXLEVBQWEsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxVQUFVLEVBQWMsUUFBUTtJQUNoQyxJQUFJLEVBQW9CLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsV0FBVyxFQUFhLFFBQVE7SUFDaEMsSUFBSSxFQUFvQixRQUFRO0lBQ2hDLFFBQVEsRUFBZ0IsUUFBUTtJQUNoQyxPQUFPLEVBQWlCLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsTUFBTSxFQUFrQixRQUFRO0lBQ2hDLEtBQUssRUFBbUIsUUFBUTtJQUNoQyxLQUFLLEVBQW1CLFFBQVE7SUFDaEMsUUFBUSxFQUFnQixRQUFRO0lBQ2hDLGFBQWEsRUFBVyxRQUFRO0lBQ2hDLFNBQVMsRUFBZSxRQUFRO0lBQ2hDLFlBQVksRUFBWSxRQUFRO0lBQ2hDLFNBQVMsRUFBZSxRQUFRO0lBQ2hDLFVBQVUsRUFBYyxRQUFRO0lBQ2hDLFNBQVMsRUFBZSxRQUFRO0lBQ2hDLG9CQUFvQixFQUFJLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsVUFBVSxFQUFjLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsV0FBVyxFQUFhLFFBQVE7SUFDaEMsYUFBYSxFQUFXLFFBQVE7SUFDaEMsWUFBWSxFQUFZLFFBQVE7SUFDaEMsY0FBYyxFQUFVLFFBQVE7SUFDaEMsY0FBYyxFQUFVLFFBQVE7SUFDaEMsY0FBYyxFQUFVLFFBQVE7SUFDaEMsV0FBVyxFQUFhLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsS0FBSyxFQUFtQixRQUFRO0lBQ2hDLE9BQU8sRUFBaUIsUUFBUTtJQUNoQyxnQkFBZ0IsRUFBUSxRQUFRO0lBQ2hDLFVBQVUsRUFBYyxRQUFRO0lBQ2hDLFlBQVksRUFBWSxRQUFRO0lBQ2hDLFlBQVksRUFBWSxRQUFRO0lBQ2hDLGNBQWMsRUFBVSxRQUFRO0lBQ2hDLGVBQWUsRUFBUyxRQUFRO0lBQ2hDLGlCQUFpQixFQUFPLFFBQVE7SUFDaEMsZUFBZSxFQUFTLFFBQVE7SUFDaEMsZUFBZSxFQUFTLFFBQVE7SUFDaEMsWUFBWSxFQUFZLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsUUFBUSxFQUFnQixRQUFRO0lBQ2hDLFdBQVcsRUFBYSxRQUFRO0lBQ2hDLE9BQU8sRUFBaUIsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxNQUFNLEVBQWtCLFFBQVE7SUFDaEMsYUFBYSxFQUFXLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsYUFBYSxFQUFXLFFBQVE7SUFDaEMsYUFBYSxFQUFXLFFBQVE7SUFDaEMsVUFBVSxFQUFjLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsSUFBSSxFQUFvQixRQUFRO0lBQ2hDLElBQUksRUFBb0IsUUFBUTtJQUNoQyxJQUFJLEVBQW9CLFFBQVE7SUFDaEMsVUFBVSxFQUFjLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsV0FBVyxFQUFhLFFBQVE7SUFDaEMsTUFBTSxFQUFrQixRQUFRO0lBQ2hDLFVBQVUsRUFBYyxRQUFRO0lBQ2hDLFFBQVEsRUFBZ0IsUUFBUTtJQUNoQyxRQUFRLEVBQWdCLFFBQVE7SUFDaEMsTUFBTSxFQUFrQixRQUFRO0lBQ2hDLE9BQU8sRUFBaUIsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxTQUFTLEVBQWUsUUFBUTtJQUNoQyxJQUFJLEVBQW9CLFFBQVE7SUFDaEMsV0FBVyxFQUFhLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsR0FBRyxFQUFxQixRQUFRO0lBQ2hDLE9BQU8sRUFBaUIsUUFBUTtJQUNoQyxNQUFNLEVBQWtCLFFBQVE7SUFDaEMsU0FBUyxFQUFlLFFBQVE7SUFDaEMsTUFBTSxFQUFrQixRQUFRO0lBQ2hDLEtBQUssRUFBbUIsUUFBUTtJQUNoQyxVQUFVLEVBQWMsUUFBUTtJQUNoQyxXQUFXLEVBQWEsUUFBUTtJQUNoQyxhQUFhLEVBQVcsUUFBUTtDQUNuQyxDQUFDO0FBSUY7OztHQUdHO0FBQ0gsTUFBTSxZQUFZLEdBQTRCLEVBQUUsQ0FBQztBQUlqRDs7Ozs7Ozs7R0FRRztBQUNJLE1BQU0sYUFBYSxHQUFHLENBQUUsSUFBd0IsRUFBRSxLQUFhLEVBQVcsRUFBRTtJQUUvRSxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJO1FBQ3RCLE9BQU8sS0FBSyxDQUFDO0lBRWpCLHlGQUF5RjtJQUN6Rix5Q0FBeUM7SUFDekMsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXJDLHdGQUF3RjtJQUN4RixtQ0FBbUM7SUFDbkMsSUFBSSxJQUFJLElBQUksTUFBTSxJQUFJLFdBQVcsSUFBSSxJQUFJO1FBQ3JDLE9BQU8sS0FBSyxDQUFDO0lBRWpCLHVEQUF1RDtJQUN0RCxNQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQzlCLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDM0IsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUlEOztHQUVHO0FBQ0gsSUFBSyxhQUFhLEdBQUcsQ0FBQyxHQUFXLEVBQVUsRUFBRTtJQUV6Qyw0RUFBNEU7SUFDNUUsSUFBSSxVQUFVLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFFaEMsMEVBQTBFO0lBQzFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUN4QjtRQUNJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsa0NBQWtDO1FBQ2xDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDVDtJQUVELHdGQUF3RjtJQUN4RixvREFBb0Q7SUFDcEQsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVwRCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUlEOzs7OztHQUtHO0FBQ0gsZ0RBQWMsR0FBRyxDQUFDLEdBQXVCLEVBQVUsRUFBRSxDQUNqRCxnREFBRyxDQUFFLEdBQUcsRUFBRTtJQUNOLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxHQUFHLEVBQUUsYUFBYTtDQUNyQixDQUFDLENBQUM7QUFFUDs7Ozs7R0FLRztBQUNILGdEQUFlLEdBQUcsQ0FBQyxHQUF3QixFQUFVLEVBQUUsQ0FBQyxnREFBRyxDQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsZ0JBQVcsRUFBRSxDQUFDO0FBSXJGOztHQUVHO0FBQ0gsZ0RBQXdCLEdBQUcsQ0FBQyxDQUFtQixFQUFVLEVBQUUsQ0FDdkQsZ0RBQUcsQ0FBRSxDQUFDLEVBQUU7SUFDSixHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDTCxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDdkUsQ0FBQztDQUNKLENBQUM7QUFJTjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Qkc7QUFDSSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQStCLEVBQUUsQ0FBK0IsRUFDaEYsQ0FBK0IsRUFBRSxDQUF3QixFQUFZLEVBQUU7SUFFdkUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDckMsQ0FBQztBQUVELGdEQUFPLEdBQUc7SUFDTixDQUFDLEVBQUUsQ0FBRSxDQUFDLEdBQUcsMkJBQXNCLEVBQUUsQ0FBQyxHQUFHLDJCQUF1QixFQUFFLENBQUMsR0FBRywyQkFBdUIsRUFBRSxDQUFDLEdBQUcsbUJBQWdCLEdBQUcsQ0FBQyxDQUFFO0lBQ3JILENBQUMsRUFBRSxHQUFHO0NBQ1QsQ0FBQztBQUlGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCRztBQUNJLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBcUIsRUFBRSxDQUF1QixFQUFFLENBQXVCLEVBQ3ZGLENBQXdCLEVBQVksRUFBRTtJQUV0QyxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyQyxDQUFDO0FBRUQsZ0RBQU8sR0FBRztJQUNOLENBQUMsRUFBRSxDQUFFLENBQUMsR0FBRyxnQkFBWSxFQUFFLENBQUMsR0FBRyxrQkFBYyxFQUFFLENBQUMsR0FBRyxrQkFBYyxFQUFFLENBQUMsR0FBRyxtQkFBZSxHQUFHLENBQUMsQ0FBRTtJQUN4RixDQUFDLEVBQUUsR0FBRztDQUNULENBQUM7QUFJRjs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQXVCLEVBQUUsRUFBb0IsRUFBRSxFQUFvQixFQUNuRixDQUF3QixFQUFZLEVBQUU7SUFFdEMsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDdkMsQ0FBQztBQUVELGdEQUFPLEdBQUc7SUFDTixDQUFDLEVBQUUsQ0FBRSxDQUFDLEdBQUcseUJBQW9CLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsbUJBQWUsR0FBRyxDQUFDLENBQUU7SUFDcEUsQ0FBQyxFQUFFLEdBQUc7Q0FDVCxDQUFDO0FBSUY7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0ksTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUF1QixFQUFFLENBQW1CLEVBQUUsQ0FBcUIsRUFDbkYsQ0FBd0IsRUFBWSxFQUFFO0lBRXRDLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3JDLENBQUM7QUFFRCxnREFBTyxHQUFHO0lBQ04sQ0FBQyxFQUFFLENBQUUsQ0FBQyxHQUFHLHlCQUFvQixFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsZ0JBQVksRUFBRSxDQUFDLEdBQUcsbUJBQWUsR0FBRyxDQUFDLENBQUU7SUFDL0UsQ0FBQyxFQUFFLEdBQUc7Q0FDVCxDQUFDO0FBSUY7Ozs7Ozs7OztHQVNHO0FBQ0ksTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFxQixFQUFFLEdBQUcsRUFBd0IsRUFBc0IsRUFBRSxDQUNwRyxDQUFDLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRXRDLDhEQUFxQixHQUFHO0lBQ3BCLENBQUMsRUFBRTtRQUNDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBcUIsRUFBRSxFQUFFLENBQUMsZ0RBQUcsQ0FBRSxDQUFDLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzVELENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBdUIsRUFBRSxFQUFFLENBQUMsZ0RBQUcsQ0FBRSxDQUFDLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO0tBQy9EO0lBQ0QsQ0FBQyxFQUFFLEdBQUc7Q0FDVCxDQUFDO0FBSUY7OztHQUdHO0FBQ0gsTUFBTSxZQUFZO0lBUWQsWUFBYSxDQUFxQixFQUFFLENBQXdCO1FBTjVELE9BQUUsR0FBZ0IsV0FBVyxDQUFDO1FBTWtDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDO0lBRW5GLElBQUksQ0FBRSxDQUFxQixFQUFFLENBQXdCLElBQVcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRyxFQUFFLENBQUUsRUFBd0IsSUFBVSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztDQUNyRTtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFDSSxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQXFCLEVBQUUsQ0FBd0IsRUFBb0IsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUV2SCx5REFBZ0IsR0FBRztJQUNmLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBdUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsZ0RBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVELENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsaURBQUksQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBYyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLGlEQUFJLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWMsQ0FBQyxDQUFDLENBQUM7Q0FDL0QsQ0FBQztBQUlGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCRztBQUNJLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBOEIsRUFBRSxDQUFTLEVBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXhHLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBOEIsRUFBRSxDQUFTLEVBQVUsRUFBRTtJQUVsRSw4Q0FBOEM7SUFDOUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNQLE9BQU8sT0FBTyxDQUFDO0lBRW5CLHlGQUF5RjtJQUN6RixzRUFBc0U7SUFDdEUsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFJLENBQUMsSUFBSSxJQUFJO1FBQ1QsT0FBTyxNQUFNLENBQUM7SUFFbEIsd0ZBQXdGO0lBQ3hGLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDTCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFWCx5RkFBeUY7SUFDekYsdUZBQXVGO0lBQ3ZGLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWxELHFCQUFxQjtJQUNyQixPQUFPLGFBQWEsQ0FBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELGtEQUFTLEdBQUcsQ0FBQyxDQUFhLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUV2Z0JWO0FBQ2M7QUFDc0I7QUFJM0UsbUdBQW1HO0FBQ25HLEVBQUU7QUFDRixxQkFBcUI7QUFDckIsRUFBRTtBQUNGLG1HQUFtRztBQUVuRzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNJLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBMkIsRUFBRSxHQUFHLE1BQXFCLEVBQWtCLEVBQUUsQ0FDOUYsR0FBRyxFQUFFLENBQUMsa0RBQUssQ0FBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFJaEM7OztHQUdHO0FBQ0gsTUFBTSx3QkFBd0IsR0FBOEIsQ0FBQyxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBZ0NqRyxnRkFBZ0Y7QUFDaEYsTUFBTSw0QkFBNEIsR0FBMkIsRUFBRSxDQUFDLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBRTFHOzs7O0dBSUc7QUFDSCxNQUFNLGFBQWEsR0FDbkI7SUFDSSxpQkFBaUI7SUFDakIsTUFBTSxFQUFFLGVBQWU7SUFDdkIsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLDJCQUEyQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ2xELElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSwyQkFBMkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNsRCxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7SUFDckQsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLDJCQUEyQixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQ3BELEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSwyQkFBMkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNuRCxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7SUFFbkQseUJBQXlCO0lBQ3pCLE9BQU8sNkJBQTRDO0lBQ25ELFVBQVUsNkJBQTRDO0lBQ3RELFFBQVEsNkJBQTRDO0lBQ3BELEtBQUssNkJBQTRDO0lBQ2pELGFBQWEsNkJBQTRDO0lBQ3pELFdBQVcsNkJBQTRDO0lBQ3ZELGNBQWMsNkJBQTRDO0lBQzFELFFBQVEsNkJBQTRDO0lBQ3BELGFBQWEsNkJBQTRDO0lBQ3pELFdBQVcsNkJBQTRDO0lBQ3ZELGVBQWUsNkJBQTRDO0lBRTNELCtCQUErQjtJQUMvQixLQUFLLGtDQUFpRDtJQUN0RCx1Q0FBdUM7SUFDdkMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRTtJQUNqRSxhQUFhLEVBQUUsNEJBQTRCO0lBQzNDLElBQUksRUFBRSw0QkFBNEI7SUFDbEMsTUFBTSxrQ0FBaUQ7SUFDdkQsS0FBSyxFQUFFLDRCQUE0QjtJQUNuQyxVQUFVLEVBQUUsaUJBQWlCO0lBQzdCLGNBQWMsRUFBRSxpQkFBaUI7SUFDakMsV0FBVyxFQUFFLGlCQUFpQjtJQUM5QixlQUFlLEVBQUUsaUJBQWlCO0lBQ2xDLE9BQU8sRUFBRSw0QkFBNEI7SUFFckMsZ0NBQWdDO0lBQ2hDLE1BQU0sb0NBQW1EO0lBQ3pELFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFO0NBQzNEO0FBSUQ7O0dBRUc7QUFDSCxNQUFNLHNCQUFzQjtJQTZDeEIsWUFBYSxLQUFvQjtRQTNDakMsVUFBSyxHQUFrQixFQUFFLENBQUM7UUE2Q3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUF6Q0QsR0FBRyxDQUFFLENBQU0sRUFBRSxRQUFxQixFQUFFLENBQU07UUFFdEMsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRO1lBQzVCLE9BQU8sU0FBUyxDQUFDO1FBRXJCLDBFQUEwRTtRQUMxRSxJQUFJLFFBQVEsS0FBSyxJQUFJO1lBQ2pCLE9BQU8sS0FBSyxDQUFDO2FBQ1osSUFBSSxRQUFRLEtBQUssT0FBTztZQUN6QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFdEIsSUFBSSxJQUFJLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJO1lBQ0wsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFFLElBQUksRUFBRSxrQkFBa0IsQ0FBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUNuRSxJQUFJLElBQUksZ0NBQStDO1lBQ3hELE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBRSxJQUFJLEVBQUUsa0JBQWtCLENBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDcEUsSUFBSSxJQUFJLHFDQUFvRDtZQUM3RCxPQUFPLDRCQUE0QixDQUFDLElBQUksQ0FBRSxJQUFJLEVBQUUsa0JBQWtCLENBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDbkYsSUFBSSxJQUFJLHVDQUFzRDtZQUMvRCxPQUFPLDRCQUE0QixDQUFDLElBQUksQ0FBRSxJQUFJLEVBQUUsa0JBQWtCLENBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDcEYsSUFBSSxPQUFPLElBQUksS0FBSyxVQUFVO1lBQy9CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFFdEM7WUFDSSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pGLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsRDtJQUNMLENBQUM7SUFFRCxPQUFPLENBQUUsQ0FBTSxJQUFnQyxPQUFPLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEYsR0FBRyxDQUFFLENBQU0sRUFBRSxDQUFTLElBQWEsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFqQ3BGLCtGQUErRjtBQUN4RiwyQkFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBZ0RsQyw2QkFBNkI7QUFDN0IsU0FBUyxlQUFlLENBQWdDLFFBQWdCLEVBQ3BFLFFBQWdCLEVBQUUsRUFBUSxFQUFFLEVBQVEsRUFBRSxFQUFRLEVBQUUsRUFBUTtJQUV4RCxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUUsSUFBSSxFQUMxQix3QkFBd0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFDO1FBQ25FLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBQyxDQUNsRSxDQUFDO0FBQ04sQ0FBQztBQUVELG1GQUFtRjtBQUNuRixTQUFTLDRCQUE0QixDQUFnQyxNQUFjLEVBQUUsS0FBVTtJQUUzRixPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQsd0ZBQXdGO0FBQ3hGLFNBQVMsMkJBQTJCLENBQWdDLE1BQWMsRUFDOUUsVUFBa0IsRUFBRSxHQUFHLFFBQXVCO0lBRTlDLE9BQU8sNEJBQTRCLENBQUMsSUFBSSxDQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUM7QUFDbkYsQ0FBQztBQUVELDJGQUEyRjtBQUMzRix1QkFBdUI7QUFDdkIsU0FBUyxtQkFBbUIsQ0FBZ0MsSUFBWSxFQUFFLFVBQWtCLEVBQUUsR0FBRyxRQUF1QjtJQUVwSCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBRSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDN0IsNEJBQTRCLENBQUMsSUFBSSxDQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBQ3hFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN0QixDQUFDO0FBRUQsK0VBQStFO0FBQy9FLFNBQVMsaUJBQWlCLENBQWdDLFFBQWdCLEVBQUUsRUFBaUIsRUFBRSxFQUFXO0lBRXRHLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsa0JBQWtCLENBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6SCxDQUFDO0FBRUQsOEZBQThGO0FBQzlGLGdHQUFnRztBQUNoRyxpQkFBaUI7QUFDakIsU0FBUyw0QkFBNEIsQ0FBZ0MsVUFBa0IsRUFDbkYsWUFBcUIsRUFBRSxHQUFHLFFBQXVCO0lBRWpELElBQUksWUFBWSxJQUFJLFVBQVU7UUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUUsVUFBVSxDQUFDLENBQUM7SUFFakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQ3hDO1FBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVU7WUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUUsVUFBVSxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDaEM7SUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDdEIsQ0FBQztBQUVELGlEQUFpRDtBQUNqRCxTQUFTLFlBQVksQ0FBZ0MsSUFBaUI7SUFFbEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3RCLENBQUM7QUFFRCxxRkFBcUY7QUFDckYsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLE1BQWtCLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEdBQUcsd0RBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUk1Rjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJHO0FBQ0ksTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQW9CLEVBQW9CLEVBQUU7SUFFN0QsSUFBSSxPQUFPLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFcEMsNkZBQTZGO0lBQzdGLHdCQUF3QjtJQUN4QixPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN0QixPQUFPLEtBQXlCLENBQUM7QUFDckMsQ0FBQztBQUVELGdEQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnREFBRyxDQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUlsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtDRztBQUNJLE1BQU0sS0FBSyxHQUFHLENBQUMsRUFBMkIsRUFBRSxJQUE2QyxFQUM1RixPQUEyQixHQUFHLEVBQWMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUM7QUFFbEYsa0RBQVksR0FBRyxDQUFDLENBQWEsRUFBRSxFQUFFO0lBQzdCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUYsT0FBTyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4RyxDQUFDO0FBSUQsbUdBQW1HO0FBQ25HLEVBQUU7QUFDRiw2Q0FBNkM7QUFDN0MsRUFBRTtBQUNGLG1HQUFtRztBQUVuRzs7OztHQUlHO0FBQ0ssTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFtQixFQUFFLENBQTBCLEVBQWMsRUFBRSxDQUNyRixDQUFDLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV6QixrREFBUyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztBQUl0Qjs7OztFQUlFO0FBQ0ssTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFvQixFQUFFLEVBQW9CLEVBQUUsRUFBb0IsRUFDM0YsRUFBb0IsRUFBb0IsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFckYsNERBQW1CLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7QUFJOUMsbUdBQW1HO0FBQ25HLEVBQUU7QUFDRixnQ0FBZ0M7QUFDaEMsRUFBRTtBQUNGLG1HQUFtRztBQUVuRzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSSxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQTJCLEVBQUUsR0FBRyxNQUFpQyxFQUFvQixFQUFFLENBQ3pHLEdBQUcsRUFBRSxDQUFDLGtEQUFLLENBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx1REFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFJN0U7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0ksTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUEyQixFQUFFLEdBQUcsTUFBa0IsRUFBdUIsRUFBRSxDQUNoRyxHQUFHLEVBQUUsQ0FBQyxrREFBSyxDQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsMERBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBSWhGLG1HQUFtRztBQUNuRyxFQUFFO0FBQ0Ysb0JBQW9CO0FBQ3BCLEVBQUU7QUFDRixtR0FBbUc7QUFFbkc7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNJLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBMkIsRUFBRSxHQUFHLE1BQWEsRUFBYSxFQUFFLENBQzVFLEdBQUcsRUFBRSxDQUFDLGtEQUFLLENBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBSWhDOzs7O0dBSUc7QUFDSSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQTZCLEVBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFbkYsZ0RBQU8sR0FBRyxDQUFFLENBQUMsR0FBRyxFQUFFLEVBQUMsR0FBRyxpQkFBWSxFQUFDLENBQUUsQ0FBQztBQWV0QyxpQkFBaUI7QUFDVixTQUFTLE1BQU0sQ0FBRSxHQUErQixFQUFFLENBQVUsRUFBRSxDQUFVO0lBRTNFLE9BQU8sRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDdkMsQ0FBQztBQUVELG1EQUFVLEdBQUcsQ0FBQyxDQUFjLEVBQUUsRUFBRSxDQUFDLGlEQUFJLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBSTlEOzs7Ozs7Ozs7O0dBVUc7QUFDSyxNQUFNLElBQUksR0FBRyxDQUFDLFFBQTBCLEVBQUUsVUFBd0QsRUFDekcsUUFBMkIsRUFBZ0IsRUFBRSxDQUMxQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLGlEQUFJLENBQUUsQ0FBQyxpREFBSSxDQUFFLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUkzRTs7Ozs7R0FLRztBQUNLLE1BQU0sT0FBTyxHQUFHLENBQUMsVUFBMkMsRUFDbkUsS0FBeUMsRUFBZ0IsRUFBRSxDQUN4RCxHQUFHLEVBQUUsQ0FBQyxnREFBRyxDQUFFLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBSS9DOzs7Ozs7OztHQVFHO0FBQ0ksTUFBTSxRQUFRLEdBQUcsQ0FBQyxVQUEyQyxFQUNuRSxHQUFxQixFQUFFLEtBQXlDLEVBQWdCLEVBQUUsQ0FDL0UsR0FBRyxFQUFFLENBQUMsZ0RBQUcsQ0FBRSxVQUFVLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLGtCQUFhLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUluRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRCRztBQUNJLE1BQU0sTUFBTSxHQUFHLENBQTZCLE1BQW1CLEVBQUUsUUFBOEIsRUFBYSxFQUFFLENBQ2pILEdBQUcsRUFBRSxDQUFDLGdEQUFHLENBQUUsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxxREFBSSxDQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7QUNuakIxRSxtR0FBbUc7QUFDbkcsRUFBRTtBQUNGLGVBQWU7QUFDZixFQUFFO0FBQ0YsbUdBQW1HO0FBa1cvQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FJaFdzRDtBQUMvRTtBQUs1Qyx1Q0FBdUM7QUFDdkMsTUFBTSxZQUFZLEdBQUcsQ0FBRSxDQUFTLEVBQUUsSUFBWSxFQUFpQixFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUlqRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFDSSxNQUFNLEdBQUcsR0FBZ0IseURBQVUsQ0FBQztBQUkzQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNJLE1BQU0sT0FBTyxHQUFpQiwwREFBVyxDQUFDO0FBRWpEOzs7O0dBSUc7QUFDSSxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQVMsRUFBaUIsRUFBRSxDQUFDLFlBQVksQ0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFJM0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFDSSxNQUFNLEdBQUcsR0FBZ0IseURBQVUsQ0FBQztBQUUzQzs7O0dBR0c7QUFDSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQVMsRUFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFcEU7Ozs7O0dBS0c7QUFDSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQVMsRUFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFdEU7OztHQUdHO0FBQ0ksTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFTLEVBQWdCLEVBQUUsQ0FBQyxZQUFZLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXRFOzs7R0FHRztBQUNJLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBUyxFQUFnQixFQUFFLENBQUMsWUFBWSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUV0RTs7O0dBR0c7QUFDSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQVMsRUFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFdEU7OztHQUdHO0FBQ0ksTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFTLEVBQWdCLEVBQUUsQ0FBQyxZQUFZLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXRFOzs7R0FHRztBQUNJLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBUyxFQUFnQixFQUFFLENBQUMsWUFBWSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUV4RTs7O0dBR0c7QUFDSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQVMsRUFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFdEU7OztHQUdHO0FBQ0ksTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFTLEVBQWdCLEVBQUUsQ0FBQyxZQUFZLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXRFOzs7R0FHRztBQUNJLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBUyxFQUFnQixFQUFFLENBQUMsWUFBWSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUV0RTs7O0dBR0c7QUFDSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQVMsRUFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFdEU7OztHQUdHO0FBQ0ksTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFTLEVBQWdCLEVBQUUsQ0FBQyxZQUFZLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXRFOzs7O0dBSUc7QUFDSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQVMsRUFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFdEU7OztHQUdHO0FBQ0ksTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFTLEVBQWdCLEVBQUUsQ0FBQyxZQUFZLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXRFOzs7O0dBSUc7QUFDSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQVMsRUFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFdEU7OztHQUdHO0FBQ0ksTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFTLEVBQWdCLEVBQUUsQ0FBQyxZQUFZLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXRFOzs7R0FHRztBQUNJLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBUyxFQUFnQixFQUFFLENBQUMsWUFBWSxDQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUV4RTs7O0dBR0c7QUFDSSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQVMsRUFBZ0IsRUFBRSxDQUFDLFlBQVks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QUE7V0FDQTtXQUNBO1dBQ0EsdURBQXVELGlCQUFpQjtXQUN4RTtXQUNBLGdEQUFnRCxhQUFhO1dBQzdEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTkEsOEJBQThCO0FBRUU7QUFDRztBQUNGO0FBQ0U7QUFDRjtBQUNEO0FBQ0M7QUFDRDtBQUNNO0FBQ0w7QUFDRDtBQUVGO0FBQ0c7QUFDRjtBQUNBO0FBQ0Q7QUFDTTtBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWltY3NzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvYXBpL0NvbG9yQVBJLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9hcGkvQ29sb3JUeXBlcy50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvYXBpL0NvcmVBUEkudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL2FwaS9Db3JlVHlwZXMudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL2FwaS9Db3VudGVyVHlwZXMudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL2FwaS9Gb250VHlwZXMudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL2FwaS9NZWRpYVR5cGVzLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9hcGkvTnVtZXJpY0FQSS50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvYXBpL051bWVyaWNUeXBlcy50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvYXBpL1J1bGVBUEkudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL2FwaS9SdWxlVHlwZXMudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL2FwaS9TY2hlZHVsaW5nQVBJLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9hcGkvU2NoZWR1bGluZ1R5cGVzLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9hcGkvU2hhcGVBUEkudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL2FwaS9TaGFwZVR5cGVzLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9hcGkvU3R5bGVBUEkudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL2FwaS9TdHlsZVR5cGVzLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9hcGkvU3R5bGVzZXRzLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9pbXBsL0NvcmVJbXBsLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9pbXBsL01pc2NJbXBsLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9pbXBsL051bWVyaWNJbXBsLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9pbXBsL1NjaGVkdWxpbmdJbXBsLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9pbXBsL1N0eWxlSW1wbC50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvaW1wbC9VdGlscy50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvcnVsZXMvQW5pbWF0aW9uUnVsZS50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvcnVsZXMvQ291bnRlclJ1bGVzLnRzIiwid2VicGFjazovL21pbWNzcy8uL3NyYy9ydWxlcy9HcmlkUnVsZXMudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL3J1bGVzL0dyb3VwUnVsZXMudHMiLCJ3ZWJwYWNrOi8vbWltY3NzLy4vc3JjL3J1bGVzL01pc2NSdWxlcy50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvcnVsZXMvUnVsZS50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvcnVsZXMvUnVsZUNvbnRhaW5lci50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvcnVsZXMvU3R5bGVSdWxlcy50cyIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvcnVsZXMvVmFyUnVsZS50cyIsIndlYnBhY2s6Ly9taW1jc3Mvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbWltY3NzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9taW1jc3Mvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9taW1jc3Mvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9taW1jc3MvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibWltY3NzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm1pbWNzc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIu+7v2ltcG9ydCB7RXh0ZW5kZWQsIE9uZU9yTWFueX0gZnJvbSBcIi4vQ29yZVR5cGVzXCI7XHJcbmltcG9ydCB7Q3NzQW5nbGUsIENzc1BlcmNlbnR9IGZyb20gXCIuL051bWVyaWNUeXBlc1wiO1xyXG5pbXBvcnQge0NvbG9yU3BhY2UsIENzc0NvbG9yLCBDc3NDb2xvclNlcGFyYXRpb24sIElBbHBoYUZ1bmMsIElDb2xvckNvbnRyYXN0RnVuYywgSUNvbG9yTWl4QnVpbGRlciwgSUhzbEZ1bmMsIElMYWJGdW5jLCBJTGNoRnVuYywgSU5hbWVkQ29sb3JzLCBJUmdiRnVuY30gZnJvbSBcIi4vQ29sb3JUeXBlc1wiO1xyXG5pbXBvcnQge2EycywgZmRvLCBtdjJzLCB2MnMsIHdrZiwgV0tGfSBmcm9tIFwiLi4vaW1wbC9VdGlsc1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogT2JqZWN0IHdob3NlIHByb3BlcnR5IG5hbWVzIGFyZSB0aGUgd2VsbC1rbm93biBXZWIgY29sb3IgbmFtZXMgd2hpbGUgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlXHJcbiAqIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBSR0Igc2VwYXJhdGlvbnMgKHdpdGhvdXQgYW4gYWxwaGEgbWFzaykuIFRoZSBwcm9wZXJ0aWVzIG9mXHJcbiAqIHRoaXMgb2JqZWN0IGNhbiBiZSB1c2VkIHdoZXJldmVyIHRoZSBbW0Nzc0NvbG9yXV0gdHlwZSBjYW4gYmUgdXNlZC4gU2luY2UgdGhlIHByb3BlcnRpZXMgYXJlXHJcbiAqIG9mIHRoZSBgbnVtYmVyYCB0eXBlLCB0aGV5IGNhbiBiZSB1c2VkIGZvciBtYW5pcHVsYXRpbmcgdGhlIGNvbG9yIHZhbHVlLlxyXG4qL1xyXG5leHBvcnQgY29uc3QgQ29sb3JzOiBJTmFtZWRDb2xvcnMgPVxyXG57XHJcbiAgICBibGFjazogICAgICAgICAgICAgICAgICAweDAwMDAwMCxcclxuICAgIHNpbHZlcjogICAgICAgICAgICAgICAgIDB4YzBjMGMwLFxyXG4gICAgZ3JheTogICAgICAgICAgICAgICAgICAgMHg4MDgwODAsXHJcbiAgICB3aGl0ZTogICAgICAgICAgICAgICAgICAweGZmZmZmZixcclxuICAgIG1hcm9vbjogICAgICAgICAgICAgICAgIDB4ODAwMDAwLFxyXG4gICAgcmVkOiAgICAgICAgICAgICAgICAgICAgMHhmZjAwMDAsXHJcbiAgICBwdXJwbGU6ICAgICAgICAgICAgICAgICAweDgwMDA4MCxcclxuICAgIGZ1Y2hzaWE6ICAgICAgICAgICAgICAgIDB4ZmYwMGZmLFxyXG4gICAgZ3JlZW46ICAgICAgICAgICAgICAgICAgMHgwMDgwMDAsXHJcbiAgICBsaW1lOiAgICAgICAgICAgICAgICAgICAweDAwZmYwMCxcclxuICAgIG9saXZlOiAgICAgICAgICAgICAgICAgIDB4ODA4MDAwLFxyXG4gICAgeWVsbG93OiAgICAgICAgICAgICAgICAgMHhmZmZmMDAsXHJcbiAgICBuYXZ5OiAgICAgICAgICAgICAgICAgICAweDAwMDA4MCxcclxuICAgIGJsdWU6ICAgICAgICAgICAgICAgICAgIDB4MDAwMGZmLFxyXG4gICAgdGVhbDogICAgICAgICAgICAgICAgICAgMHgwMDgwODAsXHJcbiAgICBhcXVhOiAgICAgICAgICAgICAgICAgICAweDAwZmZmZixcclxuICAgIG9yYW5nZTogICAgICAgICAgICAgICAgIDB4ZmZhNTAwLFxyXG4gICAgYWxpY2VibHVlOiAgICAgICAgICAgICAgMHhmMGY4ZmYsXHJcbiAgICBhbnRpcXVld2hpdGU6ICAgICAgICAgICAweGZhZWJkNyxcclxuICAgIGFxdWFtYXJpbmU6ICAgICAgICAgICAgIDB4N2ZmZmQ0LFxyXG4gICAgYXp1cmU6ICAgICAgICAgICAgICAgICAgMHhmMGZmZmYsXHJcbiAgICBiZWlnZTogICAgICAgICAgICAgICAgICAweGY1ZjVkYyxcclxuICAgIGJpc3F1ZTogICAgICAgICAgICAgICAgIDB4ZmZlNGM0LFxyXG4gICAgYmxhbmNoZWRhbG1vbmQ6ICAgICAgICAgMHhmZmViY2QsXHJcbiAgICBibHVldmlvbGV0OiAgICAgICAgICAgICAweDhhMmJlMixcclxuICAgIGJyb3duOiAgICAgICAgICAgICAgICAgIDB4YTUyYTJhLFxyXG4gICAgYnVybHl3b29kOiAgICAgICAgICAgICAgMHhkZWI4ODcsXHJcbiAgICBjYWRldGJsdWU6ICAgICAgICAgICAgICAweDVmOWVhMCxcclxuICAgIGNoYXJ0cmV1c2U6ICAgICAgICAgICAgIDB4N2ZmZjAwLFxyXG4gICAgY2hvY29sYXRlOiAgICAgICAgICAgICAgMHhkMjY5MWUsXHJcbiAgICBjb3JhbDogICAgICAgICAgICAgICAgICAweGZmN2Y1MCxcclxuICAgIGNvcm5mbG93ZXJibHVlOiAgICAgICAgIDB4NjQ5NWVkLFxyXG4gICAgY29ybnNpbGs6ICAgICAgICAgICAgICAgMHhmZmY4ZGMsXHJcbiAgICBjcmltc29uOiAgICAgICAgICAgICAgICAweGRjMTQzYyxcclxuICAgIGN5YW46ICAgICAgICAgICAgICAgICAgIDB4MDBmZmZmLFxyXG4gICAgZGFya2JsdWU6ICAgICAgICAgICAgICAgMHgwMDAwOGIsXHJcbiAgICBkYXJrY3lhbjogICAgICAgICAgICAgICAweDAwOGI4YixcclxuICAgIGRhcmtnb2xkZW5yb2Q6ICAgICAgICAgIDB4Yjg4NjBiLFxyXG4gICAgZGFya2dyYXk6ICAgICAgICAgICAgICAgMHhhOWE5YTksXHJcbiAgICBkYXJrZ3JlZW46ICAgICAgICAgICAgICAweDAwNjQwMCxcclxuICAgIGRhcmtncmV5OiAgICAgICAgICAgICAgIDB4YTlhOWE5LFxyXG4gICAgZGFya2toYWtpOiAgICAgICAgICAgICAgMHhiZGI3NmIsXHJcbiAgICBkYXJrbWFnZW50YTogICAgICAgICAgICAweDhiMDA4YixcclxuICAgIGRhcmtvbGl2ZWdyZWVuOiAgICAgICAgIDB4NTU2YjJmLFxyXG4gICAgZGFya29yYW5nZTogICAgICAgICAgICAgMHhmZjhjMDAsXHJcbiAgICBkYXJrb3JjaGlkOiAgICAgICAgICAgICAweDk5MzJjYyxcclxuICAgIGRhcmtyZWQ6ICAgICAgICAgICAgICAgIDB4OGIwMDAwLFxyXG4gICAgZGFya3NhbG1vbjogICAgICAgICAgICAgMHhlOTk2N2EsXHJcbiAgICBkYXJrc2VhZ3JlZW46ICAgICAgICAgICAweDhmYmM4ZixcclxuICAgIGRhcmtzbGF0ZWJsdWU6ICAgICAgICAgIDB4NDgzZDhiLFxyXG4gICAgZGFya3NsYXRlZ3JheTogICAgICAgICAgMHgyZjRmNGYsXHJcbiAgICBkYXJrc2xhdGVncmV5OiAgICAgICAgICAweDJmNGY0ZixcclxuICAgIGRhcmt0dXJxdW9pc2U6ICAgICAgICAgIDB4MDBjZWQxLFxyXG4gICAgZGFya3Zpb2xldDogICAgICAgICAgICAgMHg5NDAwZDMsXHJcbiAgICBkZWVwcGluazogICAgICAgICAgICAgICAweGZmMTQ5MyxcclxuICAgIGRlZXBza3libHVlOiAgICAgICAgICAgIDB4MDBiZmZmLFxyXG4gICAgZGltZ3JheTogICAgICAgICAgICAgICAgMHg2OTY5NjksXHJcbiAgICBkaW1ncmV5OiAgICAgICAgICAgICAgICAweDY5Njk2OSxcclxuICAgIGRvZGdlcmJsdWU6ICAgICAgICAgICAgIDB4MWU5MGZmLFxyXG4gICAgZmlyZWJyaWNrOiAgICAgICAgICAgICAgMHhiMjIyMjIsXHJcbiAgICBmbG9yYWx3aGl0ZTogICAgICAgICAgICAweGZmZmFmMCxcclxuICAgIGZvcmVzdGdyZWVuOiAgICAgICAgICAgIDB4MjI4YjIyLFxyXG4gICAgZ2FpbnNib3JvOiAgICAgICAgICAgICAgMHhkY2RjZGMsXHJcbiAgICBnaG9zdHdoaXRlOiAgICAgICAgICAgICAweGY4ZjhmZixcclxuICAgIGdvbGQ6ICAgICAgICAgICAgICAgICAgIDB4ZmZkNzAwLFxyXG4gICAgZ29sZGVucm9kOiAgICAgICAgICAgICAgMHhkYWE1MjAsXHJcbiAgICBncmVlbnllbGxvdzogICAgICAgICAgICAweGFkZmYyZixcclxuICAgIGdyZXk6ICAgICAgICAgICAgICAgICAgIDB4ODA4MDgwLFxyXG4gICAgaG9uZXlkZXc6ICAgICAgICAgICAgICAgMHhmMGZmZjAsXHJcbiAgICBob3RwaW5rOiAgICAgICAgICAgICAgICAweGZmNjliNCxcclxuICAgIGluZGlhbnJlZDogICAgICAgICAgICAgIDB4Y2Q1YzVjLFxyXG4gICAgaW5kaWdvOiAgICAgICAgICAgICAgICAgMHg0YjAwODIsXHJcbiAgICBpdm9yeTogICAgICAgICAgICAgICAgICAweGZmZmZmMCxcclxuICAgIGtoYWtpOiAgICAgICAgICAgICAgICAgIDB4ZjBlNjhjLFxyXG4gICAgbGF2ZW5kZXI6ICAgICAgICAgICAgICAgMHhlNmU2ZmEsXHJcbiAgICBsYXZlbmRlcmJsdXNoOiAgICAgICAgICAweGZmZjBmNSxcclxuICAgIGxhd25ncmVlbjogICAgICAgICAgICAgIDB4N2NmYzAwLFxyXG4gICAgbGVtb25jaGlmZm9uOiAgICAgICAgICAgMHhmZmZhY2QsXHJcbiAgICBsaWdodGJsdWU6ICAgICAgICAgICAgICAweGFkZDhlNixcclxuICAgIGxpZ2h0Y29yYWw6ICAgICAgICAgICAgIDB4ZjA4MDgwLFxyXG4gICAgbGlnaHRjeWFuOiAgICAgICAgICAgICAgMHhlMGZmZmYsXHJcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogICAweGZhZmFkMixcclxuICAgIGxpZ2h0Z3JheTogICAgICAgICAgICAgIDB4ZDNkM2QzLFxyXG4gICAgbGlnaHRncmVlbjogICAgICAgICAgICAgMHg5MGVlOTAsXHJcbiAgICBsaWdodGdyZXk6ICAgICAgICAgICAgICAweGQzZDNkMyxcclxuICAgIGxpZ2h0cGluazogICAgICAgICAgICAgIDB4ZmZiNmMxLFxyXG4gICAgbGlnaHRzYWxtb246ICAgICAgICAgICAgMHhmZmEwN2EsXHJcbiAgICBsaWdodHNlYWdyZWVuOiAgICAgICAgICAweDIwYjJhYSxcclxuICAgIGxpZ2h0c2t5Ymx1ZTogICAgICAgICAgIDB4ODdjZWZhLFxyXG4gICAgbGlnaHRzbGF0ZWdyYXk6ICAgICAgICAgMHg3Nzg4OTksXHJcbiAgICBsaWdodHNsYXRlZ3JleTogICAgICAgICAweDc3ODg5OSxcclxuICAgIGxpZ2h0c3RlZWxibHVlOiAgICAgICAgIDB4YjBjNGRlLFxyXG4gICAgbGlnaHR5ZWxsb3c6ICAgICAgICAgICAgMHhmZmZmZTAsXHJcbiAgICBsaW1lZ3JlZW46ICAgICAgICAgICAgICAweDMyY2QzMixcclxuICAgIGxpbmVuOiAgICAgICAgICAgICAgICAgIDB4ZmFmMGU2LFxyXG4gICAgbWFnZW50YTogICAgICAgICAgICAgICAgMHhmZjAwZmYsXHJcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiAgICAgICAweDY2Y2RhYSxcclxuICAgIG1lZGl1bWJsdWU6ICAgICAgICAgICAgIDB4MDAwMGNkLFxyXG4gICAgbWVkaXVtb3JjaGlkOiAgICAgICAgICAgMHhiYTU1ZDMsXHJcbiAgICBtZWRpdW1wdXJwbGU6ICAgICAgICAgICAweDkzNzBkYixcclxuICAgIG1lZGl1bXNlYWdyZWVuOiAgICAgICAgIDB4M2NiMzcxLFxyXG4gICAgbWVkaXVtc2xhdGVibHVlOiAgICAgICAgMHg3YjY4ZWUsXHJcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogICAgICAweDAwZmE5YSxcclxuICAgIG1lZGl1bXR1cnF1b2lzZTogICAgICAgIDB4NDhkMWNjLFxyXG4gICAgbWVkaXVtdmlvbGV0cmVkOiAgICAgICAgMHhjNzE1ODUsXHJcbiAgICBtaWRuaWdodGJsdWU6ICAgICAgICAgICAweDE5MTk3MCxcclxuICAgIG1pbnRjcmVhbTogICAgICAgICAgICAgIDB4ZjVmZmZhLFxyXG4gICAgbWlzdHlyb3NlOiAgICAgICAgICAgICAgMHhmZmU0ZTEsXHJcbiAgICBtb2NjYXNpbjogICAgICAgICAgICAgICAweGZmZTRiNSxcclxuICAgIG5hdmFqb3doaXRlOiAgICAgICAgICAgIDB4ZmZkZWFkLFxyXG4gICAgb2xkbGFjZTogICAgICAgICAgICAgICAgMHhmZGY1ZTYsXHJcbiAgICBvbGl2ZWRyYWI6ICAgICAgICAgICAgICAweDZiOGUyMyxcclxuICAgIG9yYW5nZXJlZDogICAgICAgICAgICAgIDB4ZmY0NTAwLFxyXG4gICAgb3JjaGlkOiAgICAgICAgICAgICAgICAgMHhkYTcwZDYsXHJcbiAgICBwYWxlZ29sZGVucm9kOiAgICAgICAgICAweGVlZThhYSxcclxuICAgIHBhbGVncmVlbjogICAgICAgICAgICAgIDB4OThmYjk4LFxyXG4gICAgcGFsZXR1cnF1b2lzZTogICAgICAgICAgMHhhZmVlZWUsXHJcbiAgICBwYWxldmlvbGV0cmVkOiAgICAgICAgICAweGRiNzA5MyxcclxuICAgIHBhcGF5YXdoaXA6ICAgICAgICAgICAgIDB4ZmZlZmQ1LFxyXG4gICAgcGVhY2hwdWZmOiAgICAgICAgICAgICAgMHhmZmRhYjksXHJcbiAgICBwZXJ1OiAgICAgICAgICAgICAgICAgICAweGNkODUzZixcclxuICAgIHBpbms6ICAgICAgICAgICAgICAgICAgIDB4ZmZjMGNiLFxyXG4gICAgcGx1bTogICAgICAgICAgICAgICAgICAgMHhkZGEwZGQsXHJcbiAgICBwb3dkZXJibHVlOiAgICAgICAgICAgICAweGIwZTBlNixcclxuICAgIHJvc3licm93bjogICAgICAgICAgICAgIDB4YmM4ZjhmLFxyXG4gICAgcm95YWxibHVlOiAgICAgICAgICAgICAgMHg0MTY5ZTEsXHJcbiAgICBzYWRkbGVicm93bjogICAgICAgICAgICAweDhiNDUxMyxcclxuICAgIHNhbG1vbjogICAgICAgICAgICAgICAgIDB4ZmE4MDcyLFxyXG4gICAgc2FuZHlicm93bjogICAgICAgICAgICAgMHhmNGE0NjAsXHJcbiAgICBzZWFncmVlbjogICAgICAgICAgICAgICAweDJlOGI1NyxcclxuICAgIHNlYXNoZWxsOiAgICAgICAgICAgICAgIDB4ZmZmNWVlLFxyXG4gICAgc2llbm5hOiAgICAgICAgICAgICAgICAgMHhhMDUyMmQsXHJcbiAgICBza3libHVlOiAgICAgICAgICAgICAgICAweDg3Y2VlYixcclxuICAgIHNsYXRlYmx1ZTogICAgICAgICAgICAgIDB4NmE1YWNkLFxyXG4gICAgc2xhdGVncmF5OiAgICAgICAgICAgICAgMHg3MDgwOTAsXHJcbiAgICBzbGF0ZWdyZXk6ICAgICAgICAgICAgICAweDcwODA5MCxcclxuICAgIHNub3c6ICAgICAgICAgICAgICAgICAgIDB4ZmZmYWZhLFxyXG4gICAgc3ByaW5nZ3JlZW46ICAgICAgICAgICAgMHgwMGZmN2YsXHJcbiAgICBzdGVlbGJsdWU6ICAgICAgICAgICAgICAweDQ2ODJiNCxcclxuICAgIHRhbjogICAgICAgICAgICAgICAgICAgIDB4ZDJiNDhjLFxyXG4gICAgdGhpc3RsZTogICAgICAgICAgICAgICAgMHhkOGJmZDgsXHJcbiAgICB0b21hdG86ICAgICAgICAgICAgICAgICAweGZmNjM0NyxcclxuICAgIHR1cnF1b2lzZTogICAgICAgICAgICAgIDB4NDBlMGQwLFxyXG4gICAgdmlvbGV0OiAgICAgICAgICAgICAgICAgMHhlZTgyZWUsXHJcbiAgICB3aGVhdDogICAgICAgICAgICAgICAgICAweGY1ZGViMyxcclxuICAgIHdoaXRlc21va2U6ICAgICAgICAgICAgIDB4ZjVmNWY1LFxyXG4gICAgeWVsbG93Z3JlZW46ICAgICAgICAgICAgMHg5YWNkMzIsXHJcbiAgICByZWJlY2NhcHVycGxlOiAgICAgICAgICAweDY2MzM5OSxcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIE9iamVjdCB3aGVyZSB3ZSBrZWVwIHRoZSByZWdpc3RlcmVkIGN1c3RvbSBjb2xvcnMuIFdlIG5lZWQgaXQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGNvbG9yXHJcbiAqIGlzIGEgc3RhbmRhcmQgb3IgYSBjdXN0b20gb25lLlxyXG4gKi9cclxuY29uc3QgY3VzdG9tQ29sb3JzOiB7IFtQOiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVnaXN0ZXJzIGEgbmV3IGN1c3RvbSBjb2xvciBvciBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiB0aGUgZXhpc3RpbmcgY3VzdG9tIGNvbG9yLiBUaGUgbmFtZSBvZiB0aGVcclxuICogY3VzdG9tIGNvbG9yIHNob3VsZCBoYXZlIGJlZW4gYWxyZWFkeSBhZGRlZCB0byB0aGUgW1tJTmFtZWRDb2xvcnNdXSBpbnRlcmZhY2UgdXNpbmcgdGhlIG1vZHVsZVxyXG4gKiBhdWdtZW50YXRpb24gdGVjaG5pcXVlLiBOb3RlIHRoYXQgdmFsdWVzIG9mIHN0YW5kYXJkIFdlYiBjb2xvcnMgY2Fubm90IGJlIGNoYW5nZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSBuYW1lIENvbG9yIG5hbWUuIFRoaXMgbmFtZSBjYW5ub3QgYmUgYSBuYW1lIG9mIHRoZSBzdGFuZGFyZCBXZWIgY29sb3IuXHJcbiAqIEBwYXJhbSB2YWx1ZSBDb2xvciB2YWx1ZSB0byBhc3NpZ24gdG8gdGhlIGdpdmVuIG5hbWVkIGNvbG9yLlxyXG4gKiBAcmV0dXJucyBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyQ29sb3IgPSAoIG5hbWU6IGtleW9mIElOYW1lZENvbG9ycywgdmFsdWU6IG51bWJlcik6IGJvb2xlYW4gPT5cclxue1xyXG4gICAgaWYgKCFuYW1lIHx8IHZhbHVlID09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIC8vIHRyeSB0byByZXRyaWV2ZSB0aGlzIG5hbWUgZnJvbSB0aGUgQ3VzdG9tQ29sb3JzIG9iamVjdC4gTm9uLXVuZGVmaW5lZCB2YWx1ZSBtZWFucyB0aGF0XHJcbiAgICAvLyB3ZSBhbHJlYWR5IGhhdmUgdGhpcyBjb2xvciByZWdpc3RlcmVkLlxyXG4gICAgbGV0IGN1c3RvbVZhbHVlID0gY3VzdG9tQ29sb3JzW25hbWVdO1xyXG5cclxuICAgIC8vIGlmIHRoZSBjb2xvciBuYW1lIGFscmVhZHkgZXhpc3RzIGluIHRoZSBDb2xvcnMgb2JqZWN0IHdlIHdpbGwgb25seSBhbGxvdyBjaGFuZ2luZyBpdHNcclxuICAgIC8vIHZhbHVlIGlmIHRoaXMgaXMgYSBjdXN0b20gY29sb3IuXHJcbiAgICBpZiAobmFtZSBpbiBDb2xvcnMgJiYgY3VzdG9tVmFsdWUgIT0gbnVsbClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgLy8gYWRkIHRoZSB2YWx1ZSB0byB0aGUgQ29sb3JzIGFuZCBDdXN0b21Db2xvcnMgb2JqZWN0c1xyXG4gICAgKENvbG9ycyBhcyBhbnkpW25hbWVdID0gdmFsdWU7XHJcbiAgICBjdXN0b21Db2xvcnNbbmFtZV0gPSB2YWx1ZTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBjb2xvciB2YWx1ZSBmcm9tIHRoZSBudW1lcmljIHJlcHJlc2VudGF0aW9uIHRvIHRoZSBDU1MgY29sb3Igc3RyaW5nLlxyXG4gKi9cclxubGV0ICBjb2xvck51bWJlcjJzID0gKHZhbDogbnVtYmVyKTogc3RyaW5nID0+XHJcbntcclxuICAgIC8vIGlmIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUsIHJlbWVtYmVyIHRoYXQgZmFjdCBhbmQgZ2V0IHRoZSBwb3NpdGl2ZSBudW1iZXJcclxuICAgIGxldCBpc05lZ2F0aXZlID0gdmFsIDwgMDtcclxuICAgIGxldCBuID0gaXNOZWdhdGl2ZSA/IC12YWwgOiB2YWw7XHJcblxyXG4gICAgLy8gaWYgdGhlIG51bWJlciBoYXMgYSBmbG9hdGluZyBwb2ludCBwYXJ0LCBzZXBhcmF0ZSBpdCBpbnRvIGFscGhhIGNoYW5uZWxcclxuICAgIGxldCBhID0gMDtcclxuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihuKSlcclxuICAgIHtcclxuICAgICAgICBsZXQgayA9IE1hdGguZmxvb3Iobik7XHJcbiAgICAgICAgLy8gYSA9IE1hdGgucm91bmQoIChuIC0gaykgKiAxMDApO1xyXG4gICAgICAgIGEgPSBNYXRoLnJvdW5kKCAobiAtIGspICogMjU1KTtcclxuICAgICAgICBuID0gaztcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgbnVtYmVyIHdhcyBuZWdhdGl2ZSB3ZSByZXZlcnQgdGhlIGNvbG9yIGJ5IG5lZ2F0aW5nIGFsbCB0aGUgYml0cy4gSW4gYW55IGNhc2UsXHJcbiAgICAvLyB3ZSBjbGVhciBldmVyeXRoaW5nIGJleW9uZCB0aGUgZmlyc3QgdGhyZWUgYnl0ZXMuXHJcbiAgICBuID0gaXNOZWdhdGl2ZSA/IH4oMHhGRjAwMDAwMCB8IG4pIDogMHgwMEZGRkZGRiAmIG47XHJcblxyXG4gICAgbGV0IHMgPSBcIiNcIiArIG4udG9TdHJpbmcoMTYpLnBhZFN0YXJ0KCA2LCBcIjBcIik7XHJcbiAgICByZXR1cm4gYSA/IHMgKyBhLnRvU3RyaW5nKDE2KS5wYWRTdGFydCggMiwgXCIwXCIpIDogcztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgY29sb3Igc3R5bGUgdmFsdWUgdG8gdGhlIENTUyBzdHJpbmcuIFdlIGNvbnZlcnQgbnVtZXJpYyB2YWx1ZXMgdG8gdGhlICNSUkdHQkJBQVxyXG4gKiByZXByZXNlbnRhdGlvbi4gSWYgYSBzdHJpbmcgdmFsdWUgaXMgYSBjdXN0b20gY29sb3IgYWRkZWQgdmlhIElOYW1lZENvbG9ycyBtb2R1bGVcclxuICogYXVnbWVudGF0aW9uIHdlIGdldCBpdHMgbnVtYmVyIGZyb20gdGhlIGBjdXN0bUNvbG9yc2Agb2JqZWN0IGFuZCBhbHNvIGNvbnZlcnQgaXQgdG8gdGhlXHJcbiAqICNSUkdHQkJBQSByZXByZXNlbnRhdGlvbi4gU3RhbmRhcmQgbmFtZWQgY29sb3JzIGFzIHdlbGwgYXMgYXJlIHJldHVybmVkIGFzIGlzLlxyXG4gKi9cclxud2tmW1dLRi5Db2xvcl0gPSAodmFsOiBFeHRlbmRlZDxDc3NDb2xvcj4pOiBzdHJpbmcgPT5cclxuICAgIHYycyggdmFsLCB7XHJcbiAgICAgICAgc3RyOiB2ID0+IHYgaW4gY3VzdG9tQ29sb3JzID8gY29sb3JOdW1iZXIycyggY3VzdG9tQ29sb3JzW3ZdKSA6IHYsXHJcbiAgICAgICAgbnVtOiBjb2xvck51bWJlcjJzXHJcbiAgICB9KTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBjb2xvciBzdHlsZSB2YWx1ZSB0byB0aGUgQ1NTIHN0cmluZy4gV2UgY29udmVydCBudW1lcmljIHZhbHVlcyB0byB0aGUgI1JSR0dCQkFBXHJcbiAqIHJlcHJlc2VudGF0aW9uLiBJZiBhIHN0cmluZyB2YWx1ZSBpcyBhIGN1c3RvbSBjb2xvciBhZGRlZCB2aWEgSU5hbWVkQ29sb3JzIG1vZHVsZVxyXG4gKiBhdWdtZW50YXRpb24gd2UgZ2V0IGl0cyBudW1iZXIgZnJvbSB0aGUgYGN1c3RtQ29sb3JzYCBvYmplY3QgYW5kIGFsc28gY29udmVydCBpdCB0byB0aGVcclxuICogI1JSR0dCQkFBIHJlcHJlc2VudGF0aW9uLiBTdGFuZGFyZCBuYW1lZCBjb2xvcnMgYXMgd2VsbCBhcyBhcmUgcmV0dXJuZWQgYXMgaXMuXHJcbiAqL1xyXG53a2ZbV0tGLkNvbG9yc10gPSAodmFsOiBPbmVPck1hbnk8Q3NzQ29sb3I+KTogc3RyaW5nID0+IHYycyggdmFsLCB7IGFueTogV0tGLkNvbG9yIH0pXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgY29sb3Igc2VwYXJhdGlvbiB2YWx1ZSB0byBhIENTUyBzdHJpbmcuXHJcbiAqL1xyXG53a2ZbV0tGLkNvbG9yU2VwYXJhdGlvbl0gPSAoYzogRXh0ZW5kZWQ8bnVtYmVyPik6IHN0cmluZyA9PlxyXG4gICAgdjJzKCBjLCB7XHJcbiAgICAgICAgbnVtOiBjID0+IHtcclxuICAgICAgICAgICAgYyA9IGMgPCAwID8gLWMgOiBjO1xyXG4gICAgICAgICAgICByZXR1cm4gKGMgPT09IDAgfHwgYyA+PSAxKSA/IFwiXCIgKyBjIDogKE1hdGgucm91bmQoIGMgKiAxMDApICsgXCIlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgY29sb3Igc3BlY2lmaWVkIGFzIHJlZCwgZ3JlZW4sIGJsdWUgc2VwYXJhdGlvbiB2YWx1ZXMgYW5kIGFuIG9wdGlvbmFsIGFscGhhXHJcbiAqIG1hc2sgdG8gYSBDU1MgY29sb3IgcmVwcmVzZW50YXRpb24uIEVhY2ggY29sb3Igc2VwYXJhdGlvbiBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYSBudW1iZXIgd2l0aFxyXG4gKiB0aGUgZm9sbG93aW5nIG1lYW5pbmc6XHJcbiAqICAgLSBJbnRlZ2VyIG51bWJlciAtMjU1IHRvIDI1NS4gTnVtYmVycyBiZXlvbmQgdGhpcyByYW5nZSB3aWxsIGJlIGNsYW1wZWQuIE5lZ2F0aXZlIG51bWJlcnNcclxuICogICAgIHdpbGwgYmUgaW52ZXJ0ZWQuXHJcbiAqICAgLSBGbG9hdGluZyBudW1iZXIgLTEuMCB0byAxLjAgbm9uLWluY2x1c2l2ZSwgd2hpY2ggaXMgbXVsdGlwbGllZCBieSAxMDAgdHJlYXRlZCBhcyBwZXJjZW50YWdlLlxyXG4gKiAgICAgRmxvYXRpbmcgbnVtYmVycyBiZXlvbmQgdGhpcyByYW5nZSB3aWxsIGJlIHJvdW5kZWQgYW5kIHRyZWF0ZWQgYXMgaW50ZWdlciBudW1iZXJzLiBOZWdhdGl2ZVxyXG4gKiAgICAgbnVtYmVycyB3aWxsIGJlIGludmVydGVkLlxyXG4gKlxyXG4gKiBUaGUgYWxwaGEgbWFzayBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XHJcbiAqICAgLSBGbG9hdGluZyBudW1iZXIgMCB0byAxIGluY2x1c2l2ZS5cclxuICogICAtIEludGVnZXIgb3IgZmxvYXRpbmcgbnVtYmVyIDEgdG8gMTAwLCB3aGljaCBpcyBkaXZpZGVkIGJ5IDEwMC4gRmxvYXRpbmcgbnVtYmVycyB3aWxsIGJlXHJcbiAqICAgICByb3VuZGVkLiBOdW1iZXJzIGJleW9uZCB0aGlzIHJhbmdlIHdpbGwgYmUgY2xhbXBlZC5cclxuICogICAtIFRoZSBzaWduIG9mIGFscGhhIGlzIGlnbm9yZWQ7IHRoYXQgaXMsIG9ubHkgdGhlIGFic29sdXRlIHZhbHVlIGlzIGNvbnNpZGVyZWQuXHJcbiAqXHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sb3JfdmFsdWUvcmdiKClcclxuICpcclxuICogQHBhcmFtIHIgUmVkIHNlcGFyYXRpb24gdmFsdWUuXHJcbiAqIEBwYXJhbSBnIEdyZWVuIHNlcGFyYXRpb24gdmFsdWUuXHJcbiAqIEBwYXJhbSBiIEJsdWUgc2VwYXJhdGlvbiB2YWx1ZS5cclxuICogQHBhcmFtIGEgT3B0aW9uYWwgYWxwaGEgbWFzayBhcyBhIHBlcmNlbnRhZ2UgdmFsdWUuXHJcbiAqIEByZXR1cm4gVGhlIGBJUmdiRnVuY2Agb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgaW52b2NhdGlvbiBvZiB0aGUgYHJnYigpYCBDU1MgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCByZ2IgPSAocjogRXh0ZW5kZWQ8Q3NzQ29sb3JTZXBhcmF0aW9uPiwgZzogRXh0ZW5kZWQ8Q3NzQ29sb3JTZXBhcmF0aW9uPixcclxuICAgIGI6IEV4dGVuZGVkPENzc0NvbG9yU2VwYXJhdGlvbj4sIGE/OiBFeHRlbmRlZDxDc3NQZXJjZW50Pik6IElSZ2JGdW5jID0+XHJcbntcclxuICAgIHJldHVybiB7IGZuOiBcInJnYlwiLCByLCBnLCBiLCBhIH07XHJcbn1cclxuXHJcbmZkby5yZ2IgPSB7XHJcbiAgICBwOiBbIFtcInJcIiwgV0tGLkNvbG9yU2VwYXJhdGlvbl0sIFtcImdcIiwgIFdLRi5Db2xvclNlcGFyYXRpb25dLCBbXCJiXCIsICBXS0YuQ29sb3JTZXBhcmF0aW9uXSwgW1wiYVwiLCAgV0tGLlBlcmNlbnQsIFwiL1wiXSBdLFxyXG4gICAgczogXCIgXCJcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBjb2xvciBzcGVjaWZpZWQgYXMgaHVlLXNhdHVyYXRpb24tbGlnaHRuZXNzIGNvbXBvbmVudHMgYW5kIGFuIG9wdGlvbmFsIGFscGhhXHJcbiAqIG1hc2sgdG8gYSBDU1MgY29sb3IgcmVwcmVzZW50YXRpb24uIFRoaXMgbWV0aG9kIHNob3VsZCBiZSB1c2VkIHdoZW4gZGVmaW5pbmcgQ1NTIGNvbG9yXHJcbiAqIHZhbHVlcyBpbiBzdHlsZXNldCBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBUaGUgSHVlIGNvbXBvbmVudCBpcyB0cmVhdGVkIGFzIHRoZSBDU1MgYDxhbmdsZT5gIHR5cGUuIE51bWJlcnMgYXJlIGNvbnNpZGVyZWQgZGVncmVlcy5cclxuICpcclxuICogVGhlIFNhdHVyYXRpb24gYW5kIExpZ2h0bmVzcyBjb21wb25lbnRzIGFyZSB0cmVhdGVkIGFzIHBlcmNlbnRhZ2VzOlxyXG4gKiAgIC0gVGhlIHNpZ24gaXMgaWdub3JlZDsgdGhhdCBpcywgb25seSB0aGUgYWJzb2x1dGUgdmFsdWUgaXMgY29uc2lkZXJlZC5cclxuICogICAtIEZsb2F0aW5nIG51bWJlciAwIHRvIDEgaW5jbHVzaXZlIGFyZSBtdWx0aXBsaWVkIGJ5IDEwMCBhbmQgdHJlYXRlZCBhcyBwZXJjZW50YWdlLlxyXG4gKiAgIC0gSW50ZWdlciBvciBmbG9hdGluZyBudW1iZXIgMSB0byAxMDAgYXJlIHRyZWF0ZWQgYXMgcGVyY2VudGFnZS4gRmxvYXRpbmcgbnVtYmVycyB3aWxsIGJlXHJcbiAqICAgICByb3VuZGVkLiBOdW1iZXJzIGJleW9uZCB0aGlzIHJhbmdlIHdpbGwgYmUgY2xhbXBlZCB0byAxMDAuXHJcbiAqXHJcbiAqIFRoZSBhbHBoYSBtYXNrIGNhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcclxuICogICAtIEZsb2F0aW5nIG51bWJlciAwIHRvIDEgaW5jbHVzaXZlLlxyXG4gKiAgIC0gSW50ZWdlciBvciBmbG9hdGluZyBudW1iZXIgMSB0byAxMDAsIHdoaWNoIGlzIGRpdmlkZWQgYnkgMTAwLiBGbG9hdGluZyBudW1iZXJzIHdpbGwgYmVcclxuICogICAgIHJvdW5kZWQuIE51bWJlcnMgYmV5b25kIHRoaXMgcmFuZ2Ugd2lsbCBiZSBjbGFtcGVkLlxyXG4gKiAgIC0gVGhlIHNpZ24gb2YgYWxwaGEgaXMgaWdub3JlZDsgdGhhdCBpcywgb25seSB0aGUgYWJzb2x1dGUgdmFsdWUgaXMgY29uc2lkZXJlZC5cclxuICpcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2xvcl92YWx1ZS9oc2woKVxyXG4gKlxyXG4gKiBAcGFyYW0gaCBIdWUgY29tcG9uZW50IGFzIGFuIGFuZ2xlIHZhbHVlLlxyXG4gKiBAcGFyYW0gcyBTYXR1cmF0aW9uIGNvbXBvbmVudCBhcyBhIHBlcmNlbnRhZ2UgdmFsdWUuXHJcbiAqIEBwYXJhbSBsIExpZ2h0bmVzcyBjb21wb25lbnQgYXMgYSBwZXJjZW50YWdlIHZhbHVlLlxyXG4gKiBAcGFyYW0gYSBPcHRpb25hbCBhbHBoYSBtYXNrIGFzIGEgcGVyY2VudGFnZSB2YWx1ZS5cclxuICogQHJldHVybiBUaGUgYElIc2xGdW5jYCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBpbnZvY2F0aW9uIG9mIHRoZSBgaHNsKClgIENTUyBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGhzbCA9IChoOiBFeHRlbmRlZDxDc3NBbmdsZT4sIHM6IEV4dGVuZGVkPENzc1BlcmNlbnQ+LCBsOiBFeHRlbmRlZDxDc3NQZXJjZW50PixcclxuICAgIGE/OiBFeHRlbmRlZDxDc3NQZXJjZW50Pik6IElIc2xGdW5jID0+XHJcbntcclxuICAgIHJldHVybiB7IGZuOiBcImhzbFwiLCBoLCBzLCBsLCBhIH07XHJcbn1cclxuXHJcbmZkby5oc2wgPSB7XHJcbiAgICBwOiBbIFtcImhcIiwgV0tGLkFuZ2xlXSwgW1wic1wiLCBXS0YuUGVyY2VudF0sIFtcImxcIiwgV0tGLlBlcmNlbnRdLCBbXCJhXCIsIFdLRi5QZXJjZW50LCBcIi9cIl0gXSxcclxuICAgIHM6IFwiIFwiXHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgY29sb3Igc3BlY2lmaWVkIGFzIExcXCphXFwqYlxcKiBjb21wb25lbnRzIGFuZCBhbiBvcHRpb25hbCBhbHBoYVxyXG4gKiBtYXNrIHRvIGEgQ1NTIGNvbG9yIHJlcHJlc2VudGF0aW9uLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCB3aGVuIGRlZmluaW5nIENTUyBjb2xvclxyXG4gKiB2YWx1ZXMgaW4gc3R5bGVzZXQgcHJvcGVydGllcy5cclxuICpcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2xvcl92YWx1ZS9sYWIoKVxyXG4gKlxyXG4gKiBAcGFyYW0gbCBDSUUgTGlnaHRuZXNzIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0gZGEgRGlzdGFuY2UgYWxvbmcgdGhlIGEgYXhpcyBpbiB0aGUgTGFiIGNvbG9yc3BhY2VcclxuICogQHBhcmFtIGRiIERpc3RhbmNlIGFsb25nIHRoZSBiIGF4aXMgaW4gdGhlIExhYiBjb2xvcnNwYWNlXHJcbiAqIEBwYXJhbSBhIE9wdGlvbmFsIGFscGhhIG1hc2sgYXMgYSBwZXJjZW50YWdlIHZhbHVlLlxyXG4gKiBAcmV0dXJucyBUaGUgYElMYWJGdW5jYCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBpbnZvY2F0aW9uIG9mIHRoZSBgbGFiKClgIENTUyBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGxhYiA9IChsOiBFeHRlbmRlZDxDc3NQZXJjZW50PiwgZGE6IEV4dGVuZGVkPG51bWJlcj4sIGRiOiBFeHRlbmRlZDxudW1iZXI+LFxyXG4gICAgYT86IEV4dGVuZGVkPENzc1BlcmNlbnQ+KTogSUxhYkZ1bmMgPT5cclxue1xyXG4gICAgcmV0dXJuIHsgZm46IFwibGFiXCIsIGwsIGRhLCBkYiwgYSB9O1xyXG59XHJcblxyXG5mZG8ubGFiID0ge1xyXG4gICAgcDogWyBbXCJsXCIsIFdLRi5BbHdheXNQZXJjZW50XSwgXCJkYVwiLCBcImRiXCIsIFtcImFcIiwgV0tGLlBlcmNlbnQsIFwiL1wiXSBdLFxyXG4gICAgczogXCIgXCJcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBjb2xvciBzcGVjaWZpZWQgYXMgbGlnaHRuZXNzLWNocm9tYS1odWUgY29tcG9uZW50cyBhbmQgYW4gb3B0aW9uYWwgYWxwaGFcclxuICogbWFzayB0byBhIENTUyBjb2xvciByZXByZXNlbnRhdGlvbi4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgd2hlbiBkZWZpbmluZyBDU1MgY29sb3JcclxuICogdmFsdWVzIGluIHN0eWxlc2V0IHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sb3JfdmFsdWUvbGNoKClcclxuICpcclxuICogQHBhcmFtIGwgQ0lFIExpZ2h0bmVzcyBjb21wb25lbnRcclxuICogQHBhcmFtIGMgQ2hyb21hIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0gaCBIdWUgY29tcG9uZW50IGFzIGFuIGFuZ2xlIHZhbHVlLlxyXG4gKiBAcGFyYW0gYSBPcHRpb25hbCBhbHBoYSBtYXNrIGFzIGEgcGVyY2VudGFnZSB2YWx1ZS5cclxuICogQHJldHVybnMgVGhlIGBJTGNoRnVuY2Agb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgaW52b2NhdGlvbiBvZiB0aGUgYGxjaCgpYCBDU1MgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBsY2ggPSAobDogRXh0ZW5kZWQ8Q3NzUGVyY2VudD4sIGM6IEV4dGVuZGVkPG51bWJlcj4sIGg6IEV4dGVuZGVkPENzc0FuZ2xlPixcclxuICAgIGE/OiBFeHRlbmRlZDxDc3NQZXJjZW50Pik6IElMY2hGdW5jID0+XHJcbntcclxuICAgIHJldHVybiB7IGZuOiBcImxjaFwiLCBsLCBjLCBoLCBhIH07XHJcbn1cclxuXHJcbmZkby5sY2ggPSB7XHJcbiAgICBwOiBbIFtcImxcIiwgV0tGLkFsd2F5c1BlcmNlbnRdLCBcImNcIiwgW1wiaFwiLCBXS0YuQW5nbGVdLCBbXCJhXCIsIFdLRi5QZXJjZW50LCBcIi9cIl0gXSxcclxuICAgIHM6IFwiIFwiXHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRzIHRoZSBgY29sb3ItY29udHJhc3QoKWAgQ1NTIHByb3BlcnR5LlxyXG4gKlxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yX3ZhbHVlL2NvbG9yLWNvbnRyYXN0KClcclxuICpcclxuICogQHBhcmFtIGMgQ29sb3IgdG8gd2hpY2ggdGhlIGxpc3Qgb2YgY29sb3JzIGluIHRoZSBgdnNgIHByb3BlcnR5IHdpbGwgYmUgY29tcGFyZWRcclxuICogQHBhcmFtIHZzIExpc3Qgb2YgY29sb3JzIGZyb20gd2hpY2ggdG8gc2VsZWN0IHRoZSBtb3N0IGNvbnRyYXN0aW5nIHRvIHRoZSBiYXNlIGNvbG9yLlxyXG4gKiBAcmV0dXJucyBUaGUgYElDb2xvckNvbnRyYXN0RnVuY2Agb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgaW52b2NhdGlvbiBvZiB0aGUgYGNvbG9yLWNvbnRyYXN0KClgXHJcbiAqIENTUyBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbG9yQ29udHJhc3QgPSAoYzogRXh0ZW5kZWQ8Q3NzQ29sb3I+LCAuLi52czogRXh0ZW5kZWQ8Q3NzQ29sb3I+W10pOiBJQ29sb3JDb250cmFzdEZ1bmMgPT5cclxuICAgICh7IGZuOiBcImNvbG9yLWNvbnRyYXN0XCIsIGMsIHZzIH0pO1xyXG5cclxuZmRvW1wiY29sb3ItY29udHJhc3RcIl0gPSB7XHJcbiAgICBwOiBbXHJcbiAgICAgICAgW1wiY1wiLCAodjogRXh0ZW5kZWQ8Q3NzQ29sb3I+KSA9PiB2MnMoIHYsIFdLRi5Db2xvcikgKyBcIiB2c1wiXSxcclxuICAgICAgICBbXCJ2c1wiLCAodjogRXh0ZW5kZWQ8Q3NzQ29sb3I+W10pID0+IGEycyggdiwgV0tGLkNvbG9yLCBcIixcIildXHJcbiAgICBdLFxyXG4gICAgczogXCIgXCJcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gaW52b2NhdGlvbiBvZiB0aGUgQ1NTIGBjb2xvci1taXgoKWAgZnVuY3Rpb24uIFRoaXMgaW50ZXJmYWNlIGlzIHJldHVybmVkIGZyb20gdGhlXHJcbiAqIFtbY29sb3JNaXhdXSBmdW5jdGlvbi4gRGV2ZWxvcGVycyBjYW4gdXNlIHRoaXMgc3RydWN0dXJlIHdoZXJldmVyIFtbQ3NzQ29sb3JdXSBpcyBhY2NlcHRlZC5cclxuICovXHJcbmNsYXNzIENvbG9yTWl4RnVuYyBpbXBsZW1lbnRzIElDb2xvck1peEJ1aWxkZXJcclxue1xyXG4gICAgZm46IFwiY29sb3ItbWl4XCIgPSBcImNvbG9yLW1peFwiO1xyXG5cclxuICAgIGNzPzogRXh0ZW5kZWQ8Q29sb3JTcGFjZT47XHJcbiAgICBjMTogW0V4dGVuZGVkPENzc0NvbG9yPiwgRXh0ZW5kZWQ8Q3NzUGVyY2VudD4/XTtcclxuICAgIGMyOiBbRXh0ZW5kZWQ8Q3NzQ29sb3I+LCBFeHRlbmRlZDxDc3NQZXJjZW50Pj9dO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCBjOiBFeHRlbmRlZDxDc3NDb2xvcj4sIHA/OiBFeHRlbmRlZDxDc3NQZXJjZW50PikgeyB0aGlzLmMxID0gW2MsIHBdOyB9XHJcblxyXG4gICAgd2l0aCggYzogRXh0ZW5kZWQ8Q3NzQ29sb3I+LCBwPzogRXh0ZW5kZWQ8Q3NzUGVyY2VudD4pOiB0aGlzICB7IHRoaXMuYzIgPSBbYywgcF07IHJldHVybiB0aGlzOyB9XHJcbiAgICBpbiggY3M6IEV4dGVuZGVkPENvbG9yU3BhY2U+KTogdGhpcyB7IHRoaXMuY3MgPSBjczsgcmV0dXJuIHRoaXM7IH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudHMgdGhlIGBjb2xvci1taXgoKWAgQ1NTIHByb3BlcnR5LlxyXG4gKlxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yX3ZhbHVlL2NvbG9yLW5peCgpXHJcbiAqXHJcbiAqICoqRXhhbXBsZXMqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIGNvbG9yLW1peCggXCJibHVlXCIsIFwicmVkXCIpXHJcbiAqICAgICBjbHMxID0gdGhpcy4kY2xhc3Moe1xyXG4gKiAgICAgICAgIGNvbG9yOiBjc3MuY29sb3JNaXgoXCJibHVlXCIpLndpdGgoXCJyZWRcIik7XHJcbiAqICAgICB9KVxyXG4gKlxyXG4gKiAgICAgLy8gY29sb3ItbWl4KCBpbiBzcmdiLCBcImJsdWUgMzAlXCIsIFwicmVkXCIgNjAlKVxyXG4gKiAgICAgY2xzMiA9IHRoaXMuJGNsYXNzKHtcclxuICogICAgICAgICBjb2xvcjogY3NzLmNvbG9yTWl4KFwiYmx1ZVwiLCAzMCkud2l0aChcInJlZFwiLCA2MCkuaW4oXCJzcmdiXCIpO1xyXG4gKiAgICAgfSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIGNzIENvbG9yIHNwYWNlLiBEZWZhdWx0IGlzIFwibGNoXCIuXHJcbiAqIEByZXR1cm5zIFRoZSBgSUNvbG9yTWl4QnVpbGRlcmAgb2JqZWN0IHRoYXQgYWxsb3dzIGFkZGluZyBjb2xvcnMgYW5kIG9wdGlvbmFsIHBlcmNlbnRhZ2VzIHRvIG1peFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbG9yTWl4ID0gKGM6IEV4dGVuZGVkPENzc0NvbG9yPiwgcD86IEV4dGVuZGVkPENzc1BlcmNlbnQ+KTogSUNvbG9yTWl4QnVpbGRlciA9PiBuZXcgQ29sb3JNaXhGdW5jKCBjLCBwKTtcclxuXHJcbmZkb1tcImNvbG9yLW1peFwiXSA9IFtcclxuICAgIFtcImNzXCIsICh2OiBFeHRlbmRlZDxDb2xvclNwYWNlPikgPT4gdiA/IFwiaW4gXCIgKyB2MnModikgOiBcIlwiXSxcclxuICAgIFtcImMxXCIsIHYgPT4gbXYycyggW1t2WzBdLCBXS0YuQ29sb3JdLCBbdlsxXSwgV0tGLlBlcmNlbnRdXSldLFxyXG4gICAgW1wiYzJcIiwgdiA9PiBtdjJzKCBbW3ZbMF0sIFdLRi5Db2xvcl0sIFt2WzFdLCBXS0YuUGVyY2VudF1dKV0sXHJcbl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gY29sb3IgYW5kIHRoZSBhbHBoYSBtYXNrIHRvIHRoZSBDU1MgQ29sb3IgcmVwcmVzZW50YXRpb24uIFRoaXNcclxuICogbWV0aG9kIHNob3VsZCBiZSB1c2VkIHdoZW4gZGVmaW5pbmcgQ1NTIGNvbG9yIHZhbHVlcyBpbiBzdHlsZXNldCBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBUaGUgY29sb3IgY2FuIGJlIHNwZWNpZmllZCBhcyBhIG51bWVyaWMgdmFsdWUgb3IgYXMgYSBjb2xvciBuYW1lIGZyb20gdGhlIFtbSU5hbWVkQ29sb3JzXV1cclxuICogaW50ZXJmYWNlIC0gaW5jbHVkaW5nIGNvbG9ycyBhZGRlZCB1c2luZyB0aGUgbW9kdWxlIGF1Z21lbnRhdGlvbiB0ZWNobmlxdWUuXHJcbiAqXHJcbiAqIFRoZSBhbHBoYSBtYXNrIGlzIHNwZWNpZmllZCBhcyBhIG51bWJlcjpcclxuICogICAtIFRoZSBzaWduIGlzIGlnbm9yZWQ7IHRoYXQgaXMsIG9ubHkgdGhlIGFic29sdXRlIHZhbHVlIGlzIGNvbnNpZGVyZWQuXHJcbiAqICAgLSBOdW1iZXIgMCB0byAxIGluY2x1c2l2ZSwgd2hpY2ggaXMgdHJlYXRlZCBhcyBwZXJjZW50YWdlLlxyXG4gKiAgIC0gTnVtYmVyIDEgdG8gMTAwIGluY2x1c2l2ZSwgd2hpY2ggaXMgdHJlYXRlZCBhcyBwZXJjZW50YWdlLlxyXG4gKiAgIC0gTnVtYmVycyBncmVhdGVyIHRoYW4gMTAwIGFyZSBjbGFtcGVkIHRvIDEwMDtcclxuICpcclxuICogKipFeGFtcGxlcyoqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIGFwcGx5aW5nIGFscGhhIHRvIGEgbnVtZXJpYyBjb2xvclxyXG4gKiAgICAgY2xzMSA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IGNzcy5hbHBoYSggMHhBQTAwQUEsIDAuNSkgfSlcclxuICpcclxuICogICAgIC8vIGFwcGx5aW5nIGFscGhhIHRvIGEgbmFtZWQgY29sb3JcclxuICogICAgIGNsczEgPSB0aGlzLiRjbGFzcyh7IGNvbG9yOiBjc3MuYWxwaGEoIFwiZGFya29saXZlZ3JlZW5cIiwgMC41KSB9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiBAcGFyYW0gYyBDb2xvciB2YWx1ZSBhcyBlaXRoZXIgYSBudW1iZXIgb3IgYSBuYW1lZCBjb2xvclxyXG4gKiBAcGFyYW0gYSBBbHBoYSBjaGFubmVsIHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYWxwaGEgPSAoYzogbnVtYmVyIHwga2V5b2YgSU5hbWVkQ29sb3JzLCBhOiBudW1iZXIpOiBJQWxwaGFGdW5jID0+ICh7IGZuOiBcImFscGhhXCIsIGMsIGEgfSk7XHJcblxyXG5jb25zdCBhbHBoYTJzID0gKGM6IG51bWJlciB8IGtleW9mIElOYW1lZENvbG9ycywgYTogbnVtYmVyKTogc3RyaW5nID0+XHJcbntcclxuICAgIC8vIGlmIHRoZSBhbHBoYSBpcyAwLCByZXR1cm4gdHJhbnNwYXJlbnQgY29sb3JcclxuICAgIGlmIChhID09PSAwKVxyXG4gICAgICAgIHJldHVybiBcIiMwMDAwXCI7XHJcblxyXG4gICAgLy8gY29udmVydCBjb2xvciB0byBudW1lcmljIHZhbHVlIChpZiBpdCdzIG5vdCBhIG51bWJlciB5ZXQpLiBJZiB0aGUgY29sb3Igd2FzIGdpdmVuIGFzIGFcclxuICAgIC8vIHN0cmluZyB0aGF0IHdlIGNhbm5vdCBmaW5kIGluIHRoZSBDb2xvcnMgb2JqZWN0LCByZXR1cm4gcHVyZSB3aGl0ZS5cclxuICAgIGxldCBuID0gdHlwZW9mIGMgPT09IFwic3RyaW5nXCIgPyBDb2xvcnNbY10gOiBjO1xyXG4gICAgaWYgKG4gPT0gbnVsbClcclxuICAgICAgICByZXR1cm4gXCIjRkZGXCI7XHJcblxyXG4gICAgLy8gbmVnYXRpdmUgYW5kIHBvc2l0aXZlIHZhbHVlcyBvZiBhbHBoYSBhcmUgdHJlYXRlZCBpZGVudGljYWxseSwgc28gY29udmVydCB0byBwb3NpdGl2ZVxyXG4gICAgaWYgKGEgPCAwKVxyXG4gICAgICAgIGEgPSAtYTtcclxuXHJcbiAgICAvLyBjb252ZXJ0IGFscGhhIHRvIGEgbnVtYmVyIHdpdGggYWJzb2x1dGUgdmFsdWUgbGVzcyB0aGFuIDEgKGlmIGl0IGlzIG5vdCB5ZXQpLiBJZiBhbHBoYVxyXG4gICAgLy8gaXMgMSBvciAxMDAsIHRoZW4gc2V0IGl0IHRvIDAgYmVjYXVzZSAwIGluIHRoZSBjb2xvck51bWJlclRvU3RyaW5nIG1lYW5zIFwibm8gYWxwaGFcIi5cclxuICAgIGEgPSBhID09PSAxIHx8IGEgPj0gMTAwID8gMCA6IGEgPiAxID8gYSAvIDEwMCA6IGE7XHJcblxyXG4gICAgLy8gbWFrZSB0aGUgbmV3IGFscGhhXHJcbiAgICByZXR1cm4gY29sb3JOdW1iZXIycyggbiA+PSAwID8gbiArIGEgOiBuIC0gYSk7XHJcbn1cclxuXHJcbmZkby5hbHBoYSA9ICh2OiBJQWxwaGFGdW5jKSA9PiBhbHBoYTJzKCB2LmMsIHYuYSlcclxuXHJcblxyXG4iLCLvu79pbXBvcnQge0V4dGVuZGVkLCBJQ3NzRnVuY09iamVjdH0gZnJvbSBcIi4vQ29yZVR5cGVzXCI7XHJcbmltcG9ydCB7IENzc0FuZ2xlLCBDc3NQZXJjZW50IH0gZnJvbSBcIi4vTnVtZXJpY1R5cGVzXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYElOYW1lZENvbG9yc2AgaW50ZXJmYWNlIGxpc3RzIHRoZSBuYW1lcyBvZiBzdGFuZGFyZCBXZWIgY29sb3JzLiBJdCBpcyBuZWVkZWQgdG8gYWxsb3cgZGV2ZWxvcGVyc1xyXG4gKiB0byBhZGQgbmV3IG5hbWVkIGNvbG9ycyB0aHJvdWdoIG1vZHVsZSBhdWdtZW50YXRpb24gdGVjaG5pcXVlLiBUaGlzIGludGVyZmFjZSBpcyBpbXBsZW1lbnRlZCBieSB0aGVcclxuICogW1tDb2xvcnNdXSBvYmplY3QsIHdoaWNoIHByb3ZpZGVzIG51bWVyaWMgdmFsdWVzIGZvciB0aGUgc3RhbmRhcmQgV2ViIGNvbG9ycy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU5hbWVkQ29sb3JzXHJcbntcclxuICAgIHJlYWRvbmx5IGJsYWNrOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNpbHZlcjogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGdyYXk6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHdoaXRlOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1hcm9vbjogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHJlZDogICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHB1cnBsZTogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGZ1Y2hzaWE6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGdyZWVuOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpbWU6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG9saXZlOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHllbGxvdzogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG5hdnk6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJsdWU6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHRlYWw6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGFxdWE6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG9yYW5nZTogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGFsaWNlYmx1ZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGFudGlxdWV3aGl0ZTogICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGFxdWFtYXJpbmU6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGF6dXJlOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJlaWdlOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJpc3F1ZTogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJsYW5jaGVkYWxtb25kOiAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJsdWV2aW9sZXQ6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJyb3duOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJ1cmx5d29vZDogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNhZGV0Ymx1ZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNoYXJ0cmV1c2U6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNob2NvbGF0ZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvcmFsOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvcm5mbG93ZXJibHVlOiAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvcm5zaWxrOiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNyaW1zb246ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGN5YW46ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtibHVlOiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtjeWFuOiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtnb2xkZW5yb2Q6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtncmF5OiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtncmVlbjogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtncmV5OiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtraGFraTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmttYWdlbnRhOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtvbGl2ZWdyZWVuOiAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtvcmFuZ2U6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtvcmNoaWQ6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtyZWQ6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtzYWxtb246ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtzZWFncmVlbjogICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtzbGF0ZWJsdWU6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtzbGF0ZWdyYXk6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmtzbGF0ZWdyZXk6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmt0dXJxdW9pc2U6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRhcmt2aW9sZXQ6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRlZXBwaW5rOiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRlZXBza3libHVlOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRpbWdyYXk6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRpbWdyZXk6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGRvZGdlcmJsdWU6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGZpcmVicmljazogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGZsb3JhbHdoaXRlOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGZvcmVzdGdyZWVuOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGdhaW5zYm9ybzogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGdob3N0d2hpdGU6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGdvbGQ6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGdvbGRlbnJvZDogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGdyZWVueWVsbG93OiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGdyZXk6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGhvbmV5ZGV3OiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGhvdHBpbms6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGluZGlhbnJlZDogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGluZGlnbzogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGl2b3J5OiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGtoYWtpOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxhdmVuZGVyOiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxhdmVuZGVyYmx1c2g6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxhd25ncmVlbjogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxlbW9uY2hpZmZvbjogICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0Ymx1ZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0Y29yYWw6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0Y3lhbjogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0Z29sZGVucm9keWVsbG93OiAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0Z3JheTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0Z3JlZW46ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0Z3JleTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0cGluazogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0c2FsbW9uOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0c2VhZ3JlZW46ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0c2t5Ymx1ZTogICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0c2xhdGVncmF5OiAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0c2xhdGVncmV5OiAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0c3RlZWxibHVlOiAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpZ2h0eWVsbG93OiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpbWVncmVlbjogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxpbmVuOiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1hZ2VudGE6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bWFxdWFtYXJpbmU6ICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bWJsdWU6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bW9yY2hpZDogICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bXB1cnBsZTogICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bXNlYWdyZWVuOiAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bXNsYXRlYmx1ZTogICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bXNwcmluZ2dyZWVuOiAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bXR1cnF1b2lzZTogICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1lZGl1bXZpb2xldHJlZDogICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1pZG5pZ2h0Ymx1ZTogICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1pbnRjcmVhbTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1pc3R5cm9zZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG1vY2Nhc2luOiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG5hdmFqb3doaXRlOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG9sZGxhY2U6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG9saXZlZHJhYjogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG9yYW5nZXJlZDogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG9yY2hpZDogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBhbGVnb2xkZW5yb2Q6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBhbGVncmVlbjogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBhbGV0dXJxdW9pc2U6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBhbGV2aW9sZXRyZWQ6ICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBhcGF5YXdoaXA6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBlYWNocHVmZjogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBlcnU6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBpbms6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBsdW06ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHBvd2RlcmJsdWU6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHJvc3licm93bjogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHJveWFsYmx1ZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNhZGRsZWJyb3duOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNhbG1vbjogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNhbmR5YnJvd246ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNlYWdyZWVuOiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNlYXNoZWxsOiAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNpZW5uYTogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNreWJsdWU6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsYXRlYmx1ZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsYXRlZ3JheTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsYXRlZ3JleTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNub3c6ICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNwcmluZ2dyZWVuOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHN0ZWVsYmx1ZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHRhbjogICAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHRoaXN0bGU6ICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHRvbWF0bzogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHR1cnF1b2lzZTogICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHZpb2xldDogICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHdoZWF0OiAgICAgICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHdoaXRlc21va2U6ICAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHllbGxvd2dyZWVuOiAgICAgICAgICAgIG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHJlYmVjY2FwdXJwbGU6ICAgICAgICAgIG51bWJlcjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBTeXN0ZW1Db2xvcnNgIHR5cGUgZGVmaW5lcyBrZXl3b3JkcyBmb3Igc3lzdGVtIGNvbG9ycyB0aGF0IGFyZSB1c2VkIGluIGZvcmNlZC1jb2xvciBtb2RlXHJcbiAqIChidXQgY2FuIGJlIGFsc28gdXNlZCBpbiB0aGUgcmVndWxhciBtb2RlKS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFN5c3RlbUNvbG9ycyA9IFwiQWN0aXZlVGV4dFwiIHwgXCJCdXR0b25GYWNlXCIgfCBcIkJ1dHRvblRleHRcIiB8IFwiQ2FudmFzXCIgfCBcIkNhbnZhc1RleHRcIiB8XHJcbiAgICBcIkZpZWxkXCIgfCBcIkZpZWxkVGV4dFwiIHwgXCJHcmF5VGV4dFwiIHwgXCJIaWdobGlnaHRcIiB8IFwiSGlnaGxpZ2h0VGV4dFwiIHwgXCJMaW5rVGV4dFwiIHwgXCJWaXNpdGVkVGV4dFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHNpbmdsZSBjb2xvciBzZXBhcmF0aW9uIGluIHRoZSBgcmdiKClgIENTUyBmdW5jdGlvbi4gSXQgY2FuIGJlIGV4cHJlc3NlZCBhcyBlaXRoZXJcclxuICogYSBudW1iZXIgb3IgYSBzdHJpbmcuIFN0cmluZ3MgYXJlIGludGVycHJlc3RlZCBhcyBpcyBhbmQgY2FuIGJlIHVzZWQgdG8gc3BlY2lmeSBwZXJjZW50YWdlXHJcbiAqIHZhbHVlcy4gTnVtYmVycyBsZXNzIHRoYW4gMSBhcmUgbXVsdGlwbGllZCBieSAxMDAgYW5kIGludGVycHJldGVkIGFzIHBlcmNlbnRzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ3NzQ29sb3JTZXBhcmF0aW9uID0gbnVtYmVyIHwgc3RyaW5nIHwgQ3NzUGVyY2VudDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEJhc2UgaW50ZXJmYWNlIGZvciBhbGwgaW50ZXJmYWNlcyByZXByZXNlbnRpbmcgY29sb3IgZnVuY3Rpb25zLiBEZXZlbG9wZXJzIGNhbiB1c2UgYW55IGZ1bmN0aW9uXHJcbiAqIHRoYXQgcmV0dXJucyB0aGlzIGludGVyZmFjZSB3aGVyZXZlciBbW0Nzc0NvbG9yXV0gaXMgYWNjZXB0ZWQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDc3NDb2xvckZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJyZ2JcIiB8IFwiaHNsXCIgfCBcImxhYlwiIHwgXCJsY2hcIiB8IFwiY29sb3ItbWl4XCIgfCBcImNvbG9yLWNvbnRyYXN0XCIgfCBcImFscGhhXCI7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIENTUyBjb2xvci4gQ29sb3IgY2FuIGJlIHJlcHJlc2VudGVkIHVzaW5nIHRoZSBmb2xsb3dpbmcgdHlwZXM6XHJcbiAqIC0ga2V5d29yZHM6IGFueSBzdHJpbmcgdGhhdCBpcyBhIG5hbWUgb2YgYSBwcm9wZXJ0eSBpbiB0aGUgW1tJTmFtZWRDb2xvcnNdXSBpbnRlcmZhY2Ugb3Igb2YgdGhlXHJcbiAqICAgW1tTeXN0ZW1Db2xvcnNdXSB0eXBlLlxyXG4gKiAtIG51bWJlcjpcclxuICogICAtIG5lZ2F0aXZlIG51bWJlcnMgYXJlIHRyZWF0ZWQgYXMgaW52ZXJ0ZWQgY29sb3JzLlxyXG4gKiAgIC0gaW50ZWdlciBwYXJ0IG9mIHRoZSBudW1iZXIgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gMHhGRkZGRkYgLSBldmVyeXRoaW5nIGVsc2UgaXNcclxuICogICAgIGlnbm9yZWQuXHJcbiAqICAgLSBmbG9hdGluZyBwb2ludCBwYXJ0IG9mIHRoZSBudW1iZXIgaXMgdHJlYXRlZCBhcyBwZXJjZW50cyBvZiBhbHBoYSBjaGFubmVsLiBJZiB0aGVyZSBpcyBub1xyXG4gKiAgICAgZmxvYXRpbmcgcGFydCwgYWxwaGEgaXMgMS5cclxuICogLSBmdW5jdGlvbnM6IFtbcmdiXV0sIFtbaHNsXV0sIFtbbGNoXV0sIFtbbGFiXV0sIFtbYWxwaGFdXS5cclxuICpcclxuICogKipFeGFtcGxlczoqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyB1c2luZyBzdHJpbmcgdmFsdWUgYW5kIG51bWVyaWMgdmFsdWUgb2YgV2ViIGNvbG9yc1xyXG4gKiAgICAgY2xzMSA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IFwicmVkXCIsIGJhY2tncm91bmRDb2xvcjogY3NzLkNvbG9ycy55ZWxsb3cgfSlcclxuICpcclxuICogICAgIC8vIHVzaW5nIHN0cmluZyB2YWx1ZSBvZiBhIHN5c3RlbSBjb2xvclxyXG4gKiAgICAgY2xzMiA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IFwiTGlua1RleHRcIiB9KVxyXG4gKlxyXG4gKiAgICAgLy8gdXNpbmcgbnVtZXJpYyB2YWx1ZVxyXG4gKiAgICAgY2xzMyA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IDB4Q0NDQ0NDIH0pXHJcbiAqXHJcbiAqICAgICAvLyB1c2luZyBudW1lcmljIHZhbHVlIHdpdGggZnJhY3Rpb25hbCBwYXJ0IGZvciBhbHBoYVxyXG4gKiAgICAgY2xzNCA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IDB4MTIzNDU2ICsgMC40IH0pXHJcbiAqXHJcbiAqICAgICAvLyB1c2luZyBuZWdhdGl2ZSBudW1lcmljIHZhbHVlIGZvciBpbnZlcnRlZCBjb2xvclxyXG4gKiAgICAgY2xzNSA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IC0weDEyMzQ1NiB9KVxyXG4gKlxyXG4gKiAgICAgLy8gdXNpbmcgbmVnYXRpdmUgbnVtZXJpYyB2YWx1ZSB3aXRoIGZyYWN0aW9uYWwgcGFydCBmb3IgaW52ZXJ0ZWQgY29sb3Igd2l0aCBhbHBoYVxyXG4gKiAgICAgY2xzNiA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IC0oMHgxMjM0NTYgKyAwLjQpIH0pXHJcbiAqXHJcbiAqICAgICAvLyB1c2luZyB0aGUgYGFscGhhKClgIGZ1bmN0aW9uIHdpdGggbmFtZWQgY29sb3JcclxuICogICAgIGNsczcgPSB0aGlzLiRjbGFzcyh7IGNvbG9yOiBjc3MuYWxwaGEoIFwicmVkXCIsIDAuNCkgfSlcclxuICpcclxuICogICAgIC8vIHVzaW5nIHRoZSBgcmdiKClgIGZ1bmN0aW9uXHJcbiAqICAgICBjbHM4ID0gdGhpcy4kY2xhc3MoeyBjb2xvcjogY3NzLnJnYiggMjU2LCAwLCAxMjgpIH0pXHJcbiAqXHJcbiAqICAgICAvLyB1c2luZyB0aGUgYGhzbCgpYCBmdW5jdGlvblxyXG4gKiAgICAgY2xzOSA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IGNzcy5oc2woIDIwMCwgOTAsIDUyKSB9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ3NzQ29sb3IgPSBudW1iZXIgfCBrZXlvZiBJTmFtZWRDb2xvcnMgfCBcInRyYW5zcGFyZW50XCIgfCBcImN1cnJlbnRjb2xvclwiIHxcclxuICAgIFN5c3RlbUNvbG9ycyB8IElDc3NDb2xvckZ1bmM7XHJcblxyXG4vKipcclxuKiBUeXBlIGZvciBDU1MgY29sb3IgdGhhdCBleGNsdWRlIG51bWVyaWMgY29sb3IgcmVwcmVzZW50YXRpb24uIENvbG9yIGNhbiBiZSByZXByZXNlbnRlZCB1c2luZ1xyXG4qIHRoZSBmb2xsb3dpbmcgdHlwZXM6XHJcbiogLSBrZXl3b3JkczogYW55IHN0cmluZyB0aGF0IGlzIGEgbmFtZSBvZiBhIHByb3BlcnR5IGluIHRoZSBbW0lOYW1lZENvbG9yc11dIGludGVyZmFjZSBvciBvZiB0aGVcclxuKiAgIFtbU3lzdGVtQ29sb3JzXV0gdHlwZS5cclxuKiAtIGZ1bmN0aW9uczogW1tyZ2JdXSwgW1toc2xdXSwgW1thbHBoYV1dIGFzIHdlbGwgYXMgYW55IGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgSUNvbG9yUHJveHkgdHlwZS5cclxuKlxyXG4qIE5vbi1udW1lcmljIHJlcHJlc2VudGF0aW9uIG9mIGNvbG9yIGlzIHNvbWV0aW1lcyByZXF1aXJlZCB3aGVyZSBpdCBjYW4gY29uZmxpY3Qgd2l0aCBudW1lcmljXHJcbiogcmVwcmVzZW50YXRpb25zIG9mIG90aGVyIHN0eWxlIHByb3BlcnRpZXMuIEZvciBleGFtcGxlLCB0aGUgW1tib3JkZXJdXSBwcm9wZXJ0eSBhbGxvd3Mgc3BlY2lmeWluZ1xyXG4qIGJvcmRlciB3aWR0aCwgc3R5bGUgYW5kIGNvbG9yIGluIGFueSBvcmRlci4gSW4gdGhpcyBjYXNlIGEgbnVtZXJpYyByZXByZXNlbnRhdGlvbiBvZiBjb2xvciBjb3VsZFxyXG4qIGNvbWUgaW50byBjb25mbGljdCB3aXRoIGEgbnVtZXJpYyByZXByZXNlbnRhdGlvbiBvZiB3aWR0aC4gVGhlcmVmb3JlLCBmb3IgdGhlIGBib3JkZXJgIHByb3BlcnR5LFxyXG4qIG9ubHkgbm9uLW51bWVyaWMgY29sb3IgcmVwcmVzZW50YXRpb24gaXMgYWxsb3dlZC5cclxuKi9cclxuZXhwb3J0IHR5cGUgQ3NzTm9uTnVtZXJpY0NvbG9yID0gRXhjbHVkZTxDc3NDb2xvcixudW1iZXI+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBpbnZvY2F0aW9uIG9mIHRoZSBDU1MgYHJnYigpL3JnYmEoKWAgZnVuY3Rpb24uIFRoaXMgaW50ZXJmYWNlIGlzIHJldHVybmVkIGZyb20gdGhlXHJcbiAqIFtbcmdiXV0gZnVuY3Rpb24uIERldmVsb3BlcnMgY2FuIHVzZSB0aGlzIHN0cnVjdHVyZSB3aGVyZXZlciBbW0Nzc0NvbG9yXV0gaXMgYWNjZXB0ZWQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElSZ2JGdW5jIGV4dGVuZHMgSUNzc0NvbG9yRnVuY1xyXG57XHJcbiAgICBmbjogXCJyZ2JcIjtcclxuXHJcbiAgICAvKiogUmVkIHNlcGFyYXRpb24gdmFsdWUgKi9cclxuICAgIHI6IEV4dGVuZGVkPENzc0NvbG9yU2VwYXJhdGlvbj47XHJcblxyXG4gICAgLyoqIEdyZWVuIHNlcGFyYXRpb24gdmFsdWUgKi9cclxuICAgIGc6IEV4dGVuZGVkPENzc0NvbG9yU2VwYXJhdGlvbj47XHJcblxyXG4gICAgLyoqIEJsdWUgc2VwYXJhdGlvbiB2YWx1ZSAqL1xyXG4gICAgYjogRXh0ZW5kZWQ8Q3NzQ29sb3JTZXBhcmF0aW9uPjtcclxuXHJcbiAgICAvKiogQWxwaGEgY2hhbm5lbCB2YWx1ZSAqL1xyXG4gICAgYT86IEV4dGVuZGVkPENzc1BlcmNlbnQ+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIENTUyBgaHNsKCkvaHNsYSgpYCBmdW5jdGlvbi4gVGhpcyBpbnRlcmZhY2UgaXMgcmV0dXJuZWQgZnJvbSB0aGVcclxuICogW1toc2xdXSBmdW5jdGlvbi4gRGV2ZWxvcGVycyBjYW4gdXNlIHRoaXMgc3RydWN0dXJlIHdoZXJldmVyIFtbQ3NzQ29sb3JdXSBpcyBhY2NlcHRlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUhzbEZ1bmMgZXh0ZW5kcyBJQ3NzQ29sb3JGdW5jXHJcbntcclxuICAgIGZuOiBcImhzbFwiO1xyXG5cclxuICAgIC8qKiBIdWUgdmFsdWUgKi9cclxuICAgIGg6IEV4dGVuZGVkPENzc0FuZ2xlPjtcclxuXHJcbiAgICAvKiogU2F0dXJhdGlvbiB2YWx1ZSAqL1xyXG4gICAgczogRXh0ZW5kZWQ8Q3NzUGVyY2VudD47XHJcblxyXG4gICAgLyoqIExpZ2h0bmVzcyB2YWx1ZSAqL1xyXG4gICAgbDogRXh0ZW5kZWQ8Q3NzUGVyY2VudD47XHJcblxyXG4gICAgLyoqIEFscGhhIGNoYW5uZWwgdmFsdWUgKi9cclxuICAgIGE/OiBFeHRlbmRlZDxDc3NQZXJjZW50PjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBpbnZvY2F0aW9uIG9mIHRoZSBDU1MgYGxjaCgpYCBmdW5jdGlvbi4gVGhpcyBpbnRlcmZhY2UgaXMgcmV0dXJuZWQgZnJvbSB0aGVcclxuICogW1tsY2hdXSBmdW5jdGlvbi4gRGV2ZWxvcGVycyBjYW4gdXNlIHRoaXMgc3RydWN0dXJlIHdoZXJldmVyIFtbQ3NzQ29sb3JdXSBpcyBhY2NlcHRlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxjaEZ1bmMgZXh0ZW5kcyBJQ3NzQ29sb3JGdW5jXHJcbntcclxuICAgIGZuOiBcImxjaFwiO1xyXG5cclxuICAgIC8qKiBDSUUgbGlnaHRuZXNzIHZhbHVlICovXHJcbiAgICBsOiBFeHRlbmRlZDxDc3NQZXJjZW50PjtcclxuXHJcbiAgICAvKiogQ2hyb21hIChhbW91bnQgb2YgY29sb3IpIHZhbHVlICovXHJcbiAgICBjOiBFeHRlbmRlZDxudW1iZXI+O1xyXG5cclxuICAgIC8qKiBIdWUgdmFsdWUgKi9cclxuICAgIGg6IEV4dGVuZGVkPENzc0FuZ2xlPjtcclxuXHJcbiAgICAvKiogQWxwaGEgY2hhbm5lbCB2YWx1ZSAqL1xyXG4gICAgYT86IEV4dGVuZGVkPENzc1BlcmNlbnQ+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIENTUyBgbGFiKClgIGZ1bmN0aW9uLiBUaGlzIGludGVyZmFjZSBpcyByZXR1cm5lZCBmcm9tIHRoZVxyXG4gKiBbW2xhYl1dIGZ1bmN0aW9uLiBEZXZlbG9wZXJzIGNhbiB1c2UgdGhpcyBzdHJ1Y3R1cmUgd2hlcmV2ZXIgW1tDc3NDb2xvcl1dIGlzIGFjY2VwdGVkLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTGFiRnVuYyBleHRlbmRzIElDc3NDb2xvckZ1bmNcclxue1xyXG4gICAgZm46IFwibGFiXCI7XHJcblxyXG4gICAgLyoqIENJRSBsaWdodG5lc3MgdmFsdWUgKi9cclxuICAgIGw6IEV4dGVuZGVkPENzc1BlcmNlbnQ+O1xyXG5cclxuICAgIC8qKiBEaXN0YW5jZSBhbG9uZyB0aGUgYSBheGlzIGluIHRoZSBMYWIgY29sb3JzcGFjZSAqL1xyXG4gICAgZGE6IEV4dGVuZGVkPG51bWJlcj47XHJcblxyXG4gICAgLyoqIERpc3RhbmNlIGFsb25nIHRoZSBiIGF4aXMgaW4gdGhlIExhYiBjb2xvcnNwYWNlICovXHJcbiAgICBkYjogRXh0ZW5kZWQ8bnVtYmVyPjtcclxuXHJcbiAgICAvKiogQWxwaGEgY2hhbm5lbCB2YWx1ZSAqL1xyXG4gICAgYT86IEV4dGVuZGVkPENzc1BlcmNlbnQ+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIENTUyBgY29sb3ItY29udHJhc3QoKWAgZnVuY3Rpb24uIFRoaXMgaW50ZXJmYWNlIGlzIHJldHVybmVkIGZyb20gdGhlXHJcbiAqIFtbY29sb3JDb250cmFzdF1dIGZ1bmN0aW9uLiBEZXZlbG9wZXJzIGNhbiB1c2UgdGhpcyBzdHJ1Y3R1cmUgd2hlcmV2ZXIgW1tDc3NDb2xvcl1dIGlzIGFjY2VwdGVkLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ29sb3JDb250cmFzdEZ1bmMgZXh0ZW5kcyBJQ3NzQ29sb3JGdW5jXHJcbntcclxuICAgIGZuOiBcImNvbG9yLWNvbnRyYXN0XCI7XHJcblxyXG4gICAgLyoqIENvbG9yIHRvIHdoaWNoIHRoZSBsaXN0IG9mIGNvbG9ycyBpbiB0aGUgYHZzYCBwcm9wZXJ0eSB3aWxsIGJlIGNvbXBhcmVkICovXHJcbiAgICBjOiBFeHRlbmRlZDxDc3NDb2xvcj47XHJcblxyXG4gICAgLyoqIExpc3Qgb2YgY29sb3JzIGZyb20gd2hpY2ggdG8gc2VsZWN0IHRoZSBtb3N0IGNvbnRyYXN0aW5nIHRvIHRoZSBiYXNlIGNvbG9yICovXHJcbiAgICB2czogRXh0ZW5kZWQ8Q3NzQ29sb3I+W107XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgY29sb3Igc3BhY2VzIHRoYXQgQ1NTIHdvcmtzIHdpdGguXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb2xvclNwYWNlID0gXCJzcmdiXCIgfCBcImhzbFwiIHwgXCJod2JcIiB8IFwieHl6XCIgfCBcImxhYlwiIHwgXCJsY2hcIiB8IFwib2tsYWJcIiB8IFwib2tsY2hcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gaW52b2NhdGlvbiBvZiB0aGUgQ1NTIGBjb2xvci1taXgoKWAgZnVuY3Rpb24uIFRoaXMgaW50ZXJmYWNlIGlzIHJldHVybmVkIGZyb20gdGhlXHJcbiAqIFtbY29sb3JNaXhdXSBmdW5jdGlvbi4gRGV2ZWxvcGVycyBjYW4gdXNlIHRoaXMgc3RydWN0dXJlIHdoZXJldmVyIFtbQ3NzQ29sb3JdXSBpcyBhY2NlcHRlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNvbG9yTWl4RnVuYyBleHRlbmRzIElDc3NDb2xvckZ1bmNcclxue1xyXG4gICAgZm46IFwiY29sb3ItbWl4XCI7XHJcblxyXG4gICAgLyoqIENvbG9yIHNwYWNlIGluIHdoaWNoIHRvIG1peCBjb2xvcnMgKi9cclxuICAgIGNzPzogRXh0ZW5kZWQ8Q29sb3JTcGFjZT47XHJcblxyXG4gICAgLyoqIEZpcnN0IGNvbG9yIGFuZCBvcHRpb25hbCBwZXJjZW50YWdlIHRvIGluY2x1ZGUgaW4gdGhlIG1peCAqL1xyXG4gICAgYzE6IFtFeHRlbmRlZDxDc3NDb2xvcj4sIEV4dGVuZGVkPENzc1BlcmNlbnQ+P107XHJcblxyXG4gICAgLyoqIFNlY29uZCBjb2xvciBhbmQgb3B0aW9uYWwgcGVyY2VudGFnZSB0byBpbmNsdWRlIGluIHRoZSBtaXggKi9cclxuICAgIGMyOiBbRXh0ZW5kZWQ8Q3NzQ29sb3I+LCBFeHRlbmRlZDxDc3NQZXJjZW50Pj9dO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBBbGxvd3MgZ3JhZHVhbGx5IGJ1aWxkaW5nIHRoZSBbW0lDb2xvck1peEZ1bmNdXSBzdHVjdHVyZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNvbG9yTWl4QnVpbGRlciBleHRlbmRzIElDb2xvck1peEZ1bmNcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBzZWNvbmQgY29sb3IgYW5kIG9wdGlvbmFsIHBlcmNlbnRhZ2VcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYyBTZWNvbmQgY29sb3IgdG8gYmUgbWl4ZWRcclxuICAgICAqIEBwYXJhbSBwIFBlcmNlbnRhZ2Ugb2YgdGhlIHNlY29uZCBjb2xvciB0byBpbmNsdWRlIGluIHRoZSBtaXhcclxuICAgICAqL1xyXG4gICAgd2l0aCggYzogRXh0ZW5kZWQ8Q3NzQ29sb3I+LCBwPzogRXh0ZW5kZWQ8Q3NzUGVyY2VudD4pOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY29sb3Igc3BhY2UgaW4gd2hpY2ggdG8gbWl4IHRoZSBjb2xvcnNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYyBGaXJzdCBjb2xvciB0byBiZSBtaXhlZFxyXG4gICAgICogQHBhcmFtIHAgUGVyY2VudGFnZSBvZiB0aGUgZmlyc3QgY29sb3IgdG8gaW5jbHVkZSBpbiB0aGUgbWl4XHJcbiAgICAgKi9cclxuICAgIGluKCBjczogRXh0ZW5kZWQ8Q29sb3JTcGFjZT4pOiB0aGlzO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIFtbYWxwaGFdXSBmdW5jdGlvbi4gRGV2ZWxvcGVycyBjYW4gdXNlIHRoaXMgc3RydWN0dXJlIHdoZXJldmVyXHJcbiAqIENzc0NvbG9yIGlzIGFjY2VwdGVkLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQWxwaGFGdW5jIGV4dGVuZHMgSUNzc0NvbG9yRnVuY1xyXG57XHJcbiAgICBmbjogXCJhbHBoYVwiO1xyXG5cclxuICAgIGM6IG51bWJlciB8IGtleW9mIElOYW1lZENvbG9ycztcclxuICAgIGE6IG51bWJlcjtcclxufVxyXG5cclxuXHJcblxyXG4iLCLvu79pbXBvcnQge1xyXG4gICAgQ3NzU2VsZWN0b3IsIElTZWxlY3RvclByb3h5LCBJUmF3UHJveHksIEV4dGVuZGVkLCBJVXJsRnVuYywgSUN1cnNvckZ1bmMsIElTdHJpbmdQcm94eSxcclxuICAgIElTZWxlY3RvckJ1aWxkZXIsIE50aEV4cHJlc3Npb24sIEF0dHJDb21wYXJpc29uT3BlcmF0aW9uLCBUaW1pbmdGdW5jdGlvbkp1bXBUZXJtLFxyXG4gICAgSUN1YmljQmV6aWVyRnVuYywgSVN0ZXBzRnVuYywgSU5TVGFnRnVuYywgRWxlbWVudFRhZ05hbWUsIFNlbGVjdG9yQ29tYmluYXRvcixcclxufSBmcm9tIFwiLi9Db3JlVHlwZXNcIlxyXG5pbXBvcnQge0lDb3VudGVyUnVsZSwgSUlEUnVsZSwgSU5hbWVzcGFjZVJ1bGUsIElWYXJSdWxlfSBmcm9tIFwiLi9SdWxlVHlwZXNcIjtcclxuaW1wb3J0IHtBdHRyVHlwZUtleXdvcmQsIEF0dHJVbml0S2V5d29yZCwgTGlzdFN0eWxlVHlwZV9TdHlsZVR5cGV9IGZyb20gXCIuL1N0eWxlVHlwZXNcIjtcclxuaW1wb3J0IHtFeHRlbmRlZFZhclZhbHVlLCBTdHlsZXNldCwgVmFyVGVtcGxhdGVOYW1lfSBmcm9tIFwiLi9TdHlsZXNldHNcIjtcclxuaW1wb3J0IHtFeHRlbmRlZE1lZGlhRmVhdHVyZXNldCwgSU1lZGlhUXVlcnlQcm94eSwgSVN1cHBvcnRzUXVlcnlQcm94eX0gZnJvbSBcIi4vTWVkaWFUeXBlc1wiO1xyXG5pbXBvcnQge3NwMnN9IGZyb20gXCIuLi9pbXBsL1N0eWxlSW1wbFwiO1xyXG5pbXBvcnQge21lZGlhMnMsIHN1cHBvcnRzMnN9IGZyb20gXCIuLi9pbXBsL01pc2NJbXBsXCI7XHJcbmltcG9ydCB7YTJzLCBjYW1lbFRvRGFzaCwgZjJzLCBmZG8sIG12MnMsIHRhZzJzLCBXS0Z9IGZyb20gXCIuLi9pbXBsL1V0aWxzXCI7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBTZWxlY3RvciBmdW5jdGlvbnNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHNlbGVjdG9yLiBUaGlzIGZ1bmN0aW9uIGlzIGEgdGFnIGZ1bmN0aW9uIGFuZCBtdXN0IGJlXHJcbiAqIGludm9rZWQgd2l0aCB0aGUgdGVtcGxhdGUgc3RyaW5nIHdpdGhvdXQgcGFyZW50aGVzZXMuIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgd2hlcmV2ZXIgdGhlXHJcbiAqIFtbQ3NzU2VsZWN0b3JdXSB0eXBlcyBhcmUgYWxsb3dlZC4gVGhlIHBhcmFtZXRlcnMgZW1iZWRkZWQgaW50byB0aGUgc3RyaW5nXHJcbiAqIG11c3QgY29uZm9ybSB0byB0aGUgW1tDc3NTZWxlY3Rvcl1dIHR5cGUuXHJcbiAqXHJcbiAqICoqRXhhbXBsZToqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBjc3M6IHVsID4gbGkgey4uLn1cclxuICogICAgIHMxID0gdGhpcy4kc3R5bGUoIGNzcy5zZWxlY3RvcmB1bCA+IGxpYCwgey4uLn0pXHJcbiAqXHJcbiAqICAgICAvLyBjc3M6IHVsLmMxOmhvdmVyIHsuLi59XHJcbiAqICAgICBjMSA9IHRoaXMuJGNsYXNzKHsuLi59KVxyXG4gKiAgICAgczIgPSB0aGlzLiRzdHlsZSggY3NzLnNlbGVjdG9yYHVsLiR7dGhpcy5jMX06aG92ZXJgLCB7Li4ufSlcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RvciA9IChwYXJ0czogVGVtcGxhdGVTdHJpbmdzQXJyYXksIC4uLnBhcmFtczogQ3NzU2VsZWN0b3JbXSk6IElTZWxlY3RvclByb3h5ID0+XHJcbiAgICAoKSA9PiB0YWcycyggcGFydHMsIHBhcmFtcyk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBBcnJheSBvZiBhdHRyaWJ1dGUgY29tcGFyaXNvbiBvcGVyYXRpb24gc3RyaW5ncyAtIG5lZWRlZCB0byBjaGVjayB3aGV0aGVyIGEgc3RyaW5nIGlzIGFuXHJcbiAqIGF0dHJpYnV0ZSBjb21wYXJpc29uIG9wZXJhdGlvbi5cclxuICovXHJcbmNvbnN0IGF0dHJDb21wYXJpc29uT3BlcmF0aW9uczogQXR0ckNvbXBhcmlzb25PcGVyYXRpb25bXSA9IFtcIj1cIiwgIFwifj1cIiwgXCJ8PVwiLCBcIl49XCIsIFwiJD1cIiwgXCIqPVwiXTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFByb3ZpZGUgbnVtZXJpYyB2YWx1ZXMgdGhhdCBhcmUgdXNlZCB0byBpZGVudGlmeSB3aGF0IHRvIGRvIHdoZW4gYW4gYXBwcm9wcmlhdGUgcHJvcGVydHkgb3JcclxuICogbWV0aG9kIGZyb20gdGhlIElTZWxlY3RvckJ1aWxkZXIgaW50ZXJmYWNlIGlzIGludm9rZWQuXHJcbiAqL1xyXG5jb25zdCBlbnVtIFNlbGVjdG9yUHJvY2Vzc2luZ1R5cGVcclxue1xyXG4gICAgU2ltcGxlUHNldWRvRWxlbWVudCA9IDEsXHJcbiAgICBQYXJhbWV0ZXJpemVkUHNldWRvQ2xhc3MsXHJcbiAgICBQYXJhbWV0ZXJpemVkUHNldWRvRWxlbWVudCxcclxufVxyXG5cclxuLyoqXHJcbiAqIFR5cGUgdGhhdCBkZXRlcm1pbmVzIGhvdyBhIHByb3BlcnR5IG9yIGEgbWV0aG9kIG9mIHRoZSBJU2VsZWN0b3JCdWlsZGVyIGludGVyZmFjZSBzaG91bGQgYmVcclxuICogY29udmVydGVkIHRvIENzc1NlbGVjdG9yIHZhbHVlczogVGhlIHR5cGUgY2FuIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxyXG4gKiAgIC0gbnVtYmVyIC0gb25lIG9mIHRoZSB2YWx1ZXMgZnJvbSB0aGUgU2VsZWN0b3JQcm9jZXNzaW5nVHlwZSBlbnVtZXJhdGlvblxyXG4gKiAgIC0gRnVuY3Rpb24gLSB0aGUgZnVuY3Rpb24gd2lsbCBiZSBib3VuZCB0byB0aGUgU2VsZWN0b3JCdWlsZGVySGFuZGxlciBpbnN0YW5jZSBhbmQgdGhlXHJcbiAqICAgICBwcm9wZXJ0eSBuYW1lLlxyXG4gKiAgIC0gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBmaWVkczpcclxuICogICAgIC0gZiAtIHRoZSBmdW5jdGlvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBTZWxlY3RvckJ1aWxkZXJIYW5kbGVyIGluc3RhbmNlLCB0aGVcclxuICogICAgICAgcHJvcGVydHkgbmFtZSBhbmQgd2hhdGV2ZXIgYXJndW1lbnRzIGFyZSBzcGVjaWZpZWQgaW4gdGhlIFwiYVwiIGZpZWxkLlxyXG4gKiAgICAgLSBhIC0gYXJyYXkgb2YgYXJndW1lbnRzIHRvIHdoaWNoIHRoZSBmdW5jdGlvbiBzcGVjaWZpZWQgYnkgdGhlIFwiZlwiIGZpZWxkIHdpbCBiZSBib3VuZCB0b1xyXG4gKiAgICAgICBpbiBhZGRpdGlvbiB0byB0aGUgU2VsZWN0b3JCdWlsZGVySGFuZGxlciBpbnN0YW5jZSBhbmQgdGhlIHByb3BlcnR5IG5hbWUuXHJcbiAqICAgICAtIHAgLSBvcHRpb25hbCBwcmVmaXggdG8gYmUgYWRkZWQgdG8gdGhlIHByb3BlcnR5IG5hbWUgZm9yIHBzZXVkbyBjbGFzc2VzIGFuZCBlbGVtZW50cy5cclxuICogICAgIC0gbiAtIG9wdGlvbmFsIG5hbWUgb2YgdGhlIGVudGl0eSB0byBiZSBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uIGluc3RlYWQgb2YgdGhlIHByb3BlcnR5IG5hbWUuXHJcbiAqL1xyXG50eXBlIFNlbGVjdG9yUHJvY2Vzc2luZ0luZm8gPSBTZWxlY3RvclByb2Nlc3NpbmdUeXBlIHwgRnVuY3Rpb24gfFxyXG4gICAgeyBmOiBGdW5jdGlvbiwgYTogYW55W10sIHA/OiBcIjpcIiB8IFwiOjpcIiwgbj86IHN0cmluZyB9O1xyXG5cclxuLy8gU2VsZWN0b3JQcm9jZXNzaW5nSW5mbyBvYmplY3QgdGhhdCB1c2VkIHNldmVyYWwgdGltZXMsIHNvIGl0IGlzIFwiY2FjaGVkXCIgaGVyZVxyXG5jb25zdCBwc2V1ZG9DbGFzc1dpdGhTZWxlY3RvcnNJbmZvOiBTZWxlY3RvclByb2Nlc3NpbmdJbmZvID0geyBmOiB3cmFwQW5kQWRkU2VsZWN0b3JzLCBhOiBbXCIsXCJdLCBwOiBcIjpcIiB9O1xyXG5cclxuLyoqXHJcbiAqIE9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IGhvdyBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIG9mIHRoZSBJU2VsZWN0b3JCdWlsZGVyIGludGVyZmFjZVxyXG4gKiBzaG91bGQgYmUgY29udmVydGVkIHRvIENzc1NlbGVjdG9yIHZhbHVlcy4gSWYgYSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSBpcyBub3QgaW4gdGhpcyBvYmplY3QsIGl0XHJcbiAqIGlzIHRyZWF0ZWQgYXMgYSBub24tcGFyYW1ldGVyaXplZCBwc2V1ZG8gY2xhc3MuXHJcbiAqL1xyXG5jb25zdCBzZWxlY3RvckluZm9zOiB7IFtQIGluIHN0cmluZ106IFNlbGVjdG9yUHJvY2Vzc2luZ0luZm8gfSA9XHJcbntcclxuICAgIC8vIGhlbHBlciBtZXRob2RzXHJcbiAgICBcImF0dHJcIjogYWRkQXR0clNlbGVjdG9yLFxyXG4gICAgXCJhbmRcIjogeyBmOiBhZGRTZWxlY3RvcnNXaXRoQ29tYmluYXRvcnMsIGE6IFtcIlwiXSB9LFxyXG4gICAgXCJvclwiOiB7IGY6IGFkZFNlbGVjdG9yc1dpdGhDb21iaW5hdG9ycywgYTogW1wiLFwiXSB9LFxyXG4gICAgXCJjaGlsZFwiOiB7IGY6IGFkZFNlbGVjdG9yc1dpdGhDb21iaW5hdG9ycywgYTogW1wiPlwiXSB9LFxyXG4gICAgXCJkZXNjXCI6IHsgZjogYWRkU2VsZWN0b3JzV2l0aENvbWJpbmF0b3JzLCBhOiBbXCIgXCJdIH0sXHJcbiAgICBcInNpYlwiOiB7IGY6IGFkZFNlbGVjdG9yc1dpdGhDb21iaW5hdG9ycywgYTogW1wiflwiXSB9LFxyXG4gICAgXCJhZGpcIjogeyBmOiBhZGRTZWxlY3RvcnNXaXRoQ29tYmluYXRvcnMsIGE6IFtcIitcIl0gfSxcclxuXHJcbiAgICAvLyBzaW1wbGUgcHNldWRvIGVsZW1lbnRzXHJcbiAgICBcImFmdGVyXCI6IFNlbGVjdG9yUHJvY2Vzc2luZ1R5cGUuU2ltcGxlUHNldWRvRWxlbWVudCxcclxuICAgIFwiYmFja2Ryb3BcIjogU2VsZWN0b3JQcm9jZXNzaW5nVHlwZS5TaW1wbGVQc2V1ZG9FbGVtZW50LFxyXG4gICAgXCJiZWZvcmVcIjogU2VsZWN0b3JQcm9jZXNzaW5nVHlwZS5TaW1wbGVQc2V1ZG9FbGVtZW50LFxyXG4gICAgXCJjdWVcIjogU2VsZWN0b3JQcm9jZXNzaW5nVHlwZS5TaW1wbGVQc2V1ZG9FbGVtZW50LFxyXG4gICAgXCJmaXJzdExldHRlclwiOiBTZWxlY3RvclByb2Nlc3NpbmdUeXBlLlNpbXBsZVBzZXVkb0VsZW1lbnQsXHJcbiAgICBcImZpcnN0TGluZVwiOiBTZWxlY3RvclByb2Nlc3NpbmdUeXBlLlNpbXBsZVBzZXVkb0VsZW1lbnQsXHJcbiAgICBcImdyYW1tYXJFcnJvclwiOiBTZWxlY3RvclByb2Nlc3NpbmdUeXBlLlNpbXBsZVBzZXVkb0VsZW1lbnQsXHJcbiAgICBcIm1hcmtlclwiOiBTZWxlY3RvclByb2Nlc3NpbmdUeXBlLlNpbXBsZVBzZXVkb0VsZW1lbnQsXHJcbiAgICBcInBsYWNlaG9sZGVyXCI6IFNlbGVjdG9yUHJvY2Vzc2luZ1R5cGUuU2ltcGxlUHNldWRvRWxlbWVudCxcclxuICAgIFwic2VsZWN0aW9uXCI6IFNlbGVjdG9yUHJvY2Vzc2luZ1R5cGUuU2ltcGxlUHNldWRvRWxlbWVudCxcclxuICAgIFwic3BlbGxpbmdFcnJvclwiOiBTZWxlY3RvclByb2Nlc3NpbmdUeXBlLlNpbXBsZVBzZXVkb0VsZW1lbnQsXHJcblxyXG4gICAgLy8gcGFyYW1ldGVyaXplZCBwc2V1ZG8gY2xhc3Nlc1xyXG4gICAgXCJkaXJcIjogU2VsZWN0b3JQcm9jZXNzaW5nVHlwZS5QYXJhbWV0ZXJpemVkUHNldWRvQ2xhc3MsXHJcbiAgICAvLyBcImhhc1wiOiBwc2V1ZG9DbGFzc1dpdGhTZWxlY3RvcnNJbmZvLFxyXG4gICAgXCJob3N0JFwiOiB7IGY6IHdyYXBBbmRBZGRTZWxlY3RvcnMsIGE6IFtcIixcIl0sIHA6IFwiOlwiLCBuOiBcIjpob3N0XCIgfSxcclxuICAgIFwiaG9zdENvbnRleHRcIjogcHNldWRvQ2xhc3NXaXRoU2VsZWN0b3JzSW5mbyxcclxuICAgIFwiaXNcIjogcHNldWRvQ2xhc3NXaXRoU2VsZWN0b3JzSW5mbyxcclxuICAgIFwibGFuZ1wiOiBTZWxlY3RvclByb2Nlc3NpbmdUeXBlLlBhcmFtZXRlcml6ZWRQc2V1ZG9DbGFzcyxcclxuICAgIFwibm90XCI6IHBzZXVkb0NsYXNzV2l0aFNlbGVjdG9yc0luZm8sXHJcbiAgICBcIm50aENoaWxkXCI6IGFkZE50aFBzZXVkb0NsYXNzLFxyXG4gICAgXCJudGhMYXN0Q2hpbGRcIjogYWRkTnRoUHNldWRvQ2xhc3MsXHJcbiAgICBcIm50aE9mVHlwZVwiOiBhZGROdGhQc2V1ZG9DbGFzcyxcclxuICAgIFwibnRoTGFzdE9mVHlwZVwiOiBhZGROdGhQc2V1ZG9DbGFzcyxcclxuICAgIFwid2hlcmVcIjogcHNldWRvQ2xhc3NXaXRoU2VsZWN0b3JzSW5mbyxcclxuXHJcbiAgICAvLyBwYXJhbWV0ZXJpemVkIHBzZXVkbyBlbGVtZW50c1xyXG4gICAgXCJwYXJ0XCI6IFNlbGVjdG9yUHJvY2Vzc2luZ1R5cGUuUGFyYW1ldGVyaXplZFBzZXVkb0VsZW1lbnQsXHJcbiAgICBcInNsb3R0ZWRcIjogeyBmOiB3cmFwQW5kQWRkU2VsZWN0b3JzLCBhOiBbXCIsXCJdLCBwOiBcIjo6XCIgfSxcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUHJveHkgaGFuZGxlciB0aGF0IHNlcnZlcyBhcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgSVNlbGVjdG9yQnVpbGRlciBpbnRlcmZhY2UuXHJcbiAqL1xyXG5jbGFzcyBTZWxlY3RvckJ1aWxkZXJIYW5kbGVyIGltcGxlbWVudHMgUHJveHlIYW5kbGVyPElTZWxlY3RvckJ1aWxkZXI+XHJcbntcclxuICAgIGl0ZW1zOiBDc3NTZWxlY3RvcltdID0gW107XHJcblxyXG4gICAgLy8gYXJyYXkgb2Yga2V5cyB0aGF0IGFyZSBjb25zaWRlcmVkIFwib3duXCI6IHRoZXNlIGFyZSB0aGUga2V5cyBmcm9tIHRoZSBJU2VsZWN0b3JGdW5jIGludGVyZmFjZVxyXG4gICAgc3RhdGljIGtleXMgPSBbXCJmblwiLCBcIml0ZW1zXCJdO1xyXG5cclxuICAgIGdldCggdDogYW55LCBwcm9wTmFtZTogUHJvcGVydHlLZXksIHI6IGFueSk6IGFueVxyXG4gICAge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcHJvcE5hbWUgIT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgbWFrZXMgb3VyIG9iamVjdCB0byBpbXBsZW1lbnQgdGhlIElTZWxlY3RvckZ1bmMgaW50ZXJmYWNlXHJcbiAgICAgICAgaWYgKHByb3BOYW1lID09PSBcImZuXCIpXHJcbiAgICAgICAgICAgIHJldHVybiBcInNlbFwiO1xyXG4gICAgICAgIGVsc2UgaWYgKHByb3BOYW1lID09PSBcIml0ZW1zXCIpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zO1xyXG5cclxuICAgICAgICBsZXQgaW5mbyA9IHNlbGVjdG9ySW5mb3NbcHJvcE5hbWVdO1xyXG4gICAgICAgIGlmICghaW5mbylcclxuICAgICAgICAgICAgcmV0dXJuIHB1c2hTZWxlY3Rvci5jYWxsKCB0aGlzLCBwc2V1ZG9DYW1lbFRvZERhc2goIFwiOlwiLCBwcm9wTmFtZSkpO1xyXG4gICAgICAgIGVsc2UgaWYgKGluZm8gPT09IFNlbGVjdG9yUHJvY2Vzc2luZ1R5cGUuU2ltcGxlUHNldWRvRWxlbWVudClcclxuICAgICAgICAgICAgcmV0dXJuIHB1c2hTZWxlY3Rvci5jYWxsKCB0aGlzLCBwc2V1ZG9DYW1lbFRvZERhc2goIFwiOjpcIiwgcHJvcE5hbWUpKTtcclxuICAgICAgICBlbHNlIGlmIChpbmZvID09PSBTZWxlY3RvclByb2Nlc3NpbmdUeXBlLlBhcmFtZXRlcml6ZWRQc2V1ZG9DbGFzcylcclxuICAgICAgICAgICAgcmV0dXJuIGFkZFBhcmFtZXRlcml6ZWRQc2V1ZG9FbnRpdHkuYmluZCggdGhpcywgcHNldWRvQ2FtZWxUb2REYXNoKCBcIjpcIiwgcHJvcE5hbWUpKTtcclxuICAgICAgICBlbHNlIGlmIChpbmZvID09PSBTZWxlY3RvclByb2Nlc3NpbmdUeXBlLlBhcmFtZXRlcml6ZWRQc2V1ZG9FbGVtZW50KVxyXG4gICAgICAgICAgICByZXR1cm4gYWRkUGFyYW1ldGVyaXplZFBzZXVkb0VudGl0eS5iaW5kKCB0aGlzLCBwc2V1ZG9DYW1lbFRvZERhc2goIFwiOjpcIiwgcHJvcE5hbWUpKTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5mbyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICByZXR1cm4gaW5mby5iaW5kKCB0aGlzLCBwcm9wTmFtZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcHJvcE5hbWUgPSBpbmZvLm4gPz8gKGluZm8ucCA/IHBzZXVkb0NhbWVsVG9kRGFzaCggaW5mby5wLCBwcm9wTmFtZSkgOiBwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmZvLmYuYmluZCggdGhpcywgcHJvcE5hbWUsIC4uLmluZm8uYSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG93bktleXMoIHQ6IGFueSk6IEFycmF5TGlrZTxzdHJpbmcgfCBzeW1ib2w+IHsgcmV0dXJuIFNlbGVjdG9yQnVpbGRlckhhbmRsZXIua2V5czsgfVxyXG4gICAgaGFzKCB0OiBhbnksIHA6IHN0cmluZyk6IGJvb2xlYW4geyByZXR1cm4gU2VsZWN0b3JCdWlsZGVySGFuZGxlci5rZXlzLmluY2x1ZGVzKHApOyB9XHJcblxyXG5cclxuXHJcbiAgICAvLyByZWZlcmVuY2UgdG8gdGhlIHByb3h5IG9iamVjdCB0aGF0IHRoaXMgaGFuZGxlciBzZXJ2ZXMuIFdlIG5lZWQgaXQgdG8gcmV0dXJuIGZyb21cclxuICAgIC8vIG91ciBmdW5jdGlvbnMgaW4gb3JkZXIgdG8gbWFrZSB0aGUgY2FsbCBjaGFpbmluZyB3b3JrLlxyXG4gICAgcHJveHk6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciggaXRlbXM6IENzc1NlbGVjdG9yW10pXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8vIGFkZHMgYW4gYXR0cmlidXRlIHNlbGVjdG9yXHJcbmZ1bmN0aW9uIGFkZEF0dHJTZWxlY3RvciggdGhpczogU2VsZWN0b3JCdWlsZGVySGFuZGxlciwgcHJvcE5hbWU6IHN0cmluZyxcclxuICAgIGF0dHJOYW1lOiBzdHJpbmcsIHAyPzogYW55LCBwMz86IGFueSwgcDQ/OiBhbnksIHA1PzogYW55KTogYW55XHJcbntcclxuICAgIHJldHVybiBwdXNoU2VsZWN0b3IuY2FsbCggdGhpcyxcclxuICAgICAgICBhdHRyQ29tcGFyaXNvbk9wZXJhdGlvbnMuaW5jbHVkZXMocDIpXHJcbiAgICAgICAgICAgID8ge2ZuOiBcImF0dHItc2VsXCIsIG5hbWU6IGF0dHJOYW1lLCB2YWw6IHAzLCBvcDogcDIsIGNmOiBwNCwgbnM6IHA1fVxyXG4gICAgICAgICAgICA6IHtmbjogXCJhdHRyLXNlbFwiLCBuYW1lOiBhdHRyTmFtZSwgdmFsOiBwMiwgY2Y6IHAzLCBuczogcDR9XHJcbiAgICApO1xyXG59XHJcblxyXG4vLyBQdXNoZXMgYSBzZWxlY3RvciBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlcml6ZWQgcHNldWRvIGVudGl0eSB0byB0aGUgbGlzdCBvZiBpdGVtc1xyXG5mdW5jdGlvbiBhZGRQYXJhbWV0ZXJpemVkUHNldWRvRW50aXR5KCB0aGlzOiBTZWxlY3RvckJ1aWxkZXJIYW5kbGVyLCBlbnRpdHk6IHN0cmluZywgcGFyYW06IGFueSk6IGFueVxyXG57XHJcbiAgICByZXR1cm4gcHVzaFNlbGVjdG9yLmNhbGwoIHRoaXMsIHsgZm46IGVudGl0eSwgcDogcGFyYW0gfSk7XHJcbn1cclxuXHJcbi8vIEFkZHMgdGhlIGdpdmVuIHNlbGVjdG9ycyBpbnRlcm1pbmdsZWQgd2l0aCB0aGUgZ2l2ZW4gY29tYmluYXRvciB0byB0aGUgbGlzdCBvZiBpdGVtcy5cclxuZnVuY3Rpb24gYWRkU2VsZWN0b3JzV2l0aENvbWJpbmF0b3JzKCB0aGlzOiBTZWxlY3RvckJ1aWxkZXJIYW5kbGVyLCBlbnRpdHk6IHN0cmluZyxcclxuICAgIGNvbWJpbmF0b3I6IHN0cmluZywgLi4ubmV3SXRlbXM6IENzc1NlbGVjdG9yW10pOiBhbnlcclxue1xyXG4gICAgcmV0dXJuIHB1c2hTZWxlY3RvcnNXaXRoQ29tYmluYXRvcnMuY2FsbCggdGhpcywgY29tYmluYXRvciwgdHJ1ZSwgLi4ubmV3SXRlbXMpO1xyXG59XHJcblxyXG4vLyBXcmFwcyB0aGUgZ2l2ZW4gc2VsZWN0b3JzIHdpdGggdGhlIGludm9jYXRpb24gb2YgdGhlIGdpdmVuIHBzZXVkbyBlbnRpdHkgYW5kIHB1c2hlcyB0aGVtXHJcbi8vIHRvIHRoZSBsaXN0IG9mIGl0ZW1zXHJcbmZ1bmN0aW9uIHdyYXBBbmRBZGRTZWxlY3RvcnMoIHRoaXM6IFNlbGVjdG9yQnVpbGRlckhhbmRsZXIsIG5hbWU6IHN0cmluZywgY29tYmluYXRvcjogc3RyaW5nLCAuLi5uZXdJdGVtczogQ3NzU2VsZWN0b3JbXSk6IGFueVxyXG57XHJcbiAgICB0aGlzLml0ZW1zLnB1c2goIG5hbWUgKyBcIihcIik7XHJcbiAgICBwdXNoU2VsZWN0b3JzV2l0aENvbWJpbmF0b3JzLmNhbGwoIHRoaXMsIGNvbWJpbmF0b3IsIGZhbHNlLCAuLi5uZXdJdGVtcylcclxuICAgIHRoaXMuaXRlbXMucHVzaCggXCIpXCIpO1xyXG4gICAgcmV0dXJuIHRoaXMucHJveHk7XHJcbn1cclxuXHJcbi8vIFB1c2hlcyB0aGUgXCJudGhcIiBwc2V1ZG8gY2xhc3Mgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1ldGVycyB0byB0aGUgbGlzdCBvZiBpdGVtc1xyXG5mdW5jdGlvbiBhZGROdGhQc2V1ZG9DbGFzcyggdGhpczogU2VsZWN0b3JCdWlsZGVySGFuZGxlciwgcHJvcE5hbWU6IHN0cmluZywgcDE6IE50aEV4cHJlc3Npb24sIHAyPzogbnVtYmVyKTogYW55XHJcbntcclxuICAgIHJldHVybiBwdXNoU2VsZWN0b3IuY2FsbCggdGhpcywgeyBmbjogcHNldWRvQ2FtZWxUb2REYXNoKCBcIjpcIiwgcHJvcE5hbWUpLCBwOiBwMiAhPSBudWxsID8gW3AxIGFzIG51bWJlciwgcDJdIDogcDEgfSk7XHJcbn1cclxuXHJcbi8vIFB1c2hlcyB0aGUgZ2l2ZW4gc2VsZWN0b3JzIGludGVybWluZ2xlZCB3aXRoIHRoZSBnaXZlbiBjb21iaW5hdG9yIHRvIHRoZSBsaXN0IG9mIGl0ZW1zLiBUaGVcclxuLy8gXCJpbnNlcnRCZWZvcmVcIiBwYXJhbWV0ZXIgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvbWJpbmF0b3Igc2hvdWxkIGJlIGluc2VydGVkIGJlZm9yZSB0aGUgZmlyc3RcclxuLy8gc2VsZWN0b3IgaXRlbS5cclxuZnVuY3Rpb24gcHVzaFNlbGVjdG9yc1dpdGhDb21iaW5hdG9ycyggdGhpczogU2VsZWN0b3JCdWlsZGVySGFuZGxlciwgY29tYmluYXRvcjogc3RyaW5nLFxyXG4gICAgaW5zZXJ0QmVmb3JlOiBib29sZWFuLCAuLi5uZXdJdGVtczogQ3NzU2VsZWN0b3JbXSk6IGFueVxyXG57XHJcbiAgICBpZiAoaW5zZXJ0QmVmb3JlICYmIGNvbWJpbmF0b3IpXHJcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKCBjb21iaW5hdG9yKTtcclxuXHJcbiAgICBmb3IoIGxldCBpID0gMDsgaSA8IG5ld0l0ZW1zLmxlbmd0aDsgaSsrKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChpID4gMCAmJiBjb21iaW5hdG9yKVxyXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goIGNvbWJpbmF0b3IpO1xyXG5cclxuICAgICAgICB0aGlzLml0ZW1zLnB1c2gobmV3SXRlbXNbaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnByb3h5O1xyXG59XHJcblxyXG4vLyBQdXNoZXMgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIHRoZSBsaXN0IG9mIGl0ZW1zXHJcbmZ1bmN0aW9uIHB1c2hTZWxlY3RvciggdGhpczogU2VsZWN0b3JCdWlsZGVySGFuZGxlciwgaXRlbTogQ3NzU2VsZWN0b3IpOiBhbnlcclxue1xyXG4gICAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgcmV0dXJuIHRoaXMucHJveHk7XHJcbn1cclxuXHJcbi8vIGNvbWJpbmVzIHRoZSBnaXZlbiBwcmVmaXggd2l0aCB0aGUgcHNldWRvIGVudGl0eSBjYW1lbCBuYW1lIGNvbnZlcnRlZCB0byBkYXNoIGZvcm1cclxuY29uc3QgcHNldWRvQ2FtZWxUb2REYXNoID0gKHByZWZpeDogXCI6XCIgfCBcIjo6XCIsIG5hbWU6IHN0cmluZykgPT4gcHJlZml4ICsgY2FtZWxUb0Rhc2gobmFtZSk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIHNlbGVjdG9yIGJ1aWxkZXIgb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWVhbnMgdG8gYnVpbGQgY29tcGxleCBzZWxlY3RvcnMgZnJvbSBtdWx0aXBsZVxyXG4gKiBzZWxlY3RvciBpdGVtcyBvZiBhbGwgcG9zc2libGUga2luZHMgaW5jbHVkaW5nIHRhZ3MsIGNsYXNzZXNzLCBJRHMsIGF0dHJpYnV0ZXMsIHBzZXVkbyBjbGFzc2VzXHJcbiAqIGFuZCBwc2V1ZG8gZWxlbWVudHMgY29tYmluZWQgd2l0aCBDU1MgY29tYmluYXRvcnMuIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgW1tJU2VsZWN0b3JCdWlsZGVyXV1cclxuICogaW50ZXJmYWNlLCB3aGljaCBoYXMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBmb3IgYWxsIHNlbGVjdG9yIGl0ZW1zLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGU6KipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgY2xzID0gdGhpcy4kY2xhc3Moey4uLn0pXHJcbiAqICAgICBteUlEID0gdGhpcy4kaWQoey4uLn0pXHJcbiAqXHJcbiAqICAgICAvLyBwcm9kdWNlcyBDU1M6IGxhYmVsLmNsczFbZm9yPVwibXlJRFwiXTpob3ZlciB7Li4ufVxyXG4gKiAgICAgczEgPSB0aGlzLiRzdHlsZSggY3NzLnNlbChcImxhYmVsXCIpLmFuZCh0aGlzLmNsczEpKS5hdHRyKFwiZm9yXCIsIHRoaXMubXlJRCkuaG92ZXIsIHsuLi59KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiBAcGFyYW0gaXRlbXMgTGlzdCBvZiBzZWxlY3RvciBpdGVtcyB0byBpbml0aWFsaXplIHRoZSBjb21wbGV4IHNlbGVjdG9yLiBJZiBtdWx0aXBsZSBpdGVtcyBhcmVcclxuICogc3BlY2lmaWVkLCB0aGV5IGFyZSB0cmVhdGVkIGFzIGxpc3Q7IHRoYXQgaXMsIHRoZXkgYXJlIGNvbWJpbmVkIHdpdGggdGhlIGBcIixcImAgY29tYmluYXRvci5cclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzZWwgPSAoLi4uaXRlbXM6IENzc1NlbGVjdG9yW10pOiBJU2VsZWN0b3JCdWlsZGVyID0+XHJcbntcclxuICAgIGxldCBoYW5kbGVyID0gbmV3IFNlbGVjdG9yQnVpbGRlckhhbmRsZXIoaXRlbXMpO1xyXG4gICAgbGV0IHByb3h5ID0gbmV3IFByb3h5KCB7fSwgaGFuZGxlcik7XHJcblxyXG4gICAgLy8gdGhlIGhhbmRsZXIgc2hvdWxkIHJlZmVyZW5jZSB0aGUgcHJveHkgaW4gb3JkZXIgdG8gcmV0dXJuIGl0IGZyb20gbWV0aG9kcyAoYW5kIHByb3BlcnRpZXMpXHJcbiAgICAvLyB0byBhbGxvdyBjaGFpbiBjYWxscy5cclxuICAgIGhhbmRsZXIucHJveHkgPSBwcm94eTtcclxuICAgIHJldHVybiBwcm94eSBhcyBJU2VsZWN0b3JCdWlsZGVyO1xyXG59XHJcblxyXG5mZG9bXCJzZWxcIl0gPSB2ID0+IGEycyggdi5pdGVtcywgeyBzZXA6IFwiXCIsIHJlY3Vyc2l2ZTogdHJ1ZSB9LCBcIlwiKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgc2VsZWN0b3IgZm9yIHRoZSBnaXZlbiBlbGVtZW50IHRhZ3Mgd2l0aCB0aGUgZ2l2ZW4gbmFtZXNwYWNlIHByZWZpeC4gVGhlXHJcbiAqIGBuc2AgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgbmFtZXNwYWNlIHByZWZpeCBhcyBlaXRoZXIgYSBzdHJpbmcgb3IgYSByZWZlcmVuY2UgdG8gdGhlXHJcbiAqIG5hbWVzcGFjZSBydWxlLiBUaGUgYHRhZ3NgIHBhcmFtZXRlciBzcGVjaWZpZXMgZWl0aGVyIGEgc2luZ2xlIHRhZyBvciBhbiBhcnJheSBvZiB0YWdzLiBJblxyXG4gKiBhZGRpdGlvbiwgYW4gYXN0ZXJpc2sgc3ltYm9sIChgXCIqXCJgKSBjYW4gYmUgc3BlY2lmaWVkIHRvIHRhcmdldCBhbGwgZWxlbWVudHMuXHJcbiAqXHJcbiAqIFdoZW4gbXVsdGlwbGUgdGFncyBhcmUgc3BlY2lmaWVkLCB0aGV5IHdpbGwgYmUgY29tYmllZCB1c2luZyB0aGUgc2VsZWN0b3IgY29tYmluYXRvcnNcclxuICogc3BlY2lmaWVkIGJ5IHRoZSBgY29tYmAgcGFyYW1ldGVyLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGVzOioqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIGRlZmluZSBIVE1MIGFzIGRlZmF1bHQgbmFtZXNwYWNlIGFuZCBcInN2Z1wiIGFzIGEgcHJlZml4IGZvciBTVkcgbmFtZXNwYWNlXHJcbiAqICAgICBodG1sTlMgPSB0aGlzLiRuYW1lc3BhY2UoIGNzcy5XZWJOYW1lc3BhY2VzLkhUTUwpXHJcbiAqICAgICBzdmdOUyA9IHRoaXMuJG5hbWVzcGFjZSggY3NzLldlYk5hbWVzcGFjZXMuU1ZHLCBcInN2Z1wiKVxyXG4gKlxyXG4gKiAgICAgLy8gcHJvZHVjZXMgQ1NTIFwic3ZnfGEge31cIiwgd2hpY2ggd2lsbCBtYXRjaCBvbmx5IFNWRyBgPGE+YCBlbGVtZW50c1xyXG4gKiAgICAgcnVsZTEgPSB0aGlzLiRzdHlsZSggY3NzLm5zdGFnKCB0aGlzLnN2Z05TLCBcImFcIiksIHt9KVxyXG4gKlxyXG4gKiAgICAgLy8gcHJvZHVjZXMgQ1NTIFwiKnxhIHt9XCIsIHdoaWNoIHdpbGwgbWF0Y2ggYm90aCBIVE1MIGFuZCBTVkcgYDxhPmAgZWxlbWVudHNcclxuICogICAgIHJ1bGUyID0gdGhpcy4kc3R5bGUoIGNzcy5uc3RhZyggXCIqXCIsIFwiYVwiKSwge30pXHJcbiAqXHJcbiAqICAgICAvLyBwcm9kdWNlcyBDU1MgXCJzdmd8Y2lyY2xlLCBzdmd8ZWxsaXBzZSB7fVwiXHJcbiAqICAgICBydWxlMyA9IHRoaXMuJHN0eWxlKCBjc3MubnN0YWcoIHRoaXMuc3ZnTlMsIFtcImNpcmNsZVwiLCBcImVsbGlwc2VcIl0pLCB7fSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIG5zIE5hbWVzcGFjZSBwcmVmaXggc3RyaW5nIG9yIHJlZmVyZW5jZSB0byBhIG5hbWVzcGFjZSBydWxlLiBUaGlzIGNhbiBhbHNvIGJlIGBcIipcImAsXHJcbiAqIGluIHdoaWNoIGNhc2UgdGFncyBvZiBhbGwgbmFlc3BhY2VzIGFyZSBzZWxlY3RlZFxyXG4gKiBAcGFyYW0gdGFncyBPbmUgb3IgbW9yZSBlbGVtZW50IHRhZyBuYW1lcy5cclxuICogQHBhcmFtIGNvbWIgT3B0aW9uYWwgc2VsZWN0b3IgY29tYmluYXRvciBpZiBtb3JlIHRoYW4gb25lIHRhZyBpcyBnaXZlbi4gRGVmYXVsdCBpcyBgXCIsXCJgLlxyXG4gKiBAcmV0dXJucyBPYmplY3QgcmVwcmVzZW50aW5nIHBhcmFtZXRlcnMgZnJvbSB3aGljaCBuYW1lc3BhY2VkIHRhZyBzZWxlY3RvciBpcyBjcmVhdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG5zdGFnID0gKG5zOiBzdHJpbmcgfCBJTmFtZXNwYWNlUnVsZSwgdGFnczogXCIqXCIgfCBFbGVtZW50VGFnTmFtZSB8IEVsZW1lbnRUYWdOYW1lW10sXHJcbiAgICBjb21iOiBTZWxlY3RvckNvbWJpbmF0b3IgPSBcIixcIik6IElOU1RhZ0Z1bmMgPT4gKHtmbjogXCJuc3RhZ1wiLCBucywgdGFncywgY29tYn0pXHJcblxyXG5mZG9bXCJuc3RhZ1wiXSA9ICh2OiBJTlNUYWdGdW5jKSA9PiB7XHJcbiAgICBsZXQgcHJlZml4ID0gdHlwZW9mIHYubnMgPT09IFwic3RyaW5nXCIgPyB2Lm5zICsgXCJ8XCIgOiB2Lm5zLnByZWZpeCA/IHYubnMucHJlZml4ICsgXCJ8XCIgOiBcIlwiO1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2LnRhZ3MgPT09IFwic3RyaW5nXCIgPyBwcmVmaXggKyB2LnRhZ3MgOiB2LnRhZ3MubWFwKCB0YWcgPT4gcHJlZml4ICsgdGFnKS5qb2luKHYuY29tYik7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEFuaW1hdGlvbiBhbmQgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb25zLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gcmVwcmVzZW50aW5nIGFuIGludm9jYXRpb24gb2YgdGhlIENTUyBgc3RlcHMoKWAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2l0aW9uIGFuZCBBbmltYXRpb25cclxuICovXHJcbiBleHBvcnQgY29uc3Qgc3RlcHMgPSAobjogRXh0ZW5kZWQ8bnVtYmVyPiwgaj86IFRpbWluZ0Z1bmN0aW9uSnVtcFRlcm0pOiBJU3RlcHNGdW5jID0+XHJcbiAoeyBmbjogXCJzdGVwc1wiLCBuLCBqIH0pO1xyXG5cclxuZmRvLnN0ZXBzID0gW1wiblwiLCBcImpcIl1cclxuXHJcblxyXG5cclxuLyoqXHJcbiogUmV0dXJucyBhIGZ1bmN0aW9uIHJlcHJlc2VudGluZyBhbiBpbnZvY2F0aW9uIG9mIHRoZSBDU1MgYGN1YmljLWJlemllcigpYCBmdW5jdGlvbi5cclxuKlxyXG4qIEBjYXRlZ29yeSBUcmFuc2l0aW9uIGFuZCBBbmltYXRpb25cclxuKi9cclxuZXhwb3J0IGNvbnN0IGN1YmljQmV6aWVyID0gKG4xOiBFeHRlbmRlZDxudW1iZXI+LCBuMjogRXh0ZW5kZWQ8bnVtYmVyPiwgbjM6IEV4dGVuZGVkPG51bWJlcj4sXHJcbiBuNDogRXh0ZW5kZWQ8bnVtYmVyPik6IElDdWJpY0JlemllckZ1bmMgPT4gKHsgZm46IFwiY3ViaWMtYmV6aWVyXCIsIG4xLCBuMiwgbjMsIG40IH0pO1xyXG5cclxuZmRvW1wiY3ViaWMtYmV6aWVyXCJdID0gW1wibjFcIiwgXCJuMlwiLCBcIm4zXCIsIFwibjRcIl1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEBtZWRpYSBhbmQgQHN1cHBvcnRzIHF1ZXJpZXMuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIFRhZyBmdW5jdGlvbiB0aGF0IHJlcHJlc2VudHMgYSBtZWRpYSBxdWVyeS4gVGhpcyBmdW5jdGlvbiBhbGxvd3MgZXhwcmVzc2luZyBtZWRpYSBxdWVyaWVzIGluXHJcbiAqIGEgbmF0dXJhbCBzdHJpbmcgZm9ybSB3aGlsZSBlbWJlZGRpbmcgbWVkaWEgZmVhdHVyZSB2YWx1ZXMgaW4gdHlwZSBzYWZlIG1hbm5lci4gVGhlIHN0cmluZyBjYW5cclxuICogY29udGFpbiBhbnkgbWVkaWEgZXhwcmVzc2lvbnMgd2hpbGUgdGhlIGVtYmVkZGVkIG9iamVjdHMgbXVzdCBiZSBvZiB0eXBlIFtbSU1lZGlhRmVhdHVyZXNldF1dLlxyXG4gKiBNdWx0aXBsZSBmZWF0dXJlcyBpbiB0aGUgZmVhdHVyZSBzZXQgd2lsbCBiZSBleHBhbmRlZCBpbnRvIGNsYXVzZXMgY29tYmluZWQgd2l0aCB0aGUgXCJhbmRcIlxyXG4gKiBvcGVyYXRvci5cclxuICpcclxuICogKipFeGFtcGxlOioqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBTdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0MDBweCkgYW5kIChtYXgtd2lkdGg6IDYwMHB4KSBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdClcclxuICogICAgIGlmTmFycm93RGV2aWNlID0gdGhpcy4kbWVkaWEoXHJcbiAqICAgICAgICAgY3NzLm1lZGlhYHNjcmVlbiBhbmQgJHt7d2lkdGg6WzQwMCw2MDBdLCBvcmllbnRhdGlvbjogXCJwb3J0cmFpdFwifX1gLCAuLi4pXHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgbWVkaWEgPSAocGFydHM6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi5wYXJhbXM6IEV4dGVuZGVkTWVkaWFGZWF0dXJlc2V0W10pOiBJTWVkaWFRdWVyeVByb3h5ID0+XHJcbiAgICAoKSA9PiB0YWcycyggcGFydHMsIHBhcmFtcywgdiA9PiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIiA/IHYgOiBtZWRpYTJzKHYpKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRhZyBmdW5jdGlvbiB0aGF0IHJlcHJlc2VudHMgYSBzdXBwb3J0cyBxdWVyeS4gVGhpcyBmdW5jdGlvbiBhbGxvd3MgZXhwcmVzc2luZyBzdXBwb3J0c1xyXG4gKiBxdWVyaWVzIGluIGEgbmF0dXJhbCBzdHJpbmcgZm9ybSB3aGlsZSBlbWJlZGRpbmcgbWVkaWEgZmVhdHVyZSB2YWx1ZXMgaW4gdHlwZSBzYWZlIG1hbm5lci4gVGhlXHJcbiAqIHN0cmluZyBjYW4gY29udGFpbiBhbnkgc3VwcG9ydHMgZXhwcmVzc2lvbnMgd2hpbGUgdGhlIGVtYmVkZGVkIG9iamVjdHMgbXVzdCBiZSBvZiB0eXBlXHJcbiAqIFN0eWxlc2V0LiBNdWx0aXBsZSBwcm9wZXJ0aWVzIGluIHRoZSBzdHlsZXNldCB3aWxsIGJlIGV4cGFuZGVkIGludG8gY2xhdXNlcyBjb21iaW5lZCB3aXRoIHRoZVxyXG4gKiBcIm9yXCIgb3BlcmF0b3IuXHJcbiAqXHJcbiAqICoqRXhhbXBsZToqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIG5vdCAodHJhbnNmb3JtLW9yaWdpbjogMzBweCAzMHB4IDMwcHgpXHJcbiAqICAgICBpZk5vVHJhbnNmb3JtT3JpZ2luID0gdGhpcy4kc3VwcG9ydHMoXHJcbiAqICAgICAgICAgY3NzLnN1cHBvcnRzYG5vdCAoJHt7dHJhbnNmb3JtLW9yaWdpbjogWzMwLCAzMCwgMzBdfX0pYCwgLi4uKVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHN1cHBvcnRzID0gKHBhcnRzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4ucGFyYW1zOiBTdHlsZXNldFtdKTogSVN1cHBvcnRzUXVlcnlQcm94eSA9PlxyXG4gICAgKCkgPT4gdGFnMnMoIHBhcnRzLCBwYXJhbXMsIHYgPT4gdHlwZW9mIHYgPT09IFwic3RyaW5nXCIgPyB2IDogc3VwcG9ydHMycyh2KSk7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBUaGUgYHJhd2AgZnVuY3Rpb24gYWxsb3dzIHNwZWNpZnlpbmcgYXJiaXRyYXJ5IHRleHQgZm9yIHByb3BlcnRpZXMgd2hvc2UgdHlwZSBub3JtYWxseSBkb2Vzbid0XHJcbiAqIGFsbG93IHN0cmluZ3MuVGhpcyBmdW5jdGlvbiBpcyBhIHRhZyBmdW5jdGlvbiBhbmQgbXVzdCBiZSBpbnZva2VkIHdpdGggdGhlIHRlbXBsYXRlIHN0cmluZ1xyXG4gKiB3aXRob3V0IHBhcmVudGhlc2VzLiBUaGUgYHJhd2AgZnVuY3Rpb24gY2FuIGJlIHVzZWQgZm9yIGFueSBzdHlsZSBwcm9wZXJ0eS4gTm90ZSwgaG93ZXZlciwgdGhhdFxyXG4gKiBubyB2YWxpZGF0aW9uIGNoZWNrcyBhcmUgcGVyZm9ybWVkIG9uIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIHN0cmluZy4gSWYgdGhlIHN0cmluZyBpc24ndCB2YWxpZFxyXG4gKiBmb3IgdGhlIHN0eWxlIHByb3BlcnR5LCB0aGUgcHJvcGVydHkgd2lsbCBub3QgYmVjb21lIHBhcnQgb2YgdGhlIHN0eWxlIHJ1bGUgaW5zZXJ0ZWQgaW50byB0aGVcclxuICogRE9NLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGU6KipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgcG9seSA9IHRoaXMuJGNsYXNzKHtcclxuICogICAgICAgICBjbGlwUGF0aDogY3NzLnJhd2Bwb2x5Z29uKDUwJSAyMCUsIDkwJSA4MCUsIDEwJSA4MCUpYFxyXG4gKiAgICAgfSlcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjb25zdCByYXcgPSAocGFydHM6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi5wYXJhbXM6IGFueVtdKTogSVJhd1Byb3h5ID0+XHJcbiAgICAoKSA9PiB0YWcycyggcGFydHMsIHBhcmFtcyk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBDU1MgYHVybCgpYCBmdW5jdGlvbi4gVGhlIHN0cmluZyBwYXJhbWV0ZXJcclxuICogd2lsbCBiZSB3cmFwcGVkIGluIGEgYHVybCgpYCBpbnZvY2F0aW9uLiBUaGUgZnVuY3Rpb24gY2FuIGFsc28gYWNjZXB0IHRoZSBJSURSdWxlIG9iamVjdCB0b1xyXG4gKiBjcmVhdGUgdXJsKCNlbGVtZW50KSBpbnZvY2F0aW9uLCB3aGljaCBpcyBvZnRlbiB1c2VkIHRvIGFkZHJlc3MgU1ZHIGVsZW1lbnRzIGJ5IHRoZWlyIElEcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCB1cmwgPSAocDogRXh0ZW5kZWQ8c3RyaW5nIHwgSUlEUnVsZT4pOiBJVXJsRnVuYyA9PiAoeyBmbjogXCJ1cmxcIiwgcCB9KTtcclxuXHJcbmZkby51cmwgPSBbIFtcInBcIiwge3N0cjogV0tGLlF1b3RlZH0gXV1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiByZXByZXNlbnRpbmcgdGhlIENTUyBgdXJsKClgIGZ1bmN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGN1cnNvciggcDogRXh0ZW5kZWQ8c3RyaW5nIHwgSUlEUnVsZT4pOiBJQ3Vyc29yRnVuYztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBDU1MgYHVybCgpYCBmdW5jdGlvbiBmb2xsb3dlZCBieSB0d28gbnVtYmVyc1xyXG4gKiBpbmRpY2F0aW5nIHRoZSBjdXJzb3IgaG90c3BvdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjdXJzb3IoIHA6IEV4dGVuZGVkPHN0cmluZyB8IElJRFJ1bGU+LCB4OiBudW1iZXIsIHk6IG51bWJlcik6IElDdXJzb3JGdW5jO1xyXG5cclxuLy8gSW1wbGVtZW50YXRpb25cclxuZXhwb3J0IGZ1bmN0aW9uIGN1cnNvciggdXJsOiBFeHRlbmRlZDxzdHJpbmcgfCBJSURSdWxlPiwgeD86IG51bWJlciwgeT86IG51bWJlcik6IElDdXJzb3JGdW5jXHJcbntcclxuICAgIHJldHVybiB7IGZuOiBcImN1cnNvclwiLCB1cmwsIHgsIHkgfTtcclxufVxyXG5cclxuZmRvLmN1cnNvciA9ICh2OiBJQ3Vyc29yRnVuYykgPT4gbXYycyggW3VybCh2LnVybCksIHYueCwgdi55XSlcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiByZXByZXNlbnRpbmcgdGhlIGBhdHRyKClgIENTUyBmdW5jdGlvbi4gSXQgcmV0dXJucyBbW0lTdHJpbmdQcm94eV1dIGFuZFxyXG4gKiB0aGVvcmV0aWNhbGx5IGNhbiBiZSB1c2VkIGluIGFueSBzdHlsZSBwcm9wZXJ0eSB3aGVyZXZlciB0aGUgQ1NTIGA8c3RyaW5nPmAgdHlwZSBpcyBhY2NlcHRlZDtcclxuICogaG93ZXZlciwgaXRzIHVzZSBieSBicm93c2VycyBpcyBjdXJyZW50bHkgbGltaXRlZCB0byB0aGUgYGNvbnRlbnRgIHByb3BlcnR5LiBBbHNvIG5vdCBhbGxcclxuICogYnJvd3NlcnMgY3VycmVudGx5IHN1cHBvcnQgdHlwZSwgdW5pdHMgb3IgZmFsbGJhY2sgdmFsdWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXR0ck5hbWUgTmFtZSBvZiB0aGUgYXR0cmlidXRlIHdob3NlIHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZC5cclxuICogQHBhcmFtIHR5cGVPclVuaXQgT3B0aW9uYWwgdHlwZSBvciB1bml0IGtleXdvcmQgdGhhdCBkZXRlcm1pbmVzIHRoZSByZXR1cm5lZCBDU1MgdHlwZS5cclxuICogQHBhcmFtIGZhbGxiYWNrIE9wdGlvbmFsIHZhbHVlIHRoYXQgaXMgdXNlZCBpZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBmb3VuZCBvbiB0aGUgZWxlbWVudC5cclxuICogQHJldHVybnNcclxuICovXHJcbiBleHBvcnQgY29uc3QgYXR0ciA9IChhdHRyTmFtZTogRXh0ZW5kZWQ8c3RyaW5nPiwgdHlwZU9yVW5pdD86IEV4dGVuZGVkPEF0dHJUeXBlS2V5d29yZCB8IEF0dHJVbml0S2V5d29yZD4sXHJcblx0ZmFsbGJhY2s/OiBFeHRlbmRlZDxzdHJpbmc+KTogSVN0cmluZ1Byb3h5ID0+XHJcbiAgICAoKSA9PiBgYXR0cigke212MnMoIFttdjJzKCBbYXR0ck5hbWUsIHR5cGVPclVuaXRdKSwgZmFsbGJhY2tdLCBcIixcIil9KWA7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIENTUyBgY291bnRlcigpYCBmdW5jdGlvbiB3aXRoIGFuIG9wdGlvbmFsIGNvdW50ZXIgc3R5bGUuXHJcbiAqXHJcbiAqIEBwYXJhbSBjIENvdW50ZXIgbmFtZSBvciBjb3VudGVyIHJ1bGUgb2JqZWN0XHJcbiAqIEByZXR1cm5zIElDb3VudGVyRnVuYyBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBpbnZvY2F0aW9uIG9mIHRoZSBgY291bnRlcigpYCBDU1MgZnVuY3Rpb25cclxuICovXHJcbiBleHBvcnQgY29uc3QgY291bnRlciA9IChjb3VudGVyT2JqOiBFeHRlbmRlZDxJQ291bnRlclJ1bGUgfCBzdHJpbmc+LFxyXG5cdHN0eWxlPzogRXh0ZW5kZWQ8TGlzdFN0eWxlVHlwZV9TdHlsZVR5cGU+KTogSVN0cmluZ1Byb3h5ID0+XHJcbiAgICAoKSA9PiBmMnMoIFwiY291bnRlclwiLCBbY291bnRlck9iaiwgc3R5bGVdKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgQ1NTIGBjb3VudGVycygpYCBmdW5jdGlvbiB3aXRoIHRoZSBnaXZlbiBzZXBhcmF0b3IgYW5kXHJcbiAqIGFuIG9wdGlvbmFsIGNvdW50ZXIgc3R5bGUuXHJcbiAqXHJcbiAqIEBwYXJhbSBjb3VudGVyT2JqIENvdW50ZXIgbmFtZSBvciBjb3VudGVyIHJ1bGUgb2JqZWN0XHJcbiAqIEBwYXJhbSBzZXAgU2VwYXJhdG9yIHN0cmluZyBiZXR3ZWVuIG11bHRpcGxlIGNvdW50ZXJzXHJcbiAqIEBwYXJhbSBzdHlsZSBDb3VudGVyIHN0eWxlXHJcbiAqIEByZXR1cm5zIElDb3VudGVyRnVuYyBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBpbnZvY2F0aW9uIG9mIHRoZSBgY291bnRlcigpYCBDU1MgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBjb3VudGVycyA9IChjb3VudGVyT2JqOiBFeHRlbmRlZDxJQ291bnRlclJ1bGUgfCBzdHJpbmc+LFxyXG5cdHNlcDogRXh0ZW5kZWQ8c3RyaW5nPiwgc3R5bGU/OiBFeHRlbmRlZDxMaXN0U3R5bGVUeXBlX1N0eWxlVHlwZT4pOiBJU3RyaW5nUHJveHkgPT5cclxuICAgICgpID0+IGYycyggXCJjb3VudGVyc1wiLCBbY291bnRlck9iaiwgW3NlcCwgV0tGLlF1b3RlZF0sIHN0eWxlXSk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBpbnZvY2F0aW9uIG9mIHRoZSBgdmFyKClgIENTUyBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIGN1c3RvbVxyXG4gKiBDU1MgcHJvcGVydHkgd2l0aCBvcHRpb25hbCBmYWxsYmFja3MuIFVzdWFsbHksIHdoZW4geW91IHdhbnQgdG8gcmVmZXIgdG8gYSBjdXN0b20gQ1NTIHByb3BlcnR5XHJcbiAqIGluIHN0eWxlIHJ1bGVzLCBpdCBpcyBlbm91Z2ggdG8ganVzdCByZWZlciB0byB0aGUgc3R5bGUgZGVmaW5pdGlvbiBwcm9wZXJ0eSBjcmVhdGVkIHVzaW5nIHRoZVxyXG4gKiBbWyR2YXJdXSBmdW5jdGlvbjsgaG93ZXZlciwgaWYgeW91IHdhbnQgdG8gcHJvdmlkZSBhIGZhbGxiYWNrIHZhbHVlLCB5b3UgbXVzdCB1c2UgdGhpcyBmdW5jdGlvbi5cclxuICpcclxuICogKipFeGFtcGxlOioqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBTdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gY3JlYXRlIGN1c3RvbSBDU1MgcHJvcGVydHkgYnV0IHdpdGhvdXQgYW4gYXNzaWduZWQgdmFsdWU7IGl0IGNhbiBiZSBhc3NpZ25lZFxyXG4gKiAgICAgLy8gbGF0ZXIgcHJvZ3JhbW1hdGljYWxseVxyXG4gKiAgICAgYmdDb2xvciA9IHRoaXMuJHZhciggXCJjb2xvclwiKVxyXG4gKlxyXG4gKiAgICAgZGl2ID0gdGhpcy4kdGFnKCBcImRpdlwiLCB7XHJcbiAqICAgICAgICAgLy8gdXNlIHRoZSBjdXN0b20gQ1NTIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIGZhbGxiYWNrIHZhbHVlXHJcbiAqICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjc3MudXNldmFyKCB0aGlzLmJnQ29sb3IsIFwiYmVpZ2VcIilcclxuICogICAgIH0pXHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEB0eXBlcGFyYW0gSyBLZXkgb2YgdGhlIFtbSVZhclRlbXBsYXRlU3R5bGVzZXRdXSBpbnRlcmZhY2UgdGhhdCBkZXRlcm1pbmVzIHRoZSB0eXBlIG9mIHRoZVxyXG4gKiBjdXN0b20gQ1NTIHByb3BlcnR5IGFuZCBvZiB0aGUgZmFsbGJhY2sgdmFsdWUuXHJcbiAqIEBwYXJhbSB2YXJPYmogQ3VzdG9tIENTUyBwcm9wZXJ0eSBvYmplY3QgY3JlYXRlZCB1c2luZyB0aGUgW1skdmFyXV0gZnVuY3Rpb24uXHJcbiAqIEBwYXJhbSBmYWxsYmFjayBGYWxsYmFjayB2YWx1ZSB0aGF0IHdpbGwgYmUgdXNlZCBpZiB0aGUgY3VzdG9tIENTUyBwcm9wZXJ0eSBpc250IHNldC5cclxuICogQHJldHVybnMgVGhlIGBJUmF3UHJveHlgIGNhbGxhYmxlIGludGVyZmFjZSwgd2hjaWggYWxsb3dzIHRoZSBgdXNldmFyYCBmdW5jdGlvbiB0byBiZSBjYWxsZWRcclxuICogaW4gYW55IGNvbnRleHQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNldmFyID0gPEsgZXh0ZW5kcyBWYXJUZW1wbGF0ZU5hbWU+KCB2YXJPYmo6IElWYXJSdWxlPEs+LCBmYWxsYmFjaz86IEV4dGVuZGVkVmFyVmFsdWU8Sz4pOiBJUmF3UHJveHkgPT5cclxuICAgICgpID0+IGYycyggXCJ2YXJcIiwgW3Zhck9iai5jc3NOYW1lLCBzcDJzKCB2YXJPYmoudGVtcGxhdGUsIGZhbGxiYWNrKV0pO1xyXG5cclxuXHJcblxyXG4iLCLvu78vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gQmFzaWMgdHlwZXMuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuaW1wb3J0IHtJSURSdWxlLCBJTmFtZXNwYWNlUnVsZX0gZnJvbSBcIi4vUnVsZVR5cGVzXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBTdHlsZSB2YWx1ZXMgdGhhdCBjYW4gYmUgdXNlZCBmb3IgYW55IENTUyBwcm9wZXJ0eS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEdsb2JhbF9TdHlsZVR5cGUgPSBcImluaGVyaXRcIiB8IFwiaW5pdGlhbFwiIHwgXCJ1bnNldFwiIHwgXCJyZXZlcnRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJR2VuZXJpY1Byb3h5IGludGVyZmFjZSByZXByZXNlbnRzIGEgY2FsbGFibGUgaW50ZXJmYWNlIGltcGxlbWVudGVkIGJ5IGZ1bmN0aW9ucyB0aGF0XHJcbiAqIGFjY2VwdCBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgb2YgYSBnZW5lcmljIHR5cGUgYW5kIHJldHVybiBhIHN0cmluZy4gVGhpcyBpbnRlcmZhY2UgaXMgdXNlZCBhcyBhXHJcbiAqIGJhc2UgZm9yIHByb3h5IGludGVyZmFjZXMgZGVmaW5pbmcgdHlwZXMgYWNjZXB0YWJsZSBieSBjZXJ0YWluIHN0eWxlIHByb3BlcnRpZXMuIFRoZSB0eXBlXHJcbiAqIHBhcmFtZXRlciBoZWxwcyBkaWZmZXJlbnRpYXRlIHRoZXNlIGludGVyZmFjZXMgc28gdGhhdCBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgYXNzaWduZWQgdG8gb25lXHJcbiAqIHR5cGUgb2Ygc3R5bGUgcHJvcGVydGllcyAoZS5nLiBgdHJhbnNmb3JtYCkgY2Fubm90IGJlIGFzc2lnbmVkIHRvIGFuIGluY29tcGF0aWJsZSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAoZS5nLiBgZmlsdGVyYCkuXHJcbiAqXHJcbiAqIERldmVsb3BlcnMgZG9uJ3QgaW1wbGVtZW50IHRoaXMgaW50ZXJmYWNlIGRpcmVjdGx5OyBpbnN0ZWFkLCB0aGUgaW50ZXJmYWNlcyBkZXJpdmVkIGZyb20gdGhpc1xyXG4gKiBpbnRlcmZhY2UgYXJlIGltcGxlbWVudGVkIGJ5IGRpZmZlcmVudCBNaW1jc3MgZnVuY3Rpb25zLiBGb3IgZXhhbXBsZSwgW1tJUmF3UHJveHldXSBpbnRlcmZhY2VcclxuICogaXMgaW1wbGVtZW50ZWQgYnkgdGhlIFtbcmF3XV0gZnVuY3Rpb24sIFtbSVN0cmluZ1Byb3h5XV0gaW50ZXJmYWNlIGlzIGltcGxlbWVudGVkIGJ5IHRoZVxyXG4gKiBbW2F0dHJdXSwgW1tjb3VudGVyXV0gYW5kIFtbY291bnRlcnNdXSBmdW5jdGlvbnMsIGFuZCBzbyBvbi5cclxuICpcclxuICogQHR5cGVQYXJhbSBUIFN0cmluZyBjb25zdGFudCB0aGF0IGlzIHVzZWQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHByb3hpZXMgdXNlZCBmb3IgZGlmZmVyZW50XHJcbiAqIHB1cnBvc2VzLiBUaGUgcGFyYW1ldGVyIGBwYCBvZiB0aGlzIGNhbGxhYmxlIGludGVyZmFjZSBpcyBvZiB0eXBlIFQgYnV0IGl0IGlzIG5vdCB1c2VkXHJcbiAqIGluIGFueSB3YXkuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElHZW5lcmljUHJveHk8VCBleHRlbmRzIHN0cmluZyA9IGFueT5cclxue1xyXG4gICAgKHA/OiBUKTogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUNzc0Z1bmNPYmplY3QgaW50ZXJmYWNlIGlzIGEgYmFzZSBmb3IgYWxsIGludGVyZmFjZXMgcmVwcmVzZW50aW5nIG9iamVjdHMgdGhhdCBkZXNjcmliZVxyXG4gKiBjYWxscyB0byBhIENTUyBmdW5jdGlvbi4gRXZlcnkgc3VjaCBpbnRlcmZhY2UgZ2l2ZXMgYSB1bmlxdWUgdmFsdWUgKG9yIGEgdW5pcXVlIHNldCBvZiB2YWx1ZXMpXHJcbiAqIHRvIHRoZSBgZm5gIG1lbWJlci5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IHN0cmluZztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBJUmF3UHJveHlgIGludGVyZmFjZSByZXByZXNlbnRzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc3RyaW5nLCB3aGljaCBpcyByZWFkeSB0byBiZVxyXG4gKiB1c2VkIGluIENTUyBydWxlcy4gVGhpcyBmdW5jdGlvbiBpcyBwYXJ0IG9mIHR5cGUgZGVmaW5pdGlvbiBmb3IgYWxsIENTUyBwcm9wZXJ0aWVzIC0gZXZlbiBmb3JcclxuICogdGhvc2UgdGhhdCBkb24ndCBoYXZlIGBzdHJpbmdgIGFzIHBhcnQgb2YgdGhlaXIgdHlwZS5cclxuICpcclxuICogQWxsIENTUyBwcm9wZXJ0aWVzIHNob3VsZCBhY2NlcHQgc3RyaW5nIGFzIHRoZSB0eXBlIG9mIHRoZWlyIHZhbHVlIGV2ZW4gaWYgbm9ybWFsbHlcclxuICogdGhleSBhY2NlcHQgb3RoZXIgdHlwZXMgKGUuZyBhIHNldCBvZiBzdHJpbmcgbGl0ZXJhbHMgYXMgYFwicmVkXCIgfCBcImdyZWVuXCIgfCAuLi5gIGZvciB0aGVcclxuICogY29sb3IpIHByb3BlcnR5LiBUaGlzIGlzIGJlY2F1c2UgaW4gYWRkaXRpb24gdG8gdGhlaXIgbm9ybWFsIHZhbHVlcyBhbnkgcHJvcGVydHlcclxuICogY2FuIHVzZSBjdXN0b20gQ1NTIHByb3BlcnR5IGluIHRoZSBmb3JtIGB2YXIoLS1wcm9wbmFtZSlgLiBIb3dldmVyLCBpZiB3ZSBhZGQgc3RyaW5nIHR5cGVcclxuICogdG8gdGhlIHNldCBvZiBzdHJpbmcgbGl0ZXJhbHMgKGUuZy4gYFwicmVkXCIgfCBcImdyZWVuXCIgfCBzdHJpbmdgKSwgdGhpcyB0aHJvd3Mgb2ZmIHRoZVxyXG4gKiBJbnRlbGxpc2Vuc2UgYW5kIGl0IGRvZXNuJ3QgcHJvbXB0IGRldmVsb3BlcnMgZm9yIHRoZSBwb3NzaWJsZSB2YWx1ZXMuIFRoZSBgSVJhd1Byb3h5YFxyXG4gKiBpbnRlcmZhY2UgaXMgdXNlZCBpbnN0ZWFkIG9mIHN0cmluZyBhbmQgdGhpcyBzb2x2ZXMgdGhlIEludGVsbGlzZW5zZSBpc3N1ZS5cclxuICpcclxuICogSW4gYWRkaXRpb24sIHNvbWV0aW1lcyBpdCBjYW4gYmUgZWFzaWVyIGZvciB0aGUgZGV2ZWxvcGVycyB0byBzcGVjaWZ5IGFuIGFscmVhZHkgcHJlLWZvcm1hdHRlZFxyXG4gKiBDU1Mgc3RyaW5nIGFzIHByb3BlcnR5IHZhbHVlIC0gbWF5YmUgYmVjYXVzZSBpdCBpcyBvYnRhaW5lZCBmcm9tIHNvbWUgZXh0ZXJuYWwgc291cmNlLiBUaGVcclxuICogYElSYXdQcm94eWAgY2FsbGFiY2xlIGludGVyZmFjZSBpcyByZXR1cm5lZCBmcm9tIHRoZSBbW3Jhd11dIGZ1bmN0aW9uLCB3aGljaCBhbGxvd3MgYnktcGFzc2luZ1xyXG4gKiB0aGUgcHJvcGVydHkgdHlwaW5nIHJ1bGVzIGFuZCBzcGVjaWZ5aW5nIGEgc3RyaW5nIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBEZXZlbG9wZXJzIGNhbiBjcmVhdGUgdGhlaXIgb3duIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGlzIGNhbGxhYmxlIGludGVyZmFjZSBhbmQgdGhlbiBpbnZva2VcclxuICogdGhlc2UgZnVuY3Rpb25zIHRvIGFzc2lnbiB2YWx1ZXMgdG8gc3R5bGUgcHJvcGVydGllcy4gSnVzdCBtYWtlIHN1cmUgdGhhdCB0aGUgcmV0dXJuZWQgc3RyaW5nXHJcbiAqIGlzIHRoZSBjb3JyZWN0IENTUyBzdHJpbmcuIE1pbWNzcyB3aWxsIHVzZSB0aGUgc3RyaW5nIHJldHVybmVkIGZyb20gY3VzdG9tIGZ1bmN0aW9ucyB3aXRob3V0XHJcbiAqIGNoZWNraW5nIGl0cyBjb3JyZWN0bmVzcy4gSWYgdGhlIHN0cmluZyBpcyBpbnZhbGlkIGZvciB0aGUgcHJvcGVydHkgaXQgaXMgYXNzaWduZWQgdG8sIHRoZVxyXG4gKiByZXN1bHRpbmcgQ1NTIHJ1bGUgd2lsbCBub3QgaGF2ZSB0aGF0IHByb3BlcnR5LlxyXG4gKlxyXG4gKiAqKkV4YW1wbGUqKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIHVzaW5nIGByYXdgIGZ1bmN0aW9uXHJcbiAqICAgICBjbHMxID0gdGhpcy4kY2xhc3MoeyBib3JkZXI6IGNzcy5yYXdgMXB4IHNvbGlkIGJyb3duYCB9KVxyXG4gKlxyXG4gKiAgICAgLy8gdXNpbmcgY3VzdG9tIGZ1bmN0aW9uXHJcbiAqICAgICBjbHMyID0gdGhpcy4kY2xhc3MoeyBjbGlwLXBhdGg6IHJhbmRvbUNpcmNsZSgpfSlcclxuICogfVxyXG4gKlxyXG4gKiAvLyBjcmVhdGUgQ1NTIGNpcmNsZSBmdW5jdGlvbiB3aXRoIHJhbmRvbSByYWRpdXMgYmV0d2VlbiAzMCBhbmQgNTAgcGl4ZWxzXHJcbiAqIGZ1bmN0aW9uIHJhbmRvbUNpcmNsZSgpOiBjc3MuSVJhd1Byb3h5XHJcbiAqIHtcclxuICogICAgIC8vIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmdcclxuICogICAgIHJldHVybiAoKSA9PiBgY2lyY2xlKCR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjEpICsgMzB9KWA7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElSYXdQcm94eSBleHRlbmRzIElHZW5lcmljUHJveHk8XCJyYXdcIj4ge31cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBjYWxsYWJsZSBpbnRlcmZhY2UgdGhhdCBpcyByZXR1cm5lZCBieSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCBpbiBzdHJpbmdcclxuICogY29udGV4dCwgc3VjaCBhcyBbW2F0dHJdXSBhbmQgW1tjb3VudGVyXV0uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTdHJpbmdQcm94eSBleHRlbmRzIElHZW5lcmljUHJveHk8XCJzdHJpbmdcIj4ge31cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIGA8c3RyaW5nPmAgQ1NTIHR5cGUsIHdoaWNoIGlzIGVpdGhlciBhIHF1YXRlZCBzdHJpbmcgb3IgZnVuY3Rpb25zIHRoYXQgY2FuIGJlXHJcbiAqIHVzZWQgaW4gc3RyaW5nIGNvbnRleHQsIHN1Y2ggYXMgYGF0dHIoKWAgYW5kIGBjb3VudGVyKClgXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDc3NTdHJpbmcgPSBzdHJpbmcgfCBJU3RyaW5nUHJveHk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYElDdXN0b21WYXJgIGludGVyZmFjZSByZXByZXNlbnRzIGEgY3VzdG9tIHByb3BlcnR5IHdpdGggdmFsdWVzIG9mIHRoZSBnaXZlbiB0eXBlLiBFdmVyeVxyXG4gKiBzdHlsZSBwcm9wZXJ0eSBjYW4gYWNjZXB0IGEgY3VzdG9tIENTUyBwcm9wZXJ0eSB2YWx1ZSBpbiB0aGUgZm9ybSBvZiB0aGUgYHZhcigpYCBDU1NcclxuICogZnVuY3Rpb24uIE1pbWNzcyBhbHNvIGFsbG93cyBkZWZpbmluZyBcImNvbnN0YW50c1wiLCB3aGljaCBhcmUgYSBtb3JlIGxpZ2h0d2VpZ2h0IHdheSB0byBwcm92aWRlXHJcbiAqIHZhbHVlcyB0aGF0IGFyZSB1c2VkIGluIG90aGVyIHJ1bGVzIGFuZCBwcm9wZXJ0aWVzLiBTZWUgdGhlIFtbSUNvbnN0YW50XV0gaW50ZXJmYWNlLlxyXG4gKlxyXG4gKiBUaGUgYElDdXN0b21WYXJgIGludGVyZmFjZSBpcyBleHRlbmRlZCBieSB0aGUgW1tJVmFyUnVsZV1dIGludGVyZmFjZSB0aGF0IGlzIHJldHVybmVkXHJcbiAqIGZyb20gdGhlIFtbJHZhcl1dIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAdHlwZXBhcmFtIFQgQmFzaWMgdHlwZSBvZiB0aGUgdmFsdWUgb2YgdGhlIGN1c3RvbSBDU1MgdmFyaWFibGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDdXN0b21WYXI8VCA9IGFueT5cclxue1xyXG4gICAgLyoqXHJcblx0ICogU2V0cyBuZXcgdmFsdWUgb2YgdGhpcyBjdXN0b20gQ1NTIHByb3BlcnR5IGF0IHRoZSBnbG9iYWwgbGV2ZWw7IHRoYXQgaXMsIHVuZGVyIGA6cm9vdGAuIFRvXHJcbiAgICAgKiBzZXQgYSB2YWx1ZSBvZiB0aGUgQ1NTIGN1c3RvbSBwcm9wZXJ0eSB1bmRlciBhIGNlcnRhaW4gQ1NTIHJ1bGUsIHVzZSB0aGVcclxuICAgICAqIFtbSVN0eWxlUnVsZS5zZXRDdXN0b21Qcm9wXV0gbWV0aG9kLlxyXG5cdCAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgZm9yIHRoZSBDU1MgcHJvcGVydHkuXHJcblx0ICogQHBhcmFtIHNjaGVkdWxlclR5cGUgSUQgb2YgYSByZWdpc3RlcmVkIHNjaGVkdWxlciB0eXBlIHRoYXQgaXMgdXNlZCB0byB3cml0ZSB0aGUgcHJvcGVydHlcclxuXHQgKiB2YWx1ZSB0byB0aGUgRE9NLiBJZiB1bmRlZmluZWQsIHRoZSBjdXJyZW50IGRlZmF1bHQgc2NoZWR1bGVyIHdpbGwgYmUgdXNlZC5cclxuXHQgKi9cclxuXHRzZXRWYWx1ZSggdmFsdWU6IEV4dGVuZGVkUHJvcDxUPiwgc2NoZWR1bGVyVHlwZT86IG51bWJlcik6IHZvaWQ7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgSUNvbnN0YW50YCBpbnRlcmZhY2UgcmVwcmVzZW50cyBhIGNvbnN0YW50IHdpdGggdmFsdWVzIG9mIHRoZSBnaXZlbiB0eXBlLiBNaW1jc3MgYWxsb3dzXHJcbiAqIGRlZmluaW5nIFwiY29uc3RhbnRzXCIsIHdoaWNoIGFyZSBhIGxpZ2h0d2VpZ2h0IHdheSAoY29tcGFyZWQgdG8gY3VzdG9tIENTUyBwcm9wZXJ0aWVzKSB0byBwcm92aWRlXHJcbiAqIHZhbHVlcyB0aGF0IGFyZSB1c2VkIGluIG90aGVyIHJ1bGVzIGFuZCBwcm9wZXJ0aWVzLiBFdmVyeSBzdHlsZSBwcm9wZXJ0eSBjYW4gYWNjZXB0IGEgY29uc3RhbnRcclxuICogdmFsdWUuXHJcbiAqXHJcbiAqIFRoZSBgSUNvbnN0YW50YCBpbnRlcmZhY2UgaXMgZXh0ZW5kZWQgYnkgdGhlIFtbSUNvbnN0UnVsZV1dIGludGVyZmFjZSB0aGF0IGlzIHJldHVybmVkIGZyb20gdGhlXHJcbiAqIFtbJGNvbnN0XV0gZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEB0eXBlcGFyYW0gVCBCYXNpYyB0eXBlIG9mIHRoZSB2YWx1ZSBvZiB0aGUgY29uc3RhbnQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDb25zdGFudDxUID0gYW55PlxyXG57XHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIGNvbnN0YW50LlxyXG5cdCAqL1xyXG5cdGdldFZhbHVlKCk6IEV4dGVuZGVkUHJvcDxUPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IGV4dGVuZHMgdGhlIGdpdmVuIHR5cGUgd2l0aCB0aGUgZm9sbG93aW5nIHR5cGVzOlxyXG4gKiAtIFtbSUN1c3RvbVZhcl1dIGludGVyZmFjZSB0aGF0IGFsbG93cyB1c2luZyBhIENTUyBjdXN0b20gcHJvcGVydHkgcnVsZSB2YWx1ZS5cclxuICogLSBbW0lDb25zdGFudF1dIGludGVyZmFjZSB0aGF0IGFsbG93cyB1c2luZyBhIGNvbnN0YW50IHJ1bGUgdmFsdWUuXHJcbiAqIC0gW1tJUmF3UHJveHldXSBpbnRlcmZhY2UgdGhhdCBhbGxvd3Mgc3BlY2lmeWluZyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHJhdyBzdHJpbmcgdmFsdWUuXHJcbiAqXHJcbiAqIERldmVsb3BlcnMgZG9uJ3QgdXN1YWxseSB1c2UgdGhpcyB0eXBlIGRpcmVjdGx5IC0gaXQgaXMgdXNlZCBieSBNaW1jc3MgdG8gZGVmaW5lIHN0eWxlIHByb3BlcnR5XHJcbiAqIHR5cGVzIGFzIHdlbGwgYXMgZnVuY3Rpb24gcGFyYW1ldGVyIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRXh0ZW5kZWQ8VD4gPSBUIHwgSUN1c3RvbVZhcjxUPiB8IElDb25zdGFudDxUPiB8IElSYXdQcm94eTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgdGhhdCBlbmNhcHN1bGF0ZXMgdGhlIHR5cGUgb2YgcHJvcGVydHkgaW4gYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUgXCIhXCIgcHJvcGVydHkuIFRoaXNcclxuICogdHlwZSBpcyB1c2VkIHRvIGluZGljYXRlIHRoYXQgdGhlIHByb3BlcnR5IHZhbHVlIG11c3QgYmUgZmxhZ2dlZCBhcyBcIiFpbXBvcnRhbnRcIi5cclxuICpcclxuICogKipFeGFtcGxlKipcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIFN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBwcm9kdWNlcyBDU1M6IC5jbHMxIHsgY29sb3I6IHJlZDsgYmFja2dyb3VuZC1jb2xvcjogYmVpZ2UgIWltcG9ydGFudDsgfVxyXG4gKiAgICAgY2xzMSA9IHRoaXMuJGNsYXNzKHtcclxuICogICAgICAgICBjb2xvcjogXCJyZWRcIixcclxuICogICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHsgXCIhXCI6IFwiYmVpZ2VcIiB9XHJcbiAqICAgICB9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSW1wb3J0YW50UHJvcDxUPiA9IHsgXCIhXCI6IEV4dGVuZGVkPFQ+IHwgR2xvYmFsX1N0eWxlVHlwZSB9O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IGFsbG93cyBzcGVjaWZ5aW5nIG11bHRpcGxlIHZhbHVlcyBvZiBhIGdpdmVuIHR5cGUgdXNpbmcgYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUgXCJbXVwiXHJcbiAqIHByb3BlcnR5LiBUaGlzIHR5cGUgaXMgdXNlZCB0byBpbmNsdWRlIG11bHRpcGxlIG9jY3VycmVuY2llcyBvZiB0aGUgc2FtZSBzdHlsZSBwcm9wZXJ0eSBpbiBhXHJcbiAqIHN0eWxlc2V0LiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHRhcmdldGluZyBhZHZhbmNlZCBmZWF0dXJlcyBub3QgeWV0IHN1cHBvcnRlZCBpbiBhbGwgYnJvd3NlcnMgYW5kXHJcbiAqIHByb3ZpZGluZyBhIGZhbGxiYWNrLCB3aGljaCBpcyBzdXBwb3J0ZWQgZXZlcnl3aGVyZS5cclxuICpcclxuICogKipFeGFtcGxlKipcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIFN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICBjbHMxID0gdGhpcy4kY2xhc3Moe1xyXG4gKiAgICAgICAgIGJhY2tncm91bmRJbWFnZToge1wiW11cIjogW1xyXG4gKiAgICAgICAgICAgICAvLyBmaXJzdCwgc3BlY2lmeSBhIHN0YXRpYyBpbWFnZSAoc3VwcG9ydGVkIGV2ZXJ5d2hlcmUpXHJcbiAqICAgICAgICAgICAgIHVybChcImltYWdlLnBuZ1wiKSxcclxuICogICAgICAgICAgICAgLy8gc2Vjb25kLCB1c2UgcGFpbnQgd29ya2xldCAobm90IHN1cHBvcnRlZCBldmVyeXdoZXJlIHlldClcclxuICogICAgICAgICAgICAgcGFpbnQoXCJteVBhaW50V29ya2xldFwiKSxcclxuICogICAgICAgICBdfVxyXG4gKiAgICAgfSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogVGhpcyB3aWxsIHByb2R1Y2UgdGhlIGZvbGxvd2luZyBDU1M6XHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiAuY2xzMSB7XHJcbiAqICAgICBiYWNrZ3JvdW5kSW1hZ2U6IHVybChcImltYWdlLnBuZ1wiKTtcclxuICogICAgIGJhY2tncm91bmRJbWFnZTogcGFpbnQoXCJteVBhaW50V29ya2xldFwiKTtcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIE11bHRpUHJvcDxUPiA9IHsgXCJbXVwiOiAoRXh0ZW5kZWQ8VD4gfCBJbXBvcnRhbnRQcm9wPFQ+IHwgR2xvYmFsX1N0eWxlVHlwZSlbXSB9O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIEV4dGVuZGVkUHJvcCBleHRlbmRzIHRoZSBnaXZlbiBnZW5lcmljIHR5cGUgd2l0aCB0aGUgZm9sbG93aW5nIGVsZW1lbnRzOlxyXG4gKiAtIFtbSUN1c3RvbVZhcl1dIGludGVyZmFjZSB0aGF0IGFsbG93cyB1c2luZyBhIENTUyBjdXN0b20gcHJvcGVydHkgcnVsZSB2YWx1ZS5cclxuICogLSBbW0lDb25zdGFudF1dIGludGVyZmFjZSB0aGF0IGFsbG93cyB1c2luZyBhIGNvbnN0YW50IHJ1bGUgdmFsdWUuXHJcbiAqIC0gW1tJUmF3UHJveHldXSBpbnRlcmZhY2UgdGhhdCBhbGxvd3Mgc3BlY2lmeWluZyByYXcgc3RyaW5nIHZhbHVlLlxyXG4gKiAtIE9iamVjdCB3aXRoIGEgc2luZ2xlIHByb3BlcnR5IFwiIVwiLCB3aGljaCBpcyB1c2VkIHRvIG1hcmsgYSBwcm9wZXJ0eSBhcyBcIiFpbXBvcnRhbnRcIi5cclxuICogLSBbW0dsb2JhbF9TdHlsZVR5cGVdXSwgd2hpY2ggYWxsb3dzIGFueSBwcm9wZXJ0eSB0byBiZSBhc3NpZ25lZCB0aGUgZ2xvYmFsIHZhbHVlcyBzdWNoIGFzXHJcbiAqICAgXCJpbml0aWFsXCIsIFwiaW5oZXJpdFwiLCBcInVuc2V0XCIgYW5kIFwicmV2ZXJ0XCIuXHJcbiAqXHJcbiAqICBEZXZlbG9wZXJzIGRvbid0IHVzdWFsbHkgdXNlIHRoaXMgdHlwZSBkaXJlY3RseSAtIGl0IGlzIHVzZWQgYnkgTWltY3NzIHRvIGRlZmluZSB0eXBlc1xyXG4gKiBvZiBwcm9wZXJ0aWVzIGluIHRoZSBbW1N0eWxlc2V0XV0gaW50ZXJmYWNlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRXh0ZW5kZWRQcm9wPFQ+ID0gRXh0ZW5kZWQ8VD4gfCBJbXBvcnRhbnRQcm9wPFQ+IHwgTXVsdGlQcm9wPFQ+IHwgR2xvYmFsX1N0eWxlVHlwZTtcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFV0aWxpdHkgdHlwZXMuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHBhaXItbGlrZSBwcm9wZXJ0aWVzIHRoYXQgY2FuIGhhdmUgMSBvciAyIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gdHlwZS4gVGhpcyB0eXBlIGlzIHVzZWRcclxuICogZm9yIHN0eWxlIHByb3BlcnRpZXMgdGhhdCBjYW4gc3BlY2lmeSB2YWx1ZXMgZm9yIHR3byBkaW1lbnNpb25zICh4IGFuZCB5KSwgYnV0IGFsc28gYWxsb3cgZm9yIGFcclxuICogc2luZ2xlIHZhbHVlLCBpbiB3aGljaCBjYXNlIGl0IGFwcGxpZXMgdG8gYm90aCBkaW1lbnNpb25zLiBGb3IgZXhhbXBsZSwgaXQgaXMgdXNlZCBieSBzdHlsZVxyXG4gKiBwcm9wZXJ0aWVzIHN1Y2ggYXMgYG92ZXJmbG93YCwgYGJvcmRlci1yYWRpdXNgLCBgYmFja2dyb3VuZC1yZXBlYXRgIGFuZCBvdGhlcnMuXHJcbiAqXHJcbiAqIEB0eXBlcGFyYW0gVCBUeXBlIG9mIHRoZSB2YWx1ZXNcclxuICpcclxuICogKipFeGFtcGxlczoqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBzaW5nbGUgdmFsdWVcclxuICogICAgIGNsczEgPSB0aGlzLiRjbGFzcyh7IG92ZXJmbG93OiBcImF1dG9cIiB9KVxyXG5cclxuICogICAgIC8vIHR3byB2YWx1ZXNcclxuICogICAgIGNsczIgPSB0aGlzLiRjbGFzcyh7IG92ZXJmbG93OiBbXCJzY3JvbGxcIiwgXCJoaWRkZW5cIl0gfSlcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIE9uZU9yUGFpcjxUPiA9IFQgfCBbRXh0ZW5kZWQ8VD4sIEV4dGVuZGVkPFQ+P107XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgYm94LWxpa2UgcHJvcGVydGllcyB0aGF0IGNhbiBoYXZlIDEgdG8gNCB2YWx1ZXMgb2YgdGhlIGdpdmVuIHR5cGUuIFRoaXMgdHlwZSBpcyB1c2VkXHJcbiAqIGZvciBzdHlsZSBwcm9wZXJ0aWVzIHRoYXQgc3BlY2lmeSB2YWx1ZXMgZm9yIHRoZSBmb3VyIHNpZGVzIG9mIGFuIGVsZW1lbnQgYm94IGFuZCBoYXZlIHJ1bGVzIGhvd1xyXG4gKiBzcGVjaWZ5aW5nIDEsIDIgb3IgMyB2YWx1ZXMgZGV0ZXJtaW5lIHRoZSB2YWx1ZXMgYXBwbGllZCB0byBhbGwgZm91ciBzaWRlcy4gRm9yIGV4YW1wbGUsIGl0IGlzXHJcbiAqIHVzZWQgYnkgc3R5bGUgcHJvcGVydGllcyBzdWNoIGFzIGBtYXJnaW5gLCBgcGFkZGluZ2AsIGBib3JkZXItY29sb3JgIGFuZCBvdGhlcnMuXHJcbiAqXHJcbiAqIEB0eXBlcGFyYW0gVCBUeXBlIG9mIHRoZSB2YWx1ZXNcclxuICpcclxuICogKipFeGFtcGxlczoqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBzaW5nbGUgdmFsdWVcclxuICogICAgIGNsczEgPSB0aGlzLiRjbGFzcyh7IG1hcmdpbjogNCB9KVxyXG4gKlxyXG4gKiAgICAgLy8gdHdvIHZhbHVlc1xyXG4gKiAgICAgY2xzMiA9IHRoaXMuJGNsYXNzKHsgbWFyZ2luOiBbMCwgOF0gfSlcclxuICpcclxuICogICAgIC8vIHRocmVlIHZhbHVlc1xyXG4gKiAgICAgY2xzMyA9IHRoaXMuJGNsYXNzKHsgbWFyZ2luOiBbNiwgNiwgOF0gfSlcclxuICpcclxuICogICAgIC8vIGZvdXIgdmFsdWVzXHJcbiAqICAgICBjbHM0ID0gdGhpcy4kY2xhc3MoeyBtYXJnaW46IFs0LCA2LCA4LCAxMl0gfSlcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIE9uZU9yQm94PFQ+ID0gVCB8IFtFeHRlbmRlZDxUPiwgRXh0ZW5kZWQ8VD4/LCBFeHRlbmRlZDxUPj8sIEV4dGVuZGVkPFQ+P107XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgcHJvcGVydGllcyB0aGF0IGNhbiBoYXZlIDEgb3IgbW9yZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIHR5cGUuIEl0IGlzIHVzZWQgYnkgbWFueSBzdHlsZVxyXG4gKiBwcm9wZXJ0aWVzIHN1Y2ggYXMgYGFuaW1hdGlvbmAgYW5kIGFsbCBpdHMgbG9uZ2hhbmRzLCBgYmFja2dyb3VuZGAgYW5kIGFsbCBpdHMgbG9uZ2hhbmRzLFxyXG4gKiBgdHJhbnNpdGlvbmAgYW5kIGFsbCBpdHMgbG9uZ2hhbmRzLCBgYm94LXNoYWRvd2AsIGB0cmFuc2Zvcm1gLCBgZmlsdGVyYCBhbmQgb3RoZXJzLlxyXG4gKlxyXG4gKiBAdHlwZXBhcmFtIFQgVHlwZSBvZiB0aGUgdmFsdWVzXHJcbiAqXHJcbiAqICoqRXhhbXBsZXM6KipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gc2luZ2xlIHZhbHVlXHJcbiAqICAgICBjbHMxID0gdGhpcy4kY2xhc3MoeyB0cmFuc2Zvcm06IHNjYWxlKDAuNSkgfSlcclxuICpcclxuICogICAgIC8vIHNldmVyYWwgdmFsdWVzXHJcbiAqICAgICBjbHMyID0gdGhpcy4kY2xhc3MoeyB0cmFuc2Zvcm06IFtzY2FsZSgwLjUsIHJvdGF0ZSg5MCksIHRyYW5zbGF0ZVgoMjAwKSldIH0pXHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPbmVPck1hbnk8VD4gPSBUIHwgRXh0ZW5kZWQ8VD5bXTtcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFNlbGVjdG9yc1xyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHRoYXQgY29tYmluZXMgbmFtZXMgb2YgYWxsIEhUTUwgYW5kIFNWRyB0YWdzXHJcbiAqL1xyXG4gZXhwb3J0IHR5cGUgRWxlbWVudFRhZ05hbWUgPSAoa2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwKSB8IChrZXlvZiBTVkdFbGVtZW50VGFnTmFtZU1hcCkgfCBcIipcIjtcclxuXHJcblxyXG5cclxuIC8qKlxyXG4gKiBUaGUgYElSdWxlV2l0aFNlbGVjdG9yYCBpbnRlcmZhY2UgcmVwcmVzZW50cyBhbiBlbnRpdHkgdGhhdCBoYXMgYSBzZWxlY3RvciBzdHJpbmcuIFRoZXNlIGluY2x1ZGVcclxuICogYWxsIHN0eWxlIHJ1bGVzIChbW0lTdHlsZVJ1bGVdXSBpbnRlcmZhY2UpIGFuZCBjbGFzcyBuYW1lIHJ1bGUgKFtbSUNsYXNzTmFtZVJ1bGVdXSBpbnRlcmZhY2UpLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUnVsZVdpdGhTZWxlY3RvclxyXG57XHJcbiAgICAvKiogQ1NTIHJ1bGUgc2VsZWN0b3Igc3RyaW5nICovXHJcbiAgICByZWFkb25seSBzZWxlY3RvclRleHQ6IHN0cmluZztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBJU2VsZWN0b3JQcm94eWAgZnVuY3Rpb24gcmV0dXJucyBhIENTUyBzZWxlY3RvciBzdHJpbmcuIFRoaXMgdHlwZSBpcyByZXR1cm5lZCBmcm9tIHRoZVxyXG4gKiBbW3NlbGVjdG9yXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3RvclByb3h5IGV4dGVuZHMgSUdlbmVyaWNQcm94eTxcInNlbGVjdG9yXCI+IHt9O1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgQ1NTIHNlbGVjdG9yIGNvbWJpbmF0b3JzIHVzZWQgd2hlbiBjcmVhdGluZyBjb21wbGV4IENTUyBzZWxlY3RvcnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTZWxlY3RvckNvbWJpbmF0b3IgPSBcIixcIiB8IFwiIFwiIHwgXCI+XCIgfCBcIitcIiB8IFwiflwiIHwgXCJ8fFwiO1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgcHJvcGVydGllcyB1c2VkIGluIHRoZSBbW0NvbWJpbmVkU3R5bGVzZXRdXSB3aGljaCBhcmUgdXNlZCB0byBkZWZpbmUgZGVwZW5kZW50IHJ1bGVzLlxyXG4gKiBQcm9wZXJ0eSB2YWx1ZXMgYXJlIGRlZmluZWQgYXMgYXJyYXlzIG9mIHR3by1lbGVtZW50IHR1cGxlcyBlYWNoIGRlZmluaW5nIGEgc2VsZWN0b3IgYW5kIGFcclxuICogc3R5bGVzZXQgY29ycmVzcG9uZGluZyB0byB0aGlzIHNlbGVjdG9yLiBTZWxlY3RvcnMgY2FuIHVzZSB0aGUgYW1wZXJzYW5kIHN5bWJvbCB0byByZWZlciB0byB0aGVcclxuICogcGFyZW50IHN0eWxlIHNlbGVjdG9yLiBJZiB0aGUgYW1wZXJzYW5kIHN5bWJvbCBpcyBub3QgdXNlZCwgdGhlIHNlbGVjdG9yIHdpbGwgYmUgc2ltcGx5IGFwcGVuZGVkXHJcbiAqIHRvIHRoZSBwYXJlbnQgc2VsZWN0b3IuXHJcbiAqXHJcbiAqIFRoZSBhbXBlcnNhbmQgc3ltYm9sIGNhbiBiZSBlaXRoZXIgcHJlY2VlZGVkIG9yIGZvbG93ZWQgYnkgYSBjb21iaW5hdG9yIGNoYXJhY3Rlciwgd2hpY2ggYWxsb3dzXHJcbiAqIGVhc3ktdG8tdXNlIGNvbWJpbmF0aW9uIG9mIGEgcGFyZW50IHNlbGVjdG9yIHdpdGggdGhlIHNwZWNpZmllZCBzZWxlY3RvciB1c2luZyB0aGUgZ2l2ZW5cclxuICogY29tYmluYXRvci5cclxuICpcclxuICogKipFeGFtcGxlOioqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIGNsYXNzIHRoYXQgZG9lc24ndCBkZWZpbmUgaXRzIG93biBzdHlsZXMgYW5kIGlzIG9ubHkgdXNlZCBpbiBjb21iaW5hdGlvbnNcclxuICogICAgIGNsYXNzMSA9IHRoaXMuJGNsYXNzKClcclxuICpcclxuICogICAgIC8vIFwicGFyZW50IGNsYXNzXCJcclxuICogICAgIGNsYXNzMiA9IHRoaXMuJGNsYXNzKHtcclxuICpcclxuICogICAgICAgICAvLyBjc3M6IC5jbGFzczIgeyBiYWNrZ3JvdW5kQ29sb3I6IHdoaXRlOyB9XHJcbiAqICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAqXHJcbiAqICAgICAgICAgLy8gY3NzOiBsaSAuY2xhc3MyOmhvdmVyIHsgYmFja2dyb3VuZENvbG9yOiB5ZWxsb3c7IH1cclxuICogICAgICAgICBcIiZcIjogIFsgW1wibGkgJjpob3ZlclwiLCB7IGJhY2tncm91bmRDb2xvcjogXCJ5ZWxsb3dcIiB9XSBdLFxyXG4gKlxyXG4gKiAgICAgICAgIC8vIGNzczogLmNsYXNzMi5jbGFzczEgeyBiYWNrZ3JvdW5kQ29sb3I6IGN5YW47IH1cclxuICogICAgICAgICBcIiZcIjogIFsgW3RoaXMuY2xhc3MxLCB7IGJhY2tncm91bmRDb2xvcjogXCJjeWFuXCIgfV0gXSxcclxuICpcclxuICogICAgICAgICAvLyBjc3M6IC5jbGFzczIgPiAuY2xhc3MxIHsgYmFja2dyb3VuZENvbG9yOiBncmVlbjsgfVxyXG4gKiAgICAgICAgIFwiJj5cIjogWyBbdGhpcy5jbGFzczEsIHsgYmFja2dyb3VuZENvbG9yOiBcImdyZWVuXCIgfV0gXSxcclxuICpcclxuICogICAgICAgICAvLyBjc3M6IC5jbGFzczEgKyAuY2xhc3MyIHsgYmFja2dyb3VuZENvbG9yOiBvcmFuZ2U7IH1cclxuICogICAgICAgICBcIismXCI6IFsgW3RoaXMuY2xhc3MxLCB7IGJhY2tncm91bmRDb2xvcjogXCJvcmFuZ2VcIiB9XSBdLFxyXG4gKiAgICAgfSlcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIERlcGVuZGVudFJ1bGVDb21iaW5hdG9yID0gXCImXCIgfCBcIiYsXCIgfCBcIiYgXCIgfCBcIiY+XCIgfCBcIiYrXCIgfCBcIiZ+XCIgfCBcIiwmXCIgfCBcIiAmXCIgfCBcIj4mXCIgfCBcIismXCIgfCBcIn4mXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIHByaW50LXJlbGF0ZWQgcHNldWRvIGNsYXNzZXMgLSB0aG9zZSB0aGF0IGNhbiBiZSBzcGVjaWZpZWQgd2l0aCB0aGUgYEBwYWdlYCBDU1MgcnVsZVxyXG4gKlxyXG4gKiAqKkV4YW1wbGU6KipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgcGFnZSA9IHRoaXMuJHBhZ2UoIFwiOmZpcnN0XCIsIHsgbWFyZ2luOiBcImF1dG9cIiB9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGFnZVBzZXVkb0NsYXNzID0gXCI6YmxhbmtcIiB8IFwiOmZpcnN0XCIgfCBcIjpsZWZ0XCIgfCBcIjpyaWdodFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBwc2V1ZG8gY2xhc3NlcyB0aGF0IGNhbiBiZSB1c2VkIGFzIHByb3BlcnRpZXMgaW4gdGhlIFtbQ29tYmluZWRTdHlsZXNldF1dIG9iamVjdCB0b1xyXG4gKiBkZWZpbmUgZGVwZW5kZW50IHJ1bGVzLiBOb3RlIHRoYXQgdGhpcyB0eXBlIG9ubHkgY29udGFpbnMgcHNldWRvIGNsYXNzZXMgdGhhdCBkb24ndCByZXF1aXJlXHJcbiAqIHBhcmFtZXRlcnMuIEZvciBwYXJhbWV0ZXJpemVkIHBzZXVkbyBjbGFzc2VzLCBzZWUgdGhlIFtbSVBhcmFtZXRlcml6ZWRQc2V1ZG9DbGFzc11dIGludGVyZmFjZS5cclxuICpcclxuICogKipFeGFtcGxlOioqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIGNsYXNzMSA9IHRoaXMuJGNsYXNzKHtcclxuICogICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiYmx1ZVwiLFxyXG4gKiAgICAgICAgIFwiOmhvdmVyXCI6IHsgb3BhY2l0eTogMC43IH0sXHJcbiAqICAgICB9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUHNldWRvQ2xhc3MgPSBQYWdlUHNldWRvQ2xhc3MgfFxyXG5cdFwiOmFjdGl2ZVwiIHwgXCI6YW55LWxpbmtcIiB8IFwiOmF1dG9maWxsXCIgfCBcIjpibGFua1wiIHwgXCI6Y2hlY2tlZFwiIHwgXCI6ZGVmYXVsdFwiIHwgXCI6ZGVmaW5lZFwiIHwgXCI6ZGlzYWJsZWRcIiB8XHJcblx0XCI6ZW1wdHlcIiB8IFwiOmVuYWJsZWRcIiB8IFwiOmZpcnN0LWNoaWxkXCIgfCBcIjpmaXJzdC1vZi10eXBlXCIgfCBcIjpmdWxsc2NyZWVuXCIgfCBcIjpmb2N1c1wiIHxcclxuXHRcIjpmb2N1cy12aXNpYmxlXCIgfCBcIjpmb2N1cy13aXRoaW5cIiB8IFwiOmhvc3RcIiB8IFwiOmhvdmVyXCIgfCBcIjppbmRldGVybWluYXRlXCIgfCBcIjppbi1yYW5nZVwiIHwgXCI6aW52YWxpZFwiIHxcclxuXHRcIjpsYXN0LWNoaWxkXCIgfCBcIjpsYXN0LW9mLXR5cGVcIiB8IFwiOmxlZnRcIiB8IFwiOmxpbmtcIiB8IFwiOm9ubHktY2hpbGRcIiB8IFwiOm9ubHktb2YtdHlwZVwiIHwgXCI6b3B0aW9uYWxcIiB8XHJcblx0XCI6b3V0LW9mLXJhbmdlXCIgfCBcIjpwYXVzZWRcIiB8IFwiOnBsYWNlaG9sZGVyLXNob3duXCIgfCBcIjpyZWFkLW9ubHlcIiB8IFwiOnJlYWQtd3JpdGVcIiB8IFwiOnJlcXVpcmVkXCIgfFxyXG4gICAgXCI6cmlnaHRcIiB8IFwiOnJvb3RcIiB8IFwiOnNjb3BlXCIgfCBcIjp0YXJnZXRcIiB8IFwiOnZhbGlkXCIgfCBcIjp2aXNpdGVkXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIHBzZXVkbyBlbGVtZW50cyB0aGF0IGNhbiBiZSB1c2VkIGFzIHByb3BlcnRpZXMgaW4gdGhlIFtbQ29tYmluZWRTdHlsZXNldF1dIG9iamVjdCB0b1xyXG4gKiBkZWZpbmUgZGVwZW5kZW50IHJ1bGVzLiBOb3RlIHRoYXQgdGhpcyB0eXBlIG9ubHkgY29udGFpbnMgcHNldWRvIGVsZW1lbnRzIHRoYXQgZG9uJ3QgcmVxdWlyZVxyXG4gKiBwYXJhbWV0ZXJzLiBGb3IgcGFyYW1ldGVyaXplZCBwc2V1ZG8gZWxlbWVudHMsIHNlZSB0aGUgW1tJUGFyYW1ldGVyaXplZFBzZXVkb0VsZW1lbnRdXSBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqICoqRXhhbXBsZToqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICBleGNpdGluZyA9IHRoaXMuJGNsYXNzKHtcclxuICogICAgICAgICBcIjo6YWZ0ZXJcIjoge1xyXG4gKiAgICAgICAgICAgICBjb250ZW50OiBcIiA8LSBFWENJVElORyFcIlxyXG4gKiAgICAgICAgICAgICBjb2xvcjogXCJncmVlblwiXHJcbiAqICAgICAgICAgfSxcclxuICogICAgIH0pXHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQc2V1ZG9FbGVtZW50ID0gXCI6OmFmdGVyXCIgfCBcIjo6YmFja2Ryb3BcIiB8IFwiOjpiZWZvcmVcIiB8IFwiOjpjdWVcIiB8IFwiOjpmaXJzdC1sZXR0ZXJcIiB8XHJcblx0XCI6OmZpcnN0LWxpbmVcIiB8IFwiOjpncmFtbWFyLWVycm9yXCIgfCBcIjo6bWFya2VyXCIgfCBcIjo6cGxhY2Vob2xkZXJcIiB8IFwiOjpzZWxlY3Rpb25cIiB8IFwiOjpzcGVsbGluZy1lcnJvclwiO1xyXG5cclxuXHJcblxyXG4vKiogQ29tYmluZXMgbmFtZXMgb2Ygbm9uLXBhcmFtZXRlcml6ZWQgcHNldWRvIGNsYXNzZXMgYW5kIHBzZXVkbyBlbGVtZW50cyAqL1xyXG5leHBvcnQgdHlwZSBQc2V1ZG9FbnRpdHkgPSBQc2V1ZG9DbGFzcyB8IFBzZXVkb0VsZW1lbnQ7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBleHByZXNzaW9uIEFuK0IsIHdoaWNoIGlzIHVzZWQgZm9yIHBhcmFtZXRlcml6ZWQgcHNldWRvIGNsYXNzZXMgbGlrZSBgOm50aC1jaGlsZGAuIEl0XHJcbiAqIGNhbiBiZSBhIHN0cmluZywgYSBzaW5nbGUgbnVtYmVyIG9yIGEgdHVwbGUgd2l0aCBvbmUgb3IgdHdvIG51bWJlcnMuIElmIGl0IGlzIGEgc2luZ2xlIG51bWJlcixcclxuICogdGhlICduJyBpbiBBbitCIHdpbGwgbm90IGJlIHVzZWQgLSBhcyBpbiBgbnRoLWNoaWxkKDIpYC4gSWYgaXQgaXMgYSB0dXBsZSwgdGhlICduJyB3aWxsIGJlIHVzZWRcclxuICogZXZlbiBpZiB0aGUgdHVwbGUncyBzZWNvbmQgZWxlbWVudCBpcyBub3QgcHJvdmlkZWQuXHJcbiAqXHJcbiAqICoqRXhhbXBsZToqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICBwID0gdGhpcy4kdGFnKCBcInBcIiwge1xyXG4gKiAgICAgICAgIFwiOm50aC1vZi10eXBlXCI6IFtcclxuICpcclxuICogICAgICAgICAgICAgLy8gY3NzOiBwOm50aC1vZi10eXBlKDEpXHJcbiAqICAgICAgICAgICAgIFsxLCB7IGNvbG9yOiBcInJlZFwiIH1dLFxyXG4gKlxyXG4gKiAgICAgICAgICAgICAvLyBjc3M6IHA6bnRoLW9mLXR5cGUoM24pXHJcbiAqICAgICAgICAgICAgIFtbM10sIHsgY29sb3I6IFwiZ3JlZW5cIiB9XSxcclxuICpcclxuICogICAgICAgICAgICAgLy8gY3NzOiBwOm50aC1vZi10eXBlKDJuKzEpXHJcbiAqICAgICAgICAgICAgIFtbMiwxXSwgeyBjb2xvcjogXCJibHVlXCIgfV0sXHJcbiAqXHJcbiAqICAgICAgICAgICAgIC8vIGNzczogcDpudGgtb2YtdHlwZShvZGQpXHJcbiAqICAgICAgICAgICAgIFtcIm9kZFwiLCB7IGNvbG9yOiBcInllbGxvd1wiIH1dLFxyXG4gKlxyXG4gKiAgICAgICAgICAgICAvLyBjc3M6IHA6bnRoLW9mLXR5cGUoMm4tMSlcclxuICogICAgICAgICAgICAgW1syLC0xXSwgeyBjb2xvcjogXCJvcmFuZ2VcIiB9XSxcclxuICogICAgICAgICBdLFxyXG4gKiAgICAgfSlcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIE50aEV4cHJlc3Npb24gPSBcIm9kZFwiIHwgXCJldmVuXCIgfCBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXI/XSB8IHN0cmluZyB8IElSYXdQcm94eTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgdGhlIHR5cGUgZm9yIHRoZSB0ZXh0IGRpcmVjdGlvbiB1c2VkIGZvciB0aGUgYFwiOmRpclwiYCBwc2V1ZG8gY2xhc3NcclxuICovXHJcbmV4cG9ydCB0eXBlIERpcmVjdGlvbiA9IFwicnRsXCIgfCBcImx0clwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBJUGFyYW1ldGVyaXplZFBzZXVkb0NsYXNzYCBpbnRlcmZhY2UgbWFwcyBuYW1lcyBvZiBwc2V1ZG8gY2xhc3NlcyB0aGF0IHJlcXVpcmUgcGFyYW1ldGVyc1xyXG4gKiB0byB0aGUgdHlwZXMgdGhhdCBhcmUgdXNlZCB0byBzcGVjaWZ5IHRoZXNlIHBhcmFtZXRlcnMuIFdoZW4gYSBwYXJhbWV0ZXJpemVkIHBzZXVkbyBjbGFzcyBpc1xyXG4gKiB1c2VkIGFzIGEgcHJvcGVydHkgaW4gdGhlIFtbQ29tYmluZWRTdHlsZXNldF1dIG9iamVjdCwgdGhlIHZhbHVlIHNob3VsZCBiZSBvZiB0aGUgdHlwZSBmcm9tXHJcbiAqIHRoaXMgaW50ZXJmYWNlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUGFyYW1ldGVyaXplZFBzZXVkb0NsYXNzXHJcbntcclxuXHRcIjpkaXJcIjogRGlyZWN0aW9uO1xyXG5cdFwiOmhhc1wiOiBDc3NTZWxlY3RvciB8IFtTZWxlY3RvckNvbWJpbmF0b3IsIENzc1NlbGVjdG9yXTtcclxuXHRcIjpob3N0XCI6IHN0cmluZztcclxuXHRcIjpob3N0LWNvbnRleHRcIjogc3RyaW5nO1xyXG5cdFwiOmlzXCI6IENzc1NlbGVjdG9yO1xyXG5cdFwiOmxhbmdcIjogc3RyaW5nO1xyXG5cdFwiOm5vdFwiOiBDc3NTZWxlY3RvcjtcclxuXHRcIjpudGgtY2hpbGRcIjogTnRoRXhwcmVzc2lvbjtcclxuXHRcIjpudGgtb2YtdHlwZVwiOiBOdGhFeHByZXNzaW9uO1xyXG5cdFwiOm50aC1sYXN0LWNoaWxkXCI6IE50aEV4cHJlc3Npb247XHJcblx0XCI6bnRoLWxhc3Qtb2YtdHlwZVwiOiBOdGhFeHByZXNzaW9uO1xyXG5cdFwiOndoZXJlXCI6IENzc1NlbGVjdG9yO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYElQYXJhbWV0ZXJpemVkUHNldWRvRWxlbWVudGAgaW50ZXJmYWNlIG1hcHMgbmFtZXMgb2YgcHNldWRvIGVsZW1lbnRzIHRoYXQgcmVxdWlyZSBwYXJhbWV0ZXJzXHJcbiAqIHRvIHRoZSB0eXBlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHNwZWNpZnkgdGhlc2UgcGFyYW1ldGVycy4gV2hlbiBhIHBhcmFtZXRlcml6ZWQgcHNldWRvIGVsZW1lbnRcclxuICogaXMgdXNlZCBhcyBhIHByb3BlcnR5IGluIHRoZSBbW0NvbWJpbmVkU3R5bGVzZXRdXSBvYmplY3QsIHRoZSB2YWx1ZSBzaG91bGQgYmUgb2YgdGhlIHR5cGUgZnJvbVxyXG4gKiB0aGlzIGludGVyZmFjZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBhcmFtZXRlcml6ZWRQc2V1ZG9FbGVtZW50XHJcbntcclxuXHRcIjo6cGFydFwiOiBzdHJpbmc7XHJcblx0XCI6OnNsb3R0ZWRcIjogQ3NzU2VsZWN0b3I7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgSVBhcmFtZXRlcml6ZWRQc2V1ZG9FbnRpdHlgIGludGVyZmFjZSBjb21iaW5lcyBbW0lQYXJhbWV0ZXJpemVkUHNldWRvQ2xhc3NdXSBhbmRcclxuICogW1tJUGFyYW1ldGVyaXplZFBzZXVkb0VsZW1lbnRdXSBpbnRlcmZhY2VzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUGFyYW1ldGVyaXplZFBzZXVkb0VudGl0eSBleHRlbmRzIElQYXJhbWV0ZXJpemVkUHNldWRvQ2xhc3MsIElQYXJhbWV0ZXJpemVkUHNldWRvRWxlbWVudCB7fVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHNlbGVjdG9yIGZvciBvbmUgb3IgbW9yZSBuYW1lc3BhY2VkIHRhZ3M7IHRoYXQgaXMsIHRhZ3MgYWNjb21wYW5pZWQgYnkgYSBuYW1lc3BhY2VcclxuICogcHJlZml4LiBUaGlzIGludGVyZmFjZSBpcyByZXR1cm5lZCBmcm9tIHRoZSBbW3RhZ05TXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElOU1RhZ0Z1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJuc3RhZ1wiO1xyXG5cclxuICAgIC8qKiBOYW1lc3BhY2UgcHJlZml4IHN0cmluZyBvciByZWZlcmVuY2UgdG8gYSBuYW1lc3BhY2UgcnVsZSAqL1xyXG4gICAgbnM6IHN0cmluZyB8IElOYW1lc3BhY2VSdWxlO1xyXG5cclxuICAgIC8qKiBPbmUgb3IgbW9yZSBlbGVtZW50IHRhZyBuYW1lcyAqL1xyXG4gICAgdGFnczogXCIqXCIgfCBFbGVtZW50VGFnTmFtZSB8IEVsZW1lbnRUYWdOYW1lW107XHJcblxyXG4gICAgLyoqIE9wdGlvbmFsIHNlbGVjdG9yIGNvbWJpbmF0b3IgaWYgbW9yZSB0aGFuIG9uZSB0YWcgaXMgZ2l2ZW4uIERlZmF1bHQgaXMgYFwiLFwiYC4gKi9cclxuICAgIGNvbWI/OiBTZWxlY3RvckNvbWJpbmF0b3I7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gaW52b2NhdGlvbiBvZiBhIHBhcmFtZXRlcml6ZWQgcHNldWRvIGVudGl0eSB3aXRoIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUGFyYW1ldGVyaXplZFBzZXVkb0VudGl0eUZ1bmM8VCBleHRlbmRzIGtleW9mIElQYXJhbWV0ZXJpemVkUHNldWRvRW50aXR5PiBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIC8qKiBQc2V1ZG8gZW50aXR5IG5hbWUgKi9cclxuICAgIGZuOiBUO1xyXG5cclxuICAgIC8qKiBQYXJhbWV0ZXIgb2YgdGhlIHBzZXVkbyBlbnRpdHkgKi9cclxuICAgIHA6IElQYXJhbWV0ZXJpemVkUHNldWRvRW50aXR5W1RdO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBFbnVtZXJhdGlvbiBmb3Igb3BlcmF0aW9ucyBkZWZpbmluZyB0aGUgYmVoYXZpb3Igb2YgYXR0cmlidXRlIHNlbGVjdG9yLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXR0ckNvbXBhcmlzb25PcGVyYXRpb24gPSBcIj1cIiB8IFwifj1cIiB8IFwifD1cIiB8IFwiXj1cIiB8IFwiJD1cIiB8IFwiKj1cIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gYXR0cmlidXRlIHNlbGVjdG9yIGRlZmluaW5nIGl0cyBuYW1lLCB2YWx1ZSBhbmQgY29tcGFyaXNvbiBvcGVyYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElBdHRyU2VsZWN0b3JGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwiYXR0ci1zZWxcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dHJpYnV0ZSBuYW1lLlxyXG4gICAgICovXHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWx1ZSB0byB3aGljaCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIGNvbXBhcmVkLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgc2VsZWN0b3Igb25seSBsb29rc1xyXG4gICAgICogZm9yIHRoZSBwcmVzZW5jZSBvZiB0aGUgYXR0cmlidXRlLlxyXG4gICAgICovXHJcbiAgICB2YWw/OiBzdHJpbmcgfCBib29sZWFuIHwgbnVtYmVyO1xyXG5cclxuICAgIC8qKiBOYW1lc3BhY2Ugb2YgdGhlIGF0dHJpYnV0ZSAqL1xyXG4gICAgbnM/OiBzdHJpbmcgfCBJTmFtZXNwYWNlUnVsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wZXJhdGlvbiB0aGF0IGRlZmluZXMgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBjb21wYXJpc29uIGJlaGF2aW9yLiBUaGUgZGVmYXVsdCB2YWx1ZSBpc1xyXG4gICAgICogW1tBdHRyU2VsZWN0b3JPcGVyYXRpb24uRXF1YWxdXS5cclxuICAgICAqL1xyXG4gICAgb3A/OiBBdHRyQ29tcGFyaXNvbk9wZXJhdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhc2UgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IGF0dHJpYnV0ZSB2YWx1ZSBjb21wYXJpc29uIGlzIGNhc2Utc2Vuc2l0aXZlLiBUaGVcclxuICAgICAqIHVuZGVmaW5lZCB2YWx1ZSBjb3JyZXNwb25kcyB0byB0aGUgY2FzZS1zZW5zaXRpdmUgY29tcGFyaXNvbnMuXHJcbiAgICAgKi9cclxuICAgIGNmPzogXCJpXCIgfCBcInNcIjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGNvbXBvdW5kIHNlbGVjdG9yIGFzIGFuIGFycmF5IG9mIHNlbGVjdG9ycy4gVGhpcyBpbnRlcmZhY2UgaXMgZXh0ZW5kZWQgYnkgdGhlXHJcbiAqIFtbSVNlbGVjdG9yQnVpbGRlcl1dIGludGVyZmFjZSwgd2hpY2ggYWxsb3dzIGJ1aWxkaW5nIGEgY29tcG91bmQgc2VsZWN0b3IgdXNpbmcgY2hhaW4gY2FsbHMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3RvckZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJzZWxcIjtcclxuXHJcbiAgICAvKiogQXJyYXkgb2Ygc2VsZWN0b3IgaXRlbXMgdGhhdCBhcmUgY29tYmluZWQgdG9nZXRoZXIgdG8gcHJvZHVjZSBhIGNvbXBvdW5kIHNlbGVjdG9yICovXHJcbiAgICBpdGVtczogQ3NzU2VsZWN0b3JbXTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUHJvdmlkZXMgbWVhbnMgdG8gYnVpbGQgY29tcGxleCBzZWxlY3RvcnMgZnJvbSBtdWx0aXBsZSBzZWxlY3RvciBpdGVtcyBvZiBhbGwgcG9zc2libGUga2luZHNcclxuICogaW5jbHVkaW5nIHRhZ3MsIGNsYXNzZXNzLCBJRHMsIGF0dHJpYnV0ZXMsIHBzZXVkbyBjbGFzc2VzIGFuZCBwc2V1ZG8gZWxlbWVudHMgY29tYmluZWQgd2l0aFxyXG4gKiBDU1MgY29tYmluYXRvcnMuIFRoaXMgaW50ZXJmYWNlIGlzIHJldHVybmVkIGZyb20gdGhlIFtbc2VsXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3RvckJ1aWxkZXIgZXh0ZW5kcyBJU2VsZWN0b3JGdW5jXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBvbmUgb3IgbW9yZSBzZWxlY3RvciBpdGVtcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yIGFuZCBlYWNoIG90aGVyLlxyXG4gICAgICogQWxsIGl0ZW1zIGFyZSBjb25jYXRlbmF0ZWQgYW5kIGF0dGFjaGVkIHRvIHRoZSBleGlzdGluZyBzZWxlY3RvciB3aXRob3V0IGFueSBjb21iaW5hdG9yLlxyXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aXRob3V0IGFueSBhcmd1bWVudHMgZG9lc24ndCBoYXZlIGFueSBlZmZlY3QuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgYzEgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgICogICAgIGMyID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBzZWN0aW9uLmMxLmMyIHsuLi59XHJcbiAgICAgKiAgICAgczEgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwic2VjdGlvblwiKS5hbmQoIHRoaXMuYzEsIHRoaXMuYzIpLCB7Li4ufSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICogQHBhcmFtIGl0ZW1zIExpc3Qgb2Ygc2VsZWN0b3JzIHRvIGJlIGFkZGVkXHJcbiAgICAgKi9cclxuICAgIGFuZCggLi4uaXRlbXM6IENzc1NlbGVjdG9yW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBvbmUgb3IgbW9yZSBzZWxlY3RvciBpdGVtcyB0byB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgYXMgYSBsaXN0IG9mIHNlbGVjdG9ycy4gQWxsIGl0ZW1zXHJcbiAgICAgKiBhcmUgIGNvbmNhdGVuYXRlZCBhbmQgYXR0YWNoZWQgdG8gdGhlIGV4aXN0aW5nIHNlbGVjdG9yIHVzaW5nIHRoZSBgXCIsXCJgIGNvbWJpbmF0b3IuIENhbGxpbmdcclxuICAgICAqIHRoaXMgbWV0aG9kIHdpdGhvdXQgYW55IGFyZ3VtZW50cyBpbnNlcnRzIHRoZSBgXCIsXCJgIGNvbWJpbmF0b3IuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgYzEgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgICogICAgIGMyID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBzZWN0aW9uLCAuYzEsIC5jMiB7Li4ufVxyXG4gICAgICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInNlY3Rpb25cIikub3IoIHRoaXMuYzEsIHRoaXMuYzIpLCB7Li4ufSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICogQHBhcmFtIGl0ZW1zIExpc3Qgb2Ygc2VsZWN0b3JzIHRvIGJlIGFkZGVkXHJcbiAgICAgKi9cclxuICAgIG9yKCAuLi5pdGVtczogQ3NzU2VsZWN0b3JbXSk6IHRoaXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIG9uZSBvciBtb3JlIHNlbGVjdG9yIGl0ZW1zIHRvIHRoZSBleGlzdGluZyBzZWxlY3RvciBhcyBjb25zZWN1dGl2ZSBpbW1lZGlhdGUgY2hpbGRyZW4uXHJcbiAgICAgKiBBbGwgaXRlbXMgYXJlIGNvbmNhdGVuYXRlZCBhbmQgYXR0YWNoZWQgdG8gdGhlIGV4aXN0aW5nIHNlbGVjdG9yIHVzaW5nIHRoZSBgXCI+XCJgIGNvbWJpbmF0b3IuXHJcbiAgICAgKiBDYWxsaW5nIHRoaXMgbWV0aG9kIHdpdGhvdXQgYW55IGFyZ3VtZW50cyBpbnNlcnRzIHRoZSBgXCI+XCJgIGNvbWJpbmF0b3IuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgYzEgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgICogICAgIGMyID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBzZWN0aW9uID4gLmMxID4gLmMyIHsuLi59XHJcbiAgICAgKiAgICAgczEgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwic2VjdGlvblwiKS5jaGlsZCggdGhpcy5jMSwgdGhpcy5jMiksIHsuLi59KVxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKiBAcGFyYW0gaXRlbXMgTGlzdCBvZiBzZWxlY3RvcnMgdG8gYmUgYWRkZWRcclxuICAgICAqL1xyXG4gICAgY2hpbGQoIC4uLml0ZW1zOiBDc3NTZWxlY3RvcltdKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgb25lIG9yIG1vcmUgc2VsZWN0b3IgaXRlbXMgdG8gdGhlIGV4aXN0aW5nIHNlbGVjdG9yIGFzIGNvbnNlY3V0aXZlIGRlc2NlbmRhbnRzLlxyXG4gICAgICogQWxsIGl0ZW1zIGFyZSBjb25jYXRlbmF0ZWQgYW5kIGF0dGFjaGVkIHRvIHRoZSBleGlzdGluZyBzZWxlY3RvciB1c2luZyB0aGUgYFwiIFwiYCBjb21iaW5hdG9yLlxyXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aXRob3V0IGFueSBhcmd1bWVudHMgaW5zZXJ0cyB0aGUgYFwiIFwiYCBjb21iaW5hdG9yLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGMxID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqICAgICBjMiA9IGNzcy4kY2xhc3Moey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogc2VjdGlvbiAuYzEgLmMyIHsuLi59XHJcbiAgICAgKiAgICAgczEgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwic2VjdGlvblwiKS5kZXNjKCB0aGlzLmMxLCB0aGlzLmMyKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBpdGVtcyBMaXN0IG9mIHNlbGVjdG9ycyB0byBiZSBhZGRlZFxyXG4gICAgICovXHJcbiAgICBkZXNjKCAuLi5pdGVtczogQ3NzU2VsZWN0b3JbXSk6IHRoaXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIG9uZSBvciBtb3JlIHNlbGVjdG9yIGl0ZW1zIHRvIHRoZSBleGlzdGluZyBzZWxlY3RvciBhcyBjb25zZWN1dGl2ZSBnZW5lcmFsIHNpYmxpbmdzLlxyXG4gICAgICogQWxsIGl0ZW1zIGFyZSBjb25jYXRlbmF0ZWQgYW5kIGF0dGFjaGVkIHRvIHRoZSBleGlzdGluZyBzZWxlY3RvciB1c2luZyB0aGUgYFwiflwiYCBjb21iaW5hdG9yLlxyXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aXRob3V0IGFueSBhcmd1bWVudHMgaW5zZXJ0cyB0aGUgYFwiflwiYCBjb21iaW5hdG9yLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGMxID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqICAgICBjMiA9IGNzcy4kY2xhc3Moey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogc2VjdGlvbiB+IC5jMSB+IC5jMiB7Li4ufVxyXG4gICAgICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInNlY3Rpb25cIikuc2liKCB0aGlzLmMxLCB0aGlzLmMyKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBpdGVtcyBMaXN0IG9mIHNlbGVjdG9ycyB0byBiZSBhZGRlZFxyXG4gICAgICovXHJcbiAgICBzaWIoIC4uLml0ZW1zOiBDc3NTZWxlY3RvcltdKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgb25lIG9yIG1vcmUgc2VsZWN0b3IgaXRlbXMgdG8gdGhlIGV4aXN0aW5nIHNlbGVjdG9yIGFzIGNvbnNlY3V0aXZlIGFkamFjZW50IHNpYmxpbmdzLlxyXG4gICAgICogQWxsIGl0ZW1zIGFyZSBjb25jYXRlbmF0ZWQgYW5kIGF0dGFjaGVkIHRvIHRoZSBleGlzdGluZyBzZWxlY3RvciB1c2luZyB0aGUgYFwiK1wiYCBjb21iaW5hdG9yLlxyXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aXRob3V0IGFueSBhcmd1bWVudHMgaW5zZXJ0cyB0aGUgYFwiK1wiYCBjb21iaW5hdG9yLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGMxID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqICAgICBjMiA9IGNzcy4kY2xhc3Moey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogc2VjdGlvbiArIC5jMSArIC5jMiB7Li4ufVxyXG4gICAgICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInNlY3Rpb25cIikuYWRqKCB0aGlzLmMxLCB0aGlzLmMyKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBpdGVtcyBMaXN0IG9mIHNlbGVjdG9ycyB0byBiZSBhZGRlZFxyXG4gICAgICovXHJcbiAgICBhZGooIC4uLml0ZW1zOiBDc3NTZWxlY3RvcltdKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYW4gYXR0cmlidXRlIHNlbGVjdG9yIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IuIFRoaXMgdmFyaWFudCBkb2Vzbid0XHJcbiAgICAgKiBhY2NlcHQgY29tcGFyaXNvbiBvcGVyYXRpb24gYW5kLCB0aGVyZWZvcmUsIHBlcmZvcm1zIHJlZ3VsYXIgZXF1YWxpdHkgY29tcGFyaXNvbi4gSXQgYWxzb1xyXG4gICAgICogYWxsb3dzIG9taXR0aW5nIHRoZSB2YWx1ZSwgaW4gd2hpY2ggY2FzZSwgb25seSB0aGUgcHJlc2VuY2Ugb2YgdGhlIGF0dHJpYnV0ZSBpcyBjaGVja2VkLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogZGl2Olt0aXRsZV0gey4uLn1cclxuICAgICAqICAgICBzMSA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJkaXZcIikuYXR0ciggXCJ0aXRsZVwiKSwgey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogYTpbaHJlZj1cImh0dHBzOi8vd3d3LmV4YW1wbGUuY29tXCJdIHsuLi59XHJcbiAgICAgKiAgICAgczIgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwiYVwiKS5hdHRyKCBcImhyZWZcIiwgXCJodHRwczovL3d3dy5leGFtcGxlLmNvbVwiKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBuYW1lIEF0dHJpYnV0ZSBuYW1lLlxyXG4gICAgICogQHBhcmFtIHZhbCBBdHRyaWJ1dGUgdmFsdWUgLSBpZiBvbWl0dGVkLCBvbmx5IGF0dHJpYnV0ZSBwcmVzZW5jZSBpcyBjaGVja2VkLlxyXG4gICAgICogQHBhcmFtIGNmIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgY29tcGFyaXNvbiBpcyBjYXNlIGluc2Vuc2l0aXZlLiBVbmRlZmluZWRcclxuICAgICAqIHZhbHVlIG1lYW5zIHRoZSBjb21wYXJpc29uIGlzIGNhc2Ugc2Vuc2l0aXZlLlxyXG4gICAgICogQHBhcmFtIG5zIEF0dHJpYnV0ZSdzIG5hbWVzcGFjZS5cclxuICAgICAqL1xyXG4gICAgYXR0ciggbmFtZTogc3RyaW5nLCB2YWw/OiBzdHJpbmcgfCBib29sZWFuIHwgbnVtYmVyLCBjZj86IFwiaVwiIHwgXCJzXCIsIG5zPzogc3RyaW5nIHwgSU5hbWVzcGFjZVJ1bGUpOiB0aGlzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGFuIGF0dHJpYnV0ZSBzZWxlY3RvciB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogYTpbaHJlZl49XCJodHRwczovL1wiXSB7Li4ufVxyXG4gICAgICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbChcImFcIikuYXR0ciggXCJocmVmXCIsIFwiXj1cIiwgXCJodHRwczovL1wiKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBuYW1lIEF0dHJpYnV0ZSBuYW1lLlxyXG4gICAgICogQHBhcmFtIG9wIEF0dHJidXRlIGNvbXBhcmlzb24gb3BlcmF0aW9uLlxyXG4gICAgICogQHBhcmFtIHZhbCBBdHRyaWJ1dGUgdmFsdWUgLSBpZiBvbWl0dGVkLCBvbmx5IGF0dHJpYnV0ZSBwcmVzZW5jZSBpcyBjaGVja2VkLlxyXG4gICAgICogQHBhcmFtIGNmIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgY29tcGFyaXNvbiBpcyBjYXNlIGluc2Vuc2l0aXZlLiBVbmRlZmluZWRcclxuICAgICAqIHZhbHVlIG1lYW5zIHRoZSBjb21wYXJpc29uIGlzIGNhc2Ugc2Vuc2l0aXZlLlxyXG4gICAgICogQHBhcmFtIG5zIEF0dHJpYnV0ZSdzIG5hbWVzcGFjZS5cclxuICAgICAqL1xyXG4gICAgYXR0ciggbmFtZTogc3RyaW5nLCBvcDogQXR0ckNvbXBhcmlzb25PcGVyYXRpb24sIHZhbDogc3RyaW5nIHwgYm9vbGVhbiB8IG51bWJlcixcclxuICAgICAgICBjZj86IFwiaVwiIHwgXCJzXCIsIG5zPzogc3RyaW5nIHwgSU5hbWVzcGFjZVJ1bGUpOiB0aGlzO1xyXG5cclxuXHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjphY3RpdmVcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGFjdGl2ZTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmFueS1saW5rXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBhbnlMaW5rOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6YXV0b2ZpbGxcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGF1dG9maWxsOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6YmxhbmtcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGJsYW5rOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6Y2hlY2tlZFwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgY2hlY2tlZDogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmRlZmF1bHRcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGRlZmF1bHQ6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpkZWZpbmVkXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBkZWZpbmVkOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOmRpcigpXCJgIHBzZXVkbyBjbGFzcyB3aXRoIHRoZSBnaXZlbiBkaXJlY3Rpb24gdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZVxyXG4gICAgICogZXhpc3Rpbmcgc2VsZWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGRpciggZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6ZGlzYWJsZWRcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGRpc2FibGVkOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6ZW1wdHlcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGVtcHR5OiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6ZW5hYmxlZFwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgZW5hYmxlZDogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmZpcnN0LWNoaWxkXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBmaXJzdENoaWxkOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6Zmlyc3Qtb2YtdHlwZVwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgZmlyc3RPZlR5cGU6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpmaXJzdFwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgZmlyc3Q6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpmb2N1cy12aXNpYmxlXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBmb2N1c1Zpc2libGU6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpmb2N1cy13aXRoaW5cImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGZvY3VzV2l0aGluOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6Zm9jdXNcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGZvY3VzOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6ZnVsbHNjcmVlblwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgZnVsbHNjcmVlbjogdGhpcztcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8gVGhlIFwiaGFzXCIgbWV0aG9kIGlzIGNvbW1lbnRlZCBvdXQgYmVjYXVzZSBpdCBpcyBub3QgY2xlYXIgeWV0IGhvdyB0b1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vIGltcGxlbWVudCBpdCBpbiBhbiBlbGVnYW50IHdheSwgYW5kIGJlY2F1c2UgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCBpdC5cclxuICAgIC8vIC8qKlxyXG4gICAgLy8gICogQWRkcyB0aGUgYFwiOmhhcygpXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yLiBJZiBtdWx0aXBsZVxyXG4gICAgLy8gICogaXRlbXMgYXJlIHNwZWNpZmllZCwgdGhleSBhcmUgaW50ZXJwcmV0ZWQgYXMgYSBsaXN0OyB0aGF0IGlzLCB0aGV5IGFyZSBjb21iaW5lZCB1c2luZ1xyXG4gICAgLy8gICogdGhlIGBcIixcImAgY29tYmluYXRvci5cclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiAqKkV4YW1wbGU6KipcclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAvLyAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgIC8vICAqIHtcclxuICAgIC8vICAqICAgICBjMSA9IGNzcy4kY2xhc3Moey4uLn0pXHJcbiAgICAvLyAgKiAgICAgYzIgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgLy8gICpcclxuICAgIC8vICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHNlY3Rpb246aGFzKC5jMSwgLmMyKSB7Li4ufVxyXG4gICAgLy8gICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInNlY3Rpb25cIikuaGFzKCB0aGlzLmMxLCB0aGlzLmMyKSwgey4uLn0pXHJcbiAgICAvLyAgKiB9XHJcbiAgICAvLyAgKiBgYGBcclxuICAgIC8vICAqIEBwYXJhbSBpdGVtcyBMaXN0IG9mIHNlbGVjdG9ycyB0byBiZSBhZGRlZFxyXG4gICAgLy8gICovXHJcbiAgICAvLyBoYXMoIC4uLml0ZW1zOiBDc3NTZWxlY3RvcltdKTogdGhpcztcclxuICAgIC8vIC8qKlxyXG4gICAgLy8gICogQWRkcyB0aGUgYFwiOmhhcygpXCJgIHBzZXVkbyBjbGFzcyB3aXRoIHBhcnRpYWwgc2VsZWN0b3IgdGhhdCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gY29tYmluYXRvci5cclxuICAgIC8vICAqIElmIG11bHRpcGxlIGl0ZW1zIGFyZSBzcGVjaWZpZWQsIHRoZXkgYXJlIGNvbmNhdGVuYXRlZCB1c2luZyB0aGUgZ2l2ZW4gY29tYmluYXRvci4gQVxyXG4gICAgLy8gICogc3BlY2lhbCB2YWx1ZSBgXCJcImAgKGVtcHR5IHN0cmluZykgb2YgdGhlIGBjb21iaW5hdG9yYCBwYXJhbWV0ZXIgYWxsb3dzIHRvIGNvbmNhdGVuYXRlIHRoZVxyXG4gICAgLy8gICogaXRlbXMgd2l0aG91dCBhbnkgY29tYmluYXRvci5cclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiAqKkV4YW1wbGU6KipcclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAvLyAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgIC8vICAqIHtcclxuICAgIC8vICAqICAgICBjMSA9IGNzcy4kY2xhc3Moey4uLn0pXHJcbiAgICAvLyAgKiAgICAgYzIgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgLy8gICpcclxuICAgIC8vICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHNlY3Rpb246aGFzKD4gLmMxID4gLmMyKSB7Li4ufVxyXG4gICAgLy8gICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInNlY3Rpb25cIikuaGFzKCBcIj5cIiwgdGhpcy5jMSwgdGhpcy5jMiksIHsuLi59KVxyXG4gICAgLy8gICpcclxuICAgIC8vICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHNlY3Rpb246aGFzKC5jMS5jMikgey4uLn1cclxuICAgIC8vICAqICAgICBzMiA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJzZWN0aW9uXCIpLmhhcyggXCJcIiwgdGhpcy5jMSwgdGhpcy5jMiksIHsuLi59KVxyXG4gICAgLy8gICogfVxyXG4gICAgLy8gICogYGBgXHJcbiAgICAvLyAgKiBAcGFyYW0gY29tYmluYXRvciBDb21iaW5hdG9yIHRvIHVzZSB0byBjb25jYXRlbmF0ZSB0aGUgaXRlbXMgYW5kIHRvIGF0dGFjaCB0aGVtIHRvIHRoZVxyXG4gICAgLy8gICogZXhpc3Rpbmcgc2VsZWN0b3IuXHJcbiAgICAvLyAgKiBAcGFyYW0gaXRlbXMgTGlzdCBvZiBzZWxlY3RvcnMgdG8gYmUgYWRkZWRcclxuICAgIC8vICAqL1xyXG4gICAgLy8gaGFzKCBjb21iaW5hdG9yOiBTZWxlY3RvckNvbWJpbmF0b3IgfCBcIlwiLCAuLi5pdGVtczogQ3NzU2VsZWN0b3JbXSk6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpob3N0XCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBob3N0OiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOmhvc3QoKVwiYCBwYXJhbWV0ZXJpemVkIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yLlxyXG4gICAgICogVGhlIG1ldGhvZCBoYXMgdGhlIGRvbGxhci1zaWduIGluIGl0cyBuYW1lIHRvIGRpZmZlcmVudGlhdGUgaXQgZnJvbSB0aGUgcHJvcGVydHkgW1tob3N0XV0uXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgYzEgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgICogICAgIGMyID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiA6aG9zdCguYzEsIC5jMikgey4uLn1cclxuICAgICAqICAgICBzID0gY3NzLiRzdHlsZSggY3NzLnNlbCgpLmhvc3QkKCB0aGlzLmMxLCB0aGlzLmMyKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBpdGVtcyBMaXN0IG9mIHNlbGVjdG9ycyB0byBiZSBhZGRlZFxyXG4gICAgICovXHJcbiAgICBob3N0JCggLi4uaXRlbXM6IENzc1NlbGVjdG9yW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOmhvc3QtY29udGV4dCgpXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yLiBJZlxyXG4gICAgICogbXVsdGlwbGUgaXRlbXMgYXJlIHNwZWNpZmllZCwgdGhleSBhcmUgaW50ZXJwcmV0ZWQgYXMgYSBsaXN0OyB0aGF0IGlzLCB0aGV5IGFyZSBjb21iaW5lZFxyXG4gICAgICogdXNpbmcgdGhlIGBcIixcImAgY29tYmluYXRvci5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICBjMSA9IGNzcy4kY2xhc3Moey4uLn0pXHJcbiAgICAgKiAgICAgYzIgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IDpob3N0LWNvbnRleHQoLmMxLCAuYzIpIHsuLi59XHJcbiAgICAgKiAgICAgcyA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoKS5ob3N0Q29udGV4dCggdGhpcy5jMSwgdGhpcy5jMiksIHsuLi59KVxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKiBAcGFyYW0gaXRlbXMgTGlzdCBvZiBzZWxlY3RvcnMgdG8gYmUgYWRkZWRcclxuICAgICAqL1xyXG4gICAgaG9zdENvbnRleHQoIC4uLml0ZW1zOiBDc3NTZWxlY3RvcltdKTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmhvdmVyXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBob3ZlcjogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmluLXJhbmdlXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBpblJhbmdlOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6aW5kZXRlcm1pbmF0ZVwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgaW5kZXRlcm1pbmF0ZTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmludmFsaWRcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGludmFsaWQ6IHRoaXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBgXCI6aXMoKVwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3Rvci4gSWYgbXVsdGlwbGVcclxuICAgICAqIGl0ZW1zIGFyZSBzcGVjaWZpZWQsIHRoZXkgYXJlIGludGVycHJldGVkIGFzIGEgbGlzdDsgdGhhdCBpcywgdGhleSBhcmUgY29tYmluZWQgdXNpbmdcclxuICAgICAqIHRoZSBgXCIsXCJgIGNvbWJpbmF0b3IuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgYzEgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgICogICAgIGMyID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiA6aXMoLmMxLCAuYzIpID4gcDpob3ZlciB7Li4ufVxyXG4gICAgICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbCgpLmlzKCB0aGlzLmMxLCB0aGlzLmMyKS5jaGlsZFwicDpob3ZlclwiKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBpdGVtcyBMaXN0IG9mIHNlbGVjdG9ycyB0byBiZSBhZGRlZFxyXG4gICAgICovXHJcbiAgICBpcyggLi4uaXRlbXM6IENzc1NlbGVjdG9yW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOmxhbmcoKVwiYCBwc2V1ZG8gY2xhc3Mgd2l0aCB0aGUgZ2l2ZW4gZGlyZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBsYW5nKCBsYW5nQ29kZTogc3RyaW5nKTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmxhc3QtY2hpbGRcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGxhc3RDaGlsZDogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmxhc3Qtb2YtdHlwZVwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgbGFzdE9mVHlwZTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOmxlZnRcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGxlZnQ6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpsaW5rXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBsaW5rOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOm5vdCgpXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yLiBJZiBtdWx0aXBsZVxyXG4gICAgICogaXRlbXMgYXJlIHNwZWNpZmllZCwgdGhleSBhcmUgaW50ZXJwcmV0ZWQgYXMgYSBsaXN0OyB0aGF0IGlzLCB0aGV5IGFyZSBjb21iaW5lZCB1c2luZ1xyXG4gICAgICogdGhlIGBcIixcImAgY29tYmluYXRvci5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICBmYW5jeSA9IGNzcy4kY2xhc3Moey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogdGguZmFuY3k6bm90KDpudGgtb2YtdHlwZSgxKSkgey4uLn1cclxuICAgICAqICAgICBzMSA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJ0aFwiKS5hbmQodGhpcy5mYW5jeSkubm90KCBcIjpudGgtb2YtdHlwZSgxKVwiKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBpdGVtcyBMaXN0IG9mIHNlbGVjdG9ycyB0byBiZSBhZGRlZFxyXG4gICAgICovXHJcbiAgICBub3QoIC4uLml0ZW1zOiBDc3NTZWxlY3RvcltdKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIGBcIjpudGgtY2hpbGQoKVwiYCBwc2V1ZG8gY2xhc3Mgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLWNoaWxkKFwib2RkXCIpIHsuLi59XHJcbiAgICAgKiAgICAgczEgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwicFwiKS5udGhDaGlsZChcIm9kZFwiKSwgey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogcDpudGgtY2hpbGQoMykgey4uLn1cclxuICAgICAqICAgICBzMiA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aENoaWxkKDMpLCB7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1jaGlsZCgzbikgey4uLn1cclxuICAgICAqICAgICBzMyA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aENoaWxkKFszXSksIHsuLi59KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLWNoaWxkKDNuKzEpIHsuLi59XHJcbiAgICAgKiAgICAgczQgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwicFwiKS5udGhDaGlsZChbMywxXSksIHsuLi59KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLWNoaWxkKDNuLTEpIHsuLi59XHJcbiAgICAgKiAgICAgczUgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwicFwiKS5udGhDaGlsZChbMywtMV0pLCB7Li4ufSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICogQHBhcmFtIG50aEV4cHIgU3RyaW5nLCBudW1iZXIgb3IgdHVwbGUgcHJvdmlkaW5nIHRoZSB2YWx1ZSBmb3IgdGhlIGBcIm50aFwiYCBleHByZXNzaW9uXHJcbiAgICAgKi9cclxuICAgIG50aENoaWxkKCBudGhFeHByOiBOdGhFeHByZXNzaW9uKTogdGhpcztcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOm50aC1jaGlsZCgpXCJgIHBzZXVkbyBjbGFzcyB3aXRoIHRoZSBnaXZlbiBwYXJhbWV0ZXJzLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogcDpudGgtY2hpbGQoM24rMSkgey4uLn1cclxuICAgICAqICAgICBzMSA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aENoaWxkKDMsIDEpLCB7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1jaGlsZCgzbi0xKSB7Li4ufVxyXG4gICAgICogICAgIHMyID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInBcIikubnRoQ2hpbGQoMywgLTEpLCB7Li4ufSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICogQHBhcmFtIGEgTnVtYmVyIGJlZm9yZSB0aGUgYFwiblwiYCBpbiB0aGUgYFwiQW4rQlwiYCBleHByZXNzaW9uXHJcbiAgICAgKiBAcGFyYW0gYiBOdW1iZXIgYWZ0ZXIgdGhlIGBcIitcImAgaW4gdGhlIGBcIkFuK0JcImAgZXhwcmVzc2lvbi4gVXNlIG5lZ2F0aXZlIHZhbHVlXHJcbiAgICAgKiB0byBjcmVhdGUgYSBgXCJBbi1CXCJgIGV4cHJlc3Npb24uXHJcbiAgICAgKi9cclxuICAgIG50aENoaWxkKCBhOiBudW1iZXIsIGI6IG51bWJlcik6IHRoaXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBgXCI6bnRoLWxhc3QtY2hpbGQoKVwiYCBwc2V1ZG8gY2xhc3Mgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLWxhc3QtY2hpbGQoXCJvZGRcIikgey4uLn1cclxuICAgICAqICAgICBzMSA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aExhc3RDaGlsZChcIm9kZFwiKSwgey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogcDpudGgtbGFzdC1jaGlsZCgzKSB7Li4ufVxyXG4gICAgICogICAgIHMyID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInBcIikubnRoTGFzdENoaWxkKDMpLCB7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1sYXN0LWNoaWxkKDNuKSB7Li4ufVxyXG4gICAgICogICAgIHMzID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInBcIikubnRoTGFzdENoaWxkKFszXSksIHsuLi59KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLWxhc3QtY2hpbGQoM24rMSkgey4uLn1cclxuICAgICAqICAgICBzNCA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aExhc3RDaGlsZChbMywxXSksIHsuLi59KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLWxhc3QtY2hpbGQoM24tMSkgey4uLn1cclxuICAgICAqICAgICBzNSA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aExhc3RDaGlsZChbMywtMV0pLCB7Li4ufSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICogQHBhcmFtIG50aEV4cHIgU3RyaW5nLCBudW1iZXIgb3IgdHVwbGUgcHJvdmlkaW5nIHRoZSB2YWx1ZSBmb3IgdGhlIGBcIm50aFwiYCBleHByZXNzaW9uXHJcbiAgICAgKi9cclxuICAgIG50aExhc3RDaGlsZCggbnRoRXhwcjogTnRoRXhwcmVzc2lvbik6IHRoaXM7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIGBcIjpudGgtbGFzdC1jaGlsZCgpXCJgIHBzZXVkbyBjbGFzcyB3aXRoIHRoZSBnaXZlbiBwYXJhbWV0ZXJzLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogcDpudGgtbGFzdC1jaGlsZCgzbisxKSB7Li4ufVxyXG4gICAgICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInBcIikubnRoTGFzdENoaWxkKDMsIDEpLCB7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1sYXN0LWNoaWxkKDNuLTEpIHsuLi59XHJcbiAgICAgKiAgICAgczIgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwicFwiKS5udGhMYXN0Q2hpbGQoMywgLTEpLCB7Li4ufSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICogQHBhcmFtIGEgTnVtYmVyIGJlZm9yZSB0aGUgYFwiblwiYCBpbiB0aGUgYFwiQW4rQlwiYCBleHByZXNzaW9uXHJcbiAgICAgKiBAcGFyYW0gYiBOdW1iZXIgYWZ0ZXIgdGhlIGBcIitcImAgaW4gdGhlIGBcIkFuK0JcImAgZXhwcmVzc2lvbi4gVXNlIG5lZ2F0aXZlIHZhbHVlXHJcbiAgICAgKiB0byBjcmVhdGUgYSBgXCJBbi1CXCJgIGV4cHJlc3Npb24uXHJcbiAgICAgKi9cclxuICAgIG50aExhc3RDaGlsZCggYTogbnVtYmVyLCBiOiBudW1iZXIpOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOm50aC1vZi10eXBlKClcImAgcHNldWRvIGNsYXNzIHdpdGggdGhlIGdpdmVuIHBhcmFtZXRlcnMuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1vZi10eXBlKFwib2RkXCIpIHsuLi59XHJcbiAgICAgKiAgICAgczEgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwicFwiKS5udGhPZlR5cGUoXCJvZGRcIiksIHsuLi59KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLW9mLXR5cGUoMykgey4uLn1cclxuICAgICAqICAgICBzMiA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aE9mVHlwZSgzKSwgey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogcDpudGgtb2YtdHlwZSgzbikgey4uLn1cclxuICAgICAqICAgICBzMyA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aE9mVHlwZShbM10pLCB7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1vZi10eXBlKDNuKzEpIHsuLi59XHJcbiAgICAgKiAgICAgczQgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwicFwiKS5udGhPZlR5cGUoWzMsMV0pLCB7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1vZi10eXBlKDNuLTEpIHsuLi59XHJcbiAgICAgKiAgICAgczUgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwicFwiKS5udGhPZlR5cGUoWzMsLTFdKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBudGhFeHByIFN0cmluZywgbnVtYmVyIG9yIHR1cGxlIHByb3ZpZGluZyB0aGUgdmFsdWUgZm9yIHRoZSBgXCJudGhcImAgZXhwcmVzc2lvblxyXG4gICAgICovXHJcbiAgICBudGhPZlR5cGUoIG50aEV4cHI6IE50aEV4cHJlc3Npb24pOiB0aGlzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBgXCI6bnRoLW9mLXR5cGUoKVwiYCBwc2V1ZG8gY2xhc3Mgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLW9mLXR5cGUoM24rMSkgey4uLn1cclxuICAgICAqICAgICBzMSA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aE9mVHlwZSgzLCAxKSwgey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogcDpudGgtb2YtdHlwZSgzbi0xKSB7Li4ufVxyXG4gICAgICogICAgIHMyID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInBcIikubnRoT2ZUeXBlKDMsIC0xKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBhIE51bWJlciBiZWZvcmUgdGhlIGBcIm5cImAgaW4gdGhlIGBcIkFuK0JcImAgZXhwcmVzc2lvblxyXG4gICAgICogQHBhcmFtIGIgTnVtYmVyIGFmdGVyIHRoZSBgXCIrXCJgIGluIHRoZSBgXCJBbitCXCJgIGV4cHJlc3Npb24uIFVzZSBuZWdhdGl2ZSB2YWx1ZVxyXG4gICAgICogdG8gY3JlYXRlIGEgYFwiQW4tQlwiYCBleHByZXNzaW9uLlxyXG4gICAgICovXHJcbiAgICBudGhPZlR5cGUoIGE6IG51bWJlciwgYjogbnVtYmVyKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIGBcIjpudGgtbGFzdC1vZi10eXBlKClcImAgcHNldWRvIGNsYXNzIHdpdGggdGhlIGdpdmVuIHBhcmFtZXRlcnMuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1sYXN0LW9mLXR5cGUoXCJvZGRcIikgey4uLn1cclxuICAgICAqICAgICBzMSA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aExhc3RPZlR5cGUoXCJvZGRcIiksIHsuLi59KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLWxhc3Qtb2YtdHlwZSgzKSB7Li4ufVxyXG4gICAgICogICAgIHMyID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInBcIikubnRoTGFzdE9mVHlwZSgzKSwgey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogcDpudGgtbGFzdC1vZi10eXBlKDNuKSB7Li4ufVxyXG4gICAgICogICAgIHMzID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInBcIikubnRoTGFzdE9mVHlwZShbM10pLCB7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1sYXN0LW9mLXR5cGUoM24rMSkgey4uLn1cclxuICAgICAqICAgICBzNCA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aExhc3RPZlR5cGUoWzMsMV0pLCB7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiBwOm50aC1sYXN0LW9mLXR5cGUoM24tMSkgey4uLn1cclxuICAgICAqICAgICBzNSA9IGNzcy4kc3R5bGUoIGNzcy5zZWwoXCJwXCIpLm50aExhc3RPZlR5cGUoWzMsLTFdKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBudGhFeHByIFN0cmluZywgbnVtYmVyIG9yIHR1cGxlIHByb3ZpZGluZyB0aGUgdmFsdWUgZm9yIHRoZSBgXCJudGhcImAgZXhwcmVzc2lvblxyXG4gICAgICovXHJcbiAgICBudGhMYXN0T2ZUeXBlKCBudGhFeHByOiBOdGhFeHByZXNzaW9uKTogdGhpcztcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOm50aC1sYXN0LW9mLXR5cGUoKVwiYCBwc2V1ZG8gY2xhc3Mgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IHA6bnRoLWxhc3Qtb2YtdHlwZSgzbisxKSB7Li4ufVxyXG4gICAgICogICAgIHMxID0gY3NzLiRzdHlsZSggY3NzLnNlbChcInBcIikubnRoTGFzdE9mVHlwZSgzLCAxKSwgey4uLn0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIGNzczogcDpudGgtbGFzdC1vZi10eXBlKDNuLTEpIHsuLi59XHJcbiAgICAgKiAgICAgczIgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKFwicFwiKS5udGhMYXN0T2ZUeXBlKDMsIC0xKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBhIE51bWJlciBiZWZvcmUgdGhlIGBcIm5cImAgaW4gdGhlIGBcIkFuK0JcImAgZXhwcmVzc2lvblxyXG4gICAgICogQHBhcmFtIGIgTnVtYmVyIGFmdGVyIHRoZSBgXCIrXCJgIGluIHRoZSBgXCJBbitCXCJgIGV4cHJlc3Npb24uIFVzZSBuZWdhdGl2ZSB2YWx1ZVxyXG4gICAgICogdG8gY3JlYXRlIGEgYFwiQW4tQlwiYCBleHByZXNzaW9uLlxyXG4gICAgICovXHJcbiAgICBudGhMYXN0T2ZUeXBlKCBhOiBudW1iZXIsIGI6IG51bWJlcik6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpvbmx5LWNoaWxkXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBvbmx5Q2hpbGQ6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpvbmx5LW9mLXR5cGVcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IG9ubHlPZlR5cGU6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpvcHRpb25hbFwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgb3B0aW9uYWw6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpvdXQtb2YtcmFuZ2VcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IG91dE9mUmFuZ2U6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpwYXVzZWRcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IHBhdXNlZDogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOnBpY3R1cmUtaW4tcGljdHVyZVwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgcGljdHVyZUluUGljdHVyZTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOnBsYWNlaG9sZGVyLXNob3duXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBwbGFjZWhvbGRlclNob3duOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6cGxheWluZ1wiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgcGxheWluZzogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOnJlYWQtb25seVwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgcmVhZE9ubHk6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpyZWFkLXdyaXRlXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSByZWFkV3JpdGU6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpyZXF1aXJlZFwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgcmVxdWlyZWQ6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpyaWdodFwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgcmlnaHQ6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjpyb290XCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSByb290OiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6c2NvcGVcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IHNjb3BlOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6dGFyZ2V0XCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSB0YXJnZXQ6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjp2YWxpZFwiYCBwc2V1ZG8gY2xhc3MgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgdmFsaWQ6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjp2aXNpdGVkXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSB2aXNpdGVkOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6dXNlci1pbnZhbGlkXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSB1c2VySW52YWxpZDogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOnVzZXItdmFsaWRcImAgcHNldWRvIGNsYXNzIHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IHVzZXJWYWxpZDogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIGBcIjp3aGVyZSgpXCJgIHBzZXVkbyBjbGFzcyB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yLiBJZiBtdWx0aXBsZVxyXG4gICAgICogaXRlbXMgYXJlIHNwZWNpZmllZCwgdGhleSBhcmUgaW50ZXJwcmV0ZWQgYXMgYSBsaXN0OyB0aGF0IGlzLCB0aGV5IGFyZSBjb21iaW5lZCB1c2luZ1xyXG4gICAgICogdGhlIGBcIixcImAgY29tYmluYXRvci5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICBjMSA9IGNzcy4kY2xhc3Moey4uLn0pXHJcbiAgICAgKiAgICAgYzIgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyBwcm9kdWNlcyBjc3M6IDp3aGVyZSguYzEsIC5jMikgPiBwOmhvdmVyIHsuLi59XHJcbiAgICAgKiAgICAgczEgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKCkud2hlcmUoIHRoaXMuYzEsIHRoaXMuYzIpLmNoaWxkKFwicDpob3ZlclwiKSwgey4uLn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBwYXJhbSBpdGVtcyBMaXN0IG9mIHNlbGVjdG9ycyB0byBiZSBhZGRlZFxyXG4gICAgICovXHJcbiAgICB3aGVyZSggLi4uaXRlbXM6IENzc1NlbGVjdG9yW10pOiB0aGlzO1xyXG5cclxuXHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjo6YWZ0ZXJcImAgcHNldWRvIGVsZW1lbnQgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgYWZ0ZXI6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjo6YmFja2Ryb3BcImAgcHNldWRvIGVsZW1lbnQgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgYmFja2Ryb3A6IHRoaXM7XHJcblxyXG4gICAgLyoqIEFkZHMgdGhlIGBcIjo6YmVmb3JlXCJgIHBzZXVkbyBlbGVtZW50IHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGJlZm9yZTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOjpjdWUtcmVnaW9uXCJgIHBzZXVkbyBlbGVtZW50IHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGN1ZVJlZ2lvbjogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOjpjdWVcImAgcHNldWRvIGVsZW1lbnQgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgY3VlOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6OmZpcnN0LWxldHRlclwiYCBwc2V1ZG8gZWxlbWVudCB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBmaXJzdExldHRlcjogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOjpmaXJzdC1saW5lXCJgIHBzZXVkbyBlbGVtZW50IHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGZpcnN0TGluZTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOjpncmFtbWFyLWVycm9yXCJgIHBzZXVkbyBlbGVtZW50IHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IGdyYW1tYXJFcnJvcjogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOjptYXJrZXJcImAgcHNldWRvIGVsZW1lbnQgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgbWFya2VyOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOjpwYXJ0KClcImAgcHNldWRvIGVsZW1lbnQgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1ldGVyLlxyXG4gICAgICovXHJcbiAgICBwYXJ0KCBwYXJ0TmFtZTogc3RyaW5nKTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOjpwbGFjZWhvbGRlclwiYCBwc2V1ZG8gZWxlbWVudCB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBwbGFjZWhvbGRlcjogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOjpzZWxlY3Rpb25cImAgcHNldWRvIGVsZW1lbnQgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3RvciAqL1xyXG4gICAgcmVhZG9ubHkgc2VsZWN0aW9uOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgYFwiOjpzbG90dGVkKClcImAgcHNldWRvIGVsZW1lbnQgdG8gaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBleGlzdGluZyBzZWxlY3Rvci4gSWZcclxuICAgICAqIG11bHRpcGxlIGl0ZW1zIGFyZSBzcGVjaWZpZWQsIHRoZXkgYXJlIGludGVycHJldGVkIGFzIGEgbGlzdDsgdGhhdCBpcywgdGhleSBhcmUgY29tYmluZWRcclxuICAgICAqIHVzaW5nIHRoZSBgXCIsXCJgIGNvbWJpbmF0b3IuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgYzEgPSBjc3MuJGNsYXNzKHsuLi59KVxyXG4gICAgICogICAgIGMyID0gY3NzLiRjbGFzcyh7Li4ufSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgY3NzOiA6OnNsb3R0ZWQoLmMxLCAuYzIpIHsuLi59XHJcbiAgICAgKiAgICAgczEgPSBjc3MuJHN0eWxlKCBjc3Muc2VsKCkuc2xvdHRlZCggdGhpcy5jMSwgdGhpcy5jMikpLCB7Li4ufSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICogQHBhcmFtIGl0ZW1zIExpc3Qgb2Ygc2VsZWN0b3JzIHRvIGJlIGFkZGVkXHJcbiAgICAgKi9cclxuICAgIHNsb3R0ZWQoIC4uLml0ZW1zOiBDc3NTZWxlY3RvcltdKTogdGhpcztcclxuXHJcbiAgICAvKiogQWRkcyB0aGUgYFwiOjpzcGVsbGluZy1lcnJvclwiYCBwc2V1ZG8gZWxlbWVudCB0byBpbW1lZGlhdGVseSBmb2xsb3cgdGhlIGV4aXN0aW5nIHNlbGVjdG9yICovXHJcbiAgICByZWFkb25seSBzcGVsbGluZ0Vycm9yOiB0aGlzO1xyXG5cclxuICAgIC8qKiBBZGRzIHRoZSBgXCI6OnRhcmdldC10ZXh0XCJgIHBzZXVkbyBlbGVtZW50IHRvIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGUgZXhpc3Rpbmcgc2VsZWN0b3IgKi9cclxuICAgIHJlYWRvbmx5IHRhcmdldFRleHQ6IHRoaXM7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIGEgQ1NTIHNlbGVjdG9yLiBUaGlzIHR5cGUgaXMgdXNlZCB0byBwcm9kdWNlIGFyYml0cmFyeSBjb21wbGV4IHNlbGVjdG9ycyB1c2VkIGJ5IHRoZVxyXG4gKiBbWyRzdHlsZV1dIGZ1bmN0aW9uLiBJZiBhcnJheSBpcyBzcGVjaWZpZWQsIGFsbCBpdGVtcyBhcmUgY29udmVydGVkIHRvIHN0cmluZ3MgYW5kIGNvbmNhdGVuYXRlZC5cclxuICovXHJcbmV4cG9ydCB0eXBlIENzc1NlbGVjdG9yID0gRWxlbWVudFRhZ05hbWUgfCBJTlNUYWdGdW5jIHwgUHNldWRvRW50aXR5IHwgSVJ1bGVXaXRoU2VsZWN0b3IgfFxyXG4gICAgSVNlbGVjdG9yUHJveHkgfCBJU2VsZWN0b3JGdW5jIHwgSUF0dHJTZWxlY3RvckZ1bmMgfCBJUGFyYW1ldGVyaXplZFBzZXVkb0VudGl0eUZ1bmM8YW55PiB8XHJcbiAgICBTZWxlY3RvckNvbWJpbmF0b3IgfCBJUmF3UHJveHkgfCBzdHJpbmcgfCBDc3NTZWxlY3RvcltdO1xyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gTWlzY2VsbGFuZW91cyBDU1MgdHlwZXMuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHNpbXBsZSBhbmltYXRpb24gdGltaW5nIGZ1bmN0aW9ucyAtIHRob3NlIHRoYXQgZG9uJ3QgaGF2ZSBwYXJhbWV0ZXJzXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUaW1pbmdGdW5jdGlvbktleXdvcmRzID0gXCJsaW5lYXJcIiB8IFwiZWFzZVwiIHwgXCJlYXNlLWluXCIgfCBcImVhc2Utb3V0XCIgfCBcImVhc2UtaW4tb3V0XCIgfCBcInN0ZXAtc3RhcnRcIiB8IFwic3RlcC1lbmRcIjtcclxuXHJcblxyXG5cclxuLyoqIFR5cGUgZm9yIHN0ZXAgYW5pbWF0aW9uIHRpbWluZyBmdW5jdGlvbiBqdW1wLXRlcm0gKi9cclxuZXhwb3J0IHR5cGUgVGltaW5nRnVuY3Rpb25KdW1wVGVybSA9IFwianVtcC1zdGFydFwiIHwgXCJqdW1wLWVuZFwiIHwgXCJqdW1wLW5vbmVcIiB8IFwianVtcC1ib3RoXCIgfCBcInN0YXJ0XCIgfCBcImVuZFwiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBJU3RlcHNGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIENTUyBgc3RlcHMoKWAgZnVuY3Rpb24uIEl0IGlzIHJldHVybmVkXHJcbiAqIGZyb20gdGhlIFtbc3RlcHNdXSBmdW5jdGlvbi5cclxuICogQGNhdGVnb3J5IFRyYW5zaXRpb24gYW5kIEFuaW1hdGlvblxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJU3RlcHNGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwic3RlcHNcIjtcclxuXHJcbiAgICAvKiogTnVtYmVyIG9mIHN0b3BzICovXHJcbiAgICBuOiBFeHRlbmRlZDxudW1iZXI+O1xyXG5cclxuICAgIC8qKiBKdW1wIHRlcm0gKi9cclxuICAgIGo/OiBUaW1pbmdGdW5jdGlvbkp1bXBUZXJtO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUN1YmljQmV6aWVyRnVuYyBpbnRlcmZhY2UgcmVwcmVzZW50cyBhbiBpbnZvY2F0aW9uIG9mIHRoZSBDU1MgYGN1YmljLWJlemllcigpYCBmdW5jdGlvbi5cclxuICogSXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgW1tjdWJpY0Jlemllcl1dIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNpdGlvbiBhbmQgQW5pbWF0aW9uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDdWJpY0JlemllckZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJjdWJpYy1iZXppZXJcIjtcclxuXHJcbiAgICBuMTogRXh0ZW5kZWQ8bnVtYmVyPjtcclxuICAgIG4yOiBFeHRlbmRlZDxudW1iZXI+O1xyXG4gICAgbjM6IEV4dGVuZGVkPG51bWJlcj4sXHJcbiAgICBuNDogRXh0ZW5kZWQ8bnVtYmVyPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3Igc2luZ2xlIGFuaW1hdGlvbiB0aW1pbmcgZnVuY3Rpb25cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRpbWluZ0Z1bmN0aW9uID0gVGltaW5nRnVuY3Rpb25LZXl3b3JkcyB8IElTdGVwc0Z1bmMgfCBJQ3ViaWNCZXppZXJGdW5jO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElVcmxGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIENTUyBgdXJsKClgIGZ1bmN0aW9uLiBJdCBpcyByZXR1cm5lZCBmcm9tXHJcbiAqIHRoZSBbW3VybF1dIGZ1bmN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJVXJsRnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcInVybFwiO1xyXG5cclxuICAgIC8qKiBVUkwgb3IgcmVmZXJlbmNlIHRvIHRoZSBJRCBydWxlIGlkZW50aWZ5aW5nIGFuIFNWRyBlbGVtZW50ICovXHJcbiAgICBwOiBFeHRlbmRlZDxzdHJpbmcgfCBJSURSdWxlPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElDdXJzb3JGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIENTUyBgdXJsKClgIGZ1bmN0aW9uIHdpdGggdHdvIG9wdGlvbmFsXHJcbiAqIG51bWJlcnMgaW5kaWNhdGluZyB0aGUgY3Vyc29yJ3MgaG90c3BvdC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUN1cnNvckZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJjdXJzb3JcIjtcclxuXHJcbiAgICAvKiogQ3Vyc29yIFVSTCBvciByZWZlcmVuY2UgdG8gdGhlIElEIHJ1bGUgaWRlbnRpZnlpbmcgYW4gU1ZHIGVsZW1lbnQgKi9cclxuICAgIHVybDogRXh0ZW5kZWQ8c3RyaW5nIHwgSUlEUnVsZT47XHJcblxyXG4gICAgLyoqIFgtY29vcmRpbmF0ZSBvZiB0aGUgY3Vyc29yIGhvdHNwb3QgKi9cclxuICAgIHg/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqIFktY29vcmRpbmF0ZSBvZiB0aGUgY3Vyc29yIGhvdHNwb3QgKi9cclxuICAgIHk/OiBudW1iZXI7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEltYWdlIGFuZCBncmFkaWVudCBDU1MgZnVuY3Rpb25zLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHJlcHJlc2VudGluZyBleHRlbnQgZm9yIHRoZSBbW3JhZGlhbEdyYWRpZW50XV0gb3IgW1tyYXldXSBmdW5jdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFeHRlbnRLZXl3b3JkID0gXCJjbG9zZXN0LWNvcm5lclwiIHwgXCJjbG9zZXN0LXNpZGVcIiB8IFwiZmFydGhlc3QtY29ybmVyXCIgfCBcImZhcnRoZXN0LXNpZGVcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IHRoYXQgcHJvZHVjZXMgb25lIG9mIENTUyBncmFkaWVudCBmdW5jdGlvbi4gSXQgY2FuIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvXHJcbiAqIGEgc3VpdGFibGUgc3R5bGUgcHJvcGVydHkgKGUuZy4gYmFja2dyb3VuZC1pbWFnZSkuIE9iamVjdHMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGNhbiBiZVxyXG4gKiB1c2VkIHdoZXJlZXZlciBncmFkaWVudHMgYXJlIHVzZWQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDc3NJbWFnZUZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJsaW5lYXItZ3JhZGllbnRcIiB8IFwicmFkaWFsLWdyYWRpZW50XCIgfCBcImNvbmljLWdyYWRpZW50XCIgfFxyXG4gICAgICAgIFwiY3Jvc3MtZmFkZVwiIHwgXCJpbWFnZS1zZXRcIiB8IFwicGFpbnRcIjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIENzc0ltYWdlIHR5cGUgcmVwcmVzZW50cyBhIHR5cGUgdXNlZCBmb3IgQ1NTIHByb3BlcnRpZXMgdGhhdCBhY2NlcHQgdGhlIGA8aW1hZ2U+YCB0eXBlLlxyXG4gKiBJbWFnZSBjYW4gYmUgc3BlY2lmaWVkIGVpdGhlciB1c2luZyB0aGUgW1t1cmxdXSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIFtbSVVybEZ1bmNdXVxyXG4gKiBpbnRlcmZhY2Ugb3IgYW55IG9mIHRoZSBmdW5jdGlvbnMgdGhhdCByZXR1cm4gdGhlIFtbSUltYWdlUHJveHldXSBvciBbW0lDc3NJbWFnZUZ1bmNdXVxyXG4gKiBpbnRlcmZhY2Ugc3VjaCBhcyBbW2xpbmVhckdyYWRpZW50XV0gYW5kIFtbY3Jvc3NGYWRlXV0uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDc3NJbWFnZSA9IElVcmxGdW5jIHwgSUNzc0ltYWdlRnVuYztcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFdlYiBOYW1lc3BhY2VzLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBUaGUgV2ViTmFtZXNwYWNlcyBlbnVtZXJhdGlvbiBwcm92aWRlcyBpZGVudGlmaWVycyBmb3IgdGhlIGtub3duIFdlYi1yZWxhdGVkIG5hbWVzcGFjZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW51bSBXZWJOYW1lc3BhY2VzXHJcbntcclxuICAgIEhUTUwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcclxuICAgIFNWRyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcclxuICAgIFhMaW5rID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXHJcbiAgICBYTUwgPSBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxyXG4gICAgWE1MTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCIsXHJcbiAgICBNYXRoTUwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixcclxufVxyXG5cclxuXHJcblxyXG4iLCLvu79pbXBvcnQge0Nzc0ltYWdlLCBJUmF3UHJveHl9IGZyb20gXCIuL0NvcmVUeXBlc1wiO1xyXG5pbXBvcnQge0lDb3VudGVyU3R5bGVSdWxlfSBmcm9tIFwiLi9SdWxlVHlwZXNcIjtcclxuaW1wb3J0IHtMaXN0U3R5bGVUeXBlX1N0eWxlVHlwZX0gZnJvbSBcIi4vU3R5bGVUeXBlc1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IGV4dGVuZHMgdGhlIGdpdmVuIHR5cGUgd2l0aCB0aGUgW1tJUmF3UHJveHldXSBpbnRlcmZhY2UgdGhhdCBhbGxvd3Mgc3BlY2lmeWluZyBhIHJhd1xyXG4gKiBzdHJpbmcgdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb3VudGVyRXh0ZW5kZWQ8VD4gPSBUIHwgSVJhd1Byb3h5O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IGFsbG93cyBzcGVjaWZ5aW5nIGVpdGhlciB0aGUgZ2l2ZW4gdHlwZSBvciBhbiBhcnJheSB3aXRoIGVsZW1lbnRzIG9mIHRoZSBleHRlbmRlZFxyXG4gKiB2YXJpYW50IG9mIHRoaXMgdHlwZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvdW50ZXJPbmVPck1hbnk8VD4gPSBUIHwgQ291bnRlckV4dGVuZGVkPFQ+W107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGNvdW50ZXIgW1tzeXN0ZW1dXSBwcm9wZXJ0eS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFN5c3RlbV9Db3VudGVyVHlwZSA9IFwiY3ljbGljXCIgfCBcIm51bWVyaWNcIiB8IFwiYWxwaGFiZXRpY1wiIHwgXCJzeW1ib2xpY1wiIHwgXCJhZGRpdGl2ZVwiIHwgXCJmaXhlZFwiIHxcclxuICAgIG51bWJlciB8IFtMaXN0U3R5bGVUeXBlX1N0eWxlVHlwZSB8IElSYXdQcm94eV07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGNvdW50ZXJbW25lZ2F0aXZlXV0gcHJvcGVydHkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBOZWdhdGl2ZV9Db3VudGVyVHlwZSA9IHN0cmluZyB8IFtDb3VudGVyRXh0ZW5kZWQ8c3RyaW5nPiwgIENvdW50ZXJFeHRlbmRlZDxzdHJpbmc+P107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGNvdW50ZXIgW1twcmVmaXhdXSBhbmQgW1tzdWZmaXhdXSBwcm9wZXJ0aWVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUHJlZml4U3VmZml4X0NvdW50ZXJUeXBlID0gc3RyaW5nIHwgQ3NzSW1hZ2U7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGNvdW50ZXIgW1tyYW5nZV1dIHByb3BlcnR5LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmFuZ2VfQ291bnRlclR5cGUgPSBcImF1dG9cIiB8IENvdW50ZXJPbmVPck1hbnk8W1wiaW5maW5pdGVcIiB8IG51bWJlciwgXCJpbmZpbml0ZVwiIHwgbnVtYmVyXT47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGNvdW50ZXIgW1twYWRdXSBwcm9wZXJ0eS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFBhZF9Db3VudGVyVHlwZSA9IFtudW1iZXIsIHN0cmluZ107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGNvdW50ZXIgW1tmYWxsYmFja11dIHByb3BlcnR5LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRmFsbGJhY2tfQ291bnRlclR5cGUgPSBMaXN0U3R5bGVUeXBlX1N0eWxlVHlwZTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHNwZWNpZnlpbmcgY291bnRlciBbW3N5bWJvbHNdXSBwcm9wZXJ0eS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFN5bWJvbHNfQ291bnRlclR5cGUgPSBDb3VudGVyT25lT3JNYW55PHN0cmluZz47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGNvdW50ZXIgW1thZGRpdGl2ZVN5bWJvbHNdXSBwcm9wZXJ0eS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEFkZGl0aXZlU3ltYm9sc19Db3VudGVyVHlwZSA9IENvdW50ZXJPbmVPck1hbnk8W3N0cmluZyB8IENzc0ltYWdlLCBudW1iZXJdIHwgW251bWJlciwgc3RyaW5nIHwgQ3NzSW1hZ2VdPjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHNwZWNpZnlpbmcgY291bnRlciBbW3NwZWFrQXNdXSBwcm9wZXJ0eS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFNwZWFrQXNfQ291bnRlclR5cGUgPSBcImF1dG9cIiB8IFwiYnVsbGV0c1wiIHwgXCJudW1iZXJzXCIgfCBcIndvcmRzXCIgfCBcInNwZWxsLW91dFwiIHwgSUNvdW50ZXJTdHlsZVJ1bGU7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgcmVwcmVzZW50aW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBgQGNvdW50ZXItc3R5bGVgIENTUyBydWxlLlxyXG4gKlxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDb3VudGVyU3R5bGVzZXRcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL3N5c3RlbVxyXG4gICAgICovXHJcbiAgICBzeXN0ZW0/OiBTeXN0ZW1fQ291bnRlclR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL25lZ2F0aXZlXHJcbiAgICAgKi9cclxuICAgIG5lZ2F0aXZlPzogTmVnYXRpdmVfQ291bnRlclR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL3ByZWZpeFxyXG4gICAgICovXHJcbiAgICBwcmVmaXg/OiBQcmVmaXhTdWZmaXhfQ291bnRlclR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL3N1ZmZpeFxyXG4gICAgICovXHJcbiAgICBzdWZmaXg/OiBQcmVmaXhTdWZmaXhfQ291bnRlclR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL3JhbmdlXHJcbiAgICAgKi9cclxuICAgIHJhbmdlPzogUmFuZ2VfQ291bnRlclR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL3BhZFxyXG4gICAgICovXHJcbiAgICBwYWQ/OiBQYWRfQ291bnRlclR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL2ZhbGxiYWNrXHJcbiAgICAgKi9cclxuICAgIGZhbGxiYWNrPzogRmFsbGJhY2tfQ291bnRlclR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL3N5bWJvbHNcclxuICAgICAqL1xyXG4gICAgc3ltYm9scz86IFN5bWJvbHNfQ291bnRlclR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bjb3VudGVyLXN0eWxlL2FkZGl0aXZlLXN5bWJvbHNcclxuICAgICAqL1xyXG4gICAgYWRkaXRpdmVTeW1ib2xzPzogQWRkaXRpdmVTeW1ib2xzX0NvdW50ZXJUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9AY291bnRlci1zdHlsZS9zcGVhay1hc1xyXG4gICAgICovXHJcbiAgICBzcGVha0FzPzogU3BlYWtBc19Db3VudGVyVHlwZTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIEV4dGVuZGVkQ291bnRlclN0eWxlc2V0IHR5cGUgbWFwcyBhbGwgYEBjb3VudGVyLXN0eWxlYCBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIFtbSUNvdW50ZXJTdHlsZXNldF1dXHJcbiAqIGludGVyZmFjZSB0byB0aGUgXCJleHRlbmRlZFwiIHZlcnNpb25zIG9mIHRoZWlyIHR5cGVzLiBUaGVzZSBleHRlbmRlZCB0eXBlcyBhcmUgZGVmaW5lZCB1c2luZyB0aGVcclxuICogW1tDb3VudGVyRXh0ZW5kZWRdXSBnZW5lcmljIHR5cGUsIHdoaWNoIGFkZHMgW1tJUmF3UHJveHldXSB0byB0aGUgdHlwZSB0aGF0IGlzIGRlZmluZWQgaW4gdGhlXHJcbiAqIElCYXNlQ291bnRlclN0eWxlc2V0IGludGVyZmFjZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEV4dGVuZGVkQ291bnRlclN0eWxlc2V0ID0geyBbSyBpbiBrZXlvZiBJQ291bnRlclN0eWxlc2V0XTogQ291bnRlckV4dGVuZGVkPElDb3VudGVyU3R5bGVzZXRbS10+IH1cclxuXHJcblxyXG5cclxuIiwi77u/aW1wb3J0IHtJUmF3UHJveHl9IGZyb20gXCIuL0NvcmVUeXBlc1wiO1xyXG5pbXBvcnQge0Nzc0FuZ2xlLCBDc3NMZW5ndGgsIENzc051bWJlciwgQ3NzUGVyY2VudH0gZnJvbSBcIi4vTnVtZXJpY1R5cGVzXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHRoYXQgZXh0ZW5kcyB0aGUgZ2l2ZW4gdHlwZSB3aXRoIHRoZSBbW0lSYXdQcm94eV1dIGludGVyZmFjZSB0aGF0IGFsbG93cyBzcGVjaWZ5aW5nIHJhdyBzdHJpbmcgdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBGb250RmFjZUV4dGVuZGVkPFQ+ID0gVCB8IElSYXdQcm94eTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgb2YgdGhlIFtbYXNjZW50T3ZlcnJpZGVdXSwgW1tkZXNjZW50T3ZlcnJpZGVdXSBhbmQgW1tsaW5lR2FwT3ZlcnJpZGVdXSBwcm9wZXJ0aWVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRm9udEZhY2VNZXRyaWNPdmVycmlkZSA9IFwibm9ybWFsXCIgfCBDc3NQZXJjZW50O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3Igc3BlY2Z5aW5nIGtleXdvcmRzIFtbSVN0eWxlc2V0LmZvbnRTdHJldGNoXV0gcHJvcGVydGllcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIEZvbnRTdHJldGNoS2V5d29yZCA9IFwibm9ybWFsXCIgfCBcInVsdHJhLWNvbmRlbnNlZFwiIHwgXCJleHRyYS1jb25kZW5zZWRcIiB8IFwiY29uZGVuc2VkXCIgfFxyXG4gICAgXCJzZW1pLWNvbmRlbnNlZFwiIHwgXCJzZW1pLWV4cGFuZGVkXCIgfCBcImV4cGFuZGVkXCIgfCBcImV4dHJhLWV4cGFuZGVkXCIgfCBcInVsdHJhLWV4cGFuZGVkXCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3Igc3BlY2Z5aW5nIFtbSVN0eWxlc2V0LmZvbnRTdHJldGNoXV0gcHJvcGVydGllcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIEZvbnRTdHJldGNoID0gRm9udFN0cmV0Y2hLZXl3b3JkIHwgQ3NzUGVyY2VudDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHNwZWNmeWluZyBbW0lTdHlsZXNldC5mb250U3R5bGVdXSBwcm9wZXJ0aWVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRm9udFN0eWxlID0gXCJub3JtYWxcIiB8IFwiaXRhbGljXCIgfCBcIm9ibGlxdWVcIiB8IENzc0FuZ2xlO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3Igc3BlY2Z5aW5nIFtbSVN0eWxlc2V0LmZvbnRXZWlnaHRdXSBwcm9wZXJ0aWVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRm9udFdlaWdodCA9IFwibm9ybWFsXCIgfCBcImJvbGRcIiB8IENzc051bWJlcjtcclxuXHJcblxyXG5cclxuLyoqIEtleXdvcmRzIHNwZWNpZnlpbmcgc3lzdGVtIGZvbnRzICovXHJcbmV4cG9ydCB0eXBlIFN5c3RlbUZvbnQgPSBcImNhcHRpb25cIiB8IFwiaWNvblwiIHwgXCJtZW51XCIgfCBcIm1lc3NhZ2UtYm94XCIgfCBcInNtYWxsLWNhcHRpb25cIiB8IFwic3RhdHVzLWJhclwiO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBmb3IgW1tJU3R5bGVzZXQuZm9udEtlcm5pbmddXSBzdHlsZSBwcm9wZXJ0eSAqL1xyXG5leHBvcnQgdHlwZSBGb250S2VybmluZyA9IFwiYXV0b1wiIHwgXCJub3JtYWxcIiB8IFwibm9uZVwiO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBmb3IgW1tJU3R5bGVzZXQuZm9udE9wdGljYWxTaXppbmddXSBzdHlsZSBwcm9wZXJ0eSAqL1xyXG5leHBvcnQgdHlwZSBGb250T3B0aWNhbFNpemluZyA9IFwiYXV0b1wiIHwgXCJub25lXCI7XHJcblxyXG5cclxuXHJcbi8qKiBUeXBlIGZvciBbW0lTdHlsZXNldC5mb250U2l6ZV1dIHN0eWxlIHByb3BlcnR5ICovXHJcbmV4cG9ydCB0eXBlIEZvbnRTaXplID0gXCJ4eC1zbWFsbFwiIHwgXCJ4LXNtYWxsXCIgfCBcInNtYWxsXCIgfCBcIm1lZGl1bVwiIHwgXCJsYXJnZVwiIHxcclxuICAgIFwieC1sYXJnZVwiIHwgXCJ4eC1sYXJnZVwiIHwgXCJ4eHgtbGFyZ2VcIiB8IFwibGFyZ2VyXCIgfCBcInNtYWxsZXJcIiB8IENzc0xlbmd0aDtcclxuXHJcblxyXG5cclxuLyoqIFR5cGUgZm9yIFtbSVN0eWxlc2V0LmZvbnRTeW50aGVzaXNdXSBzdHlsZSBwcm9wZXJ0eSAqL1xyXG5leHBvcnQgdHlwZSBGb250U3ludGhlc2lzID0gXCJub25lXCIgfCBcIndlaWdodFwiIHwgXCJzdHlsZVwiIHwgXCJ3ZWlnaHQgc3R5bGVcIjtcclxuXHJcblxyXG5cclxuLyoqIFR5cGUgZm9yIFtbSVN0eWxlc2V0LmZvbnRWYXJpYW50Q2Fwc11dIHN0eWxlIHByb3BlcnR5ICovXHJcbmV4cG9ydCB0eXBlIEZvbnRWYXJpYW50Q2FwcyA9IFwibm9ybWFsXCIgfCBcInNtYWxsLWNhcHNcIiB8IFwiYWxsLXNtYWxsLWNhcHNcIiB8XHJcbiAgICBcInBldGl0ZS1jYXBzXCIgfCBcImFsbC1wZXRpdGUtY2Fwc1wiIHwgXCJ1bmljYXNlXCIgfCBcInRpdGxpbmctY2Fwc1wiO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBmb3IgW1tJU3R5bGVzZXQuZm9udFZhcmlhbnRQb3NpdGlvbl1dIHN0eWxlIHByb3BlcnR5ICovXHJcbmV4cG9ydCB0eXBlIEZvbnRWYXJpYW50UG9zaXRpb24gPSBcIm5vcm1hbFwiIHwgXCJzdWJcIiB8IFwic3VwZXJcIjtcclxuXHJcblxyXG5cclxuLyoqIFR5cGUgb2YgW1tJRm9udEZhY2UuZm9udERpc3BsYXldXSBwcm9wZXJ0eSAqL1xyXG5leHBvcnQgdHlwZSBGb250RGlzcGxheV9Gb250RmFjZVR5cGUgPSBcImF1dG9cIiB8IFwiYmxvY2tcIiB8IFwic3dhcFwiIHwgXCJmYWxsYmFja1wiIHwgXCJvcHRpb25hbFwiO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBvZiBbW0lGb250RmFjZS5mb250U3RyZXRjaF1dIHByb3BlcnR5ICovXHJcbmV4cG9ydCB0eXBlIEZvbnRTdHJldGNoX0ZvbnRGYWNlVHlwZSA9IEZvbnRTdHJldGNoIHxcclxuICAgIFtGb250RmFjZUV4dGVuZGVkPEZvbnRTdHJldGNoPiwgRm9udEZhY2VFeHRlbmRlZDxGb250U3RyZXRjaD5dO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBvZiBbW0lGb250RmFjZS5mb250U3R5bGVdXSBwcm9wZXJ0eSAqL1xyXG5leHBvcnQgdHlwZSBGb250U3R5bGVfRm9udEZhY2VUeXBlID0gRm9udFN0eWxlIHxcclxuICAgIFtGb250RmFjZUV4dGVuZGVkPENzc0FuZ2xlPiwgRm9udEZhY2VFeHRlbmRlZDxDc3NBbmdsZT5dO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBvZiBbW0lGb250RmFjZS5mb250V2VpZ2h0XV0gcHJvcGVydHkgKi9cclxuZXhwb3J0IHR5cGUgRm9udFdlaWdodF9Gb250RmFjZVR5cGUgPSBGb250V2VpZ2h0IHxcclxuICAgIFtGb250RmFjZUV4dGVuZGVkPEZvbnRXZWlnaHQ+LCBGb250RmFjZUV4dGVuZGVkPEZvbnRXZWlnaHQ+XTtcclxuXHJcblxyXG5cclxuLyoqIFBvc3NpYmxlIG5hbWVkIHZhbHVlcyBmb3IgZm9ybWF0IHBhcnQgb2YgdGhlIFtbSUZvbnRGYWNlLnNyY11dIHByb3BlcnR5ICovXHJcbmV4cG9ydCB0eXBlIEZvbnRTcmNGb3JtYXQgPSBcIndvZmZcIiB8IFwid29mZjJcIiB8IFwidHJ1ZXR5cGVcIiB8IFwib3BlbnR5cGVcIiB8IFwiZW1iZWRkZWQtb3BlbnR5cGVcIiB8IFwic3ZnXCI7XHJcblxyXG4vKiogVHlwZSBvZiBhIHNpbmdsZSBwYXJ0IG9mIHRoZSBbW0lGb250RmFjZS5zcmNdXSBwcm9wZXJ0eSAqL1xyXG5leHBvcnQgdHlwZSBGb250U3JjID0gc3RyaW5nIHwgeyBsb2NhbDogRm9udEZhY2VFeHRlbmRlZDxzdHJpbmc+IH0gfFxyXG4gICAge1xyXG4gICAgICAgIHVybDogRm9udEZhY2VFeHRlbmRlZDxzdHJpbmc+LFxyXG4gICAgICAgIGZvcm1hdD86IEZvbnRGYWNlRXh0ZW5kZWQ8Rm9udFNyY0Zvcm1hdCB8IEZvbnRTcmNGb3JtYXRbXT5cclxuICAgIH07XHJcblxyXG4vKiogVHlwZSBvZiBbW0lGb250RmFjZS5zcmNdXSBwcm9wZXJ0eSAqL1xyXG5leHBvcnQgdHlwZSBGb250U3JjX0ZvbnRGYWNlVHlwZSA9IEZvbnRTcmMgfCBGb250U3JjW107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgcmVwcmVzZW50aW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBgQGZvbnQtZmFjZWAgQ1NTIHJ1bGUuXHJcbiAqXHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQGZvbnQtZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJRm9udEZhY2Vcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bmb250LWZhY2UvYXNjZW50LW92ZXJyaWRlXHJcbiAgICAgKi9cclxuICAgIGFzY2VudE92ZXJyaWRlPzogRm9udEZhY2VNZXRyaWNPdmVycmlkZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQGZvbnQtZmFjZS9kZXNjZW50LW92ZXJyaWRlXHJcbiAgICAgKi9cclxuICAgIGRlc2NlbnRPdmVycmlkZT86IEZvbnRGYWNlTWV0cmljT3ZlcnJpZGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bmb250LWZhY2UvZm9udC1kaXNwbGF5XHJcbiAgICAgKi9cclxuICAgIGZvbnREaXNwbGF5PzogRm9udERpc3BsYXlfRm9udEZhY2VUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9AZm9udC1mYWNlL2ZvbnQtZmFtaWx5XHJcbiAgICAgKi9cclxuICAgIGZvbnRGYW1pbHk/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtZmVhdHVyZS1zZXR0aW5nc1xyXG4gICAgICovXHJcbiAgICBmb250RmVhdHVyZVNldHRpbmdzPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9AZm9udC1mYWNlL2ZvbnQtc3RyZXRjaFxyXG4gICAgICovXHJcbiAgICBmb250U3RyZXRjaD86IEZvbnRTdHJldGNoX0ZvbnRGYWNlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQGZvbnQtZmFjZS9mb250LXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGZvbnRTdHlsZT86IEZvbnRTdHlsZV9Gb250RmFjZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bmb250LWZhY2UvZm9udC12YXJpYW50XHJcbiAgICAgKi9cclxuICAgIGZvbnRWYXJpYW50Pzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9AZm9udC1mYWNlL2ZvbnQtdmFyaWF0aW9uLXNldHRpbmdzXHJcbiAgICAgKi9cclxuICAgIGZvbnRWYXJpYXRpb25TZXR0aW5ncz86IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQGZvbnQtZmFjZS9mb250LXdlaWdodFxyXG4gICAgICovXHJcbiAgICBmb250V2VpZ2h0PzogRm9udFdlaWdodF9Gb250RmFjZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bmb250LWZhY2UvbGluZS1nYXAtb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgbGluZUdhcE92ZXJyaWRlPzogRm9udEZhY2VNZXRyaWNPdmVycmlkZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQGZvbnQtZmFjZS9zcmNcclxuICAgICAqL1xyXG4gICAgc3JjPzogRm9udFNyY19Gb250RmFjZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bmb250LWZhY2Uvc2l6ZS1hZGp1c3RcclxuICAgICAqL1xyXG4gICAgc2l6ZUFkanVzdD86IENzc1BlcmNlbnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0Bmb250LWZhY2UvdW5pY29kZS1yYW5nZVxyXG4gICAgICovXHJcbiAgICB1bmljb2RlUmFuZ2U/OiBzdHJpbmc7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgRXh0ZW5kZWRGb250RmFjZWAgdHlwZSBtYXBzIGFsbCBAZm9udC1mYWNlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgW1tJRm9udEZhY2VdXVxyXG4gKiBpbnRlcmZhY2UgdG8gdGhlIFwiZXh0ZW5kZWRcIiB2ZXJzaW9ucyBvZiB0aGVpciB0eXBlcy4gVGhlc2UgZXh0ZW5kZWQgdHlwZXMgYXJlIGRlZmluZWQgdXNpbmcgdGhlXHJcbiAqIFtbRm9udEZhY2VFeHRlbmRlZF1dIGdlbmVyaWMgdHlwZSwgd2hpY2ggYWRkcyBbW0lSYXdQcm94eV1dIHRvIHRoZSB0eXBlXHJcbiAqIHRoYXQgaXMgZGVmaW5lZCBpbiB0aGUgW1tJRm9udEZhY2VdXSBpbnRlcmZhY2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFeHRlbmRlZEZvbnRGYWNlID0geyBbSyBpbiBrZXlvZiBJRm9udEZhY2VdOiBGb250RmFjZUV4dGVuZGVkPElGb250RmFjZVtLXT4gfVxyXG5cclxuXHJcblxyXG4iLCLvu79pbXBvcnQge0lDb25zdGFudCwgSUdlbmVyaWNQcm94eSwgSVJhd1Byb3h5fSBmcm9tIFwiLi9Db3JlVHlwZXNcIjtcclxuaW1wb3J0IHtDc3NBc3BlY3RSYXRpbywgQ3NzTnVtYmVyLCBDc3NMZW5ndGgsIENzc1Jlc29sdXRpb259IGZyb20gXCIuL051bWVyaWNUeXBlc1wiO1xyXG5pbXBvcnQge1N0eWxlc2V0fSBmcm9tIFwiLi9TdHlsZXNldHNcIjtcclxuXHJcblxyXG5cclxuLyoqIFBvc3NpYmxlIG1lZGlhIHR5cGVzICovXHJcbmV4cG9ydCB0eXBlIE1lZGlhVHlwZSA9IFwiYWxsXCIgfCBcInByaW50XCIgfCBcInNjcmVlblwiIHwgXCJzcGVlY2hcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgdGhhdCBleHRlbmRzIHRoZSBnaXZlbiB0eXBlIHdpdGggdGhlIGZvbGxvd2luZyB0eXBlczpcclxuICogLSBbW0lDb25zdGFudF1dIGludGVyZmFjZSB0aGF0IGFsbG93cyB1c2luZyBhIGNvbnN0YW50IHZhbHVlLlxyXG4gKiAtIFtbSVJhd1Byb3h5XV0gaW50ZXJmYWNlIHRoYXQgYWxsb3dzIHNwZWNpZnlpbmcgcmF3IHN0cmluZyB2YWx1ZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEV4dGVuZGVkRmVhdHVyZTxUPiA9IFQgfCBJQ29uc3RhbnQ8VD4gfCBJUmF3UHJveHkgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgYSBtZWRpYSBmZWF0dXJlIHRoYXQgY2FuIGJlIHNwZWNpZmllZCBlaXRoZXIgYXMgYSBzaW5nbGUgdmFsdWUgb3IgYXMgYSByYW5nZSBiZXR3ZWVuXHJcbiAqIHR3byB2YWx1ZXMgb2YgdGhlIGdpdmVuIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPbmVPclJhbmdlPFQ+ID0gVCB8IFtFeHRlbmRlZEZlYXR1cmU8VD4sIEV4dGVuZGVkRmVhdHVyZTxUPj9dO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyB0aGUgdHlwZSBvZiBvYmplY3RzIHRoYXQgY2FuIGJlIGFzc2lnbmVkIHRvIHRoZSBzdHlsZSBwcm9wZXJ0eSBvZiBIVE1MXHJcbiAqIGFuZCBTVkcgZWxlbWVudHMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElNZWRpYUZlYXR1cmVzZXRcclxue1xyXG4gICAgYW55SG92ZXI/OiBcIm5vbmVcIiB8IFwiaG92ZXJcIjtcclxuICAgIGFueVBvaW50ZXI/OiBcIm5vbmVcIiB8IFwiY29hcnNlXCIgfCBcImZpbmVcIjtcclxuICAgIGFzcGVjdFJhdGlvPzogT25lT3JSYW5nZTxDc3NBc3BlY3RSYXRpbz47XHJcbiAgICBtaW5Bc3BlY3RSYXRpbz86IENzc0FzcGVjdFJhdGlvO1xyXG4gICAgbWF4QXNwZWN0UmF0aW8/OiBDc3NBc3BlY3RSYXRpbztcclxuICAgIGNvbG9yPzogT25lT3JSYW5nZTxDc3NOdW1iZXI+O1xyXG4gICAgbWluQ29sb3I/OiBDc3NOdW1iZXI7XHJcbiAgICBtYXhDb2xvcj86IENzc051bWJlcjtcclxuICAgIGNvbG9yR2FtdXQ/OiBcInNyZ2JcIiB8IFwicDNcIiB8IFwicmVjMjAyMFwiO1xyXG4gICAgY29sb3JJbmRleD86IE9uZU9yUmFuZ2U8Q3NzTnVtYmVyPjtcclxuICAgIG1pbkNvbG9ySW5kZXg/OiBDc3NOdW1iZXI7XHJcbiAgICBtYXhDb2xvckluZGV4PzogQ3NzTnVtYmVyO1xyXG4gICAgZGlzcGxheU1vZGU/OiBcImZ1bGxzY3JlZW5cIiB8IFwic3RhbmRhbG9uZVwiIHwgXCJtaW5pbWFsLXVpXCIgfCBcImJyb3dzZXJcIjtcclxuICAgIGZvcmNlZENvbG9ycz86IFwibm9uZVwiIHwgXCJhY3RpdmVcIjtcclxuICAgIGdyaWQ/OiBib29sZWFuO1xyXG4gICAgaGVpZ2h0PzogT25lT3JSYW5nZTxDc3NMZW5ndGg+O1xyXG4gICAgbWluSGVpZ2h0PzogQ3NzTGVuZ3RoO1xyXG4gICAgbWF4SGVpZ2h0PzogQ3NzTGVuZ3RoO1xyXG4gICAgaG92ZXI/OiBcIm5vbmVcIiB8IFwiaG92ZXJcIjtcclxuICAgIGludmVydGVkQ29sb3JzPzogXCJub25lXCIgfCBcImludmVydGVkXCI7XHJcbiAgICBsaWdodExldmVsPzogXCJkaW1cIiB8IFwibm9ybWFsXCIgfCBcIndhc2hlZFwiO1xyXG4gICAgbW9ub2Nocm9tZT86IE9uZU9yUmFuZ2U8Q3NzTnVtYmVyPjtcclxuICAgIG1pbk1vbm9jaHJvbWU/OiBDc3NOdW1iZXI7XHJcbiAgICBtYXhNb25vY2hyb21lPzogQ3NzTnVtYmVyO1xyXG4gICAgb3JpZW50YXRpb24/OiBcInBvcnRyYWl0XCIgfCBcImxhbmRzY2FwZVwiO1xyXG4gICAgb3ZlcmZsb3dCbG9jaz86IFwibm9uZVwiIHwgXCJzY3JvbGxcIiB8IFwib3B0aW9uYWwtcGFnZWRcIiB8IFwicGFnZWRcIjtcclxuICAgIG92ZXJmbG93SW5saW5lPzogXCJub25lXCIgfCBcInNjcm9sbFwiO1xyXG4gICAgcG9pbnRlcj86IFwibm9uZVwiIHwgXCJjb2Fyc1wiIHwgXCJmaW5lXCI7XHJcbiAgICBwcmVmZXJzQ29sb3JTY2hlbWU/OiBcIm5vLXByZWZlcmVuY2VcIiB8IFwibGlnaHRcIiB8IFwiZGFya1wiO1xyXG4gICAgcHJlZmVyc0NvbnRyYXN0PzogXCJuby1wcmVmZXJlbmNlXCIgfCBcImhpZ2hcIiB8IFwibG93XCI7XHJcbiAgICBwcmVmZXJzUmVkdWNlZE1vdGlvbj86IFwibm8tcHJlZmVyZW5jZVwiIHwgXCJyZWR1Y2VcIjtcclxuICAgIHByZWZlcnNSZWR1Y2VkVHJhbnNwYXJlbmN5PzogXCJuby1wcmVmZXJlbmNlXCIgfCBcInJlZHVjZVwiO1xyXG4gICAgcmVzb2x1dGlvbj86IE9uZU9yUmFuZ2U8Q3NzUmVzb2x1dGlvbj47XHJcbiAgICBtaW5SZXNvbHV0aW9uPzogQ3NzUmVzb2x1dGlvbjtcclxuICAgIG1heFJlc29sdXRpb24/OiBDc3NSZXNvbHV0aW9uO1xyXG4gICAgc2Nhbj86IFwiaW50ZXJsYWNlXCIgfCBcInByb2dyZXNzaXZlXCI7XHJcbiAgICBzY3JpcHRpbmc/OiBcIm5vbmVcIiB8IFwiaW5pdGlhbC1vbmx5XCIgfCBcImVuYWJsZWRcIjtcclxuICAgIHVwZGF0ZT86IFwibm9uZVwiIHwgXCJzbG93XCIgfCBcImZhc3RcIjtcclxuICAgIHdpZHRoPzogT25lT3JSYW5nZTxDc3NMZW5ndGg+O1xyXG4gICAgbWluV2lkdGg/OiBDc3NMZW5ndGg7XHJcbiAgICBtYXhXaWR0aD86IENzc0xlbmd0aDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBFeHRlbmRlZE1lZGlhRmVhdHVyZXNldGAgdHlwZSBtYXBzIGFsbCBtZWRpYSBmZWF0dXJlcyBkZWZpbmVkIGluIHRoZSBbW0lNZWRpYUZlYXR1cmVzZXRdXVxyXG4gKiBpbnRlcmZhY2UgdG8gdGhlIFwiZXh0ZW5kZWRcIiB2ZXJzaW9ucyBvZiB0aGVpciB0eXBlcy4gVGhlc2UgZXh0ZW5kZWQgdHlwZXMgYXJlIGRlZmluZWQgYnlcclxuICogYWxsb3dpbmcgW1tTdHJpbmdQcm94eV1dIGFuZCBbW0lDb25zdGFudF1dIGludGVyZmFjZXMgdG8gdGhlIHR5cGUgdGhhdCBpcyBkZWZpbmVkIGluIHRoZVxyXG4gKiBbW0lNZWRpYUZlYXR1cmVzZXRdXSBpbnRlcmZhY2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFeHRlbmRlZE1lZGlhRmVhdHVyZXNldCA9IHsgW0sgaW4ga2V5b2YgSU1lZGlhRmVhdHVyZXNldF0/OiBFeHRlbmRlZEZlYXR1cmU8SU1lZGlhRmVhdHVyZXNldFtLXT4gfVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBtZWRpYSBxdWVyeSByZXR1cm5lZCBmcm9tIHRoZSBbW21lZGlhXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElNZWRpYVF1ZXJ5UHJveHkgZXh0ZW5kcyBJR2VuZXJpY1Byb3h5PFwibWVkaWEtcXVlcnlcIj4ge31cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgcmVwcmVzZW50aW5nIGEgc2luZ2xlIHF1ZXJ5IGFzIHBhcnQgb2YgdGhlYEBtZWRpYWAgcnVsZS4gVGhlIGZlYXR1cmVzIHdpdGhpbiBlYWNoXHJcbiAqIGZlYXR1cmUtc2V0IGFyZSBjb21iaW5lZCB3aXRoIHRoZSBcImFuZFwiIG9wZXJhdG9yLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGU6KipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gY3NzOiBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpIGFuZCAobWF4LWhlaWdodDogNDAwcHgpIHsuLi59XHJcbiAqICAgICBpZk5hcnJvd0FuZFNob3J0ID0gdGhpcy4kbWVkaWEoIHttYXhXaWR0aDogNDAwLCBtYXhIZWlnaHQ6IDQwMH0sIC4uLilcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIE1lZGlhUXVlcnkgPSBzdHJpbmcgfCBFeHRlbmRlZE1lZGlhRmVhdHVyZXNldCB8IElNZWRpYVF1ZXJ5UHJveHk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHJlcHJlc2VudGluZyBvbmUgb3IgbW9yZSBxdWVyaWVzIGFzIHBhcnQgb2YgdGhlIGBAbWVkaWFgIHJ1bGUuIFdoaWxlIG11bHRpcGxlIHF1ZXJpZXMgaW5cclxuICogYW4gYXJyYXkgYXJlIGNvbWJpbmVkIHdpdGggdGhlIFwiLFwiIG9wZXJhdG9yLCB0aGUgc3R5bGVzIHdpdGhpbiBlYWNoIGZlYXR1cmUtc2V0IGFyZSBjb21iaW5lZCB3aXRoXHJcbiAqIHRoZSBcImFuZFwiIG9wZXJhdG9yLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGU6KipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gY3NzOiBAbWVkaWEgKG1pbi13aWR0aDogMTAwMHB4KSwgKG1pbi1oZWlnaHQ6IDEwMDBweCkgey4uLn1cclxuICogICAgIGlmV2lkZU9yVGFsbCA9IHRoaXMuJG1lZGlhKCBbe21pbldpZHRoOiAxMDAwfSwge21pbkhlaWdodDogMTAwMH1dLCAuLi4pXHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWRpYVN0YXRlbWVudCA9IE1lZGlhUXVlcnkgfCBNZWRpYVF1ZXJ5W107XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBTdXBwb3J0cyBxdWVyeSB0eXBlcy5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBzdXBwb3J0cyBxdWVyeSByZXR1cm5lZCBmcm9tIHRoZSBbW3N1cHBvcnRzXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTdXBwb3J0c1F1ZXJ5UHJveHkgZXh0ZW5kcyBJR2VuZXJpY1Byb3h5PFwic3VwcG9ydHMtcXVlcnlcIj4ge31cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgcmVwcmVzZW50aW5nIGEgc2luZ2xlIHNldCBvZiBzdHlsZXMgYXMgcGFydCBvZiB0aGUgYEBzdXBwb3J0c2AgcnVsZXMuIFRoZSBzdHlsZXMgaW4gdGhlXHJcbiAqIHN0eWxlc2V0IGFyZSBjb21iaW5lZCB3aXRoIHRoZSBcImFuZFwiIG9wZXJhdG9yLlxyXG4gKi9cclxuIGV4cG9ydCB0eXBlIFN1cHBvcnRzUXVlcnkgPSBzdHJpbmcgfCBTdHlsZXNldCB8IElTdXBwb3J0c1F1ZXJ5UHJveHk7XHJcblxyXG5cclxuXHJcbiAvKipcclxuICAqIFR5cGUgcmVwcmVzZW50aW5nIG9uZSBvciBtb3JlIHF1ZXJpZXMgYXMgcGFydCBvZiB0aGUgYEBzdXBwb3J0c2AgcnVsZS4gV2hpbGUgbXVsdGlwbGUgcXVlcmllcyBpblxyXG4gICogYW4gYXJyYXkgYXJlIGNvbWJpbmVkIHdpdGggdGhlIFwib3JcIiBvcGVyYXRvciwgdGhlIHN0eWxlcyB3aXRoaW4gZWFjaCBzdHlsZXNldCBhcmUgY29tYmluZWQgd2l0aFxyXG4gICogdGhlIFwiYW5kXCIgb3BlcmF0b3IuXHJcbiAgKi9cclxuIGV4cG9ydCB0eXBlIFN1cHBvcnRzU3RhdGVtZW50ID0gU3VwcG9ydHNRdWVyeSB8IFN1cHBvcnRzUXVlcnlbXTtcclxuXHJcblxyXG5cclxuIiwi77u/aW1wb3J0IHtFeHRlbmRlZCwgSUdlbmVyaWNQcm94eX0gZnJvbSBcIi4vQ29yZVR5cGVzXCJcclxuaW1wb3J0IHtcclxuICAgIElMZW5ndGhQcm94eSwgSVBlcmNlbnRQcm94eSwgSUFuZ2xlUHJveHksIElUaW1lUHJveHksIElSZXNvbHV0aW9uUHJveHksIElGcmVxdWVuY3lQcm94eSxcclxuICAgIENzc0xlbmd0aCwgSUZpdENvbnRlbnRQcm94eSwgQ3NzTnVtYmVyLCBJQXNwZWN0UmF0aW9Qcm94eSwgSU51bWJlck1hdGgsIElQZXJjZW50TWF0aCxcclxuICAgIElMZW5ndGhNYXRoLCBJQW5nbGVNYXRoLCBJVGltZU1hdGgsIElSZXNvbHV0aW9uTWF0aCwgSUZyZXF1ZW5jeU1hdGgsIElSZWN0UHJveHksXHJcbn0gZnJvbSBcIi4vTnVtZXJpY1R5cGVzXCJcclxuaW1wb3J0IHtOdW1iZXJNYXRoLCBQZXJjZW50TWF0aCwgTGVuZ3RoTWF0aCwgQW5nbGVNYXRoLCBUaW1lTWF0aCwgUmVzb2x1dGlvbk1hdGgsIEZyZXF1ZW5jeU1hdGh9IGZyb20gXCIuLi9pbXBsL051bWVyaWNJbXBsXCJcclxuaW1wb3J0IHtmMnMsIFdLRiwgYTJzfSBmcm9tIFwiLi4vaW1wbC9VdGlsc1wiO1xyXG5cclxuXHJcblxyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIGZvciB1bml0cyBjb252ZXJzaW9uXHJcbmNvbnN0IHRvVW5pdHNQcm94eSA9ICggbjogbnVtYmVyLCB1bml0OiBzdHJpbmcpOiBJR2VuZXJpY1Byb3h5ID0+ICgpID0+IG4gKyB1bml0O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBOdW1gIG9iamVjdCBjb250YWlucyBtZXRob2RzIHRoYXQgaW1wbGVtZW50IENTUyBtYXRoZW1hdGljIGZ1bmN0aW9ucyBvbiB0aGUgYDxudW1iZXI+YFxyXG4gKiBDU1MgdHlwZS4gSXQgaW1wbGVtZW50cyB0aGUgW1tJTnVtZXJpY01hdGhdXSBpbnRlcmZhY2UgYW5kIHRodXMgYWxsb3dzIHVzaW5nIHRoZSBtZXRob2RzIHN1Y2hcclxuICogYXMgW1ttaW5dXSwgW1ttYXhdXSwgW1tjYWxjXV0gYW5kIFtbY2xhbXBdXSB3aXRoIHBhcmFtZXRlcnMgb2YgdGhlIFtbQ3NzTnVtYmVyXV0gdHlwZS5cclxuICpcclxuICogKipFeGFtcGxlOioqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIGRlZmluZSBjdXN0b20gQ1NTIHByb3BlcnR5IC0gbm90ZSB0aGF0IGl0cyB2YWx1ZSBjYW4gYmUgY2hhbmdlZFxyXG4gKiAgICAgLy8gcHJvZ3JhbW1hdGljYWxseVxyXG4gKiAgICAgY29sdW1uUXR5ID0gdGhpcy4kdmFyKCBcIkNzc051bWJlclwiLCAzKVxyXG4gKlxyXG4gKiAgICAgLy8gbWF4KCA1LCB2YXIoLS1jb2x1bW5RdHkpKVxyXG4gKiAgICAgY2xzMSA9IHRoaXMuJGNsYXNzKHtcclxuICogICAgICAgICBjb2x1bW5zOiBjc3MuTnVtLm1heCggNSwgdGhpcy5jb2x1bW5RdHkpXHJcbiAqICAgICB9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE51bTogSU51bWJlck1hdGggPSBOdW1iZXJNYXRoO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBQZXJjZW50YCBvYmplY3QgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlXHJcbiAqIGA8cGVyY2VudGFnZT5gIENTUyB0eXBlLiBJdCBpbXBsZW1lbnRzIHRoZSBbW0lOdW1lcmljTWF0aF1dIGludGVyZmFjZSBhbmQgdGh1cyBhbGxvd3MgdXNpbmdcclxuICogdGhlIG1ldGhvZHMgc3VjaCBhcyBbW21pbl1dLCBbW21heF1dLCBbW2NhbGNdXSBhbmQgW1tjbGFtcF1dIHdpdGggcGFyYW1ldGVycyBvZiB0aGVcclxuICogW1tDc3NQZXJjZW50XV0gdHlwZS5cclxuICpcclxuICogKipFeGFtcGxlOioqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIGluaXRpYWxab29tID0gY3NzLnZhciggXCJDc3NQZXJjZW50XCIsIDEuNSlcclxuICpcclxuICogICAgIC8vIG1pbiggMC41LCB2YXIoLS1pbml0aWFsWm9vbSkpXHJcbiAqICAgICBjbHMxID0gdGhpcy4kY2xhc3Moe1xyXG4gKiAgICAgICAgIHpvb206IGNzcy5QZXJjZW50Lm1pbiggMC41LCB0aGlzLmluaXRpYWxab29tKVxyXG4gKiAgICAgfSlcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBQZXJjZW50OiBJUGVyY2VudE1hdGggPSBQZXJjZW50TWF0aDtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIHBlcmNlbnQgdmFsdWUgYnkgYXBwZW5maW5nIHRoZSBgXCIlXCJgIHNpZ24gdG8gdGhlIGdpdmVuIG51bWJlci4gVGhpcyBmdW5jdGlvbiBzaG91bGQgYmVcclxuICogdXNlZCB3aGVuZXZlciBhIGA8cGVyY2VudGFnZT5gIENTUyB0eXBlIGlzIHVzZWQgZm9yIGEgc3R5bGUgcHJvcGVydHkgb3IgdmFsdWUuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHBlcmNlbnQgPSAobjogbnVtYmVyKTogSVBlcmNlbnRQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwiJVwiKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgTGVuYCBvYmplY3QgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlXHJcbiAqIGA8bGVuZ3RoPiB8IDxwZXJjZW50YWdlPmAgQ1NTIHR5cGUuIEl0IGltcGxlbWVudHMgdGhlIFtbSU51bWVyaWNNYXRoXV0gaW50ZXJmYWNlIGFuZCB0aHVzXHJcbiAqIGFsbG93cyB1c2luZyB0aGUgbWV0aG9kcyBzdWNoIGFzIFtbbWluXV0sIFtbbWF4XV0sIFtbY2FsY11dIGFuZCBbW2NsYW1wXV0gd2l0aCBwYXJhbWV0ZXJzXHJcbiAqIG9mIHRoZSBbW0Nzc0xlbmd0aF1dIHR5cGUuXHJcbiAqXHJcbiAqICoqRXhhbXBsZToqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICBkZWZhdWx0UGFkZGluZyA9IGNzcy52YXIoIFwiQ3NzTGVuZ3RoXCIsIDgpXHJcbiAqXHJcbiAqICAgICAvLyBjYWxjKCAyMDBweCAtICgyICogdmFyKC0tZGVmYXVsdFBhZGRpbmcpKSlcclxuICogICAgIGNsczEgPSB0aGlzLiRjbGFzcyh7XHJcbiAqICAgICAgICAgd2lkdGg6IGNzcy5MZW4uY2FsY2AgMjAwcHggLSAoMiAqICR7dGhpcy5kZWZhdWx0UGFkZGluZ30pYFxyXG4gKiAgICAgfSlcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBMZW46IElMZW5ndGhNYXRoID0gTGVuZ3RoTWF0aDtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiBxdWFydGVycyBvZiBhbiBpbmNoLlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBRID0gKG46IG51bWJlcik6IElMZW5ndGhQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwiUVwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiBjaCB1bml0cywgd2hpY2ggaXMgZXF1YWwgdG8gdGhlIHVzZWQgYWR2YW5jZSBtZWFzdXJlIG9mIHRoZSBg4oCcMOKAnWAgKFpFUk8sXHJcbiAqIFUrMDAzMCkgZ2x5cGggZm91bmQgaW4gdGhlIGZvbnQgdXNlZCB0byByZW5kZXIgaXQuIChUaGUgYWR2YW5jZSBtZWFzdXJlIG9mIGEgZ2x5cGggaXMgaXRzXHJcbiAqIGFkdmFuY2Ugd2lkdGggb3IgaGVpZ2h0LCB3aGljaGV2ZXIgaXMgaW4gdGhlIGlubGluZSBheGlzIG9mIHRoZSBlbGVtZW50LilcclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2ggPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJjaFwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiBjYW50aW1ldGVycy5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY20gPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJjbVwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiBjYWxjdWxhdGVkIGZvbnQtc2l6ZXMgb2YgdGhlIGVsZW1lbnQuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVtID0gKG46IG51bWJlcik6IElMZW5ndGhQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwiZW1cIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBsZW5ndGggdmFsdWUgaW4gaGVpZ2h0cyBvZiBsb3dlcmNhc2UgbGV0dGVyICd4JyBpbiB0aGUgZm9udC5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZXggPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJleFwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiBpYyB1bml0cy5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaWMgPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJpY1wiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiBpbmNoZXMuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGluY2ggPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJpblwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiBsaW5lLWhlaWdodHMgb2YgdGhlIGVsZW1lbnQuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGxoID0gKG46IG51bWJlcik6IElMZW5ndGhQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwibGhcIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBsZW5ndGggdmFsdWUgaW4gbWlsbGltZXRlcnMuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG1tID0gKG46IG51bWJlcik6IElMZW5ndGhQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwibW1cIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBsZW5ndGggdmFsdWUgaW4gcGljYXMuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHBjID0gKG46IG51bWJlcik6IElMZW5ndGhQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwicGNcIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBsZW5ndGggdmFsdWUgaW4gcG9pbnRzLlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBwdCA9IChuOiBudW1iZXIpOiBJTGVuZ3RoUHJveHkgPT4gdG9Vbml0c1Byb3h5KCBuLCBcInB0XCIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgbGVuZ3RoIHZhbHVlIGluIHBpeGVscy5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcHggPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJweFwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiAxJSBvZiB0aGUgc2l6ZSBvZiB0aGUgaW5pdGlhbCBjb250YWluaW5nIGJsb2NrLCBpbiB0aGUgZGlyZWN0aW9uXHJcbiAqIG9mIHRoZSByb290IGVsZW1lbnTigJlzIGJsb2NrIGF4aXMuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHZiID0gKG46IG51bWJlcik6IElMZW5ndGhQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwidmJcIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBsZW5ndGggdmFsdWUgaW4gMSUgb2YgdGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQncyBpbml0aWFsIGNvbnRhaW5pbmcgYmxvY2suXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHZoID0gKG46IG51bWJlcik6IElMZW5ndGhQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwidmhcIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBsZW5ndGggdmFsdWUgaW4gMSUgb2YgdGhlIHNpemUgb2YgdGhlIGluaXRpYWwgY29udGFpbmluZyBibG9jaywgaW4gdGhlIGRpcmVjdGlvblxyXG4gKiBvZiB0aGUgcm9vdCBlbGVtZW504oCZcyBpbmxpbmUgYXhpcy5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdmkgPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJ2aVwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGxlbmd0aCB2YWx1ZSBpbiAxJSBvZiB0aGUgd2lkdGggb2YgdGhlIHZpZXdwb3J0J3MgaW5pdGlhbCBjb250YWluaW5nIGJsb2NrLlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCB2dyA9IChuOiBudW1iZXIpOiBJTGVuZ3RoUHJveHkgPT4gdG9Vbml0c1Byb3h5KCBuLCBcInZ3XCIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgbGVuZ3RoIHZhbHVlIGluIGZvbnQtc2l6ZXMgb2YgdGhlIHJvb3QgZWxlbWVudCAoPGh0bWw+KS5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmVtID0gKG46IG51bWJlcik6IElMZW5ndGhQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwicmVtXCIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgbGVuZ3RoIHZhbHVlIGluIGxpbmUtaGVpZ2h0cyBvZiB0aGUgcm9vdCBlbGVtZW50ICg8aHRtbD4pLlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBybGggPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJybGhcIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBsZW5ndGggdmFsdWUgaW4gdGhlIHVuaXRzIHdoaWNoIGFyZSBhIHNtYWxsZXIgdmFsdWUgYmV0d2VlbiB2dyBhbmQgdmguXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHZtaW4gPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJ2bWluXCIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgbGVuZ3RoIHZhbHVlIGluIHRoZSB1bml0cyB3aGljaCBhcmUgYSBsYXJnZXIgdmFsdWUgYmV0d2VlbiB2dyBhbmQgdmguXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHZtYXggPSAobjogbnVtYmVyKTogSUxlbmd0aFByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJ2bWF4XCIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgbGVuZ3RoIHZhbHVlIGZvciBmbGV4LlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBmciA9IChuOiBudW1iZXIpOiBJTGVuZ3RoUHJveHkgPT4gdG9Vbml0c1Byb3h5KCBuLCBcImZyXCIpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBBbmdsZWAgb2JqZWN0IGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQ1NTIG1hdGhlbWF0aWMgZnVuY3Rpb25zIG9uIHRoZVxyXG4gKiBgPGFuZ2xlPiB8IDxwZXJjZW50YWdlPmAgQ1NTIHR5cGUuIEl0IGltcGxlbWVudHMgdGhlIFtbSU51bWVyaWNNYXRoXV0gaW50ZXJmYWNlIGFuZCB0aHVzXHJcbiAqIGFsbG93cyB1c2luZyB0aGUgbWV0aG9kcyBzdWNoIGFzIFtbbWluXV0sIFtbbWF4XV0sIFtbY2FsY11dIGFuZCBbW2NsYW1wXV0gd2l0aCBwYXJhbWV0ZXJzXHJcbiAqIG9mIHRoZSBbW0Nzc0FuZ2xlXV0gdHlwZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBbmdsZTogSUFuZ2xlTWF0aCA9IEFuZ2xlTWF0aDtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuZ2xlIHZhbHVlIGluIGRlZ3JlZXMuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGRlZyA9IChuOiBudW1iZXIpOiBJQW5nbGVQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwiZGVnXCIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW5nbGUgdmFsdWUgaW4gcmFkaWFucy5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmFkID0gKG46IG51bWJlcik6IElBbmdsZVByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJyYWRcIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhbmdsZSB2YWx1ZSBpbiBncmFkaWFucy5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ3JhZCA9IChuOiBudW1iZXIpOiBJQW5nbGVQcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwiZ3JhZFwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuZ2xlIHZhbHVlIGluIHR1cm5zLlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCB0dXJuID0gKG46IG51bWJlcik6IElBbmdsZVByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJ0dXJuXCIpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBUaW1lYCBvYmplY3QgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlIGA8dGltZT5gXHJcbiAqIENTUyB0eXBlLiBJdCBpbXBsZW1lbnRzIHRoZSBbW0lOdW1lcmljTWF0aF1dIGludGVyZmFjZSBhbmQgdGh1cyBhbGxvd3MgdXNpbmcgdGhlIG1ldGhvZHMgc3VjaFxyXG4gKiBhcyBbW21pbl1dLCBbW21heF1dLCBbW2NhbGNdXSBhbmQgW1tjbGFtcF1dIHdpdGggcGFyYW1ldGVycyBvZiB0aGUgW1tDc3NUaW1lXV0gdHlwZS5cclxuICovXHJcbiBleHBvcnQgY29uc3QgVGltZTogSVRpbWVNYXRoID0gVGltZU1hdGg7XHJcblxyXG4gLyoqXHJcbiAqIENyZWF0ZXMgdGltZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG1zID0gKG46IG51bWJlcik6IElUaW1lUHJveHkgPT4gdG9Vbml0c1Byb3h5KCBuLCBcIm1zXCIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgdGltZSB2YWx1ZSBpbiBzZWNvbmRzLlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzID0gKG46IG51bWJlcik6IElUaW1lUHJveHkgPT4gdG9Vbml0c1Byb3h5KCBuLCBcInNcIik7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYFJlc29sdXRpb25gIG9iamVjdCBjb250YWlucyBtZXRob2RzIHRoYXQgaW1wbGVtZW50IENTUyBtYXRoZW1hdGljIGZ1bmN0aW9ucyBvbiB0aGVcclxuICogYDxyZXNvbHV0aW9uPmAgQ1NTIHR5cGUuIEl0IGltcGxlbWVudHMgdGhlIFtbSU51bWVyaWNNYXRoXV0gaW50ZXJmYWNlIGFuZCB0aHVzIGFsbG93cyB1c2luZ1xyXG4gKiB0aGUgbWV0aG9kcyBzdWNoIGFzIFtbbWluXV0sIFtbbWF4XV0sIFtbY2FsY11dIGFuZCBbW2NsYW1wXV0gd2l0aCBwYXJhbWV0ZXJzIG9mIHRoZVxyXG4gKiBbW0Nzc1Jlc29sdXRpb25dXSB0eXBlLlxyXG4gKi9cclxuIGV4cG9ydCBjb25zdCBSZXNvbHV0aW9uOiBJUmVzb2x1dGlvbk1hdGggPSBSZXNvbHV0aW9uTWF0aDtcclxuXHJcbiAvKipcclxuICogQ3JlYXRlcyByZXNvbHV0aW9uIHZhbHVlIGluIERQSS5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZHBpID0gKG46IG51bWJlcik6IElSZXNvbHV0aW9uUHJveHkgPT4gdG9Vbml0c1Byb3h5KCBuLCBcImRwaVwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIHJlc29sdXRpb24gdmFsdWUgaW4gRFBDTS5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZHBjbSA9IChuOiBudW1iZXIpOiBJUmVzb2x1dGlvblByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJkcGNtXCIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgcmVzb2x1dGlvbiB2YWx1ZSBpbiBEUFBYLlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBkcHB4ID0gKG46IG51bWJlcik6IElSZXNvbHV0aW9uUHJveHkgPT4gdG9Vbml0c1Byb3h5KCBuLCBcImRwcHhcIik7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyByZXNvbHV0aW9uIHZhbHVlIGluIFguXHJcbiAqIEBjYXRlZ29yeSBVbml0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHggPSAobjogbnVtYmVyKTogSVJlc29sdXRpb25Qcm94eSA9PiB0b1VuaXRzUHJveHkoIG4sIFwieFwiKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgRnJlcXVlbmN5YCBvYmplY3QgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlIGA8ZnJlcXVlbmN5PmBcclxuICogQ1NTIHR5cGUuIEl0IGltcGxlbWVudHMgdGhlIFtbSU51bWVyaWNNYXRoXV0gaW50ZXJmYWNlIGFuZCB0aHVzIGFsbG93cyB1c2luZyB0aGUgbWV0aG9kcyBzdWNoXHJcbiAqIGFzIFtbbWluXV0sIFtbbWF4XV0sIFtbY2FsY11dIGFuZCBbW2NsYW1wXV0gd2l0aCBwYXJhbWV0ZXJzIG9mIHRoZSBbW0Nzc0ZyZXF1ZW5jeV1dIHR5cGUuXHJcbiAqL1xyXG4gZXhwb3J0IGNvbnN0IEZyZXF1ZW5jeTogSUZyZXF1ZW5jeU1hdGggPSBGcmVxdWVuY3lNYXRoO1xyXG5cclxuIC8qKlxyXG4gKiBDcmVhdGVzIGZyZXF1ZW5jeSB2YWx1ZSBpbiBIZXJ0ei5cclxuICogQGNhdGVnb3J5IFVuaXRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaHogPSAobjogbnVtYmVyKTogSUZyZXF1ZW5jeVByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJoelwiKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGZyZXF1ZW5jeSB2YWx1ZSBpbiBLaWxvLUhlcnR6LlxyXG4gKiBAY2F0ZWdvcnkgVW5pdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBraHogPSAobjogbnVtYmVyKTogSUZyZXF1ZW5jeVByb3h5ID0+IHRvVW5pdHNQcm94eSggbiwgXCJraHpcIik7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIFtbSUZpdENvbnRlbnRQcm94eV1dIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYGZpdC1jb250ZW50KClgIENTUyBmdW5jdGlvblxyXG4gKiAoW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZpdC1jb250ZW50KCkpKS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBmaXRDb250ZW50ID0gKHNpemU6IEV4dGVuZGVkPENzc0xlbmd0aD4pOiBJRml0Q29udGVudFByb3h5ID0+XHJcbiAgICAoKSA9PiBmMnMoIFwiZml0LWNvbnRlbnRcIiwgW1tzaXplLCBXS0YuTGVuZ3RoXV0pO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBbW0lBc3BlY3RSYXRpb1Byb3h5XV0gZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgPHJhdGlvPmAgQ1NTIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmF0aW8gPSAodzogQ3NzTnVtYmVyLCBoPzogQ3NzTnVtYmVyKTogSUFzcGVjdFJhdGlvUHJveHkgPT4gKCkgPT4gW3csaF0uam9pbihcIi9cIik7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIFtbSVJlY3RQcm94eV1dIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHJlY3QoKWAgQ1NTIGZ1bmN0aW9uIHVzZWQgZm9yIHRoZSBgY2xpcGBcclxuICogc3R5bGUgcHJvcGVydHkuXHJcbiAqIEBkZXByZWNhdGVkIFRoZSBDU1MgYGNsaXBgIHByb3BlcnR5IGFuZCBgcmVjdCgpYCBmdW5jdGlvbiBhcmUgZGVwcmVjYXRlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCByZWN0ID0gKHRvcDogQ3NzTGVuZ3RoLCByaWdodDogQ3NzTGVuZ3RoLCBib3R0b206IENzc0xlbmd0aCwgbGVmdDogQ3NzTGVuZ3RoKTogSVJlY3RQcm94eSA9PlxyXG4gICAgKCkgPT4gYHJlY3QoJHthMnMoIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLCBXS0YuTGVuZ3RoLCBcIixcIil9KWA7XHJcblxyXG5cclxuXHJcbiIsIu+7v2ltcG9ydCB7RXh0ZW5kZWQsIElHZW5lcmljUHJveHksIE9uZU9yQm94LCBPbmVPclBhaXJ9IGZyb20gXCIuL0NvcmVUeXBlc1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBJTnVtYmVyQmFzZU1hdGhgIGludGVyZmFjZSBjb250YWlucyBtZXRob2RzIHRoYXQgaW1wbGVtZW50IENTUyBtYXRoZW1hdGljYWwgZnVuY3Rpb25zIG9uIHRoZVxyXG4gKiBudW1lcmljIENTUyB0eXBlcy4gVGhpcyBpbnRlcmZhY2UgaXMgZXh0ZW5kZWQgYnkgZGltZW5zaW9uLXNwZWNpZmljIGludGVyZmFjZXMgc3VjaCBhc1xyXG4gKiBbW0lOdW1iZXJNYXRoXV0sIFtbSUxlbmd0aE1hdGhdXSwgW1tJQW5nbGVNYXRoXV0sIGV0Yy5cclxuICpcclxuICogQHR5cGVwYXJhbSBUIFR5cGUgb2YgdmFsdWVzIHBhcnRpY2lwYXRpbmcgaW4gdGhlIG1hdGhlbWF0aWNhbCBmdW5jdGlvbnMuIEZvciBleGFtcGxlLCB0aGVcclxuICogW1tJTGVuZ3RoTWF0aF1dIGludGVyZmFjZSBzcGVjaWZpZXMgaXQgYXMgW1tDc3NMZW5ndGhdXS5cclxuICogQHR5cGVwYXJhbSBVIFR5cGUgdGhhdCBjb250YWlucyBzdHJpbmcgbGl0ZXJhbHMgZGVmaW5pbmcgdW5pdHMgYXZhaWxhYmxlIGZvciB0aGUgZ2l2ZW4gbnVtZXJpY1xyXG4gKiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTnVtZXJpY01hdGg8VCwgVSBleHRlbmRzIHN0cmluZz5cclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHZhbHVlIGZyb20gdGhlIGdpdmVuIG51bWJlciBhbmQgdW5pdC4gVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgdG8gZHluYW1pY2FsbHlcclxuICAgICAqIGNvbnN0cnVjdCB0aGUgbmVlZGVkIGRpbWVuc2lvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbiBOdW1lcmljIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIHVuaXQgVW5pdCB0byBhcHBlbmQgdG8gdGhlIG51bWVyaWMgdmFsdWUuXHJcbiAgICAgKiBAcmV0dXJucyBGdW5jdGlvbiBpbXBsZW1lbnRpbmcgdGhlIGBJR2VuZXJpY1Byb3h5PFU+YCBjYWxsYWJsZSBpbnRlcmZhY2UuIFRoaXMgYWxsb3dzIHRoZVxyXG4gICAgICogcmVzdWx0IG9mIHRoZSBgdW5pdHNgIG1ldGhvZCB0byBiZSBhc3NpZ25lZCBvbmx5IHRvIHRoZSBwcm9wZXJ0aWVzIG9mIGNvbXBhdGlibGUgbnVtZXJpY1xyXG4gICAgICogdHlwZS5cclxuICAgICAqL1xyXG4gICAgdW5pdHMoIG46IG51bWJlciwgdW5pdDogVSk6IElHZW5lcmljUHJveHk8VT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHByb3BlcnR5IHZhbHVlIHVzaW5nIHRoZSBDU1MgYG1pbigpYCBmdW5jdGlvbi4gUGFyYW1ldGVycyBhcmUgb2YgdGhlIHR5cGVcclxuICAgICAqIGBFeHRlbmRlZDxUPmA7IHRoYXQgaXMsIHRoZXkgY2FuIGJlIGVpdGhlciBvZiB0aGUgZ2VuZXJpYyB0eXBlIGBUYCwgb3IgYSBDU1MgY3VzdG9tIHZhcmlhYmxlXHJcbiAgICAgKiBvciBjb25zdGFudCBvZiB0eXBlIGBUYC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zIE9uZSBvciBtb3JlIHZhbHVlcyB0byBjaG9vc2UgdGhlIG1pbmltdW0gZnJvbS5cclxuICAgICAqIEByZXR1cm5zIEZ1bmN0aW9uIGltcGxlbWVudGluZyB0aGUgYElHZW5lcmljUHJveHk8VT5gIGNhbGxhYmxlIGludGVyZmFjZS4gVGhpcyBhbGxvd3MgdGhlXHJcbiAgICAgKiByZXN1bHQgb2YgdGhlIGBtaW5gIG1ldGhvZCB0byBiZSBhc3NpZ25lZCBvbmx5IHRvIHRoZSBwcm9wZXJ0aWVzIG9mIGEgY29tcGF0aWJsZSBudW1lcmljXHJcbiAgICAgKiB0eXBlLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIG1pbiggMjAwcHgsIDI1LjVlbSwgNDUlKVxyXG4gICAgICogICAgIGNsczEgPSB0aGlzLiRjbGFzcyh7XHJcbiAgICAgKiAgICAgICAgIHdpZHRoOiBjc3MuTGVuLm1pbiggMjAwLCAyNS41LCBjc3MucGVyY2VudCg0NSkpXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtaW4oIC4uLnBhcmFtczogRXh0ZW5kZWQ8VD5bXSk6IElHZW5lcmljUHJveHk8VT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHByb3BlcnR5IHZhbHVlIHVzaW5nIHRoZSBDU1MgYG1heCgpYCBmdW5jdGlvbi4gUGFyYW1ldGVycyBhcmUgb2YgdGhlIHR5cGVcclxuICAgICAqIGBFeHRlbmRlZDxUPmA7IHRoYXQgaXMsIHRoZXkgY2FuIGJlIGVpdGhlciBvZiB0aGUgZ2VuZXJpYyB0eXBlIGBUYCwgb3IgYSBDU1MgY3VzdG9tIHZhcmlhYmxlXHJcbiAgICAgKiBvciBjb25zdGFudCBvZiB0eXBlIGBUYC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zIE9uZSBvciBtb3JlIHZhbHVlcyB0byBjaG9vc2UgdGhlIG1heGltdW0gZnJvbS5cclxuICAgICAqIEByZXR1cm5zIEZ1bmN0aW9uIGltcGxlbWVudGluZyB0aGUgYElHZW5lcmljUHJveHk8VT5gIGNhbGxhYmxlIGludGVyZmFjZS4gVGhpcyBhbGxvd3MgdGhlXHJcbiAgICAgKiByZXN1bHQgb2YgdGhlIGBtYXhgIG1ldGhvZCB0byBiZSBhc3NpZ25lZCBvbmx5IHRvIHRoZSBwcm9wZXJ0aWVzIG9mIGEgY29tcGF0aWJsZSBudW1lcmljXHJcbiAgICAgKiB0eXBlLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIG1heCggMjAwcHgsIDI1LjVlbSwgNDUlKVxyXG4gICAgICogICAgIGNsczEgPSB0aGlzLiRjbGFzcyh7XHJcbiAgICAgKiAgICAgICAgIHdpZHRoOiBjc3MuTGVuLm1heCggMjAwLCAyNS41LCBjc3MucGVyY2VudCg0NSkpXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXgoIC4uLnBhcmFtczogRXh0ZW5kZWQ8VD5bXSk6IElHZW5lcmljUHJveHk8VT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHByb3BlcnR5IHZhbHVlIHVzaW5nIHRoZSBDU1MgYGNsYW1wKClgIGZ1bmN0aW9uLiBQYXJhbWV0ZXJzIGFyZSBvZiB0aGUgdHlwZVxyXG4gICAgICogYEV4dGVuZGVkPFQ+YDsgdGhhdCBpcywgdGhleSBjYW4gYmUgZWl0aGVyIG9mIHRoZSBnZW5lcmljIHR5cGUgYFRgLCBvciBhIENTUyBjdXN0b20gdmFyaWFibGVcclxuICAgICAqIG9yIGNvbnN0YW50IG9mIHR5cGUgYFRgLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBtaW4gTG93ZXIgYm91bmQgZm9yIHRoZSByZXR1cm4gdmFsdWUuXHJcbiAgICAgKiBAcGFyYW0gcHJlZiBQcmVmZXJyZWQgdmFsdWUuXHJcbiAgICAgKiBAcGFyYW0gbWF4IFVwcGVyIGJvdW5kIGZvciB0aGUgcmV0dXJuIHZhbHVlLlxyXG4gICAgICogQHJldHVybnMgRnVuY3Rpb24gaW1wbGVtZW50aW5nIHRoZSBgSUdlbmVyaWNQcm94eTxVPmAgY2FsbGFibGUgaW50ZXJmYWNlLiBUaGlzIGFsbG93cyB0aGVcclxuICAgICAqIHJlc3VsdCBvZiB0aGUgYGNsYW1wYCBtZXRob2QgdG8gYmUgYXNzaWduZWQgb25seSB0byB0aGUgcHJvcGVydGllcyBvZiBhIGNvbXBhdGlibGUgbnVtZXJpY1xyXG4gICAgICogdHlwZS5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyBjbGFtcCggMjAwcHgsIDI1LjVlbSwgNDUlKVxyXG4gICAgICogICAgIGNsczEgPSB0aGlzLiRjbGFzcyh7XHJcbiAgICAgKiAgICAgICAgIHdpZHRoOiBjc3MuTGVuLmNsYW1wKCAyMDAsIDI1LjUsIGNzcy5wZXJjZW50KDQ1KSlcclxuICAgICAqICAgICB9KVxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGNsYW1wKCBtaW46IEV4dGVuZGVkPFQ+LCBwcmVmOiBFeHRlbmRlZDxUPiwgbWF4OiBFeHRlbmRlZDxUPik6IElHZW5lcmljUHJveHk8VT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHByb3BlcnR5IHZhbHVlIHVzaW5nIHRoZSBDU1MgYGNhbGMoKWAgZnVuY3Rpb24uIFRoaXMgbWV0aG9kIGlzIGEgdGFnIGZ1bmN0aW9uIGFuZCBtdXN0XHJcbiAgICAgKiBiZSBpbnZva2VkIHdpdGggYSB0ZW1wbGF0ZSBzdHJpbmcgd2l0aG91dCBwYXJlbnRoZXNlcy4gUGFyYW1ldGVycyBpbiB0aGUgdGVtcGxhdGUgc3RyaW5nXHJcbiAgICAgKiBhcmUgb2YgdGhlIHR5cGUgYEV4dGVuZGVkPFQ+YDsgdGhhdCBpcywgdGhleSBjYW4gYmUgZWl0aGVyIG9mIHRoZSBnZW5lcmljIHR5cGUgYFRgLCBvciBhXHJcbiAgICAgKiBDU1MgY3VzdG9tIHZhcmlhYmxlIG9yIGNvbnN0YW50IG9mIHR5cGUgYFRgLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmb3JtdWxhclBhcnRzIEFycmF5IG9mIHN0cmluZ3MsIHdoaWNoIGFyZSBwYXJ0IG9mIHRoZSB0ZW1wbGF0ZSBzdHJpbmcgYW5kIHdoaWNoIGFyZVxyXG4gICAgICogbm90IHBhcmFtZXRlcnMuXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zIEFycmF5IG9mIHBhcmFtZXRlcnMgZnJvbSB0aGUgdGVtcGxhdGUgc3RyaW5nLlxyXG4gICAgICogQHJldHVybnMgRnVuY3Rpb24gaW1wbGVtZW50aW5nIHRoZSBgSUdlbmVyaWNQcm94eTxVPmAgY2FsbGFibGUgaW50ZXJmYWNlLiBUaGlzIGFsbG93cyB0aGVcclxuICAgICAqIHJlc3VsdCBvZiB0aGUgYGNhbGNgIG1ldGhvZCB0byBiZSBhc3NpZ25lZCBvbmx5IHRvIHRoZSBwcm9wZXJ0aWVzIG9mIGEgY29tcGF0aWJsZSBudW1lcmljXHJcbiAgICAgKiB0eXBlLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGRlZmF1bHRQYWRkaW5nID0gY3NzLnZhciggXCJDc3NMZW5ndGhcIiwgOClcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gY2FsYyggMjAwcHggLSAoMiAqIHZhcigtLWRlZmF1bHRQYWRkaW5nKSkpXHJcbiAgICAgKiAgICAgY2xzMSA9IHRoaXMuJGNsYXNzKHtcclxuICAgICAqICAgICAgICAgd2lkdGg6IGNzcy5MZW4uY2FsY2AgMjAwcHggLSAoMiAqICR7dGhpcy5kZWZhdWx0UGFkZGluZ30pYFxyXG4gICAgICogICAgIH0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgY2FsYyggZm9ybXVsYVBhcnRzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4ucGFyYW1zOiBFeHRlbmRlZDxUPltdKTogSUdlbmVyaWNQcm94eTxVPjtcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gQ1NTIGA8bnVtYmVyPmAgdHlwZS5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKiogUHJveHkgaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB2YWx1ZXMgb2YgdGhlIGA8cGVyY2VudD5gIENTUyB0eXBlICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU51bWJlclByb3h5IGV4dGVuZHMgSUdlbmVyaWNQcm94eTxcIlwiPiB7fTtcclxuXHJcbi8qKiBUeXBlIGZvciBhIHZhbHVlIG9mIHRoZSBgPG51bWJlcj5gIENTUyB0eXBlICovXHJcbmV4cG9ydCB0eXBlIENzc051bWJlciA9IG51bWJlciB8IElHZW5lcmljUHJveHk8XCJcIj47XHJcblxyXG4vKipcclxuICogVGhlIGBJTnVtYmVyTWF0aGAgaW50ZXJmYWNlIGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQ1NTIG1hdGhlbWF0aWMgZnVuY3Rpb25zIG9uIHRoZVxyXG4gKiBgPG51bWJlcj5gIENTUyB0eXBlcy4gVGhpcyBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgYnkgdGhlIFtbTnVtXV0gb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTnVtYmVyTWF0aCBleHRlbmRzIElOdW1lcmljTWF0aDxDc3NOdW1iZXIsXCJcIj4ge31cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFBlcmNlbnRcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKiogVW5pdHMgb2YgcGVyY2VudCAqL1xyXG5leHBvcnQgdHlwZSBQZXJjZW50VW5pdHMgPSBcIiVcIjtcclxuXHJcbi8qKiBQcm94eSBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHZhbHVlcyBvZiB0aGUgYDxwZXJjZW50PmAgQ1NTIHR5cGUgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUGVyY2VudFByb3h5IGV4dGVuZHMgSUdlbmVyaWNQcm94eTxQZXJjZW50VW5pdHM+IHt9O1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHN0eWxlIHByb3BlcnRpZXMgb2YgdGhlIGA8cGVyY2VudGFnZT5gIENTUyB0eXBlLiBWYWx1ZXMgb2YgdGhpcyB0eXBlIGNhbiBiZSBzcGVjaWZlZCBhczpcclxuICogLSBvbmUgb2YgcHJlLWRlZmluZWQgc3RyaW5ncyBsaWtlIGBcIjEwMCVcImBcclxuICogLSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgW1twZXJjZW50XV0gZnVuY3Rpb25cclxuICogLSBhIG51bWJlcjpcclxuICogICAtIGlmIHRoZSBudW1iZXIgaXMgYW4gaW50ZWdlciwgaXQgaXMgdGFrZW4gYXMgaXMgYW5kIGEgcGVyY2VudCBzaWduIGlzIGFwcGVuZGVkIHRvIGl0XHJcbiAqICAgLSBpZiB0aGUgbnVtYmVyIGlzIGEgZmxvYXRpbmcgcG9pbnQsIGl0IGlzIG11bHRpcGxpZWQgYnkgMTAwIGFuZCBhIHBlcmNlbnQgc2lnbiBpcyBhcHBlbmRlZCB0byBpdFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ3NzUGVyY2VudCA9IG51bWJlciB8IElQZXJjZW50UHJveHkgfFxyXG4gICAgXCI1JVwiIHwgXCIxMCVcIiB8IFwiMTUlXCIgfCBcIjIwJVwiIHwgXCIyNSVcIiB8IFwiMzAlXCIgfCBcIjM1JVwiIHwgXCI0MCVcIiB8IFwiNDUlXCIgfCBcIjUwJVwiIHxcclxuICAgIFwiNTUlXCIgfCBcIjYwJVwiIHwgXCI2NSVcIiB8IFwiNzAlXCIgfCBcIjc1JVwiIHwgXCI4MCVcIiB8IFwiODUlXCIgfCBcIjkwJVwiIHwgXCI5NSVcIiB8IFwiMTAwJVwiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBgSVBlcmNlbnRNYXRoYCBpbnRlcmZhY2UgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlXHJcbiAqIGA8cGVyY2VudD5gIENTUyB0eXBlcy4gVGhpcyBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgYnkgdGhlIFtbUGVyY2VudF1dIG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBlcmNlbnRNYXRoIGV4dGVuZHMgSU51bWVyaWNNYXRoPENzc1BlcmNlbnQsIFBlcmNlbnRVbml0cz5cclxue1xyXG59XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBDU1MgYDxsZW5ndGg+YCB0eXBlLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKiBVbml0cyBvZiBsZW5ndGggKi9cclxuZXhwb3J0IHR5cGUgTGVuZ3RoVW5pdHMgPSBcIlFcIiB8IFwiY2hcIiB8IFwiY21cIiB8IFwiZW1cIiB8IFwiZXhcIiB8IFwiaWNcIiB8IFwiaW5cIiB8IFwibGhcIiB8IFwibW1cIiB8IFwicGNcIiB8XHJcbiAgICAgICAgICAgICAgICBcInB0XCIgfCBcInB4XCIgfCBcInZiXCIgfCBcInZoXCIgfCBcInZpXCIgfCBcInZ3XCIgfCBcInJlbVwiIHwgXCJybGhcIiB8IFwidm1heFwiIHwgXCJ2bWluXCIgfCBcImZyXCI7XHJcblxyXG4vKiogUHJveHkgaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB2YWx1ZXMgb2YgdGhlIGA8bGVuZ3RoPmAgQ1NTIHR5cGUgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTGVuZ3RoUHJveHkgZXh0ZW5kcyBJR2VuZXJpY1Byb3h5PExlbmd0aFVuaXRzPiB7fTtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzaW5nbGUgc3R5bGUgcHJvcGVydHkgb2YgdGhlIGA8bGVuZ3RoPiB8IDxwZXJjZW50YWdlPmAgQ1NTIHR5cGUuIFZhbHVlcyBvZiB0aGlzIHR5cGVcclxuICogY2FuIGJlIHNwZWNpZmVkIGFzOlxyXG4gKiAtIG9uZSBvZiBwcmUtZGVmaW5lZCBzdHJpbmdzIGxpa2UgYFwiMTAwdmhcImAgb3IgYFwiMWZyXCJgXHJcbiAqIC0gcmV0dXJuIHZhbHVlIGZyb20gdGhlIGxlbmd0aCB1bml0IGZ1bmN0aW9ucyBzdWNoIGFzIFtbcmVtXV0sIFtbdmhdXSwgW1t2bWluXV0sIFtbcGVyY2VudF1dLCBldGMuXHJcbiAqIC0gYSBudW1iZXI6XHJcbiAqICAgLSBpZiB0aGUgbnVtYmVyIGlzIGFuIGludGVnZXIsIGl0IGlzIGludGVycHJldGVkIGFzIGBcInB4XCJgIHVuaXRzXHJcbiAqICAgLSBpZiB0aGUgbnVtYmVyIGlzIGEgZmxvYXRpbmcgcG9pbnQsIGl0IGlzIGludGVycHJldGVkIGFzIGBcImVtXCJgIHVuaXRzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDc3NMZW5ndGggPSBDc3NQZXJjZW50IHwgSUxlbmd0aFByb3h5IHxcclxuICAgIFwiMTAwdmhcIiB8IFwiMTAwdndcIiB8XHJcbiAgICBcIjFmclwiIHwgXCIyZnJcIiB8IFwiM2ZyXCIgfCBcIjRmclwiIHwgXCI1ZnJcIiB8IFwiNmZyXCIgfCBcIjdmclwiIHwgXCI4ZnJcIiB8IFwiOWZyXCIgfCBcIjEwZnJcIiB8IFwiMTFmclwiIHwgXCIxMmZyXCI7XHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IGNvbWJpbmVzIFtbQ3NzTGVuZ3RoXV0gYW5kIHRoZSBzdHJpbmcgbGl0ZXJhbCBgXCJhdXRvXCJgLiBUaGlzIHR5cGUgaXMgb2Z0ZW4gdXNlZCB3aGVuIGFcclxuICogcHJvcGVydHkgYWNjZXB0cyB0aGUgYDxsZW5ndGg+YCB0eXBlIGFuZCB0aGUgYFwiYXV0b1wiYCBsaXRlcmFsIC0gZm9yIGV4YW1wbGUsIHdoZW4gc3BlY2lmeWluZ1xyXG4gKiBtYXJnaW5zLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ3NzTGVuZ3RoT3JBdXRvID0gQ3NzTGVuZ3RoIHwgXCJhdXRvXCI7XHJcblxyXG4vKipcclxuICogVGhlIGBJTGVuZ3RoTWF0aGAgaW50ZXJmYWNlIGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQ1NTIG1hdGhlbWF0aWMgZnVuY3Rpb25zIG9uIHRoZVxyXG4gKiBgPGxlbmd0aD5gIENTUyB0eXBlcy4gVGhpcyBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgYnkgdGhlIFtbTGVuXV0gb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTGVuZ3RoTWF0aCBleHRlbmRzIElOdW1lcmljTWF0aDxDc3NMZW5ndGgsIExlbmd0aFVuaXRzIHwgUGVyY2VudFVuaXRzPlxyXG57XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIENTUyBgPGFuZ2xlPmAgdHlwZS5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKiogVW5pdHMgb2YgYW5nbGUgKi9cclxuZXhwb3J0IHR5cGUgQW5nbGVVbml0cyA9IFwiZGVnXCIgfCBcInJhZFwiIHwgXCJncmFkXCIgfCBcInR1cm5cIjtcclxuXHJcbi8qKiBQcm94eSBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHZhbHVlcyBvZiB0aGUgYDxhbmdsZT5gIENTUyB0eXBlICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFuZ2xlUHJveHkgZXh0ZW5kcyBJR2VuZXJpY1Byb3h5PEFuZ2xlVW5pdHM+IHt9O1xyXG5cclxuLyoqIFR5cGUgZm9yIHNpbmdsZSBzdHlsZSBwcm9wZXJ0eSBvZiB0aGUgYDxhbmdsZT5gIENTUyB0eXBlICovXHJcbmV4cG9ydCB0eXBlIENzc0FuZ2xlID0gbnVtYmVyIHwgSUFuZ2xlUHJveHk7XHJcblxyXG4vKipcclxuICogVGhlIGBJQW5nbGVNYXRoYCBpbnRlcmZhY2UgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlXHJcbiAqIGA8YW5nbGU+YCBDU1MgdHlwZXMuIFRoaXMgaW50ZXJmYWNlIGlzIGltcGxlbWVudGVkIGJ5IHRoZSBbW0FuZ2xlXV0gb2JqZWN0LlxyXG4gKiBUeXBlIGZvciBzaW5nbGUgc3R5bGUgcHJvcGVydHkgb2YgdGhlIGA8bGVuZ3RoPiB8IDxwZXJjZW50YWdlPmAgQ1NTIHR5cGUuIFZhbHVlcyBvZiB0aGlzIHR5cGVcclxuICogY2FuIGJlIHNwZWNpZmVkIGFzOlxyXG4gKiAtIG9uZSBvZiBwcmUtZGVmaW5lZCBzdHJpbmdzIGxpa2UgYFwiMTAwdmhcImAgb3IgYFwiMWZyXCJgXHJcbiAqIC0gcmV0dXJuIHZhbHVlIGZyb20gdGhlIGxlbmd0aCB1bml0IGZ1bmN0aW9ucyBzdWNoIGFzIFtbcmVtXV0sIFtbdmhdXSwgW1t2bWluXV0sIFtbcGVyY2VudF1dLCBldGMuXHJcbiAqIC0gYSBudW1iZXI6XHJcbiAqICAgLSBpZiB0aGUgbnVtYmVyIGlzIGFuIGludGVnZXIsIGl0IGlzIGludGVycHJldGVkIGFzIGBcImRlZ1wiYCB1bml0c1xyXG4gKiAgIC0gaWYgdGhlIG51bWJlciBpcyBhIGZsb2F0aW5nIHBvaW50LCBpdCBpcyBpbnRlcnByZXRlZCBhcyBgXCJ0dXJuXCJgIHVuaXRzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElBbmdsZU1hdGggZXh0ZW5kcyBJTnVtZXJpY01hdGg8Q3NzQW5nbGUsIEFuZ2xlVW5pdHMgfCBQZXJjZW50VW5pdHM+XHJcbntcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gQ1NTIGA8dGltZT5gIHR5cGUuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqIFVuaXRzIG9mIHRpbWUgKi9cclxuZXhwb3J0IHR5cGUgVGltZVVuaXRzID0gXCJzXCIgfCBcIm1zXCI7XHJcblxyXG4vKiogUHJveHkgaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB2YWx1ZXMgb2YgdGhlIGA8dGltZT5gIENTUyB0eXBlKi9cclxuZXhwb3J0IGludGVyZmFjZSBJVGltZVByb3h5IGV4dGVuZHMgSUdlbmVyaWNQcm94eTxUaW1lVW5pdHM+IHt9O1xyXG5cclxuLyoqIFR5cGUgZm9yIHNpbmdsZSBzdHlsZSBwcm9wZXJ0eSBvZiB0aGUgYDx0aW1lPmAgQ1NTIHR5cGUgKi9cclxuZXhwb3J0IHR5cGUgQ3NzVGltZSA9IG51bWJlciB8IElUaW1lUHJveHk7XHJcblxyXG4vKipcclxuICogVGhlIGBJVGltZU1hdGhgIGludGVyZmFjZSBjb250YWlucyBtZXRob2RzIHRoYXQgaW1wbGVtZW50IENTUyBtYXRoZW1hdGljIGZ1bmN0aW9ucyBvbiB0aGVcclxuICogYDx0aW1lPmAgQ1NTIHR5cGVzLiBUaGlzIGludGVyZmFjZSBpcyBpbXBsZW1lbnRlZCBieSB0aGUgW1tUaW1lXV0gb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJVGltZU1hdGggZXh0ZW5kcyBJTnVtZXJpY01hdGg8Q3NzVGltZSwgVGltZVVuaXRzPlxyXG57XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIENTUyBgPHJlc29sdXRpb24+YCB0eXBlLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKiBVbml0cyBvZiByZXNvbHV0aW9uICovXHJcbmV4cG9ydCB0eXBlIFJlc29sdXRpb25Vbml0cyA9IFwiZHBpXCIgfCBcImRwY21cIiB8IFwiZHBweFwiIHwgXCJ4XCI7XHJcblxyXG4vKiogUHJveHkgaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB2YWx1ZXMgb2YgdGhlIGA8cmVzb2x1dGlvbj5gIENTUyB0eXBlICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlc29sdXRpb25Qcm94eSBleHRlbmRzIElHZW5lcmljUHJveHk8UmVzb2x1dGlvblVuaXRzPiB7fTtcclxuXHJcbi8qKiBUeXBlIGZvciBzaW5nbGUgc3R5bGUgcHJvcGVydHkgb2YgdGhlIGA8cmVzb2x1dGlvbj5gIENTUyB0eXBlICovXHJcbmV4cG9ydCB0eXBlIENzc1Jlc29sdXRpb24gPSBudW1iZXIgfCBJUmVzb2x1dGlvblByb3h5IHxcclxuICAgIFwiMXhcIiB8IFwiMnhcIiB8IFwiM3hcIiB8IFwiNHhcIiB8IFwiNXhcIiB8IFwiNnhcIiB8IFwiN3hcIiB8IFwiOHhcIiB8IFwiOXhcIiB8IFwiMTB4XCIgfFxyXG4gICAgXCIxZHBweFwiIHwgXCIyZHBweFwiIHwgXCIzZHBweFwiIHwgXCI0ZHBweFwiIHwgXCI1ZHBweFwiIHwgXCI2ZHBweFwiIHwgXCI3ZHBweFwiIHwgXCI4ZHBweFwiIHwgXCI5ZHBweFwiIHwgXCIxMGRwcHhcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgYElSZXNvbHV0aW9uTWF0aGAgaW50ZXJmYWNlIGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQ1NTIG1hdGhlbWF0aWMgZnVuY3Rpb25zIG9uIHRoZVxyXG4gKiBgPHJlc29sdXRpb24+YCBDU1MgdHlwZXMuIFRoaXMgaW50ZXJmYWNlIGlzIGltcGxlbWVudGVkIGJ5IHRoZSBbW1Jlc29sdXRpb25dXSBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElSZXNvbHV0aW9uTWF0aCBleHRlbmRzIElOdW1lcmljTWF0aDxDc3NSZXNvbHV0aW9uLCBSZXNvbHV0aW9uVW5pdHM+XHJcbntcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gQ1NTIGA8ZnJlcXVlbmN5PmAgdHlwZS5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKiogVW5pdHMgb2YgZnJlcXVlbmN5ICovXHJcbmV4cG9ydCB0eXBlIEZyZXF1ZW5jeVVuaXRzID0gXCJIelwiIHwgXCJrSHpcIjtcclxuXHJcbi8qKiBQcm94eSBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHZhbHVlcyBvZiB0aGUgYDxmcmVxdWVuY3k+YCBDU1MgdHlwZSAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElGcmVxdWVuY3lQcm94eSBleHRlbmRzIElHZW5lcmljUHJveHk8RnJlcXVlbmN5VW5pdHM+IHt9O1xyXG5cclxuLyoqIFR5cGUgZm9yIHNpbmdsZSBzdHlsZSBwcm9wZXJ0eSBvZiB0aGUgYDxmcmVxdWVuY3k+YCBDU1MgdHlwZSAqL1xyXG5leHBvcnQgdHlwZSBDc3NGcmVxdWVuY3kgPSBudW1iZXIgfCBJRnJlcXVlbmN5UHJveHk7XHJcblxyXG4vKipcclxuICogVGhlIGBJRnJlcXVlbmN5TWF0aGAgaW50ZXJmYWNlIGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQ1NTIG1hdGhlbWF0aWMgZnVuY3Rpb25zIG9uIHRoZVxyXG4gKiBgPGZyZXF1ZW5jeT5gIENTUyB0eXBlcy4gVGhpcyBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgYnkgdGhlIFtbRnJlcXVlbmN5XV0gb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJRnJlcXVlbmN5TWF0aCBleHRlbmRzIElOdW1lcmljTWF0aDxDc3NGcmVxdWVuY3ksIEZyZXF1ZW5jeVVuaXRzPlxyXG57XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFNpemUsIFBvaW50LCBQb3NpdGlvbiwgUmFkaXVzXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqIFR5cGUgZm9yIGB3aWR0aGAsIGBoZWlnaHRgLCBgYmxvY2stc2l6ZWAgYW5kIGBpbmxpbmUtc2l6ZWAgc3R5bGUgcHJvcGVydGllcyAqL1xyXG5leHBvcnQgdHlwZSBDc3NTaXplID0gXCJhdXRvXCIgfCBcIm1heC1jb250ZW50XCIgfCBcIm1pbi1jb250ZW50XCIgfCBcImZpdC1jb250ZW50XCIgfCBcInN0cmV0Y2hcIiB8XHJcbiAgICBDc3NMZW5ndGggfCBJRml0Q29udGVudFByb3h5O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBJRml0Q29udGVudFByb3h5IGludGVyZmFjZSByZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIENTUyBgZml0LWNvbnRlbnQoKWAgZnVuY3Rpb24uIEl0XHJcbiAqIGlzIHJldHVybmVkIGZyb20gdGhlIFtbZml0Q29udGVudF1dIGZ1bmN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJRml0Q29udGVudFByb3h5IGV4dGVuZHMgSUdlbmVyaWNQcm94eTxcImZpdC1jb250ZW50XCI+IHt9XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHJlcHJlc2VudGluZyBhIHBvaW50IGFzIGEgdHdvIGVsZW1lbnQgdHVwbGUgd2hlcmUgeCBhbmQgeSBjb29yZGluYXRlcyBhcmUgc3BlY2lmaWVkIHVzaW5nXHJcbiAqIHRoZSBbW0Nzc0xlbmd0aF1dIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDc3NQb2ludCA9IFtFeHRlbmRlZDxDc3NMZW5ndGg+LCBFeHRlbmRlZDxDc3NMZW5ndGg+XTtcclxuXHJcblxyXG5cclxuLyoqIEhvcml6b250YWwgcG9zaXRpb24ga2V5d29yZHMgKi9cclxuZXhwb3J0IHR5cGUgSG9yaXpvbnRhbFBvc2l0aW9uS2V5d29yZCA9IFwibGVmdFwiIHwgXCJjZW50ZXJcIiB8IFwicmlnaHRcIjtcclxuXHJcbi8qKiBUeXBlIG9mIGEgdmFsdWUgc3BlY2lmeWluZyB0aGUgaG9yaXpvbnRhbCBwb3NpdGlvbiAqL1xyXG5leHBvcnQgdHlwZSBIb3Jpem9udGFsUG9zaXRpb24gPSBIb3Jpem9udGFsUG9zaXRpb25LZXl3b3JkIHwgQ3NzTGVuZ3RoO1xyXG5cclxuLyoqIFR5cGUgZGVzY3JpYmluZyBob3Jpem9udGFsIHBvc2l0aW9uIENTUyB0eXBlIGNvbnNpc3Rpbmcgb2YgMiB2YWx1ZXMgdXNpbmcgYSB0dXBsZSAqL1xyXG5leHBvcnQgdHlwZSBIb3Jpem9udGFsUG9zaXRpb25UdXBsZSA9IFtFeHRlbmRlZDxIb3Jpem9udGFsUG9zaXRpb25LZXl3b3JkPiwgRXh0ZW5kZWQ8Q3NzTGVuZ3RoPl07XHJcblxyXG4vKiogVmVydGljYWwgcG9zaXRpb24ga2V5d29yZHMgKi9cclxuZXhwb3J0IHR5cGUgVmVydGljYWxQb3NpdGlvbktleXdvcmQgPSBcInRvcFwiIHwgXCJjZW50ZXJcIiB8IFwiYm90dG9tXCI7XHJcblxyXG4vKiogVHlwZSBvZiBhIHZhbHVlIHNwZWNpZnlpbmcgdGhlIHZlcnRpY2FsIHBvc2l0aW9uICovXHJcbmV4cG9ydCB0eXBlIFZlcnRpY2FsUG9zaXRpb24gPSBWZXJ0aWNhbFBvc2l0aW9uS2V5d29yZCB8IENzc0xlbmd0aDtcclxuXHJcbi8qKiBUeXBlIGRlc2NyaWJpbmcgdmVydGljYWwgcG9zaXRpb24gQ1NTIHR5cGUgY29uc2lzdGluZyBvZiAyIHZhbHVlcyB1c2luZyBhIHR1cGxlICovXHJcbmV4cG9ydCB0eXBlIFZlcnRpY2FsUG9zaXRpb25UdXBsZSA9IFtFeHRlbmRlZDxWZXJ0aWNhbFBvc2l0aW9uS2V5d29yZD4sIEV4dGVuZGVkPENzc0xlbmd0aD5dO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBkZXNjcmliaW5nIGA8cG9zaXRpb24teD5gIENTUyB0eXBlIGNvbnNpc3Rpbmcgb2YgdXAgdG8gMiB2YWx1ZXMgKi9cclxuZXhwb3J0IHR5cGUgQ3NzUG9zaXRpb25YID0gSG9yaXpvbnRhbFBvc2l0aW9uIHwgSG9yaXpvbnRhbFBvc2l0aW9uVHVwbGU7XHJcblxyXG4vKiogVHlwZSBkZXNjcmliaW5nIG11bHRpcGxlIGA8cG9zaXRpb24teD5gIENTUyB0eXBlcyBjb25zaXN0aW5nIG9mIHVwIHRvIDIgdmFsdWVzICovXHJcbmV4cG9ydCB0eXBlIENzc011bHRpUG9zaXRpb25YID0gQ3NzUG9zaXRpb25YIHwgKFtFeHRlbmRlZDxIb3Jpem9udGFsUG9zaXRpb24+XSB8IEV4dGVuZGVkPEhvcml6b250YWxQb3NpdGlvblR1cGxlPilbXTtcclxuXHJcblxyXG5cclxuLyoqIFR5cGUgZGVzY3JpYmluZyBgPHBvc2l0aW9uLXk+YCBDU1MgdHlwZSBjb25zaXN0aW5nIG9mIHVwIHRvIDIgdmFsdWVzICovXHJcbmV4cG9ydCB0eXBlIENzc1Bvc2l0aW9uWSA9IFZlcnRpY2FsUG9zaXRpb24gfCBWZXJ0aWNhbFBvc2l0aW9uVHVwbGU7XHJcblxyXG4vKiogVHlwZSBkZXNjcmliaW5nIG11bHRpcGxlIGA8cG9zaXRpb24teT5gIENTUyB0eXBlcyBjb25zaXN0aW5nIG9mIHVwIHRvIDIgdmFsdWVzICovXHJcbmV4cG9ydCB0eXBlIENzc011bHRpUG9zaXRpb25ZID0gQ3NzUG9zaXRpb25ZIHwgKFtFeHRlbmRlZDxWZXJ0aWNhbFBvc2l0aW9uPl0gfCBFeHRlbmRlZDxWZXJ0aWNhbFBvc2l0aW9uVHVwbGU+KVtdO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBkZXNjcmliaW5nIGEgc2luZ2xlIGl0ZW0gaW4gdGhlIGA8cG9zaXRpb24+YCBDU1MgdHlwZSAqL1xyXG5leHBvcnQgdHlwZSBDc3NQb3NpdGlvbkl0ZW0gPSBIb3Jpem9udGFsUG9zaXRpb25LZXl3b3JkIHwgVmVydGljYWxQb3NpdGlvbktleXdvcmQgfCBDc3NMZW5ndGg7XHJcblxyXG4vKiogVHlwZSBkZXNjcmliaW5nIGA8cG9zaXRpb24+YCBDU1MgdHlwZSBjb25zaXN0aW5nIG9mIDEgdG8gNCB2YWx1ZXMgdXNpbmcgdG91cGxlcyAqL1xyXG5leHBvcnQgdHlwZSBDc3NQb3NpdGlvblR1cGxlID1cclxuICAgIFtFeHRlbmRlZDxIb3Jpem9udGFsUG9zaXRpb24+LCBFeHRlbmRlZDxWZXJ0aWNhbFBvc2l0aW9uPl0gfFxyXG4gICAgW0V4dGVuZGVkPFZlcnRpY2FsUG9zaXRpb24+LCBFeHRlbmRlZDxIb3Jpem9udGFsUG9zaXRpb24+XSB8XHJcbiAgICBbRXh0ZW5kZWQ8SG9yaXpvbnRhbFBvc2l0aW9uS2V5d29yZD4sIEV4dGVuZGVkPFZlcnRpY2FsUG9zaXRpb25LZXl3b3JkPiwgRXh0ZW5kZWQ8Q3NzTGVuZ3RoPl0gfFxyXG4gICAgW0V4dGVuZGVkPEhvcml6b250YWxQb3NpdGlvbktleXdvcmQ+LCBFeHRlbmRlZDxDc3NMZW5ndGg+LCBFeHRlbmRlZDxWZXJ0aWNhbFBvc2l0aW9uS2V5d29yZD4sIEV4dGVuZGVkPENzc0xlbmd0aD4/XSB8XHJcbiAgICBbRXh0ZW5kZWQ8VmVydGljYWxQb3NpdGlvbktleXdvcmQ+LCBFeHRlbmRlZDxIb3Jpem9udGFsUG9zaXRpb25LZXl3b3JkPiwgRXh0ZW5kZWQ8Q3NzTGVuZ3RoPl0gfFxyXG4gICAgW0V4dGVuZGVkPFZlcnRpY2FsUG9zaXRpb25LZXl3b3JkPiwgRXh0ZW5kZWQ8Q3NzTGVuZ3RoPiwgRXh0ZW5kZWQ8SG9yaXpvbnRhbFBvc2l0aW9uS2V5d29yZD4sIEV4dGVuZGVkPENzc0xlbmd0aD4/XTtcclxuXHJcbi8qKiBUeXBlIGRlc2NyaWJpbmcgYDxwb3NpdGlvbj5gIENTUyB0eXBlIGNvbnNpc3Rpbmcgb2YgdXAgdG8gNCB2YWx1ZXMgKi9cclxuZXhwb3J0IHR5cGUgQ3NzUG9zaXRpb24gPSBDc3NQb3NpdGlvbkl0ZW0gfCBDc3NQb3NpdGlvblR1cGxlO1xyXG5cclxuLyoqIFR5cGUgZGVzY3JpYmluZyBtdWx0aXBsZSBgPHBvc2l0aW9uPmAgQ1NTIHR5cGVzIGNvbnNpc3Rpbmcgb2YgdXAgdG8gNCB2YWx1ZXMgKi9cclxuZXhwb3J0IHR5cGUgQ3NzTXVsdGlQb3NpdGlvbiA9IENzc1Bvc2l0aW9uIHwgKFtFeHRlbmRlZDxDc3NQb3NpdGlvbkl0ZW0+XSB8IEV4dGVuZGVkPENzc1Bvc2l0aW9uVHVwbGU+KVtdO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBmb3IgYSBzaW5nbGUgY29ybmVyIHJhZGl1cyAqL1xyXG5leHBvcnQgdHlwZSBDc3NSYWRpdXMgPSBPbmVPclBhaXI8Q3NzTGVuZ3RoPjtcclxuXHJcblxyXG5cclxuLyoqIFR5cGUgZm9yIGJvcmRlci1yYWRpdXMgc3R5bGUgcHJvcGVydHkgKi9cclxuZXhwb3J0IHR5cGUgQm9yZGVyUmFkaXVzSXRlbSA9IFtFeHRlbmRlZDxDc3NMZW5ndGg+LCBFeHRlbmRlZDxDc3NMZW5ndGg+PywgRXh0ZW5kZWQ8Q3NzTGVuZ3RoPj8sIEV4dGVuZGVkPENzc0xlbmd0aD4/XTtcclxuXHJcbi8qKiBUeXBlIGZvciBib3JkZXItcmFkaXVzIHN0eWxlIHByb3BlcnR5ICovXHJcbmV4cG9ydCB0eXBlIEJvcmRlclJhZGl1cyA9IE9uZU9yQm94PENzc0xlbmd0aD4gfCBbQm9yZGVyUmFkaXVzSXRlbSwgQm9yZGVyUmFkaXVzSXRlbV07XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBBc3BlY3QgUmF0aW9cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogVGhlIElBc3BlY3RSYXRpb1Byb3h5IGludGVyZmFjZSByZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIFtbcmF0aW9dXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFzcGVjdFJhdGlvUHJveHkgZXh0ZW5kcyBJR2VuZXJpY1Byb3h5PFwiYXNwZWN0LXJhdGlvXCI+IHt9XHJcblxyXG4vKipcclxuICogVGhlIGBDc3NBc3BlY3RSYXRpb2AgdHlwZSByZXByZXNlbnRzIHRoZSBDU1MgYDxyYXRpbz5gIHR5cGUuIFRoaXMgdHlwZSBjYW4gYmUgdXNlZCBmb3IgdGhlXHJcbiAqIGBhc3BlY3QtcmF0aW9gIENTUyBwcm9wZXJ0eSBhbmQgYnkgdGhlIGBhc3BlY3QtcmF0aW9gIG1lZGlhIGZlYXR1cmUgaW4gYSBgQG1lZGlhYCBydWxlLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGVzOioqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIHVzaW5nIHByZS1kZWZpbmVkIHN0cmluZyBsaXRlcmFsIHZhbHVlXHJcbiAqICAgICBjbGFzczEgPSB0aGlzLiRjbGFzcygge2FzcGVjdFJhdGlvOiBcIjQvM1wifSlcclxuICpcclxuICogICAgIC8vIHVzaW5nIHRoZSBgcmF0aW8oKWAgZnVuY3Rpb25cclxuICogICAgIGNsYXNzMiA9IHRoaXMuJGNsYXNzKCB7YXNwZWN0UmF0aW86IGNzcy5yYXRpbyggNCwgMyl9KVxyXG4gKlxyXG4gKiAgICAgLy8gdXNpbmcgYSBzaW5nbGUgbnVtYmVyXHJcbiAqICAgICBtZWRpYVJ1bGUxID0gdGhpcy4kbWVkaWEoIHthc3BlY3RSYXRpbzogMS4zM30sIC4uLilcclxuICpcclxuICogICAgIC8vIHVzaW5nIGEgdHVwbGUgdG8gc3BlY2lmeSByYW5nZTsgdGhpcyB3aWxsIHJlc3VsdCBpbiB0aGUgZm9sbG93aW5nIG1lZGlhIGNvbmRpdGlvbjpcclxuICogICAgIC8vIChtaW4tYXNwZWN0LXJhdGlvOiA0LzMpIGFuZCAobWF4LWFzcGVjdC1yYXRpbzoxNi85KVxyXG4gKiAgICAgbWVkaWFSdWxlMiA9IHRoaXMuJG1lZGlhKCB7YXNwZWN0UmF0aW86IFtcIjQvM1wiLFwiMTYvOVwiXX0sIC4uLilcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIENzc0FzcGVjdFJhdGlvID0gQ3NzTnVtYmVyIHwgSUFzcGVjdFJhdGlvUHJveHkgfCBcIjEvMVwiIHwgXCI0LzNcIiB8IFwiMTYvOVwiIHwgXCIxODUvMTAwXCIgfCBcIjIzOS8xMDBcIjtcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIHJlY3QoKSBmdW5jdGlvbiBmb3IgY2xpcCBwcm9wZXJ0eVxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBUaGUgYElSZWN0UHJveHlgIGludGVyZmFjZSByZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIFtbcmVjdF1dIGZ1bmN0aW9uIHVzZWQgZm9yIHRoZSBgY2xpcGBcclxuICogc3R5bGUgcHJvcGVydHkuXHJcbiAqIEBkZXByZWNhdGVkIFRoZSBDU1MgYGNsaXBgIHByb3BlcnR5IGFuZCBgcmVjdCgpYCBmdW5jdGlvbiBhcmUgZGVwcmVjYXRlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlY3RQcm94eSBleHRlbmRzIElHZW5lcmljUHJveHk8XCJyZWN0XCI+IHt9XHJcblxyXG4iLCLvu79pbXBvcnQge0Nzc1NlbGVjdG9yLCBQYWdlUHNldWRvQ2xhc3MsIEVsZW1lbnRUYWdOYW1lLCBFeHRlbmRlZFByb3B9IGZyb20gXCIuL0NvcmVUeXBlc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgSVN0eWxlUnVsZSwgSUNsYXNzUnVsZSwgSUlEUnVsZSwgQW5pbWF0aW9uRnJhbWUsIElBbmltYXRpb25SdWxlLCBJVmFyUnVsZSxcclxuICAgIElDb3VudGVyUnVsZSwgSUdyaWRMaW5lUnVsZSwgSUdyaWRBcmVhUnVsZSwgSUltcG9ydFJ1bGUsIElGb250RmFjZVJ1bGUsIElOYW1lc3BhY2VSdWxlLCBJUGFnZVJ1bGUsXHJcbiAgICBJU3R5bGVEZWZpbml0aW9uQ2xhc3MsIElTdXBwb3J0c1J1bGUsIElNZWRpYVJ1bGUsIElDbGFzc05hbWVSdWxlLCBJQ29uc3RSdWxlLCBDbGFzc1Byb3BUeXBlLFxyXG4gICAgTmFtZUdlbmVyYXRpb25NZXRob2QsIElDb3VudGVyU3R5bGVSdWxlLCBJU3R5bGVEZWZpbml0aW9uXHJcbn0gZnJvbSBcIi4vUnVsZVR5cGVzXCI7XHJcbmltcG9ydCB7TWVkaWFTdGF0ZW1lbnQsIFN1cHBvcnRzU3RhdGVtZW50fSBmcm9tIFwiLi9NZWRpYVR5cGVzXCJcclxuaW1wb3J0IHtFeHRlbmRlZEZvbnRGYWNlfSBmcm9tIFwiLi9Gb250VHlwZXNcIjtcclxuaW1wb3J0IHtFeHRlbmRlZENvdW50ZXJTdHlsZXNldH0gZnJvbSBcIi4vQ291bnRlclR5cGVzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBTdHlsZXNldCwgVmFyVGVtcGxhdGVOYW1lLCBFeHRlbmRlZFZhclZhbHVlLCBDb21iaW5lZFN0eWxlc2V0LCBDb21iaW5lZENsYXNzU3R5bGVzZXQsXHJcbiAgICBJU3ludGF4VHlwZVN0eWxlc2V0XHJcbn0gZnJvbSBcIi4vU3R5bGVzZXRzXCI7XHJcbmltcG9ydCB7c3ltUkN9IGZyb20gXCIuLi9ydWxlcy9SdWxlXCI7XHJcbmltcG9ydCB7XHJcbiAgICBlbWJlZGRlZERlY29yYXRvciwgZ2V0Q3VycmVudFRoZW1lLCBwcm9jZXNzU0QsIGNvbmZpZ05hbWVzLCBSdWxlQ29udGFpbmVyLFxyXG4gICAgc19zdGFydFNTUiwgc19zdG9wU1NSLCBzX3N0YXJ0SHlkcmF0aW9uLCBzX3N0b3BIeWRyYXRpb25cclxufSBmcm9tIFwiLi4vcnVsZXMvUnVsZUNvbnRhaW5lclwiO1xyXG5pbXBvcnQge0Fic3RyYWN0UnVsZSwgQ2xhc3NSdWxlLCBJRFJ1bGUsIFNlbGVjdG9yUnVsZSwgUGFnZVJ1bGV9IGZyb20gXCIuLi9ydWxlcy9TdHlsZVJ1bGVzXCJcclxuaW1wb3J0IHtBbmltYXRpb25SdWxlfSBmcm9tIFwiLi4vcnVsZXMvQW5pbWF0aW9uUnVsZVwiXHJcbmltcG9ydCB7VmFyUnVsZSwgQ29uc3RSdWxlLCBQcm9wZXJ0eVJ1bGV9IGZyb20gXCIuLi9ydWxlcy9WYXJSdWxlXCJcclxuaW1wb3J0IHtDb3VudGVyUnVsZSwgQ291bnRlclN0eWxlUnVsZX0gZnJvbSBcIi4uL3J1bGVzL0NvdW50ZXJSdWxlc1wiO1xyXG5pbXBvcnQge0dyaWRMaW5lUnVsZSwgR3JpZEFyZWFSdWxlfSBmcm9tIFwiLi4vcnVsZXMvR3JpZFJ1bGVzXCI7XHJcbmltcG9ydCB7Rm9udEZhY2VSdWxlLCBJbXBvcnRSdWxlLCBOYW1lc3BhY2VSdWxlLCBDbGFzc05hbWVSdWxlfSBmcm9tIFwiLi4vcnVsZXMvTWlzY1J1bGVzXCJcclxuaW1wb3J0IHtTdXBwb3J0c1J1bGUsIE1lZGlhUnVsZX0gZnJvbSBcIi4uL3J1bGVzL0dyb3VwUnVsZXNcIlxyXG5pbXBvcnQge3Yyc30gZnJvbSBcIi4uL2ltcGwvVXRpbHNcIjtcclxuaW1wb3J0IHtnZXRBY3RpdmF0b3J9IGZyb20gXCIuLi9pbXBsL1NjaGVkdWxpbmdJbXBsXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYFN0eWxlRGVmaW5pdGlvbmAgY2xhc3MgaXMgYSBiYXNlIGZvciBhbGwgY2xhc3NlcyB0aGF0IGNvbnRhaW4gZGVmaW5pbml0aW9ucyBvZiBDU1MgcnVsZXMuXHJcbiAqIFN0eWxlIGRlZmluaXRpb24gY2xhc3NlcyBhcmUgcmVndWxhciBUeXBlU2NyaXB0IGNsYXNzZXMgYW5kIGFzIHN1Y2ggY2FuIGhhdmUgYW55IGZpZWxkcyBhbmRcclxuICogbWV0aG9kcyAtIGJvdGggaW5zdGFuY2UgYW5kIHN0YXRpYy4gTm9ybWFsbHksIGhvd2V2ZXIsIHRoZXkgY29udGFpbiBpbnN0YW5jZSBwcm9wZXJ0aWVzXHJcbiAqIGluaXRpYWxpemVkIHdpdGggZnVuY3Rpb25zIHJldHVybmluZyBzdHlsZSBydWxlcyBhbmQgYXQtcnVsZXMsIHN1Y2ggYXMgW1skY2xhc3NdXSxcclxuICogW1skdGFnXV0sIFtbJG1lZGlhXV0sIFtbJGNvdW50ZXJdXSBhbmQgb3RoZXJzLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGVzKipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiAvLyB0b3AtbGV2ZWwgc3R5bGUgZGVmaW5pdGlvbiBjbGFzc1xyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgY2xzID0gdGhpcy4kY2xhc3MoeyBjb2xvcjogXCJyZWRcIn0pXHJcbiAqXHJcbiAqICAgICAvLyB1c2luZyBzdHlsZS1kZWZpbml0aW9uIGNsYXNzIGZvciBAbWVkaWEgcnVsZVxyXG4gKiAgICAgaWZOYXJyb3dTY3JlZW4gPSB0aGlzLiRtZWRpYSggeyBtYXhXaWR0aDogODAwIH0sXHJcbiAqICAgICAgICAgY2xhc3MgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uPE15U3R5bGVzPlxyXG4gKiAgICAgICAgIHtcclxuICogICAgICAgICAgICAgY2xzID0gdGhpcy4kY2xhc3MoeyBjb2xvcjogXCJwaW5rXCJ9KVxyXG4gKiAgICAgICAgIH1cclxuICogICAgIClcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQHR5cGVwYXJhbSBQIFBhcmVudCBzdHlsZSBkZWZpbml0aW9uIGNsYXNzLiBQYXJlbnQgb2YgYSB0b3AtbGV2ZWwgY2xhc3MgaXMgbnVsbC5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdHlsZURlZmluaXRpb248UCBleHRlbmRzIFN0eWxlRGVmaW5pdGlvbiA9IGFueT4gaW1wbGVtZW50cyBJU3R5bGVEZWZpbml0aW9uPFA+XHJcbntcclxuICAgIC8qKlxyXG4gICAgICogUmVmZXJzIHRvIHRoZSBpbnN0YW5jZSBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyB3aGljaCBpcyB0aGUgcGFyZW50IG9mIHRoaXMgc3R5bGVcclxuICAgICAqIGRlZmluaXRpb24gb2JqZWN0IGluIHRoZSBjaGFpbiBvZiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzZXMuIFRocm91Z2ggdGhpcyBtZW1iZXIsIGFsbCBydWxlc1xyXG4gICAgICogYW5kIG90aGVyIG1lbWJlcnMgZGVmaW5lZCBpbiB0aGUgcGFyZW50IGRlZmluaXRpb24gY2xhc3MgY2FuIGJlIGFjY2Vzc2VkLiBGb3IgdG9wLWxldmVsXHJcbiAgICAgKiBzdHlsZSBkZWZpbml0aW9ucywgdGhpcyBwcm9wZXJ0eSBpcyBhbHdheXMgdW5kZWZpbmVkLiBUaGlzIHByb3BlcnR5IGNhbiBhbHNvIGJlIHVuZGVmaW5lZFxyXG4gICAgICogaWYgaXQgd2FzIG5vdCBwcm92aWRlZCB0byB0aGUgY29uc3RydWN0b3Igd2hlbiBjcmVhdGluZyB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBtYW51YWxseS5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgYCRwYXJlbnRgIHJlZmVyZW5jZSBpcyB1c2VkIHdoZW4gdGhlcmUgaXMgYSBuZWVkIHRvIHJlZmVyIGZyb20gZ3JvdXBpbmcgcnVsZXMgKGNyZWF0ZWRcclxuICAgICAqIGJ5IGAkbWVkaWEoKWAgb3IgYCRzdXBwb3J0KClgIG1ldGhvZHMpIHRvIHRoZSBydWxlcyBkZWZpbmVkIGluIHRoZSBwYXJlbnQgc3R5bGUgZGVmaW5pdGlvblxyXG4gICAgICogY2xhc3MuIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBuZXN0ZWQgZ3JvdXBpbmcgcnVsZXMsIHRoZW4gdGhlIGNvbnN0dWN0IGB0aGlzLiRwYXJlbnQuJHBhcmVudC4uLmBcclxuICAgICAqIGFsbG93cyByZWFjaGluZyB0byBydWxlcyBkZWZpbmVkIGluIGFueSBhbmNlc3RvciBzdHlsZSBkZWZpbml0aW9uIGNsYXNzLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGRlZmF1bHRDb2xvciA9IHRoaXMuJHZhciggXCJjb2xvclwiLCBcImJsdWVcIilcclxuICAgICAqXHJcbiAgICAgKiAgICAgaWZTbWFsbFNjcmVlbiA9IHRoaXMuJG1lZGlhKCB7IG1heFdpZHRoOiA2MDAgfSxcclxuICAgICAqICAgICAgICAgY2xhc3MgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uPE15U3R5bGVzPlxyXG4gICAgICogICAgICAgICB7XHJcbiAgICAgKiAgICAgICAgICAgICBwID0gdGhpcy4kc3R5bGUoIFwicFwiLCB7IGNvbG9yOiB0aGlzLiRwYXJlbnQuZGVmYXVsdENvbG9yIH0pXHJcbiAgICAgKiAgICAgICAgIH1cclxuICAgICAqICAgICApXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5ICRwYXJlbnQ/OiBQO1xyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdHlsZSBkZWZpbml0aW9uIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBkaXJlY3RseSBvbmx5IGJ5IHRoZSAqc3R5bGVkIGNvbXBvbmVudHMqIC0gdGhhdCBpcyxcclxuICAgICAqIGNvbXBvbmVudHMgdGhhdCB1c2UgZGlmZmVyZW50IHN0eWxlcyBmb3IgZWFjaCBpbnN0YW5jZS4gT3RoZXJ3aXNlLCBzdHlsZSBkZWZpbml0aW9uXHJcbiAgICAgKiBpbnN0YW5jZXMgYXJlIGNyZWF0ZWQgd2hlbiBlaXRoZXIgdGhlIFtbJHVzZV1dIG1ldGhvZCBvciBbW2FjdGl2YXRlXV0gZnVuY3Rpb24gaXMgY2FsbGVkLlxyXG4gICAgICogQHBhcmFtIHBhcmVudCBSZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBzdHlsZSBkZWZpbml0aW9uIGNsYXNzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciggcGFyZW50PzogUClcclxuICAgIHtcclxuICAgICAgICB0aGlzLiRwYXJlbnQgPSBwYXJlbnQ7XHJcblxyXG4gICAgICAgIC8vIFN0eWxlIERlZmluaXRpb24gaW5zdGFuY2UgcG9pbnRzIHRvIHJ1bGUgY29udGFpbmVyXHJcbiAgICAgICAgbGV0IHJjID0gbmV3IFJ1bGVDb250YWluZXIoIHRoaXMpO1xyXG4gICAgICAgIHRoaXNbc3ltUkNdID0gcmM7XHJcblxyXG4gICAgICAgIC8vIGluc3RlYWQgb2YgcmV0dXJuaW5nIGFuIGluc3RhbmNlIG9mIG91ciBjbGFzcywgdGhlIGNvbnN0cnVjdG9yIHJldHVybnMgYSBwcm94eS4gVGhpc1xyXG4gICAgICAgIC8vIGFsbG93cyBjcmVhdGluZyBwcm94aWVzIGZvciBhbGwgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBjbGFzcy5cclxuICAgICAgICByZXR1cm4gbmV3IFByb3h5PFN0eWxlRGVmaW5pdGlvbjxQPj4oIHRoaXMsIHJjKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhYnN0cmFjdCBydWxlLCB3aGljaCBkZWZpbmVzIGEgc3R5bGVzZXQgdGhhdCBjYW4gYmUgZXh0ZW5kZWQgYnkgb3RoZXIgc3R5bGUgcnVsZXMuXHJcbiAgICAgKiBBYnN0cmFjdCBydWxlcyBkb24ndCBoYXZlIHNlbGVjdG9ycyBhbmQgYXJlIG5vdCBpbnNlcnRlZCBpbnRvIHRoZSBET00uIEFic3RyYWN0IHJ1bGVzIGNhblxyXG4gICAgICogdGhlbXNlbHZlcyBleHRlbmQgb3RoZXIgcnVsZXMgLSBib3RoIGFic3RyYWN0IGFuZCBub24tYWJzdHJhY3QuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgY29sb3JCb3ggPSB0aGlzLiRhYnN0cmFjdCh7XHJcbiAgICAgKiAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJvcmFuZ2VcIixcclxuICAgICAqICAgICAgICAgYm9yZGVyUmFkaXVzOiBjc3MucGVyY2VudCgxMCksXHJcbiAgICAgKiAgICAgICAgIGJvcmRlcjogWzQsIFwic29saWRcIiwgXCJyZWRcIl0sXHJcbiAgICAgKiAgICAgICAgIFwiOmhvdmVyXCI6IHtcclxuICAgICAqICAgICAgICAgICAgIG9wYWNpdHk6IDAuN1xyXG4gICAgICogICAgICAgICB9XHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgYm94ID0gdGhpcy4kY2xhc3Moe1xyXG4gICAgICogICAgICAgICBcIitcIjogdGhpcy5jb2xvckJveCxcclxuICAgICAqICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAqICAgICAgICAgaGVpZ2h0OiAyMDAsXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgc3BlY2lhbEVsbSA9IHRoaXMuJGlkKHtcclxuICAgICAqICAgICAgICAgXCIrXCI6IHRoaXMuY29sb3JCb3gsXHJcbiAgICAgKiAgICAgICAgIHdpZHRoOiA2MDAsXHJcbiAgICAgKiAgICAgICAgIGhlaWdodDogNDAwLFxyXG4gICAgICogICAgIH0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3R5bGVzZXQgT25lIG9yIG1vcmUgc3R5bGVzZXQgb2JqZWN0cyB0aGF0IHdpbGwgYmUgaW5oZXJpdGVkIGJ5IHN0eWxlIHJ1bGVzIHRoYXRcclxuICAgICAqIGV4dGVuZCB0aGlzIGFic3RyYWN0IHJ1bGUuXHJcbiAgICAgKiBAcmV0dXJucyBgSVN0eWxlUnVsZWAgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIHVzZWQgYnkgdGhlIGRlcml2ZWQgcnVsZXMgaW4gdGhlIGBcIitcImAgcHJvcGVydHkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAkYWJzdHJhY3QoIHN0eWxlc2V0OiBDb21iaW5lZFN0eWxlc2V0IHwgQ29tYmluZWRTdHlsZXNldFtdKTogSVN0eWxlUnVsZVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgQWJzdHJhY3RSdWxlKCB0aGlzLCBzdHlsZXNldCk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgY2xhc3MgcnVsZS4gVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBjcmVhdGVkIHdoZW4gdGhlIHJ1bGUgaXMgcHJvY2Vzc2VkIGFzIHBhcnQgb2ZcclxuICAgICAqIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzLiBUaGUgbmFtZSBjYW4gYmUgYWxzbyBvdmVycmlkZGVuIGJ5IHByb3ZpZGluZyBlaXRoZXIgYW4gZXhwbGljaXRcclxuICAgICAqIG5hbWUgb3IgYW5vdGhlciBjbGFzcyBydWxlLiBUaGUgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB3aXRob3V0IHBhcmFtZXRlcnMganVzdCB0byBcImRlY2xhcmVcIlxyXG4gICAgICogdGhlIGNsYXNzLiBTdWNoIGNsYXNzIGNhbiBiZSBsYXRlciB1c2VkIGVpdGhlciBpbiBjb25kaXRpb25hbCBncm91cGluZyBydWxlcyBvciBpbiBkZXJpdmVkXHJcbiAgICAgKiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzZXMuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHJldHVybmVkIFtbSUNsYXNzUnVsZV1dIGludGVyZmFjZSBoYXMgdGhlIGBuYW1lYCBwcm9wZXJ0eSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGFzc2lnblxyXG4gICAgICogdGhlIGNsYXNzIHRvIGFuIEhUTUwgZWxlbWVudFxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIHZib3ggPSB0aGlzLiRjbGFzcyh7XHJcbiAgICAgKiAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgICogICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxyXG4gICAgICogICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIC4uLlxyXG4gICAgICogbGV0IHN0eWxlcyA9IGNzcy5hY3RpdmF0ZSggTXlDbGFzc2VzKTtcclxuICAgICAqIC4uLlxyXG4gICAgICogcmVuZGVyXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgcmV0dXJuIDxkaXYgY2xhc3M9e3N0eWxlcy52Ym94Lm5hbWV9PlxyXG4gICAgICogICAgICAgICA8c3Bhbj5IZWxsbzwvc3Bhbj5cclxuICAgICAqICAgICAgICAgPHNwYW4+V29ybGQhPC9zcGFuPlxyXG4gICAgICogICAgIDwvZGl2PlxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0eWxlc2V0IE9uZSBvciBtb3JlIHN0eWxlc2V0IG9iamVjdHMgdGhhdCBkZWZpbmUgc3R5bGUgcHJvcGVydGllcyBvZiB0aGUgY2xhc3MuXHJcbiAgICAgKiBAcGFyYW0gbmFtZU92ZXJyaWRlIHN0cmluZyBvciBhbm90aGVyIGBJQ2xhc3NSdWxlYCBvYmplY3QgdGhhdCBkZXRlcm1pbmVzIHRoZSBuYW1lIG9mIHRoZVxyXG4gICAgICogY2xhc3MuIElmIHRoaXMgb3B0aW9uYWwgcGFyYW1ldGVyIGlzIGRlZmluZWQsIHRoZSBuYW1lIHdpbGwgb3ZlcnJpZGUgdGhlIE1pbWNzcyBuYW1lXHJcbiAgICAgKiBhc3NpZ25tZW50IG1lY2hhbmlzbS4gVGhpcyBtaWdodCBiZSB1c2VmdWwgaWYgdGhlcmUgaXMgYSBuZWVkIGZvciB0aGUgY2xhc3MgdG8gbWF0Y2ggYSBuYW1lXHJcbiAgICAgKiBvZiBhbm90aGVyLCBwcm9iYWJseSBleHRlcm5hbCwgY2xhc3MuIElmIHRoaXMgcGFyYW1ldGVyIGlzIGRlZmluZWQgYXMgYSBzdHJpbmcsIGl0IHNob3VsZFxyXG4gICAgICogbm90IGhhdmUgdGhlIGBcIi5cImAgcHJlZml4LlxyXG4gICAgICogQHJldHVybnMgYElDbGFzc1J1bGVgIG9iamVjdCB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBnZXR0aW5nIHRoZSBjbGFzcyBuYW1lIGFuZCBmb3IgYWNjZXNzaW5nXHJcbiAgICAgKiB0aGUgc3R5bGUgcHJvcGVydGllcyBpZiBuZWVkZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAkY2xhc3MoIHN0eWxlc2V0PzogQ29tYmluZWRDbGFzc1N0eWxlc2V0IHwgQ29tYmluZWRDbGFzc1N0eWxlc2V0W10sXHJcbiAgICAgICAgbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSUNsYXNzUnVsZSk6IElDbGFzc1J1bGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsYXNzUnVsZSggdGhpcywgc3R5bGVzZXQsIG5hbWVPdmVycmlkZSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgY2xhc3MgbmFtZSBydWxlLCB3aGljaCBjb21iaW5lcyBvbmUgb3IgbW9yZSBvdGhlciBjbGFzcyBuYW1lcy4gVGhpcyBjcmVhdGVzIGFcclxuICAgICAqIFwic3lub255bVwiIHRoYXQgaXMgZWFzaWVyIHRvIGFwcGx5IHRvIGFuIGVsZW1lbnQncyBjbGFzcyBhdHRyaWJ1dGUgdGhhbiBhbiBhcnJheSBvZiB0d28gb3JcclxuICAgICAqIG1vcmUgY2xhc3MgcnVsZXMuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgLy8gZGVjbGFyZSBjbGFzcyAtIGp1c3QgdG8gYmUgdXNlZCBsYXRlclxyXG4gICAgICogICAgIHNwYWNlZCA9IGNzcy5jbGFzcyh7Z2FwOiA4fSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmJveCA9IHRoaXMuJGNsYXNzKHtcclxuICAgICAqICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgKiAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCJcclxuICAgICAqICAgICB9KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyB1c2UgJGNsYXNzbmFtZSBydWxlIHRvIGNvbWJpbmUgdGhlIG5hbWVzIG9mIGNsYXNzZXMgdmJveCBhbmQgc3BhY2VkXHJcbiAgICAgKiAgICAgc3BhY2VkVmJveCA9IHRoaXMuJGNsYXNzbmFtZSggdGhpcy52Ym94LCB0aGlzLnNwYWNlZClcclxuICAgICAqIH1cclxuICAgICAqIC4uLlxyXG4gICAgICogbGV0IHN0eWxlcyA9IGNzcy5hY3RpdmF0ZSggTXlDbGFzc2VzKTtcclxuICAgICAqIC4uLlxyXG4gICAgICogcmVuZGVyXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgLy8gd2l0aG91dCBzcGFjZWRWYm94LCB0aGUgY2xhc3Mgd291bGQgYmU6IHtbc3R5bGVzLnZib3gubmFtZSwgc3R5bGVzLnNwYWNlZC5uYW1lXX1cclxuICAgICAqICAgICByZXR1cm4gPGRpdiBjbGFzcz17c3R5bGVzLnNwYWNlZFZib3gubmFtZX0+XHJcbiAgICAgKiAgICAgICAgIDxzcGFuPkhlbGxvPC9zcGFuPlxyXG4gICAgICogICAgICAgICA8c3Bhbj5Xb3JsZCE8L3NwYW4+XHJcbiAgICAgKiAgICAgPC9kaXY+XHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gLi4uY2xhc3NlcyBMaXN0IG9mIGNsYXNzIG5hbWVzIHNwZWNpZmllZCBlaXRoZXIgYXMgYSBzdHJpbmcgb3IgW1tJQ2xhc3NSdWxlXV0gb3JcclxuICAgICAqIFtbSUNsYXNzTmFtZVJ1bGVdXSBvYmplY3RzLlxyXG4gICAgICogQHJldHVybnMgYElDbGFzc05hbWVSdWxlYCBvYmplY3Qgd2hvc2UgYG5hbWVgIHByb3BlcnR5IGNvbnRhaW5zIHRoZSBjb21iaW5lZCBjbGFzcyBuYW1lLCBlLmcuXHJcbiAgICAgKiBgXCJjbGFzczEgY2xhc3MyXCJgLiBUaGUgYGNzc0NsYXNzTmFtZWAgcHJvcGVydHkgY29udGFpbnMgdGhlIGNvbWJpbmVkIHNlbGVjdG9yLCBlLmcuXHJcbiAgICAgKiBgXCIuY2xhc3MxLmNsYXNzMlwiYC5cclxuICAgICAqL1xyXG4gICAgcHVibGljICRjbGFzc25hbWUoIC4uLmNsYXNzZXM6IChJQ2xhc3NSdWxlIHwgSUNsYXNzTmFtZVJ1bGUgfCBzdHJpbmcpW10pOiBJQ2xhc3NOYW1lUnVsZVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xhc3NOYW1lUnVsZSggdGhpcywgY2xhc3Nlcyk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgSUQgcnVsZS4gVGhlIElEIG5hbWUgd2lsbCBiZSBjcmVhdGVkIHdoZW4gdGhlIHJ1bGUgaXMgcHJvY2Vzc2VkIGFzIHBhcnQgb2ZcclxuICAgICAqIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzLiBUaGUgbmFtZSBjYW4gYmUgYWxzbyBvdmVycmlkZGVuIGJ5IHByb3ZpZGluZyBlaXRoZXIgYW4gZXhwbGljaXRcclxuICAgICAqIG5hbWUgb3IgYW5vdGhlciBJRCBydWxlLiBUaGUgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB3aXRob3V0IHBhcmFtZXRlcnMganVzdCB0byBcImRlY2xhcmVcIlxyXG4gICAgICogdGhlIElELiBTdWNoIElEIGNhbiBiZSBsYXRlciB1c2VkIGVpdGhlciBpbiBjb25kaXRpb25hbCBncm91cGluZyBydWxlcyBvciBpbiBkZXJpdmVkXHJcbiAgICAgKiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzZXMuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHJldHVybmVkIFtbSUlEUnVsZV1dIGludGVyZmFjZSBoYXMgdGhlIGBuYW1lYCBwcm9wZXJ0eSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGFzc2lnblxyXG4gICAgICogdGhlIElEIHRvIGFuIEhUTUwgZWxlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICBjb250YWluZXIgPSB0aGlzLiRpZCh7XHJcbiAgICAgKiAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgICogICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxyXG4gICAgICogICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIC4uLlxyXG4gICAgICogbGV0IHN0eWxlcyA9IGNzcy5hY3RpdmF0ZSggTXlDbGFzc2VzKTtcclxuICAgICAqIC4uLlxyXG4gICAgICogcmVuZGVyXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgcmV0dXJuIDxkaXYgaWQ9e3N0eWxlcy5jb250YWluZXIubmFtZX0+XHJcbiAgICAgKiAgICAgICAgIDxzcGFuPkhlbGxvPC9zcGFuPlxyXG4gICAgICogICAgICAgICA8c3Bhbj5Xb3JsZCE8L3NwYW4+XHJcbiAgICAgKiAgICAgPC9kaXY+XHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3R5bGVzZXQgT25lIG9yIG1vcmUgc3R5bGVzZXQgb2JqZWN0cyB0aGF0IGRlZmluZSBzdHlsZSBwcm9wZXJ0aWVzIG9mIHRoZSBlbGVtZW50LlxyXG4gICAgICogQHBhcmFtIG5hbWVPdmVycmlkZSBzdHJpbmcgb3IgYW5vdGhlciBgSUlEUnVsZWAgb2JqZWN0IHRoYXQgZGV0ZXJtaW5lcyB0aGUgbmFtZSBvZiB0aGUgSUQuXHJcbiAgICAgKiBJZiB0aGlzIG9wdGlvbmFsIHBhcmFtZXRlciBpcyBkZWZpbmVkLCB0aGUgbmFtZSB3aWxsIG92ZXJyaWRlIHRoZSBNaW1jc3MgbmFtZSBhc3NpZ25tZW50XHJcbiAgICAgKiBtZWNoYW5pc20uIFRoaXMgbWlnaHQgYmUgdXNlZnVsIGlmIHRoZXJlIGlzIGEgbmVlZCBmb3IgdGhlIElEIHRvIG1hdGNoIGEgbmFtZSBvZiBhbm90aGVyIElELlxyXG4gICAgICogSWYgdGhpcyBwYXJhbWV0ZXIgaXMgZGVmaW5lZCBhcyBhIHN0cmluZywgaXQgc2hvdWxkIG5vdCBoYXZlIHRoZSBgXCIuXCJgIHByZWZpeC5cclxuICAgICAqIEByZXR1cm5zIGBJSURSdWxlYCBvYmplY3QgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgZ2V0dGluZyB0aGUgSUQgbmFtZSBhbmQgZm9yIGFjY2Vzc2luZ1xyXG4gICAgICogdGhlIHN0eWxlIHByb3BlcnRpZXMgaWYgbmVlZGVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgJGlkKCBzdHlsZXNldD86IENvbWJpbmVkU3R5bGVzZXQgfCBDb21iaW5lZFN0eWxlc2V0W10sIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElJRFJ1bGUpOiBJSURSdWxlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJRFJ1bGUoIHRoaXMsIHN0eWxlc2V0LCBuYW1lT3ZlcnJpZGUpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHN0eWxlIHJ1bGUgZm9yIHRoZSBnaXZlbiBIVE1MIG9yIFNWRyBlbGVtZW50IHRhZ3MuIFRoZSBgdGFnYCBwYXJhbWV0ZXIgc3BlY2lmaWVzXHJcbiAgICAgKiBlaXRoZXIgYSBzaW5nbGUgdGFnIG9yIGFuIGFycmF5IG9mIHRhZ3MuIEluIGFkZGl0aW9uLCBhbiBhc3RlcmlzayBzeW1ib2wgKGBcIipcImApIGNhbiBiZVxyXG4gICAgICogc3BlY2lmaWVkIHRvIHRhcmdldCBhbGwgZWxlbWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogV2hlbiBtdWx0aXBsZSB0YWdzIGFyZSBzcGVjaWZpZWQsIHRoZXkgd2lsbCBiZSB0cmVhdGVkIGFzIGEgc2VsZWN0b3IgbGlzdDsgdGhhdCBpcywgdGhleSB3aWxsXHJcbiAgICAgKiBiZSBzZXBhcmF0ZWQgYnkgY29tbWFzLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZXM6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyB1c2luZyBzdHJpbmcgZm9yIHNlbGVjdGluZyBhIHNpbmdsZSBlbGVtZW5ldCB0YWc7XHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgQ1NTIFwidHIge31cIlxyXG4gICAgICogICAgIHRyID0gdGhpcy4kdGFnKCBcInRyXCIsIHt9KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyB1c2luZyBhcnJheSBmb3Igc2VsZWN0aW5nIG11bHRpcGxlIGVsZW1lbmV0IHRhZ3M7XHJcbiAgICAgKiAgICAgLy8gcHJvZHVjZXMgQ1NTIFwiaDEsIGgyLCBoMyB7fVwiXHJcbiAgICAgKiAgICAgaGVhZGVyMTIzID0gdGhpcy4kdGFnKCBbXCJoMVwiLCBcImgyXCIsIFwiaDNcIl0sIHt9KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyB1c2luZyBhc3RlcmlzayB0byBhZGRyZXNzIGFsbCBlbGVtZW50c1xyXG4gICAgICogICAgIC8vIHByb2R1Y2VzIENTUyBcIioge31cIlxyXG4gICAgICogICAgIGFsbCA9IHRoaXMuJHRhZyggXCIqXCIsIHt9KVxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHRhZyBPbmUgb3IgbW9yZSBlbGVtZW50IHRhZ3NcclxuICAgICAqIEBwYXJhbSBzdHlsZXNldCBPbmUgb3IgbW9yZSBzdHlsZXNldCBvYmplY3RzIHRoYXQgZGVmaW5lIHN0eWxlIHByb3BlcnRpZXMgZm9yIHRoZSB0YWdzLlxyXG4gICAgICogQHJldHVybnMgYElTdHlsZVJ1bGVgIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHRhZyBydWxlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgJHRhZyggdGFnOiBcIipcIiB8IEVsZW1lbnRUYWdOYW1lIHwgRWxlbWVudFRhZ05hbWVbXSxcclxuICAgICAgICBzdHlsZXNldDogQ29tYmluZWRTdHlsZXNldCB8IENvbWJpbmVkU3R5bGVzZXRbXSk6IElTdHlsZVJ1bGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNlbGVjdG9yUnVsZSggdGhpcywgQXJyYXkuaXNBcnJheSh0YWcpID8gdGFnLmpvaW4oXCIsXCIpIDogdGFnLCBzdHlsZXNldCk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgc3R5bGUgcnVsZSB3aXRoIGFuIGFyYml0cmFyeSBjb21wbGV4IHNlbGVjdG9yLiBTZWxlY3RvcnMgY2FuIGJlIHNwZWNpZmllZCBhc1xyXG4gICAgICogb25lIG9yIGFycmF5IG9mIFtbU2VsZWN0b3JJdGVtXV0gb2JqZWN0cyB3aGVyZSBlYWNoIGBTZWxlY3Rvckl0ZW1gIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXHJcbiAgICAgKiB0eXBlczpcclxuICAgICAqIC0gc3RyaW5nIC0gYWxsb3dzIGFueSBjb250ZW50IGJ1dCBsYWNrcyB0eXBlLXNhZmV0eSBjaGVja3MuXHJcbiAgICAgKiAtIGFueSBzdHlsZSBydWxlLCB0aGF0IGlzIGEgcnVsZSB0aGF0IGltcGxlbWVudHMgdGhlIFtbSVN0eWxlUnVsZV1dIGludGVyZmFjZS4gVGhpcyBhbGxvd3NcclxuICAgICAqICAgdXNpbmcgcHJldm91c2x5IGRlZmluZWQgdGFnLCBjbGFzcywgSUQgYW5kIG90aGVyIHN0eWxlIHJ1bGVzIGFzIHNlbGVjdG9yIGl0ZW1zXHJcbiAgICAgKiAtIFtbc2VsZWN0b3JdXSBmdW5jdGlvbiAtIGEgdGFnIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIGNvbnZlbmllbnQgbWl4aW5nIG9mIGZyZWUtZm9ybWF0IHN0cmluZ3NcclxuICAgICAqICAgYW5kIHN0cm9uZ2x5IHR5cGVkIHN0eWxlIHJ1bGVzLlxyXG4gICAgICpcclxuICAgICAqIFdoZW4gbXVsdGlwbGUgc2VsZWN0b3IgaXRlbXMgYXJlIHNwZWNpZmllZCwgdGhleSB3aWxsIGJlIGNvbmNhdGVuYXRlZCBpbnRvIGEgc2luZ2xlIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlIHRoYXQgYWx0aG91Z2ggc3R5bGUgcnVsZXMgY2FuIGJlIHVzZWQgZm9yIHNlbGVjdGluZyBlbGVtZW50IHRhZ3MsIHRoZSBbWyR0YWddXSBmdW5jdGlvbiB3b3VsZFxyXG4gICAgICogYmUgbW9yZSBhcHByb3ByaWF0ZSBiZWNhdXNlIGl0IHdpbGwgY2F0Y2ggbWlzc3BlbGxpbmdzIG9mIHRhZyBuYW1lcy5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGVzOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgLy8gdXNpbmcgYSBzdHJpbmdcclxuICAgICAqICAgICBzdHlsZTEgPSB0aGlzLiRzdHlsZSggXCJsaTo6YmVmb3JlXCIsIHt9KVxyXG4gICAgICpcclxuICAgICAqICAgICBpZCA9IHRoaXMuJGlkKClcclxuICAgICAqICAgICBjbHMgPSB0aGlzLiRjbGFzcygpXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHVzaW5nIGFuIGFycmF5IG9mIHN0eWxlIHJ1bGVzLiBUaGUgc2VsZWN0b3Igd2lsbCBiZSBcIiNpZC5jbHNcIlxyXG4gICAgICogICAgIHN0eWxlMiA9IHRoaXMuJHN0eWxlKCBbdGhpcy5pZCwgdGhpcy5jbHNdLCB7fSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgLy8gdXNpbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uLiBUaGUgc2VsZWN0b3Igd2lsbCBiZSBcIiNpZCA+IC5jbHNcIlxyXG4gICAgICogICAgIHN0eWxlMyA9IHRoaXMuJHN0eWxlKCBjc3Muc2VsZWN0b3JgJHt0aGlzLmlkfSA+ICR7dGhpcy5jbHN9YCwge30pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHVzaW5nIGEgc3RyaW5nIGZvciBzZWxlY3RpbmcgZWxlbWVudCB0YWcuXHJcbiAgICAgKiAgICAgaDEgPSB0aGlzLiRzdHlsZSggXCJoMVwiLCB7fSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBTdHlsZSBydWxlIHNlbGVjdG9yXHJcbiAgICAgKiBAcGFyYW0gc3R5bGVzZXQgT25lIG9yIG1vcmUgc3R5bGVzZXQgb2JqZWN0cyB0aGF0IGRlZmluZSBzdHlsZSBwcm9wZXJ0aWVzIGZvciB0aGlzIHNlbGVjdG9yLlxyXG4gICAgICogQHJldHVybnMgYElTdHlsZVJ1bGVgIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHN0eWxlIHJ1bGUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAkc3R5bGUoIHNlbGVjdG9yOiBDc3NTZWxlY3Rvciwgc3R5bGVzZXQ6IENvbWJpbmVkU3R5bGVzZXQgfCBDb21iaW5lZFN0eWxlc2V0W10pOiBJU3R5bGVSdWxlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3RvclJ1bGUoIHRoaXMsIHNlbGVjdG9yLCBzdHlsZXNldCk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgbmV3IGFuaW1hdGlvbiBydWxlLiBUaGUgYW5pbWF0aW9uIG5hbWUgd2lsbCBiZSBjcmVhdGVkIHdoZW4gdGhlIHJ1bGUgaXMgcHJvY2Vzc2VkIGFzXHJcbiAgICAgKiBwYXJ0IG9mIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzLiBUaGUgbmFtZSBjYW4gYmUgYWxzbyBvdmVycmlkZGVuIGJ5IHByb3ZpZGluZyBlaXRoZXIgYW5cclxuICAgICAqIGV4cGxpY2l0IG5hbWUgb3IgYW5vdGhlciBhbmltYXRpb24gcnVsZS4gVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgd2l0aG91dCBwYXJhbWV0ZXJzIGp1c3QgdG9cclxuICAgICAqIFwiZGVjbGFyZVwiIHRoZSBhbmltYXRpb24uIFN1Y2ggYW5pbWF0aW9uIGNhbiBiZSBsYXRlciB1c2VkIGVpdGhlciBpbiBjb25kaXRpb25hbCBncm91cGluZyBydWxlc1xyXG4gICAgICogb3IgaW4gZGVyaXZlZCBzdHlsZSBkZWZpbml0aW9uIGNsYXNzZXMuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHJldHVybmVkIFtbSUFuaW1hdGlvblJ1bGVdXSBpbnRlcmZhY2UgcmVwcmVzZW50cyBhbiBvYmplY3QgdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuXHJcbiAgICAgKiB1c2luZyB0aGUga2V5ZnJhbWVzIG5hbWUgaW4gdGhlIGBhbmltYXRpb24tbmFtZWAgb3IgYGFuaW1hdGlvbmAgc3R5bGUgcHJvcGVydGllcy5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICB2YW5pc2ggPSB0aGlzLiRrZXlmcmFtZXMoW1xyXG4gICAgICogICAgICAgICBbMCwgeyBvcGFjaXR5OiAxMDAgfV0sXHJcbiAgICAgKiAgICAgXHQgICBbMTAwLCB7IG9wYWNpdHk6IDAgfV0sXHJcbiAgICAgKiAgICAgXSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFuaXNoaW5nQmxvY2sgPSB0aGlzLiRjbGFzcyh7XHJcbiAgICAgKiAgICAgICAgIGFuaW1hdGlvbjogeyBuYW1lOiB0aGlzLnZhbmlzaCwgZHVyYXRpb246IDIwMDAsIGNvdW50OiBcImluZmluaXRlXCIsIGRpcmVjdGlvbjogXCJhbHRlcm5hdGVcIiB9XHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmcmFtZXMgQXJyYXkgb2YgW1tBbmltYXRpb25GcmFtZV1dIG9iamVjdHMuIEVhY2ggYW5pbWF0aW9uIGZyYW1lIGNvbnRhaW5zIGEgd2F5cG9pbnRcclxuICAgICAqIGFuZCBhIHN0eWxlc2V0LlxyXG4gICAgICogQHBhcmFtIG5hbWVPdmVycmlkZSBTdHJpbmcgb3IgYW5vdGhlciBgSUFuaW1hdGlvblJ1bGVgIG9iamVjdCB0aGF0IGRldGVybWluZXMgdGhlIG5hbWUgb2YgdGhlXHJcbiAgICAgKiBhbmltYXRpb24uIElmIHRoaXMgb3B0aW9uYWwgcGFyYW1ldGVyIGlzIGRlZmluZWQsIHRoZSBuYW1lIHdpbGwgb3ZlcnJpZGUgdGhlIE1pbWNzcyBuYW1lXHJcbiAgICAgKiBhc3NpZ25tZW50IG1lY2hhbmlzbS4gVGhpcyBtaWdodCBiZSB1c2VmdWwgaWYgdGhlcmUgaXMgYSBuZWVkIGZvciB0aGUgbmFtZSB0byBtYXRjaCBhIG5hbWUgb2ZcclxuICAgICAqIGFub3RoZXIgYW5pbWF0aW9uLlxyXG4gICAgICogQHJldHVybnMgYElBbmltYXRpb25SdWxlYCBvYmplY3QgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgZ2V0dGluZyB0aGUgYW5pbWF0aW9uIG5hbWUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAka2V5ZnJhbWVzKCBmcmFtZXM/OiBBbmltYXRpb25GcmFtZVtdLCBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJQW5pbWF0aW9uUnVsZSk6IElBbmltYXRpb25SdWxlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBbmltYXRpb25SdWxlKCB0aGlzLCBmcmFtZXMsIG5hbWVPdmVycmlkZSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgbmV3IGN1c3RvbSB2YXJpYWJsZSBvYmplY3QgdGhhdCBkZWZpbmVzIGEgY3VzdG9tIENTUyBwcm9wZXJ0eS4gVGhlIHZhcmlhYmxlIG5hbWUgd2lsbFxyXG4gICAgICogYmUgY3JlYXRlZCB3aGVuIHRoZSBydWxlIGlzIHByb2Nlc3NlZCBhcyBwYXJ0IG9mIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzLiBUaGUgbmFtZSBjYW4gYmVcclxuICAgICAqIGFsc28gb3ZlcnJpZGRlbiBieSBwcm92aWRpbmcgZWl0aGVyIGFuIGV4cGxpY2l0IG5hbWUgb3IgYW5vdGhlciBjdXN0b20gdmFyaWFibGUgcnVsZS4gVGhlXHJcbiAgICAgKiBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIHdpdGhvdXQgc3BlY2lmeWluZyB0aGUgdmFsdWUganVzdCB0byBcImRlY2xhcmVcIiB0aGUgdmFyaWFibGUuIFN1Y2hcclxuICAgICAqIHZhcmlhYmxlIGNhbiBiZSBsYXRlciB1c2VkIGVpdGhlciBpbiBjb25kaXRpb25hbCBncm91cGluZyBydWxlcyBvciBpbiBkZXJpdmVkIHN0eWxlIGRlZmluaXRpb25cclxuICAgICAqIGNsYXNzZXMuXHJcbiAgICAgKlxyXG4gICAgICogQ3VzdG9tIHByb3BlcnRpZXMgZGVmaW5lZCB1c2luZyB0aGUgYCR2YXJgIGZ1bmN0aW9uIGFyZSBpbmNsdWRlZCBpbnRvIHRoZSBgOnJvb3Qge31gIGJsb2NrO1xyXG4gICAgICogaG93ZXZlciwgdGhleSBjYW4gYmUgcmVkZWZpbmVkIHdpdGggZGlmZmVyZW50IHZhbHVlcyB1bmRlciBhbnkgc3R5bGUgcnVsZS5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyBkZWZpbmUgYW5kIHVzZSBjdXN0b20gQ1NTIHByb3BlcnR5XHJcbiAgICAgKiAgICAgaW1wb3J0YW50VGV4dENvbG9yID0gdGhpcy4kdmFyKCBcImNvbG9yXCIsIFwicmVkXCIpXHJcbiAgICAgKiAgICAgaW1wb3J0YW50ID0gdGhpcy4kY2xhc3Moe1xyXG4gICAgICogICAgICAgICBjb2xvcjogdGhpcy5pbXBvcnRhbnRUZXh0Q29sb3JcclxuICAgICAqICAgICB9KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyB1c2UgZGlmZmVyZW50IHZhbHVlIGZvciB0aGUgY3VzdG9tIHByb3BlcnR5IHVuZGVyIGFub3RoZXIgQ1NTIGNsYXNzXHJcbiAgICAgKiAgICAgc3BlY2lhbCA9IHRoaXMuJGNsYXNzKHtcclxuICAgICAqICAgICAgICAgXCIrXCI6IHRoaXMuaW1wb3J0YW50LFxyXG4gICAgICogICAgICAgICBcIi0tXCI6IFsgW3RoaXMuaW1wb3J0YW50VGV4dENvbG9yLCBcIm1hcm9vblwiXSBdXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZSBFaXRoZXIgYSBuYW1lIG9mIGEgc3R5bGUgcHJvcGVydHkgKGluIGNhbWVsLWNhc2UpIG9yIGEgbmFtZSBvZiB0aGUgcHJvcGVydHkgZnJvbVxyXG4gICAgICogdGhlIFtbSVZhclRlbXBsYXRlU3R5bGVzZXRdXSBpbnRlcmZhY2UuIFRoZSB0eXBlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBwcm9wZXJ0eSBkZWZpbmVzIHRoZSB0eXBlXHJcbiAgICAgKiBvZiB0aGUgc2Vjb25kIHBhcmFtZXRlci5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgYXNzaWduZWQgdG8gdGhlIHByb3BlcnR5LlxyXG4gICAgICogQHBhcmFtIG5hbWVPdmVycmlkZSBTdHJpbmcgb3IgYW5vdGhlciBgSVZhclJ1bGVgIG9iamVjdCB0aGF0IGRldGVybWluZXMgdGhlIG5hbWUgb2YgdGhlXHJcbiAgICAgKiBjdXN0b20gcHJvcGVydHkuIElmIHRoaXMgb3B0aW9uYWwgcGFyYW1ldGVyIGlzIGRlZmluZWQsIHRoZSBuYW1lIHdpbGwgb3ZlcnJpZGUgdGhlIE1pbWNzcyBuYW1lXHJcbiAgICAgKiBhc3NpZ25tZW50IG1lY2hhbmlzbS4gVGhpcyBtaWdodCBiZSB1c2VmdWwgaWYgdGhlcmUgaXMgYSBuZWVkIGZvciB0aGUgbmFtZSB0byBtYXRjaCBhIG5hbWUgb2ZcclxuICAgICAqIGV4aXN0aW5nIHByb3BlcnR5LiBJZiB0aGlzIHBhcmFtZXRlciBpcyBkZWZpbmVkIGFzIGEgc3RyaW5nLCBpdCBzaG91bGQgbm90IGhhdmUgdGhlIGBcIi5cImAgcHJlZml4LlxyXG4gICAgICogQHJldHVybnMgVGhlIGBJVmFyUnVsZWAgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgY3VzdG9tIHByb3BlcnR5LiBBbnkgdXNhZ2Ugb2YgdGhpcyBvYmplY3QgaW5cclxuICAgICAqIHN0eWxlIHByb3BlcnRpZXMgb3IgZnVuY3Rpb24gcGFyYW1ldGVycyBpcyBzdWJzdGl0dXRlZCBieSB0aGUgYHZhcigpYCBDU1MgZnVuY3Rpb24gaW52b2NhdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljICR2YXI8SyBleHRlbmRzIFZhclRlbXBsYXRlTmFtZT4oIHRlbXBsYXRlOiBLLCB2YWx1ZT86IEV4dGVuZGVkVmFyVmFsdWU8Sz4sXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSVZhclJ1bGU8Sz4pOiBJVmFyUnVsZTxLPlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFyUnVsZSggdGhpcywgdGVtcGxhdGUsIHZhbHVlLCBuYW1lT3ZlcnJpZGUpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIG5ldyBgQHByb3BlcnR5YCBydWxlLiBUaGUgcHJvcGVydHkgbmFtZSB3aWxsIGJlIGNyZWF0ZWQgd2hlbiB0aGUgcnVsZSBpcyBwcm9jZXNzZWRcclxuICAgICAqIGFzIHBhcnQgb2YgdGhlIHN0eWxlIGRlZmluaXRpb24gY2xhc3MuIFRoZSBuYW1lIGNhbiBiZSBhbHNvIG92ZXJyaWRkZW4gYnkgcHJvdmlkaW5nIGVpdGhlclxyXG4gICAgICogYW4gZXhwbGljaXQgbmFtZSBvciBhbm90aGVyIGN1c3RvbSB2YXJpYWJsZSBydWxlLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgdmFyaWFudCBhbGxvd3Mgc3BlY2lmeWluZyBzeW50YXggYXMgb25lIG9mIHByZWRlZmluZWQgc3ludGF4IGl0ZW1zIHN1Y2ggYXMgYDxudW1iZXI+YFxyXG4gICAgICogb3IgYDxjb2xvcj5gIG9wdGlvbmFsbHkgYWNjb21wYW5pZWQgd2l0aCB0aGUgbXVsdGlwbGllcnMgYFwiI1wiYCBvciBgXCIrXCIuIFRoZSB0eXBlIG9mIGluaXRpYWxcclxuICAgICAqIHZhbHVlIGFzIHdlbGwgYXMgdGhlIHR5cGUgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBgc2V0VmFsdWVgIG1ldGhvZCBvZiB0aGUgcmV0dXJuZWRcclxuICAgICAqIFtbSVZhclJ1bGVdXSBpbnRlcmZhY2Ugd2lsbCBiZSBlbmZvcmNlZCBhY2NvcmRpbmcgdG8gdGhlIHN5bnRheCBzcGVjaWZpZWQuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgLy8gZGVmaW5lIGFuZCB1c2UgY3VzdG9tIENTUyBwcm9wZXJ0eVxyXG4gICAgICogICAgIGltcG9ydGFudFRleHRDb2xvciA9IHRoaXMuJHByb3BlcnR5KCBcIjxjb2xvcj5cIiwgXCJyZWRcIiwgZmFsc2UpXHJcbiAgICAgKiAgICAgaW1wb3J0YW50ID0gdGhpcy4kY2xhc3Moe1xyXG4gICAgICogICAgICAgICBjb2xvcjogdGhpcy5pbXBvcnRhbnRUZXh0Q29sb3JcclxuICAgICAqICAgICB9KVxyXG4gICAgICpcclxuICAgICAqICAgICAvLyB1c2UgZGlmZmVyZW50IHZhbHVlIGZvciB0aGUgY3VzdG9tIHByb3BlcnR5IHVuZGVyIGFub3RoZXIgQ1NTIGNsYXNzXHJcbiAgICAgKiAgICAgc3BlY2lhbCA9IHRoaXMuJGNsYXNzKHtcclxuICAgICAqICAgICAgICAgXCIrXCI6IHRoaXMuaW1wb3J0YW50LFxyXG4gICAgICogICAgICAgICBcIi0tXCI6IFsgW3RoaXMuaW1wb3J0YW50VGV4dENvbG9yLCBcIm1hcm9vblwiXSBdXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzeW50YXggTmFtZSBvZiB0aGUgcHJvcGVydHkgZnJvbSB0aGUgW1tJU3ludGF4VHlwZVN0eWxlc2V0XV0gaW50ZXJmYWNlLiBUaGUgdHlwZVxyXG4gICAgICogY29ycmVzcG9uZGluZyB0byB0aGlzIHByb3BlcnR5IGRlZmluZXMgdGhlIHR5cGUgb2YgdGhlIGluaXRpYWwgdmFsdWUgcGFyYW1ldGVyLlxyXG4gICAgICogQHBhcmFtIGluaXRWYWx1ZSBUaGUgdmFsdWUgdG8gYmUgdXNlZCBhcyBpbml0aWFsIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cclxuICAgICAqIEBwYXJhbSBpbmhlcml0cyBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgY3VzdG9tIHByb3BlcnR5IHJlZ2lzdHJhdGlvbiBpbmhlcml0cyBieSBkZWZhdWx0LlxyXG4gICAgICogQHBhcmFtIG5hbWVPdmVycmlkZSBTdHJpbmcgb3IgYW5vdGhlciBgSVZhclJ1bGVgIG9iamVjdCB0aGF0IGRldGVybWluZXMgdGhlIG5hbWUgb2YgdGhlXHJcbiAgICAgKiBjdXN0b20gcHJvcGVydHkuIElmIHRoaXMgb3B0aW9uYWwgcGFyYW1ldGVyIGlzIGRlZmluZWQsIHRoZSBuYW1lIHdpbGwgb3ZlcnJpZGUgdGhlIE1pbWNzcyBuYW1lXHJcbiAgICAgKiBhc3NpZ25tZW50IG1lY2hhbmlzbS4gVGhpcyBtaWdodCBiZSB1c2VmdWwgaWYgdGhlcmUgaXMgYSBuZWVkIGZvciB0aGUgbmFtZSB0byBtYXRjaCBhIG5hbWUgb2ZcclxuICAgICAqIGV4aXN0aW5nIHByb3BlcnR5LiBJZiB0aGlzIHBhcmFtZXRlciBpcyBkZWZpbmVkIGFzIGEgc3RyaW5nLCBpdCBzaG91bGQgbm90IGhhdmUgdGhlIGBcIi5cImAgcHJlZml4LlxyXG4gICAgICogQHJldHVybnMgVGhlIGBJVmFyUnVsZWAgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgYEBwcm9wZXJ0eWAgcnVsZS4gQW55IHVzYWdlIG9mIHRoaXMgb2JqZWN0IGluXHJcbiAgICAgKiBzdHlsZSBwcm9wZXJ0aWVzIG9yIGZ1bmN0aW9uIHBhcmFtZXRlcnMgaXMgc3Vic3RpdHV0ZWQgYnkgdGhlIGB2YXIoKWAgQ1NTIGZ1bmN0aW9uIGludm9jYXRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAkcHJvcGVydHk8SyBleHRlbmRzIGtleW9mIElTeW50YXhUeXBlU3R5bGVzZXQ+KFxyXG4gICAgICAgIHN5bnRheDogSywgaW5pdFZhbHVlOiBFeHRlbmRlZFZhclZhbHVlPEs+LCBpbmhlcml0czogYm9vbGVhbixcclxuICAgICAgICBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJVmFyUnVsZTxLPik6IElWYXJSdWxlPEs+XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIG5ldyBgQHByb3BlcnR5YCBydWxlLiBUaGUgcHJvcGVydHkgbmFtZSB3aWxsIGJlIGNyZWF0ZWQgd2hlbiB0aGUgcnVsZSBpcyBwcm9jZXNzZWRcclxuICAgICAqIGFzIHBhcnQgb2YgdGhlIHN0eWxlIGRlZmluaXRpb24gY2xhc3MuIFRoZSBuYW1lIGNhbiBiZSBhbHNvIG92ZXJyaWRkZW4gYnkgcHJvdmlkaW5nIGVpdGhlclxyXG4gICAgICogYW4gZXhwbGljaXQgbmFtZSBvciBhbm90aGVyIGN1c3RvbSB2YXJpYWJsZSBydWxlLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgdmFyaWFudCBhbGxvd3Mgc3BlY2lmeWluZyBhcmJpdHJhcnkgc3ludGF4IGFuZCB0aGUgZGV2ZWxvcGVycyBhcmUgcmVzcG9uc2libGUgdG9cclxuICAgICAqIHByb3ZpZGUgY29ycmVjdCBzeW50YXguIFRoZSB0eXBlIG9mIGluaXRpYWwgdmFsdWUgYXMgd2VsbCBhcyB0aGUgdHlwZSB0aGF0IGNhbiBiZSBwYXNzZWQgdG9cclxuICAgICAqIHRoZSBgc2V0VmFsdWVgIG1ldGhvZCBvZiB0aGUgcmV0dXJuZWQgW1tJVmFyUnVsZV1dIGludGVyZmFjZSBhcmUgbGltaXRlZCB0byBzdHJpbmcuIFRoZVxyXG4gICAgICogZGV2ZWxvcGVycyBhcmUgcmVzcG9uc2libGUgdG8gcGFzcyB2YWx1ZXMgdGhhdCBjb25mb3JtIHRvIHRoZSBzcGVjaWZpZWQgc3ludGF4LlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIGRlZmluZSBhbmQgdXNlIGN1c3RvbSBDU1MgcHJvcGVydHlcclxuICAgICAqICAgICBpbXBvcnRhbnRUZXh0Q29sb3IgPSB0aGlzLiRwcm9wZXJ0eSggW1wiPGNvbG9yPiMgfCBub25lXCJdLCBcInJlZFwiLCBmYWxzZSlcclxuICAgICAqICAgICBpbXBvcnRhbnQgPSB0aGlzLiRjbGFzcyh7XHJcbiAgICAgKiAgICAgICAgIGNvbG9yOiB0aGlzLmltcG9ydGFudFRleHRDb2xvclxyXG4gICAgICogICAgIH0pXHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIHVzZSBkaWZmZXJlbnQgdmFsdWUgZm9yIHRoZSBjdXN0b20gcHJvcGVydHkgdW5kZXIgYW5vdGhlciBDU1MgY2xhc3NcclxuICAgICAqICAgICBzcGVjaWFsID0gdGhpcy4kY2xhc3Moe1xyXG4gICAgICogICAgICAgICBcIitcIjogdGhpcy5pbXBvcnRhbnQsXHJcbiAgICAgKiAgICAgICAgIFwiLS1cIjogWyBbdGhpcy5pbXBvcnRhbnRUZXh0Q29sb3IsIFwibWFyb29uXCJdIF1cclxuICAgICAqICAgICB9KVxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN5bnRheCBTaW5nbGUtZWxlbWVudCB0dXBsZSBjb250YWluaW5nIHRoZSBzeW50YXggc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIGluaXRWYWx1ZSBUaGUgdmFsdWUgdG8gYmUgdXNlZCBhcyBpbml0aWFsIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cclxuICAgICAqIEBwYXJhbSBpbmhlcml0cyBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgY3VzdG9tIHByb3BlcnR5IHJlZ2lzdHJhdGlvbiBpbmhlcml0cyBieSBkZWZhdWx0LlxyXG4gICAgICogQHBhcmFtIG5hbWVPdmVycmlkZSBTdHJpbmcgb3IgYW5vdGhlciBgSVZhclJ1bGVgIG9iamVjdCB0aGF0IGRldGVybWluZXMgdGhlIG5hbWUgb2YgdGhlXHJcbiAgICAgKiBjdXN0b20gcHJvcGVydHkuIElmIHRoaXMgb3B0aW9uYWwgcGFyYW1ldGVyIGlzIGRlZmluZWQsIHRoZSBuYW1lIHdpbGwgb3ZlcnJpZGUgdGhlIE1pbWNzcyBuYW1lXHJcbiAgICAgKiBhc3NpZ25tZW50IG1lY2hhbmlzbS4gVGhpcyBtaWdodCBiZSB1c2VmdWwgaWYgdGhlcmUgaXMgYSBuZWVkIGZvciB0aGUgbmFtZSB0byBtYXRjaCBhIG5hbWUgb2ZcclxuICAgICAqIGV4aXN0aW5nIHByb3BlcnR5LiBJZiB0aGlzIHBhcmFtZXRlciBpcyBkZWZpbmVkIGFzIGEgc3RyaW5nLCBpdCBzaG91bGQgbm90IGhhdmUgdGhlIGBcIi5cImAgcHJlZml4LlxyXG4gICAgICogQHJldHVybnMgVGhlIGBJVmFyUnVsZWAgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgYEBwcm9wZXJ0eWAgcnVsZS4gQW55IHVzYWdlIG9mIHRoaXMgb2JqZWN0IGluXHJcbiAgICAgKiBzdHlsZSBwcm9wZXJ0aWVzIG9yIGZ1bmN0aW9uIHBhcmFtZXRlcnMgaXMgc3Vic3RpdHV0ZWQgYnkgdGhlIGB2YXIoKWAgQ1NTIGZ1bmN0aW9uIGludm9jYXRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAkcHJvcGVydHkoIHN5bnRheDogW3N0cmluZ10sIGluaXRWYWx1ZTogRXh0ZW5kZWRQcm9wPHN0cmluZz4sIGluaGVyaXRzOiBib29sZWFuLFxyXG4gICAgICAgIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElWYXJSdWxlPFwiKlwiPik6IElWYXJSdWxlPFwiKlwiPjtcclxuXHJcbiAgICAvLyBpbXBsZW1lbnRhdGlvblxyXG4gICAgJHByb3BlcnR5PEsgZXh0ZW5kcyBrZXlvZiBJU3ludGF4VHlwZVN0eWxlc2V0ID0gYW55LCBUIGV4dGVuZHMgSyB8IFtzdHJpbmddID0gYW55PihcclxuICAgICAgICBzeW50YXg6IFQsIGluaXRWYWx1ZTogRXh0ZW5kZWRWYXJWYWx1ZTxLPiwgaW5oZXJpdHMgPSB0cnVlLFxyXG4gICAgICAgIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElWYXJSdWxlPEs+KTogSVZhclJ1bGU8Sz5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb3BlcnR5UnVsZSggdGhpcywgc3ludGF4LCBpbml0VmFsdWUsIGluaGVyaXRzLCBuYW1lT3ZlcnJpZGUpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgXCJjb25zdGFudFwiIHRoYXQgY2FuIGJlIHVzZWQgYW55d2hlcmUgdGhlIHR5cGUgZGVmaW5lZCBieSB0aGUgYHRlbXBsYXRlYCBwYXJhbWV0ZXIgY2FuXHJcbiAgICAgKiBiZSB1c2VkLiBUaGV5IGFyZSBjYWxsZWQgY29uc3RhbnRzLCBiZWNhdXNlIHRoZXkgcHJvdmlkZSBhIGNvbnZlbmllbnQgYW5kIGxpZ2h0d2VpZ2h0IHdheSBvZlxyXG4gICAgICogZGVmaW5pbmcgdmFsdWVzIHRoYXQgYXJlIHVuY2hhbmdlZCBkdXJpbmcgdGhlIGFwcGxpY2F0aW9uIGxpZmV0aW1lLiBBbHRob3VnaCBjb25zdGFudHMgYXJlXHJcbiAgICAgKiBkZWZpbmVkIHZlcnkgc2ltaWxhcmx5IHRvIGN1c3RvbSBwcm9wZXJ0aWVzIChzZWUgdGhlIFtbJHZhcl1dIGZ1bmN0aW9uKSwgdGhleSBjYW5ub3QgcGFydGljaXBhdGVcclxuICAgICAqIGluIHRoZSBjYXNjYWRlIGFuZCBjYW5ub3QgYmUgcmVkZWZpbmVkIHVuZGVyIHN0eWxlIHJ1bGVzLiBDb25zdGFudCBjYW4gdXNlIGFueSBleHByZXNzaW9uIHRoYXRcclxuICAgICAqIHNhdGlzZmllcyB0aGUgdHlwZSBkZWZpbmVkIGJ5IHRoZSBgdGVtcGxhdGVgIHBhcmFtZXRlciBpbmNsdWRpbmcgb3RoZXIgY29uc3RhbnRzLCBjdXN0b21cclxuICAgICAqIHByb3BlcnRpZXMgYW5kIGZ1bmN0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBObyBDU1MgcnVsZXMgYXJlIGNyZWF0ZWQgZm9yIGNvbnN0YW50cyBhbmQsIGR1ZSB0byB0aGlzIGZhY3QsIGNvbnN0YW50cyBhcmUgcHJlZmVyYWJsZSB0byBjdXN0b21cclxuICAgICAqIHByb3BlcnRpZXMgdW5sZXNzIHRoZSBpbnRlbnRpb24gaXMgdG8gY2hhbmdlIHRoZSB2YXJpYWJsZSB2YWx1ZSBhdCBydW4tdGltZSBvciB0byByZWRlZmluZSBpdHNcclxuICAgICAqIHZhbHVlIHVuZGVyIGRpZmZlcmVudCBzdHlsZSBydWxlcy5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyBkZWZpbmluZyBhbmQgdXNpbmcgY3VzdG9tIENTUyBwcm9wZXJ0eVxyXG4gICAgICogICAgIGRlZmF1bHRUZXh0Q29sb3IgPSB0aGlzLiRjb25zdCggXCJjb2xvclwiLCBcInJlZFwiKVxyXG4gICAgICogICAgIHBhcmEgPSB0aGlzLiRzdHlsZSggXCJwXCIsIHtcclxuICAgICAqICAgICAgICAgY29sb3I6IHRoaXMuZGVmYXVsdFRleHRDb2xvclxyXG4gICAgICogICAgIH0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdGVtcGxhdGUgRWl0aGVyIGEgbmFtZSBvZiBhIHN0eWxlIHByb3BlcnR5IChpbiBjYW1lbC1jYXNlKSBvciBhIG5hbWUgb2YgdGhlIHByb3BlcnR5IGZyb21cclxuICAgICAqIHRoZSBbW0lWYXJUZW1wbGF0ZVN0eWxlc2V0XV0gaW50ZXJmYWNlLiBUaGUgdHlwZSBjb3JyZXNwb25kaW5nIHRvIHRoYXQgcHJvcGVydHkgZGVmaW5lcyB0aGUgdHlwZVxyXG4gICAgICogb2YgdGhlIHNlY29uZCBwYXJhbWV0ZXIuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIGFzc2lnbmVkIHRvIHRoZSBjb25zdGFudC5cclxuICAgICAqIEByZXR1cm5zIFRoZSBgSUNvbnN0UnVsZWAgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2YgdGhlIGNvbnN0YW50LiBUaGUgdmFsdWUgaXNcclxuICAgICAqIGNvbXB1dGVkIG9uY2Ugd2hlbiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBpcyBwcm9jZXNzZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAkY29uc3Q8SyBleHRlbmRzIFZhclRlbXBsYXRlTmFtZT4oIHRlbXBsYXRlOiBLLCB2YWx1ZT86IEV4dGVuZGVkVmFyVmFsdWU8Sz4pOiBJQ29uc3RSdWxlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zdFJ1bGUoIHRoaXMsIHRlbXBsYXRlLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgbmV3IGNvdW50ZXIgb2JqZWN0LiBUaGUgY291bnRlciBuYW1lIHdpbGwgYmUgY3JlYXRlZCB3aGVuIHRoZSBydWxlIGlzIHByb2Nlc3NlZCBhc1xyXG4gICAgICogcGFydCBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcy4gVGhlIG5hbWUgY2FuIGJlIGFsc28gb3ZlcnJpZGRlbiBieSBwcm92aWRpbmcgZWl0aGVyIGFuXHJcbiAgICAgKiBleHBsaWNpdCBuYW1lIG9yIGFub3RoZXIgY291bnRlciBydWxlLlxyXG4gICAgICpcclxuICAgICAqIENvdW50ZXIgcnVsZXMgZG9uJ3QgY3JlYXRlIGFueSBDU1MgcnVsZXMsIGJ1dCB0aGV5IGNyZWF0ZSB1bmlxdWUgbmFtZXMgdGhhdCBjYW4gYmUgdXNlZFxyXG4gICAgICogZm9yIGBjb3VudGVyLXJlc2V0YCBhbmQgYGNvdW50ZXItaW5jcmVtZW50YCBzdHlsZSBwcm9wZXJ0aWVzLiBDb3VudGVyIHJ1bGVzIGFyZSB1c3VhbGx5IHVzZWRcclxuICAgICAqIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIFtbY291bnRlcl1dIGFuZCBbW2NvdW50ZXJzXV0gZnVuY3Rpb25zLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGNvdW50ZXIgPSB0aGlzLiRjb3VudGVyKClcclxuICAgICAqICAgICBvbCA9IHRoaXMuJHN0eWxlKCBcIm9sXCIsIHsgY291bnRlclJlc2V0OiB0aGlzLmNvdW50ZXIsIGxpc3RTdHlsZVR5cGU6IFwibm9uZVwiIH0pXHJcbiAgICAgKiAgICAgbGkgPSB0aGlzLiRzdHlsZSggXCJsaVwiLCB7XHJcbiAgICAgKiAgICAgICAgIGNvdW50ZXJJbmNyZW1lbnQ6IHRoaXMuY291bnRlcixcclxuICAgICAqICAgICAgICAgXCI6OmJlZm9yZVwiOiB7IGNvbnRlbnQ6IGNzcy5jb3VudGVycyggdGhpcy5jb3VudGVyKSB9XHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lT3ZlcnJpZGUgU3RyaW5nIG9yIGFub3RoZXIgYElDb3VudGVyUnVsZWAgb2JqZWN0IHRoYXQgZGV0ZXJtaW5lcyB0aGUgbmFtZSBvZiB0aGVcclxuICAgICAqIGNvdW50ZXIuIElmIHRoaXMgb3B0aW9uYWwgcGFyYW1ldGVyIGlzIGRlZmluZWQsIHRoZSBuYW1lIHdpbGwgb3ZlcnJpZGUgdGhlIE1pbWNzcyBuYW1lXHJcbiAgICAgKiBhc3NpZ25tZW50IG1lY2hhbmlzbS4gVGhpcyBtaWdodCBiZSB1c2VmdWwgaWYgdGhlcmUgaXMgYSBuZWVkIGZvciB0aGUgbmFtZSB0byBtYXRjaCBhIG5hbWUgb2ZcclxuICAgICAqIGV4aXN0aW5nIGNvdW50ZXIuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYElDb3VudGVyUnVsZWAgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgY291bnRlci5cclxuICAgICAqL1xyXG4gICAgcHVibGljICRjb3VudGVyKCBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJQ291bnRlclJ1bGUpOiBJQ291bnRlclJ1bGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvdW50ZXJSdWxlKCB0aGlzLCBuYW1lT3ZlcnJpZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBuZXcgY291bnRlciBzdHlsZSBydWxlLiBUaGUgY291bnRlciBzdHlsZSBuYW1lIHdpbGwgYmUgY3JlYXRlZCB3aGVuIHRoZSBydWxlIGlzXHJcbiAgICAgKiBwcm9jZXNzZWQgYXMgcGFydCBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcy4gVGhlIG5hbWUgY2FuIGJlIGFsc28gb3ZlcnJpZGRlbiBieSBwcm92aWRpbmdcclxuICAgICAqIGVpdGhlciBhbiBleHBsaWNpdCBuYW1lIG9yIGFub3RoZXIgY291bnRlciBzdHlsZSBydWxlLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGNvdW50ZXJTdHlsZSA9IHRoaXMuJGNvdW50ZXJTdHlsZSh7XHJcbiAgICAgKiAgICAgICAgIHN5c3RlbTogXCJjeWNsaWNcIixcclxuICAgICAqICAgICAgICAgc3ltYm9sczogW1wib25lXCIsIFwidHdvXCIsIFwidGhyZWVcIl0sXHJcbiAgICAgKiAgICAgICAgIHN1ZmZpeDogXCIgLSBcIlxyXG4gICAgICogICAgIH0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY291bnRlclN0eWxlc2V0IEFuIG9iamVjdCB0aGF0IGRlZmluZXMgY291bnRlciBzdHlsZSBmZWF0dXJlcy5cclxuICAgICAqIEBwYXJhbSBuYW1lT3ZlcnJpZGUgU3RyaW5nIG9yIGFub3RoZXIgYElDb3VudGVyU3R5bGVSdWxlYCBvYmplY3QgdGhhdCBkZXRlcm1pbmVzIHRoZSBuYW1lIG9mIHRoZVxyXG4gICAgICogY291bnRlciBzdHlsZS4gSWYgdGhpcyBvcHRpb25hbCBwYXJhbWV0ZXIgaXMgZGVmaW5lZCwgdGhlIG5hbWUgd2lsbCBvdmVycmlkZSB0aGUgTWltY3NzIG5hbWVcclxuICAgICAqIGFzc2lnbm1lbnQgbWVjaGFuaXNtLiBUaGlzIG1pZ2h0IGJlIHVzZWZ1bCBpZiB0aGVyZSBpcyBhIG5lZWQgZm9yIHRoZSBuYW1lIHRvIG1hdGNoIGEgbmFtZSBvZlxyXG4gICAgICogZXhpc3RpbmcgY291bnRlciBzdHlsZS5cclxuICAgICAqIEByZXR1cm5zIFRoZSBgSUNvdW50ZXJTdHlsZVJ1bGVgIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGNvdW50ZXIgc3R5bGUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAkY291bnRlclN0eWxlKCBjb3VudGVyU3R5bGVzZXQ/OiBFeHRlbmRlZENvdW50ZXJTdHlsZXNldCxcclxuICAgICAgICBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJQ291bnRlclN0eWxlUnVsZSk6IElDb3VudGVyU3R5bGVSdWxlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb3VudGVyU3R5bGVSdWxlKCB0aGlzLCBjb3VudGVyU3R5bGVzZXQsIG5hbWVPdmVycmlkZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGdyaWQgbGluZSBydWxlLiBUaGUgbGluZSBuYW1lIHdpbGwgYmUgY3JlYXRlZCB3aGVuIHRoZSBydWxlIGlzIHByb2Nlc3NlZCBhc1xyXG4gICAgICogcGFydCBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcy4gVGhlIG5hbWUgY2FuIGJlIGFsc28gb3ZlcnJpZGRlbiBieSBwcm92aWRpbmcgZWl0aGVyIGFuXHJcbiAgICAgKiBleHBsaWNpdCBuYW1lIG9yIGFub3RoZXIgZ3JpZCBsaW5lIHJ1bGUuIFRoZSBncmlkIGxpbmUgcnVsZXMgYXJlIHVzZWQgdG8gZGVmaW5lIHZhbHVlcyBvZlxyXG4gICAgICogc3R5bGUgcHJvcGVydGllcyBgZ3JpZC1yb3ctc3RhcnQvZW5kYCBhbmQgYGdyaWQtY29sdW1uLXN0YXJ0L2VuZGAuXHJcbiAgICAgKlxyXG4gICAgICogTm8gQ1NTIHJ1bGUgaXMgY3JlYXRlZCBmb3IgZ3JpZCBsaW5lcyAtIHRoZXNlIG9iamVjdHMgYXJlIHNvbGVseSB1c2VkIGZvciBjcmVhdGluZyBuYW1lcywgd2hpY2hcclxuICAgICAqIGNhbiBiZSB0eXBlLXNhZmVseSByZWZlcnJlZCB0byBmcm9tIHN0eWxlIHJ1bGVzLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGdyaWRMaW5lRmlyc3QgPSB0aGlzLiRncmlkbGluZSgpXHJcbiAgICAgKiAgICAgZ3JpZExpbmVMYXN0ID0gdGhpcy4kZ3JpZGxpbmUoKVxyXG4gICAgICpcclxuICAgICAqICAgICBncmlkID0gdGhpcy4kY2xhc3Moe1xyXG4gICAgICogICAgICAgICBkaXNwbGF5OiBcImdyaWRcIixcclxuICAgICAqICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogWyBbdGhpcy5ncmlkTGluZUZpcnN0XSwgXCIxZnJcIiwgXCIyZnJcIiwgW3RoaXMuZ3JpZExpbmVMYXN0XSBdLFxyXG4gICAgICogICAgICAgICBncmlkVGVtcGxhdGVSb3dzOiBjc3MucmVwZWF0KCAyLCBcIjFmclwiKSxcclxuICAgICAqICAgICB9KVxyXG4gICAgICpcclxuICAgICAqICAgICBmaXJzdCA9IHRoaXMuJGNsYXNzKHtcclxuICAgICAqICAgICAgICAgZ3JpZENvbHVtblN0YXJ0OiB0aGlzLmdyaWRMaW5lRmlyc3QsXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgbGFzdCA9IHRoaXMuJGNsYXNzKHtcclxuICAgICAqICAgICAgICAgZ3JpZENvbHVtbkVuZDogdGhpcy5ncmlkTGluZUxhc3QsXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lT3ZlcnJpZGUgU3RyaW5nIG9yIGFub3RoZXIgYElHcmlkTGluZVJ1bGVgIG9iamVjdCB0aGF0IGRldGVybWluZXMgdGhlIG5hbWUgb2YgdGhlXHJcbiAgICAgKiBsaW5lLiBJZiB0aGlzIG9wdGlvbmFsIHBhcmFtZXRlciBpcyBkZWZpbmVkLCB0aGUgbmFtZSB3aWxsIG92ZXJyaWRlIHRoZSBNaW1jc3MgbmFtZVxyXG4gICAgICogYXNzaWdubWVudCBtZWNoYW5pc20uIFRoaXMgbWlnaHQgYmUgdXNlZnVsIGlmIHRoZXJlIGlzIGEgbmVlZCBmb3IgdGhlIG5hbWUgdG8gbWF0Y2ggYSBuYW1lIG9mXHJcbiAgICAgKiBleGlzdGluZyBncmlkIGxpbmUuXHJcbiAgICAgKiBAcGFyYW0gaXNTdGFydEVuZE9yTm9uZSBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFwiLXN0YXJ0XCJgIG9yIGBcIi1lbmRcImAgc3VmZml4IHNob3VsZCBiZVxyXG4gICAgICogYXBwZW5kZWQgdG8gdGhlIHJ1bGUgbmFtZS4gSWYgdGhlIGZsYWcgaXMgdHJ1ZSwgYFwiLXN0YXJ0XCJgIGlzIGFwcGVuZGVkOyBpZiB0aGUgZmxhZyBpcyBmYWxzZSxcclxuICAgICAqIGBcIi1lbmRcImAgaXMgYXBwZW5kZWQ7IGlmIHRoZSBmbGFnIGlzIHVuZGVmaW5lZCwgbm8gc3VmZml4IGlzIGFwcGVuZGVkIHRvIHRoZSBydWxlIG5hbWUuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYElHcmlkTGluZVJ1bGVgIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGdyaWQgbGluZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljICRncmlkbGluZSggbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSUdyaWRMaW5lUnVsZSxcclxuICAgICAgICBpc1N0YXJ0RW5kT3JOb25lPzogYm9vbGVhbik6IElHcmlkTGluZVJ1bGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IEdyaWRMaW5lUnVsZSggdGhpcywgbmFtZU92ZXJyaWRlLCBpc1N0YXJ0RW5kT3JOb25lKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBncmlkIGFyZWEgcnVsZS4gVGhlIGFyZWEgbmFtZSB3aWxsIGJlIGNyZWF0ZWQgd2hlbiB0aGUgcnVsZSBpcyBwcm9jZXNzZWQgYXNcclxuICAgICAqIHBhcnQgb2YgdGhlIHN0eWxlIGRlZmluaXRpb24gY2xhc3MuIFRoZSBuYW1lIGNhbiBiZSBhbHNvIG92ZXJyaWRkZW4gYnkgcHJvdmlkaW5nIGVpdGhlciBhblxyXG4gICAgICogZXhwbGljaXQgbmFtZSBvciBhbm90aGVyIGdyaWQgYXJlYSBydWxlLiBUaGUgZ3JpZCBhcmVhIHJ1bGVzIGFyZSB1c2VkIHRvIGRlZmluZSB2YWx1ZXMgb2ZcclxuICAgICAqIHN0eWxlIHByb3BlcnRpZXMgYGdyaWQtYXJlYWAsIGBncmlkLXJvdy1zdGFydC9lbmRgLCBgZ3JpZC1jb2x1bW4tc3RhcnQvZW5kYCBhbmRcclxuICAgICAqIGBncmlkLXRlbXBsYXRlLWFyZWFzYC5cclxuICAgICAqXHJcbiAgICAgKiBObyBDU1MgcnVsZSBpcyBjcmVhdGVkIGZvciBncmlkIGFyZWFzIC0gdGhlc2Ugb2JqZWN0cyBhcmUgc29sZWx5IHVzZWQgZm9yIGNyZWF0aW5nIG5hbWVzLCB3aGljaFxyXG4gICAgICogY2FuIGJlIHR5cGUtc2FmZWx5IHJlZmVycmVkIHRvIGZyb20gc3R5bGUgcnVsZXMuXHJcbiAgICAgKlxyXG4gICAgICogRXZlcnkgZ3JpZCBhcmVhIGRlZmluZXMgdHdvIGdyaWQgbGluZSBydWxlcyBpbiBlYWNoIGRpcmVjdGlvbiwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkIHVzaW5nIHRoZVxyXG4gICAgICogW1tJR3JpZEFyZWFSdWxlLnN0YXJ0TGluZV1dIGFuZCBbW0lHcmlkQXJlYVJ1bGUuZW5kTGluZV1dIHByb3BlcnRpZXMuXHJcbiAgICAgKlxyXG4gICAgICogKipFeGFtcGxlOioqXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgaGVhZGVyQXJlYSA9IHRoaXMuJGdyaWRhcmVhKCk7XHJcbiAgICAgKiAgICAgbWFpbkFyZWEgPSB0aGlzLiRncmlkYXJlYSgpO1xyXG4gICAgICpcclxuICAgICAqICAgICBncmlkID0gdGhpcy4kY2xhc3Moe1xyXG4gICAgICogICAgICAgICBkaXNwbGF5OiBcImdyaWRcIixcclxuICAgICAqICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogXCIxZnJcIixcclxuICAgICAqICAgICAgICAgZ3JpZFRlbXBsYXRlUm93czogW1wiM2VtXCIsIFwiMWZyXCJdLFxyXG4gICAgICogICAgICAgICBncmlkVGVtcGxhdGVBcmVhczogW1xyXG4gICAgICogICAgICAgICAgICAgW3RoaXMuaGVhZGVyQXJlYSwgMSwxLCAxLDFdLFxyXG4gICAgICogICAgICAgICAgICAgW3RoaXMubWFpbkFyZWEsIDIsMSwgMiwxXSxcclxuICAgICAqICAgICAgICAgXSxcclxuICAgICAqICAgICB9KVxyXG4gICAgICpcclxuICAgICAqICAgICBoZWFkZXIgPSB0aGlzLiRjbGFzcyh7XHJcbiAgICAgKiAgICAgICAgIGdyaWRBcmVhOiB0aGlzLmhlYWRlckFyZWEsXHJcbiAgICAgKiAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJibHVlXCJcclxuICAgICAqICAgICB9KVxyXG4gICAgICpcclxuICAgICAqICAgICBtYWluID0gdGhpcy4kY2xhc3Moe1xyXG4gICAgICogICAgICAgICBncmlkQXJlYTogdGhpcy5tYWluQXJlYSxcclxuICAgICAqICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcImxpZ2h0Z3JleVwiXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lT3ZlcnJpZGUgU3RyaW5nIG9yIGFub3RoZXIgYElHcmlkQXJlYVJ1bGVgIG9iamVjdCB0aGF0IGRldGVybWluZXMgdGhlIG5hbWUgb2YgdGhlXHJcbiAgICAgKiBhcmVhLiBJZiB0aGlzIG9wdGlvbmFsIHBhcmFtZXRlciBpcyBkZWZpbmVkLCB0aGUgbmFtZSB3aWxsIG92ZXJyaWRlIHRoZSBNaW1jc3MgbmFtZVxyXG4gICAgICogYXNzaWdubWVudCBtZWNoYW5pc20uIFRoaXMgbWlnaHQgYmUgdXNlZnVsIGlmIHRoZXJlIGlzIGEgbmVlZCBmb3IgdGhlIG5hbWUgdG8gbWF0Y2ggYSBuYW1lIG9mXHJcbiAgICAgKiBleGlzdGluZyBncmlkIGFyZWEuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYElHcmlkQXJlYVJ1bGVgIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGdyaWQgYXJlYS5cclxuICAgICAqL1xyXG4gICAgcHVibGljICRncmlkYXJlYSggbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSUdyaWRBcmVhUnVsZSk6IElHcmlkQXJlYVJ1bGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IEdyaWRBcmVhUnVsZSggdGhpcywgbmFtZU92ZXJyaWRlKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBgQGZvbnQtZmFjZWAgcnVsZS5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICBmb250ID0gdGhpcy4kZm9udGZhY2Uoe1xyXG4gICAgICogICAgICAgICBmb250RmFtaWx5OiBcIlJvYm90b1wiLFxyXG4gICAgICogICAgICAgICBmb250U3R5bGU6IFwiaXRhbGljXCIsXHJcbiAgICAgKiAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcclxuICAgICAqICAgICAgICAgc3JjOiB7dXJsOiAncm9ib3RvLndvZmYnLCBmb3JtYXQ6ICd3b2ZmJ31cclxuICAgICAqICAgICB9KTtcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmb250ZmFjZSBPYmplY3QgaW1wbGVtZW50aW5nIHRoZSBgSUZvbnRGYWNlYCBpbnRlcmZhY2UgZGVmaW5pbmcgdGhlIHBhcmFtZXRlciBvZiB0aGVcclxuICAgICAqIGZvbnQgdG8gdXNlLlxyXG4gICAgICogQHJldHVybnMgVGhlIGBJRm9udEZhY2VSdWxlYCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBAZm9udC1mYWNlIHJ1bGUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyAkZm9udGZhY2UoIGZvbnRmYWNlOiBFeHRlbmRlZEZvbnRGYWNlKTogSUZvbnRGYWNlUnVsZVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgRm9udEZhY2VSdWxlKCB0aGlzLCBmb250ZmFjZSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgYEBpbXBvcnRgIHJ1bGUgcmVmZXJlbmNpbmcgdGhlIGdpdmVuIENTUyBmaWxlLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGltcG9ydGVkQ3NzRmlsZXMgPSBbXHJcbiAgICAgKiAgICAgICAgIHRoaXMuJGltcG9ydCggXCJjb21tb24tM3JkcGFydHkuY3NzXCIpLFxyXG4gICAgICogICAgICAgICB0aGlzLiRpbXBvcnQoIFwic21hbGwtc2NyZWVuLTNyZHBhcnR5LmNzc1wiLCB7bWF4V2lkdGg6IDYwMH0pLFxyXG4gICAgICogICAgIF1cclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1cmwgVVJMIHRvIHRoZSBDU1MgZmlsZS4gUmVsYXRpdmUgVVJMcyBhcmUgcmVzb2x2ZWQgcmVsYXRpdmUgdG8gdGhlIGJhc2UgVVJMIG9mIHRoZVxyXG4gICAgICogcGFnZSB3aGVyZSB0aGUgTWltY3NzIGxpYnJhcnkgaXMgaW52b2tlZC5cclxuICAgICAqIEByZXR1cm5zIFRoZSBgSUltcG9ydFJ1bGVgIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGBAaW1wb3J0YCBydWxlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgJGltcG9ydCggdXJsOiBzdHJpbmcsIG1lZGlhUXVlcnk/OiBzdHJpbmcgfCBNZWRpYVN0YXRlbWVudCxcclxuICAgICAgICBzdXBwb3J0c1F1ZXJ5Pzogc3RyaW5nIHwgU3VwcG9ydHNTdGF0ZW1lbnQpOiBJSW1wb3J0UnVsZVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgSW1wb3J0UnVsZSggdGhpcywgdXJsLCBtZWRpYVF1ZXJ5LCBzdXBwb3J0c1F1ZXJ5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgbmV3IGBAbmFtZXNwYWNlYCBydWxlLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGluaXQgPSBbXHJcbiAgICAgKiAgICAgICAgIHRoaXMuJG5hbWVzcGFjZSggY3NzLldlYk5hbWVzcGFjZXMuU1ZHLCBcInN2Z1wiKVxyXG4gICAgICogICAgIF1cclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lc3BhY2UgTmFtZXNwYWNlIHN0cmluZyAtIHVzZSB0aGUgW1tXZWJOYW1lc3BhY2VzXV0gZm9yIHdlbGwta25vd24gbmFtZXNwYWNlcy5cclxuICAgICAqIEBwYXJhbSBwcmVmaXggUHJlZml4IHN0cmluZyB0byB1c2UgZm9yIHRoZSBuYW1lc3BhY2UuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYElOYW1lc3BhY2VSdWxlYCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBuYW1lc3BhY2UgcnVsZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljICRuYW1lc3BhY2UoIG5hbWVzcGFjZTogc3RyaW5nLCBwcmVmaXg/OiBzdHJpbmcpOiBJTmFtZXNwYWNlUnVsZVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgTmFtZXNwYWNlUnVsZSggdGhpcywgbmFtZXNwYWNlLCBwcmVmaXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBuZXcgYEBwYWdlYCBydWxlLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIGluaXQgPSBbXHJcbiAgICAgKiAgICAgICAgIHRoaXMuJHBhZ2UoIFwiOmZpcnN0XCIsIHsgbWFyZ2luOiBcImF1dG9cIiB9KVxyXG4gICAgICogICAgIF1cclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwc2V1ZG9DbGFzcyBPcHRpb25hbCBuYW1lIG9mIHRoZSBwYWdlIHBzZXVkbyBzdHlsZS5cclxuICAgICAqIEBwYXJhbSBzdHlsZXNldCBTdHlsZXMgdG8gYXBwbHkuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYElQYWdlUnVsZWAgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcGFnZSBydWxlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgJHBhZ2UoIHBzZXVkb0NsYXNzPzogUGFnZVBzZXVkb0NsYXNzLCBzdHlsZXNldD86IFN0eWxlc2V0KTogSVBhZ2VSdWxlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlUnVsZSggdGhpcywgcHNldWRvQ2xhc3MsIHN0eWxlc2V0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgYEBzdXBwb3J0c2AgcnVsZS5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICBjbHMgPSB0aGlzLiRjbGFzcyh7IGNvbG9yOiBcInJlZFwifSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgaWZHcmlkU3VwcG9ydGVkID0gdGhpcy4kbWVkaWEoIHsgZGlzcGxheTogXCJncmlkXCIgfSxcclxuICAgICAqICAgICAgICAgY2xhc3MgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uPE15U3R5bGVzPlxyXG4gICAgICogICAgICAgICB7XHJcbiAgICAgKiAgICAgICAgICAgICBjbHMgPSB0aGlzLiRjbGFzcyh7IGNvbG9yOiBcInBpbmtcIn0pXHJcbiAgICAgKiAgICAgICAgIH1cclxuICAgICAqICAgICApXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVtZW50IFN1cHBvcnRzIHN0YXRlbWVudCBjb250YWluaW5nIG9uZSBvciBtb3JlIHN1cHBvcnRzIHF1ZXJpZXMuXHJcbiAgICAgKiBAcGFyYW0gaW5zdE9yQ2xhc3MgRWl0aGVyIHN0eWxlIGRlZmluaXRpb24gY2xhc3Mgb3IgYW4gaW5zdGFuY2Ugb2YgYSBzdHlsZSBkZWZpbnRpb24gY2xhc3MuXHJcbiAgICAgKiBAcmV0dXJucyBgSVN1cHBvcnRzUnVsZWAgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3VwcG9ydHMgcnVsZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgJHN1cHBvcnRzPFQgZXh0ZW5kcyBTdHlsZURlZmluaXRpb248U3R5bGVEZWZpbml0aW9uPFA+Pj4oIHN0YXRlbWVudDogU3VwcG9ydHNTdGF0ZW1lbnQsXHJcbiAgICAgICAgaW5zdE9yQ2xhc3M6IFQgfCBJU3R5bGVEZWZpbml0aW9uQ2xhc3M8VD4pOiBJU3VwcG9ydHNSdWxlPFQ+XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdXBwb3J0c1J1bGUoIHRoaXMsIHN0YXRlbWVudCwgaW5zdE9yQ2xhc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBuZXcgYEBtZWRpYWAgcnVsZS5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICBjbHMgPSB0aGlzLiRjbGFzcyh7IGNvbG9yOiBcInJlZFwifSlcclxuICAgICAqXHJcbiAgICAgKiAgICAgaWZOYXJyb3dTY3JlZW4gPSB0aGlzLiRtZWRpYSggeyBtYXhXaWR0aDogODAwIH0sXHJcbiAgICAgKiAgICAgICAgIGNsYXNzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvbjxNeVN0eWxlcz5cclxuICAgICAqICAgICAgICAge1xyXG4gICAgICogICAgICAgICAgICAgY2xzID0gdGhpcy4kY2xhc3MoeyBjb2xvcjogXCJwaW5rXCJ9KVxyXG4gICAgICogICAgICAgICB9XHJcbiAgICAgKiAgICAgKVxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0YXRlbWVudCBNZWRpYSBzdGF0ZW1lbnQgY29udGFpbmluZyBvbmUgb3IgbW9yZSBtZWRpYSBxdWVyaWVzLlxyXG4gICAgICogQHBhcmFtIGluc3RPckNsYXNzIEVpdGhlciBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIG9yIGFuIGluc3RhbmNlIG9mIGEgc3R5bGUgZGVmaW50aW9uIGNsYXNzLlxyXG4gICAgICogQHJldHVybnMgYElNZWRpYVJ1bGVgIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIG1lZGlhIHJ1bGVcclxuICAgICAqL1xyXG4gICAgcHVibGljICRtZWRpYTxUIGV4dGVuZHMgU3R5bGVEZWZpbml0aW9uPFN0eWxlRGVmaW5pdGlvbjxQPj4+KCBzdGF0ZW1lbnQ6IE1lZGlhU3RhdGVtZW50LFxyXG4gICAgICAgIGluc3RPckNsYXNzOiBUIHwgSVN0eWxlRGVmaW5pdGlvbkNsYXNzPFQ+KTogSU1lZGlhUnVsZTxUPlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgTWVkaWFSdWxlKCB0aGlzLCBzdGF0ZW1lbnQsIGluc3RPckNsYXNzKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2VzIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIG9yIGluc3RhbmNlIGFuZCBjcmVhdGVzIHVuaXF1ZSBuYW1lcyBmb3IgYWxsIG5hbWVkXHJcbiAgICAgKiBlbnRpdGllcy4gRm9yIGEgZ2l2ZW4gc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBvbmx5IGEgc2luZ2xlIGluc3RhbmNlIGlzIGNyZWF0ZWQsIG5vIG1hdHRlciBob3dcclxuICAgICAqIG1hbnkgdGltZXMgdGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkLiBIb3dldmVyLCBpZiBhbiBpbnN0YW5jZSwgd2hpY2ggaGFzIG5vdCB5ZXQgYmVlbiBwcm9jZXNzZWQsXHJcbiAgICAgKiBpcyBwYXNzZWQsIHRoZW4gYSBuZXcgc2V0IG9mIHVuaXF1ZSBuYW1lcyB3aWxsIGJlIGNyZWF0ZWQgZm9yIGl0LlxyXG4gICAgICpcclxuICAgICAqIFRoZSBgJHVzZWAgbWV0aG9kIGlzIHVzZWQgdG8gcmVmZXJlbmNlIGEgc3R5bGUgZGVmaW5pdGlvbiBmcm9tIGFub3RoZXIgc3R5bGUgZGVmaW5pdGlvbiwgZm9yXHJcbiAgICAgKiBleGFtcGxlOlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIENvbW1vblN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICBlcnJvciA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IFwicmVkXCJ9KVxyXG4gICAgICogfVxyXG4gICAgICpcclxuICAgICAqIGNsYXNzIFBhZ2VTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgICAgY29tbW9uID0gdGhpcy4kdXNlKCBDb21tb25TdHlsZXMpXHJcbiAgICAgKlxyXG4gICAgICogICAgIGVycm9NZXNzYWdlID0gdGhpcy4kY2xhc3Moe1xyXG4gICAgICogICAgICAgICBcIitcIjogdGhpcy5jb21tb24uZXJyb3IsXHJcbiAgICAgKiAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiXHJcbiAgICAgKiAgICAgfSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIFdoZW4gdGhlIGAkdXNlYCBtZXRob2QgaXMgY2FsbGVkLCB0aGUgcnVsZXMgZnJvbSB0aGUgcmVmZXJlbmNlZCBzdHlsZSBkZWZpbml0aW9uIGFyZSBub3RcclxuICAgICAqIGluc2VydGVkIGludG8gdGhlIERPTTsgdGhleSB3aWxsIGJlIGluc2VydGVkIHdoZW4gdGhlIHN0eWxlIGRlZmluaXRpb24gY2xhc3MgdGhhdCBjb250YWluc1xyXG4gICAgICogdGhlIGAkdXNlYCBjYWxsIGlzIGFjdGl2YXRlZC4gVGhlIHNhbWUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBjYW4gYmUgdXNlZCBmcm9tIHNldmVyYWxcclxuICAgICAqIG90aGVyIHN0eWxlIGRlZmluaXRpb25zOiBhcyBsb25nIGFzIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSByZWZlcmVuY2luZyBzdHlsZSBkZWZpbml0aW9uIHRoYXRcclxuICAgICAqIGlzIGFjdGl2YXRlZCwgdGhlIHJ1bGVzIHdpbGwgYmUgaW4gdGhlIERPTTsgYXMgc29vbiBhcyBhbGwgcmVmZXJlbmNpbmcgc3R5bGUgZGVmaW5pdGlvbnMgYXJlXHJcbiAgICAgKiBkZWFjdGl2YXRlZCwgdGhlIHJ1bGVzIGZyb20gdGhlIHJlZmVyZW5jZWQgZGVmaW5pdGlvbiBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET00uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGluc3RPckNsYXNzIEVpdGhlciBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIG9yIGFuIGluc3RhbmNlIG9mIGEgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcy5cclxuICAgICAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzLCB3aGljaCB3aWxsIGJlIGFjdGl2YXRlZCBhbmQgZGVhY3RpdmF0ZWRcclxuICAgICAqIGFsb25nIHdpdGggdGhlIGVuY2xvc2luZyBzdHlsZSBkZWZpbml0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgJHVzZTxUIGV4dGVuZHMgU3R5bGVEZWZpbml0aW9uPiggaW5zdE9yQ2xhc3M6IFQgfCBJU3R5bGVEZWZpbml0aW9uQ2xhc3M8VD4pOiBUXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NTRCggaW5zdE9yQ2xhc3MpIGFzIFQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciBmdW5jdGlvbiBmb3Igc3R5bGUgZGVmaW5pdGlvbiBjbGFzc2VzIHRoYXQgd2lsbCBiZSBlbWJlZGRlZCBpbnRvIGFuIGVtYmVkZGluZ1xyXG4gKiBjb250YWluZXIgZm9yIHRoZSBnaXZlbiBjYXRlZ29yeS4gQWxsIHN0eWxlIGRlZmluaXRpb25zIGZvciBhIGdpdmVuIGNhdGVnb3J5IHdpbGwgYmUgYWN0aXZhdGVkXHJcbiAqIGFuZCBkZWFjdGl2YXRlZCB0b2dldGhlciBhbmQgdGhlaXIgcnVsZXMgd2lsbCBiZSBpbnNlcnRlZCBpbnRvIGEgc2luZ2xlIGA8c3R5bGU+YCBlbGVtZW50LlxyXG4gKlxyXG4gKiAqKkV4YW1wbGU6KipcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBAY3NzLmVtYmVkZGVkKFwid2lkZ2V0c1wiKVxyXG4gKiBjbGFzcyBGaXJzdFdpZGdldFN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb24gey4uLn1cclxuICpcclxuICogQGNzcy5lbWJlZGRlZChcIndpZGdldHNcIilcclxuICogY2xhc3MgU2Vjb25kV2lkZ2V0U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvbiB7Li4ufVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBlbWJlZGRlZCA9IChjYXRlZ29yeTogc3RyaW5nKTogQ2xhc3NEZWNvcmF0b3IgPT5cclxuICAgIC8vIHdlIHJldHVybiB0aGUgZnVuY3Rpb24gdGhhdCBpcyB0aGUgYWN0dWFsIGRlY29yYXRvci5cclxuICAgIGVtYmVkZGVkRGVjb3JhdG9yLmJpbmQoIHVuZGVmaW5lZCwgY2F0ZWdvcnkpO1xyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gTmFtZSBnZW5lcmF0aW9uLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBTZXRzIHRoZSBtZXRob2QgdXNlcyB0byBnZW5lcmF0ZSBuYW1lcyBvZiBDU1MgZW50aXRpZXMuIElmIHllcywgdGhlIG5hbWVzIHdpbGwgYmUgY3JlYXRlZCBieVxyXG4gKiBhcHBlbmRpbmcgYSB1bmlxdWUgbnVtYmVyIHRvIHRoZSBnaXZlbiBwcmVmaXguIElmIHRoZSBwcmVmaXggaXMgbm90IHNwZWNpZmllZCwgdGhlIHN0YW5kYXJkXHJcbiAqIHByZWZpeCBcIm5cIiB3aWxsIGJlIHVzZWQuXHJcbiAqXHJcbiAqIEJ5IGRlZmF1bHQgdGhlIGRldmVsb3BtZW50IHZlcnNpb24gb2YgdGhlIGxpYnJhcnkgKG1pbWNzcy5kZXYuanMpIHVzZXMgdGhlIFtbVW5pcXVlU2NvcGVkXV1cclxuICogbWV0aG9kIGFuZCB0aGUgcHJvZHVjdGlvbiB2ZXJzaW9uIChtaW1jc3MuanMpIHVzZXMgdGhlIFtbT3B0aW1pemVkXV0gbWV0aG9kLiBUaGlzIGZ1bmN0aW9uIGNhblxyXG4gKiBiZSBjYWxsZWQgdG8gc3dpdGNoIHRvIHRoZSBhbHRlcm5hdGl2ZSBtZXRob2Qgb2YgbmFtZSBnZW5lcmF0aW9uIGluIGVpdGhlciB0aGUgZGV2ZWxvcG1lbnQgb3JcclxuICogdGhlIHByb2R1Y3Rpb24gYnVpbGRzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWV0aG9kIEluZGljYXRlcyB3aGF0IG1ldGhvZCB0byB1c2UuXHJcbiAqIEBwYXJhbSBwcmVmaXggT3B0aW9uYWwgc3RyaW5nIHRoYXQgd2lsbCBzZXJ2ZSBhcyBhIHByZWZpeCB0byB3aGljaCB1bmlxdWUgbnVtYmVycyB3aWxsIGJlIGFkZGVkXHJcbiAqIHRvIGdlbmVyYXRlIG9wdGltaXplZCBuYW1lcy4gSWdub3JlZCBpZiB0aGUgYG1ldGhvZGAgcGFyYW1ldGVyIGlzIGFueXRoaW5nIG90aGVyIHRoYW5cclxuICogW1tOYW1lR2VuZXJhdGlvbk1ldGhvZC5PcHRpbWl6ZWRdXS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBjb25maWdOYW1lR2VuZXJhdGlvbiA9IChtZXRob2Q6IE5hbWVHZW5lcmF0aW9uTWV0aG9kLCBwcmVmaXg/OiBzdHJpbmcpOiB2b2lkID0+XHJcblx0Y29uZmlnTmFtZXMoIG1ldGhvZCwgcHJlZml4KTtcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEhlbHBlciBmdW5jdGlvbnMuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIENvbmNhdGVuYXRlcyB0aGUgbmFtZXMgb2YgdGhlIGdpdmVuIGNsYXNzZXMgaW50byBhIHNpbmdsZSBzdHJpbmcgdGhhdCBjYW4gYmUgYXNzaWduZWQgdG8gYVxyXG4gKiBgY2xhc3NgIHByb3BlcnR5IG9mIGFuIEhUTUwgZWxlbWVudC4gVGhpcyBjYW4gYmUgdXNlZnVsIHdoZW4gYW4gZWxlbWVudCBzaG91bGQgaGF2ZSBtdWx0aXBsZVxyXG4gKiBjbGFzc2VzIGFzc2lnbmVkIHRvIGl0IGFuZCBzb21lIG9mIHRoZXNlIGNsYXNzZXMgYXJlIHNwZWNpZmllZCBhcyBbW0lDbGFzc1J1bGVdXSBvclxyXG4gKiBbW0lDbGFzc05hbWVSdWxlXV0gd2hpbGUgb3RoZXJzIGFyZSBzcGVjaWZpZWQgYXMgc3RyaW5ncy5cclxuICpcclxuICogQHBhcmFtIGNsYXNzUHJvcHMgVmFyaWFibGUgYXJndW1lbnQgbGlzdCBvZiBlaXRoZXIgY2xhc3MgbmFtZXMgb3IgY2xhc3MgcnVsZSBvYmplY3RzLlxyXG4gKiBAcmV0dXJucyBUaGUgc3RyaW5nIHRoYXQgY29tYmluZXMgYWxsIGNsYXNzIG5hbWVzIChzZXBhcmF0ZWQgd2l0aCBzcGFjZSkgZnJvbSB0aGUgaW5wdXQgYXJyYXkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2xhc3NlcyA9ICguLi5jbGFzc1Byb3BzOiBDbGFzc1Byb3BUeXBlW10pOiBzdHJpbmcgPT5cclxuXHR2MnMoIGNsYXNzUHJvcHMsIHtcclxuXHRcdG9iajogKHY6IElDbGFzc1J1bGUgfCBJQ2xhc3NOYW1lUnVsZSkgPT4gdi5uYW1lLFxyXG5cdFx0aXRlbTogY2xhc3Nlc1xyXG5cdH0pO1xyXG5cclxuLyoqXHJcbiAqIENob29zZXMgdGhlIGZpcnN0IG5vbi1lbXB0eSBuYW1lIGZyb20gdGhlIGdpdmVuIGxpc3Qgb2YgY2xhc3Nlcy4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhbiBlbGVtZW50XHJcbiAqIHNob3VsZCBoYXZlIGEgc2luZ2xlIGNsYXNzIGFwcGxpZWQgdG8gaXQgd2hpbGUgdGhlIGNsYXNzIGNhbiBiZSBjaG9zZW4gZnJvbSBhbiBvcmRlcmVkIGxpc3Qgb3JcclxuICogaGllcmFyY2h5IG9mIHBvc3NpYmxlIGNob2ljZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBjbGFzc1Byb3BzIFZhcmlhYmxlIGFyZ3VtZW50IGxpc3Qgb2YgZWl0aGVyIGNsYXNzIG5hbWVzIG9yIGNsYXNzIHJ1bGUgb2JqZWN0cy5cclxuICogQHJldHVybnMgVGhlIGZpcnN0IG5vbi1lbXB0eSBjbGFzcyBuYW1lIGZyb20gdGhlIGlucHV0IGFycmF5IG9yIG51bGwgaWYgYWxsIGlucHV0cyBhcmUgZW1wdHkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2hvb3NlQ2xhc3MgPSAoLi4uY2xhc3NQcm9wczogQ2xhc3NQcm9wVHlwZVtdKTogc3RyaW5nID0+XHJcbntcclxuICAgIGZvciggbGV0IGNsYXNzUHJvcCBvZiBjbGFzc1Byb3BzKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBuYW1lID1cclxuICAgICAgICAgICAgdHlwZW9mIGNsYXNzUHJvcCA9PT0gXCJzdHJpbmdcIiA/IGNsYXNzUHJvcCA6XHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoY2xhc3NQcm9wKSA/IGNob29zZUNsYXNzKCBjbGFzc1Byb3ApIDpcclxuICAgICAgICAgICAgY2xhc3NQcm9wICYmIGNsYXNzUHJvcC5uYW1lO1xyXG5cclxuICAgICAgICAvLyBpZiBub24tbnVsbCBhbmQgbm9uLWVtcHR5IG5hbWUgLSByZXR1cm4gaXRcclxuICAgICAgICBpZiAobmFtZSlcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICB9XHJcblxyXG5cdHJldHVybiBcIlwiO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBSdWxlIHZpcnR1YWxpemF0aW9uIGFuZCB0aGVtaW5nLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBEZWNvcmF0b3IgdGhhdCBzaG91bGQgYmUgYXBwbGllZCB0byBhIHJ1bGUgaWYgaXQgaXMgZGVmaW5lZCBhbmQgdXNlZCBpbiB0aGUgc2FtZSBzdHlsZVxyXG4gKiBkZWZpbml0aW9uIGNsYXNzIGJ1dCB0aGVuIGlzIG92ZXJyaWRkZW4gaW4gYSBkZXJpdmVkIHN0eWxlIGRlZmluaXRpb24gY2xhc3MuIFRoZSBwcm9ibGVtXHJcbiAqIHRoaXMgc29sdmVzIGlzIHRoaXM6IHdoZW4gYSBydWxlIGlzIGRlZmluZWQgaW4gYSBiYXNlIGNsYXNzIGFuZCB0aGVuIG92ZXJyaWRkZW4gaW4gYSBkZXJpdmVkXHJcbiAqIGNsYXNzLCB3aGVuIGFuIGluc3RhbmNlIG9mIHRoZSBkZXJpdmVkIGNsYXNzIGlzIGNyZWF0ZWQsIHRoZSBydWxlcyB0aGF0IGFyZSBjcmVhdGVkIGluIHRoZVxyXG4gKiBiYXNlIGFuZCBkZXJpdmVkIGNsYXNzZXMgc2VlIGRpZmZlcmVudCB2YWx1ZXMgb2YgdGhlIHJ1bGUuIFNpbmNlIG91ciBydWxlcyBhcmUgZGVmaW5lZCBhc1xyXG4gKiBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RvciwgdGhlIGJhc2UgY2xhc3MgY29uc3RydWN0b3IncyBjb2RlIG9ubHkgc2VlcyB0aGUgdmFsdWUgYXNzaWduZWQgaW4gdGhhdFxyXG4gKiBjb2RlLiBJZiBhbm90aGVyIHJ1bGUgaW4gdGhlIGJhc2UgY2xhc3MgdXNlcyB0aGlzIGZpcnN0IHJ1bGUsIHRoaXMgdmFsdWUgaXMgcmVtZW1iZXJlZC5cclxuICpcclxuICogVGhlIGBAdmlydHVhbGAgZGVjb3JhdG9yIGNyZWF0ZXMgYSBQcm94eSBvYmplY3QgZm9yIHRoZSBydWxlIHdpdGggdGhlIGhhbmRsZXIgdGhhdCBrZWVwcyB0aGVcclxuICogbW9zdCByZWNlbnQgdmFsdWUgc2V0LiBUaHVzIHdoZW4gYSBydWxlIGluIHRoZSBiYXNlIGNsYXNzJ3MgY29uc3RydWN0b3IgdXNlcyBhIHZpcnR1YWxpemVkXHJcbiAqIHJ1bGUsIHRoZSBmaXJzdCBydWxlIHdpbGwgc2VlIHRoZSBvdmVycmlkZGVuIHZhbHVlIG9mIHRoZSBydWxlIHdoZW4gYWNjZXNzZWQgaW4gdGhlXHJcbiAqIHBvc3QtY29uc3RydWN0b3IgY29kZS5cclxuICpcclxuICogQGRlcHJlY2F0ZWQgVGhpcyBkZWNvcmF0b3IgaXMgZGVwcmVjYXRlZCBhcyBhbGwgcnVsZXMgZGVmaW5lZCBpbiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzZXMgYXJlXHJcbiAqIGFsd2F5cyB2aXJ0dWFsaXplZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCB2aXJ0dWFsID0gKHRhcmdldDogYW55LCBuYW1lOiBzdHJpbmcpOiB2b2lkID0+IHt9O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBUaGVtZURlZmluaXRpb25gIGNsYXNzIGlzIGEgYmFzZSBmb3IgYWxsIGNsYXNzZXMgdGhhdCBkZWZpbmUgdGhlbWVzLiBJbiBhZGRpdGlvbiB0b1xyXG4gKiBiZWluZyBhIHN0eWxlIGRlZmluaXRpb24gY2xhc3MsIHRoZW1lcyBwcm92aWRlIHNvbWUgZXh0cmEgY2FwYWJpbGl0aWVzIHJlbGF0ZWQgdG8gc3R5bGVcclxuICogaW5oZXJpdGFuY2UgYW5kIHRoZW1lIGFjdGl2YXRpb24uXHJcbiAqXHJcbiAqIEB0eXBlcGFyYW0gUCBQYXJlbnQgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcy4gUGFyZW50IG9mIGEgdG9wLWxldmVsIGNsYXNzIGlzIG51bGwuXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGhlbWVEZWZpbml0aW9uPFAgZXh0ZW5kcyBTdHlsZURlZmluaXRpb24gPSBhbnk+IGV4dGVuZHMgU3R5bGVEZWZpbml0aW9uPFA+XHJcbntcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gQWN0aXZhdGlvbi5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogQWN0aXZhdGVzIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIG9yIGluc3RhbmNlIGFuZCBpbnNlcnRzIGFsbCBpdHMgcnVsZXMgaW50byBET00uIElmXHJcbiAqIHRoZSBjbGFzcyBpcyBub3QgeWV0IGFzc29jaWF0ZWQgd2l0aCBhbiBpbnN0YW5jZSwgdGhlIGluc3RhbmNlIGlzIGZpcnN0IGNyZWF0ZWQgYW5kIHByb2Nlc3NlZC5cclxuICogTm90ZSB0aGF0IGVhY2ggc3R5bGUgZGVmaW5pdGlvbiBpbnN0YW5jZSBtYWludGFpbnMgYSByZWZlcmVuY2UgY291bnRlciBvZiBob3cgbWFueSB0aW1lcyBpdCB3YXNcclxuICogYWN0aXZhdGVkIGFuZCBkZWFjdGl2YXRlZC4gVGhlIHJ1bGVzIGFyZSBpbnNlcnRlZCBpbnRvIERPTSBvbmx5IHVwb24gZmlyc3QgYWN0aXZhdGlvbi5cclxuICpcclxuICogQWN0aXZhdGluZyBhIGNsYXNzIChhcyBvcHBvc2VkIHRvIGFjdGl2YXRpbmcgYSBkaXJlY3RseSBjcmVhdGVkIGluc3RhbmNlKSBpcyBpbnRlbmRlZCBmb3JcclxuICogXCJnbG9iYWxcIiBDU1MgZW50aXRpZXMgLSB0aGF0IGlzLCBlbnRpdGllcyB0aGF0IGFyZSB1c2VkIHRocm91Z2hvdXQgdGhlIGFwcGxpY2F0aW9uIG9yXHJcbiAqIGFwcGxpY2F0aW9uIGFyZWEuIE5vIG1hdHRlciBob3cgbWFueSB0aW1lcyBhIGNsYXNzIGlzIGFjdGl2YXRlZCBvciBob3cgbWFueSB0aW1lcyBpdCBpcyB1c2VkXHJcbiAqIGZyb20gb3RoZXIgc3R5bGUgZGVmaW5pdGlvbnMsIGEgc2luZ2xlIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIHVzZWQgYnkgTWltY3NzLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGUqKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIENvbW1vblN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgcmVkID0gdGhpcy4kY2xhc3MoeyBjb2xvcjogcmVkIH0pXHJcbiAqIH1cclxuICpcclxuICogY2xhc3MgTXlDb21wb25lbnRcclxuICoge1xyXG4gKiAgICAgcHJpdmF0ZSBzdHlsZXM6IENvbW1vblN0eWxlcztcclxuICpcclxuICogICAgIC8vIEFjdGl2YXRlIGNsYXNzXHJcbiAqICAgICB3aWxsTW91bnQoKSB7IHRoaXMuc3R5bGVzID0gY3NzLmFjdGl2YXRlKCBDb21tb25TdHlsZXMpOyB9XHJcbiAqICAgICB3aWxsVW5tb3VudCgpIHsgY3NzLmRlYWN0aXZhdGUoIHRoaXMuc3R5bGVzKTsgfVxyXG4gKiAgICAgcmVuZGVyKCkgeyByZXR1cm4gPGRpdiBjbGFzc05hbWU9e3RoaXMuc3R5bGVzLnJlZC5uYW1lfTwvZGl2PiB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEFjdGl2YXRpbmcgYW4gaW5zdGFuY2UgKGFzIG9wcG9zZWQgdG8gYWN0aXZhdGluZyBhIGNsYXNzKSBpcyBpbnRlbmRlZCBmb3IgXCJzY29wZWRcIiBDU1MgZW50aXRpZXMgLVxyXG4gKiB0aGF0IGlzLCBlbnRpdGllcyB0aGF0IGFwcGx5IHRvIGluc3RhbmNlcyBvZiBjZXJ0YWluIGNvbXBvbmVudHMsIGEuay5hLiAqU3R5bGVkIENvbXBvbmVudHMqLlxyXG4gKiBJbiB0aGlzIGFwcHJvYWNoLCBldmVyeSBpbnN0YW5jZSBvZiBhIGNvbXBvbmVudCBjcmVhdGVzIGl0cyBvd24gaW5zdGFuY2Ugb2YgdGhlIHN0eWxlIGRlZmluaXRpb25cclxuICogY2xhc3MgYW5kIE1pbWNzcyB3aWxsIGNyZWF0ZSBpbmRlcGVuZGVudCBpbnN0YW5jZXMgb2YgQ1NTIHJ1bGVzIHNwZWNpZmljICgqc2NvcGVkKikgdG8gZWFjaFxyXG4gKiBjb21wb25lbnQgaW5zdGFuY2UuXHJcbiAqXHJcbiAqICoqRXhhbXBsZSoqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIHJlZCA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IHJlZCB9KVxyXG4gKiB9XHJcbiAqXHJcbiAqIGNsYXNzIE15Q29tcG9uZW50XHJcbiAqIHtcclxuICogICAgIC8vIENyZWF0ZSBzdHlsZSBkZWZpbml0aW9uIGRpcmVjdGx5XHJcbiAqICAgICBwcml2YXRlIHN0eWxlcyA9IG5ldyBNeVN0eWxlcygpO1xyXG4gKlxyXG4gKiAgICAgLy8gQWN0aXZhdGUgaW5zdGFuY2VcclxuICogICAgIHdpbGxNb3VudCgpIHsgdGhpcy5zdHlsZXMgPSBjc3MuYWN0aXZhdGUoIHRoaXMuc3R5bGVzKTsgfVxyXG4gKiAgICAgd2lsbFVubW91bnQoKSB7IGNzcy5kZWFjdGl2YXRlKCB0aGlzLnN0eWxlcyk7IH1cclxuICogICAgIHJlbmRlcigpIHsgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXt0aGlzLnN0eWxlcy5yZWQubmFtZX08L2Rpdj4gfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAdHlwZXBhcmFtIFQgVHlwZSBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBvciBpbnN0YW5jZSBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uLiBUaGlzIGlzXHJcbiAqIGFsc28gdGhlIHR5cGUsIHdoaWNoIGlzIHJldHVybmVkIGZvcm0gdGhlIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0gaW5zdE9yQ2xhc3MgU3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBvciBpbnN0YW5jZVxyXG4gKiBAcGFyYW0gc2NoZWR1bGVyVHlwZSBJZGVudGlmaWVyIG9mIGEgcHJlLWRlZmluZWQgb3IgcmVnaXN0ZXJlZCBzY2hlZHVsZXIuIElmIG5vdCBzcGVjaWZpZWQsIHRoZVxyXG4gKiBzY2hlZHVsZXIgc2V0IGFzIGRlZmF1bHQgd2lsbCBiZSB1c2VkLlxyXG4gKiBAcmV0dXJucyBJbnN0YW5jZSBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyAtIGVpdGhlciBjcmVhdGVkIChpZiB0aGlzIHdhcyB0aGUgZmlyc3RcclxuICogYWN0aXZhdGlvbiBvZiB0aGUgY2xhc3MpIG9yIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGFzcy4gSWYgdGhlIGlucHV0IHBhcmFtZXRlciBpcyBhblxyXG4gKiBpbnN0YW5jZSAoYXMgb3Bwb3NlZCB0byBhIGNsYXNzKSwgdGhlIHJldHVybiB2YWx1ZSBpcyB0aGUgc2FtZSBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBhY3RpdmF0ZSA9IDxUIGV4dGVuZHMgSVN0eWxlRGVmaW5pdGlvbj4oIGluc3RPckNsYXNzOiBUIHwgSVN0eWxlRGVmaW5pdGlvbkNsYXNzPFQ+LFxyXG5cdHNjaGVkdWxlclR5cGU/OiBudW1iZXIpOiBUID0+XHJcbntcclxuXHRsZXQgaW5zdGFuY2UgPSBwcm9jZXNzU0QoIGluc3RPckNsYXNzKSBhcyBUO1xyXG5cdGlmIChpbnN0YW5jZSlcclxuICAgICAgICBnZXRBY3RpdmF0b3Ioc2NoZWR1bGVyVHlwZSkuYWN0aXZhdGUoIGluc3RhbmNlKTtcclxuXHJcblx0cmV0dXJuIGluc3RhbmNlO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZWFjdGl2YXRlcyB0aGUgZ2l2ZW4gc3R5bGUgZGVmaW5pdGlvbiBpbnN0YW5jZSBieSByZW1vdmluZyBpdHMgcnVsZXMgZnJvbSBET00uIE5vdGUgdGhhdCBlYWNoXHJcbiAqIHN0eWxlIGRlZmluaXRpb24gaW5zdGFuY2UgbWFpbnRhaW5zIGEgY291bnRlciBvZiBob3cgbWFueSB0aW1lcyBpdCB3YXMgYWN0aXZhdGVkIGFuZFxyXG4gKiBkZWFjdGl2YXRlZC4gVGhlIHJ1bGVzIGFyZSByZW1vdmVkIGZyb20gRE9NIG9ubHkgd2hlbiB0aGlzIGNvdW50ZXIgZ29lcyBkb3duIHRvIDAuXHJcbiAqXHJcbiAqIEBwYXJhbSBzZCBJbnN0YW5jZSBvZiBhIHN0eWxlIGRlZmluaXRpb24gY2xhc3MgdG8gYmUgZGVhY3RpdmF0ZWQuXHJcbiAqIEBwYXJhbSBzY2hlZHVsZXJUeXBlIElkZW50aWZpZXIgb2YgYSBwcmUtZGVmaW5lZCBvciByZWdpc3RlcmVkIHNjaGVkdWxlci4gSWYgbm90IHNwZWNpZmllZCwgdGhlXHJcbiAqIHNjaGVkdWxlciBzZXQgYXMgZGVmYXVsdCB3aWxsIGJlIHVzZWQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZGVhY3RpdmF0ZSA9IChzZDogSVN0eWxlRGVmaW5pdGlvbiwgc2NoZWR1bGVyVHlwZT86IG51bWJlcik6IHZvaWQgPT5cclxuXHRnZXRBY3RpdmF0b3Ioc2NoZWR1bGVyVHlwZSkuZGVhY3RpdmF0ZSggc2QpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgdGhlbWUgZGVmaW5pdGlvbiBvYmplY3QsIHdoaWNoIGlzIGN1cnJlbnRseSBhY3RpdmUgZm9yIHRoZSBnaXZlbiB0aGVtZSBkZWNsYXJhdGlvblxyXG4gKiBjbGFzcy5cclxuICogQHBhcmFtIHRoZW1lQ2xhc3MgVGhlbWUgZGVjbGFyYXRpb24gY2xhc3NcclxuICogQHJldHVybnMgVGhlbWUgaW5zdGFuY2UsIHdoaWNoIGlzIGN1cnJlbnRseSBhY3RpdmUgZm9yIHRoZSBnaXZlbiB0aGVtZSBjbGFzcyBvciB1bmRlZmluZWRcclxuICogaWYgbm8gaW5zdGFuY2UgaXMgY3VycmVudGx5IGFjdGl2ZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRBY3RpdmVUaGVtZSA9ICh0aGVtZUNsYXNzOiBJU3R5bGVEZWZpbml0aW9uQ2xhc3M8VGhlbWVEZWZpbml0aW9uPik6IFRoZW1lRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCA9PlxyXG4gICAgZ2V0Q3VycmVudFRoZW1lKCB0aGVtZUNsYXNzKTtcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFNTUiBzdXBwb3J0LlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBTdGFydHMgc2VydmVyLXNpZGUgYWN0aXZhdGlvbiBmdW5jdGlvbmFsaXR5LiBUaHJvd3MgYW4gZXJyb3IgaWYgbm9uLWRlZmF1bHQgYWN0aXZhdGlvblxyXG4gKiBjb250ZXh0IGlzIGFscmVhZHkgc2V0LiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIGFueSBzdHlsZSBkZWZpbml0aW9ucyB0aGF0XHJcbiAqIGFyZSBwYXJ0IG9mIHRoZSBhcHBsaWNhdGlvbiBhcmUgYWN0aXZhdGVkLlxyXG4gKlxyXG4gKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gY2F1c2VzIGFsbCBhY3RpdmF0ZWQgc3R5bGUgZGVmaW5pdGlvbnMgdG8gYmUgc2VyaWFsaXplZCB0byBhIHN0cmluZyxcclxuICogd2hpY2ggY2FuIGJlIHJldHJpZXZlZCBieSBjYWxsaW5nIHRoZSBbW3N0b3BTU1JdXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBzdGFydFNTUiA9ICgpOiB2b2lkID0+IHNfc3RhcnRTU1IoKTtcclxuXHJcbi8qKlxyXG4gKiBTdG9wcyBzZXJ2ZXItc2lkZSBhY3RpdmF0aW9uIGZ1bmN0aW9uYWxpdHkgYW5kIHJldHVybnMgYSBzdHJpbmcgd2l0aCBzZXJpYWxpemVkIHN0eWxlcyBzdHlsZVxyXG4gKiBkZWZpbml0aW9ucyB0aGF0IHdlcmUgYWN0aXZhdGVkIGR1cmluZyBhcHBsaWNhdGlvbiByZW5kZXJpbmcuIFRoZSBzdHJpbmcgc2hvdWxkIGJlIGFkZGVkIHRvXHJcbiAqIHRoZSBgPGhlYWQ+YCBlbGVtZW50IG9mIHRoZSBIVE1MIHBhZ2UgdXNpbmcgYGluc2VydEFkamFjZW50SFRNTCgpYCBtZXRob2QuXHJcbiAqXHJcbiAqIFRocm93cyBhbiBlcnJvciBpZiBTU1IgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQuXHJcbiAqIEByZXR1cm5zIFN0cmluZyBjb250YWluaW5nIHNlcmlhbGl6ZWQgc3R5bGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHN0b3BTU1IgPSAoKTogc3RyaW5nID0+IHNfc3RvcFNTUigpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogU3RhcnRzIGh5ZHJhdGlvbiBhY3RpdmF0aW9uIGZ1bmN0aW9uYWxpdHkuIFRocm93cyBhbiBlcnJvciBpZiBub24tZGVmYXVsdCBhY3RpdmF0aW9uIGNvbnRleHQgaXNcclxuICogYWxyZWFkeSBzZXQuXHJcbiAqXHJcbiAqIENhbGxpbmcgdGhpcyBmdW5jdGlvbiBjYXVzZXMgYWxsIGFjdGl2YXRlZCBzdHlsZSBkZWZpbml0aW9ucyB0byBmaW5kIGFwcHJvcHJpYXRlIGA8c3R5bGU+YFxyXG4gKiBlbGVtZW50cyBpbnN0ZWFkIG9mIGNyZWF0aW5nIG5ldyBvbmVzLiBUaGUgZnVuY3Rpb25hbGl0eSBhc3N1bWVzIHRoYXQgdGhvc2UgZWxlbWVudHMgd2VyZSBwdXRcclxuICogdG8gdGhlIEhUTUwgZHVyaW5nIHNlcnZlci1zaWRlIHBhZ2UgcmVuZGVyaW5nLiBJdCBhbHNvIGFzc3VtZXMgdGhhdCB0aGUgc3R5bGUgZGVmaW5pdGlvbnMgYW5kXHJcbiAqIHRoZSBydWxlcyBkZWZpbmVkIGluIHRoZXNlIHN0eWxlIGRlZmluaXRpb25zIGFyZSBleGFjbHR5IHRoZSBzYW1lLCBhbmQgdGhlIHJ1bGVzIGFyZSBpbiB0aGUgc2FtZVxyXG4gKiBvcmRlciBhcyB0aGV5IHdlcmUgZHVyaW5nIHRoZSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIE90aGVyd2lzZSB0aGUgYmVoYXZpb3IgaXMgdW5wcmVkaWN0YWJsZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBzdGFydEh5ZHJhdGlvbiA9ICgpOiB2b2lkID0+IHNfc3RhcnRIeWRyYXRpb24oKTtcclxuXHJcbi8qKlxyXG4gKiBTdG9wcyBoeWRyYXRpb24gYWN0aXZhdGlvbiBmdW5jdGlvbmFsaXR5IGFuZCByZXN0b3JlIHRoZSBkZWZhdWx0IGFjdGl2YXRpb24gY29udGV4dC4gQWZ0ZXIgdGhpc1xyXG4gKiBmdW5jdGlvbiBpcyBjYWxsZWQsIGFsbCBzdHlsZSBhY3RpdmF0aW9ucyB3aWxsIGNyZWF0ZSBuZXcgYDxzdHlsZT5gIGVsZW1lbnRzIGluIHRoZSBIVE1MLlxyXG4gKlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgU1NSIGhhcyBub3QgYmVlbiBzdGFydGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHN0b3BIeWRyYXRpb24gPSAoKTogdm9pZCA9PiBzX3N0b3BIeWRyYXRpb24oKTtcclxuXHJcblxyXG5cclxuIiwi77u/aW1wb3J0IHtcclxuICAgIElDdXN0b21WYXIsIFBzZXVkb0VudGl0eSwgUGFnZVBzZXVkb0NsYXNzLCBJUGFyYW1ldGVyaXplZFBzZXVkb0VudGl0eSxcclxuICAgIERlcGVuZGVudFJ1bGVDb21iaW5hdG9yLCBJQ29uc3RhbnQsIElSdWxlV2l0aFNlbGVjdG9yXHJcbn0gZnJvbSBcIi4vQ29yZVR5cGVzXCI7XHJcbmltcG9ydCB7RXh0ZW5kZWRJU3R5bGVzZXQsIFZhclRlbXBsYXRlTmFtZSwgVmFyVmFsdWUsIEV4dGVuZGVkVmFyVmFsdWUsIEFuaW1hdGlvblN0eWxlc2V0LCBJU3R5bGVzZXR9IGZyb20gXCIuL1N0eWxlc2V0c1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElSdWxlIGludGVyZmFjZSBpcyBhIGJhc2UgaW50ZXJmYWNlIHRoYXQgaXMgaW1wbGVtZW50ZWQgYnkgYWxsIHJ1bGVzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUnVsZVxyXG57XHJcblx0LyoqIENTU09NIHJ1bGUgKi9cclxuXHRyZWFkb25seSBjc3NSdWxlOiBDU1NSdWxlIHwgbnVsbDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElOYW1lZEVudGl0eSBpbnRlcmZhY2UgaXMgYSBiYXNlIGludGVyZmFjZSBpbXBsZW1lbnRlZCBieSBhbGwgcnVsZXMgdGhhdCBoYXZlIGEgbmFtZTsgdGhhdCBpcyxcclxuICogY2xhc3NlcywgSURzLCBrZXlmcmFtZXMsIGN1c3RvbSBDU1MgcHJvcGVydGllcywgY291bnRlcnMsIGdyaWQgbGluZXMgYW5kIGFyZWFzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTmFtZWRFbnRpdHlcclxue1xyXG5cdC8qKlxyXG5cdCAqIFJ1bGUncyBuYW1lIC0gdGhpcyBpcyBhIHVuaXF1ZSBuYW1lIHRoYXQgaXMgYXNzaWduZWQgYnkgdGhlIE1pbWNzcyBpbmZyYXN0cnVjdHVyZS4gVGhpcyBuYW1lXHJcblx0ICogZG9lc24ndCBoYXZlIHRoZSBwcmVmaXggdGhhdCBpcyB1c2VkIHdoZW4gcmVmZXJyaW5nIHRvIGNsYXNzZXMgKC4pLCBJRHMgKCMpIGFuZCBjdXN0b20gQ1NTXHJcblx0ICogcHJvcGVydGllcyAoLS0pLlxyXG5cdCAqL1xyXG5cdHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElQcmVmaXhlZE5hbWVkRW50aXR5IGludGVyZmFjZSBpcyBhIGJhc2UgaW50ZXJmYWNlIGltcGxlbWVudGVkIGJ5IHJ1bGVzIHRoYXQgdXNlIHByZWZpeCB0b1xyXG4gKiByZWZlciB0byB0aGUgcnVsZSBuYW1lIHdpdGhpbiBDU1MuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQcmVmaXhlZE5hbWVkRW50aXR5IGV4dGVuZHMgSU5hbWVkRW50aXR5XHJcbntcclxuXHQvKipcclxuXHQgKiBQcmVmaXggdXNlZCB0byBjcmVhdGUgdGhlIENTUyBuYW1lLlxyXG5cdCAqL1xyXG5cdHJlYWRvbmx5IHByZWZpeDogXCIuXCIgfCBcIiNcIiB8IFwiLS1cIjtcclxuXHJcblx0LyoqXHJcblx0ICogUnVsZSdzIG5hbWUgLSB0aGlzIGlzIGEgdW5pcXVlIG5hbWUgdGhhdCBpcyBhc3NpZ25lZCBieSB0aGUgTWltY3NzIGluZnJhc3RydWN0dXJlLiBUaGlzIG5hbWVcclxuXHQgKiBoYXMgdGhlIHByZWZpeCB0aGF0IGlzIHVzZWQgd2hlbiByZWZlcnJpbmcgdG8gY2xhc3NlcyAoLiksIElEcyAoIykgYW5kIGN1c3RvbSBDU1NcclxuXHQgKiBwcm9wZXJ0aWVzICgtLSkuXHJcblx0ICovXHJcblx0cmVhZG9ubHkgY3NzTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHJlcHJlc2VudGluZyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBkZXBlbmRlbnQgcnVsZXMgb2YgYSBzdHlsZSBydWxlXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEZXBlbmRlbnRSdWxlcyA9XHJcblx0eyBbSyBpbiBQc2V1ZG9FbnRpdHldPzogSVN0eWxlUnVsZSB9ICZcclxuXHR7IFtLIGluIERlcGVuZGVudFJ1bGVDb21iaW5hdG9yXT86IElTdHlsZVJ1bGVbXSB9ICZcclxuXHR7IFtLIGluIGtleW9mIElQYXJhbWV0ZXJpemVkUHNldWRvRW50aXR5XT86IElTdHlsZVJ1bGVbXSB9O1xyXG5cclxuXHJcblxyXG5cclxuIC8qKlxyXG4gKiBUaGUgSVN0eWxlUnVsZSBpbnRlcmZhY2UgcmVwcmVzZW50cyBhIHN0eWxpbmcgcnVsZSBpbiBhIHN0eWxlIHNoZWV0LiBTdHlsZSBydWxlcyBjYW4gYmUgdXNlZFxyXG4gKiBhbnl3aGVyZSB3aGVyZSBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSBkZWZpbmVkOiBjbGFzcyBydWxlcywgSUQgcnVsZXMsIHNlbGVjdG9yIHJ1bGVzLFxyXG4gKiBrZXlmcmFtZXMsIGV0Yy4gU3R5bGVSdWxlIGRlZmluZXMgYSBzdHlsZXNldCBhbmQgY2FuIG9wdGlvbmFsbHkgcG9pbnQgdG8gb25lIG9yIG1vcmUgc3R5bGUgcnVsZXNcclxuICogZnJvbSB3aGljaCBpdCBpbmhlcml0cy4gQSBzdHlsZXNldCBjb21iaW5lcyBhbGwgdGhlIHByb3BlcnRpZXMgZnJvbSBpdHMgb3duIHByb3BlcnR5IGJsb2NrIGFzXHJcbiAqIHdlbGwgYXMgZnJvbSBhbGwgb2Ygc3R5bGUgcnVsZXMgaXQgaW5oZXJpdGVzIGZyb20uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTdHlsZVJ1bGUgZXh0ZW5kcyBJUnVsZSwgSVJ1bGVXaXRoU2VsZWN0b3Jcclxue1xyXG5cdC8qKiBDU1NPTSBzdHlsZSBydWxlICovXHJcblx0cmVhZG9ubHkgY3NzUnVsZTogQ1NTU3R5bGVSdWxlIHwgbnVsbDtcclxuXHJcblx0LyoqXHJcblx0ICogT2JqZWN0IGNvbnRhaW5pbmcgZGVwZW5kZW50IHJ1bGVzLiBQcm9wZXJ0eSBuYW1lcyBhcmUgdGFrZW4gZnJvbSBzcGVjaWFsIHByb3BlcnRpZXNcclxuXHQgKiBvZiB0aGUgQ29tYmluZWRTdHlsZXNldC4gVGhpcyBvYmplY3QgYWxsb3dzIGNhbGxlcnMgdG8gYWNjZXNzIGRlcGVuZGVudCBydWxlcyB0byBjaGFuZ2VcclxuXHQgKiBzdHlsZSBwcm9wZXJ0eSB2YWx1ZXMgcHJvZ3JhbW1hdGljYWxseS5cclxuXHQgKi9cclxuXHRyZWFkb25seSBkZXBlbmRlbnRSdWxlczogRGVwZW5kZW50UnVsZXM7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkZHMvcmVwbGFjZXMvcmVtb3ZlcyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIENTUyBwcm9wZXJ0eSBpbiB0aGlzIHJ1bGUuXHJcblx0ICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgQ1NTIHByb3BlcnR5LlxyXG5cdCAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgb2YgdGhlIENTUyBwcm9wZXJ0eS4gSWYgdGhpcyB2YWx1ZSBpcyB1bmRlZmluZWQgb3IgbnVsbCwgdGhlIHByb3BlcnR5XHJcblx0ICogaXMgcmVtb3ZlZCBmcm9tIHRoZSBydWxlJ3Mgc3R5bGVzZXQuXHJcblx0ICogQHBhcmFtIGltcG9ydGFudCBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0byBzZXQgdGhlIFwiIWltcG9ydGFudFwiIGZsYWcgb24gdGhlIHByb3BlcnR5IHZhbHVlLlxyXG5cdCAqIEBwYXJhbSBzY2hlZHVsZXJUeXBlIElEIG9mIGEgcmVnaXN0ZXJlZCBzY2hlZHVsZXIgdHlwZSB0aGF0IGlzIHVzZWQgdG8gd3JpdGUgdGhlIHByb3BlcnR5XHJcblx0ICogdmFsdWUgdG8gdGhlIERPTS4gSWYgdW5kZWZpbmVkLCB0aGUgY3VycmVudCBkZWZhdWx0IHNjaGVkdWxlciB3aWxsIGJlIHVzZWQuXHJcblx0ICovXHJcblx0c2V0UHJvcDxLIGV4dGVuZHMga2V5b2YgSVN0eWxlc2V0PiggbmFtZTogSywgdmFsdWU/OiBFeHRlbmRlZElTdHlsZXNldFtLXSB8IG51bGwsXHJcblx0XHRpbXBvcnRhbnQ/OiBib29sZWFuLCBzY2hlZHVsZXJUeXBlPzogbnVtYmVyKTogdm9pZDtcclxuXHJcblx0LyoqXHJcblx0ICogQWRkcy9yZXBsYWNlcy9yZW1vdmVzIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gY3VzdG1vbSBDU1MgcHJvcGVydHkgaW4gdGhpcyBydWxlLlxyXG5cdCAqIEBwYXJhbSBjdXN0b21WYXIgSVZhclJ1bGUgb2JqZWN0IGRlZmluaW5nIGEgY3VzdG9tIENTUyBwcm9wZXJ0eS5cclxuXHQgKiBAcGFyYW0gdmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBjdXN0b20gQ1NTIHByb3BlcnR5LiBJZiB0aGlzIHZhbHVlIGlzIHVuZGVmaW5lZCBvciBudWxsLCB0aGUgcHJvcGVydHlcclxuXHQgKiBpcyByZW1vdmVkIGZyb20gdGhlIHJ1bGUncyBzdHlsZXNldC5cclxuXHQgKiBAcGFyYW0gaW1wb3J0YW50IEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRvIHNldCB0aGUgXCIhaW1wb3J0YW50XCIgZmxhZyBvbiB0aGUgcHJvcGVydHkgdmFsdWUuXHJcblx0ICogQHBhcmFtIHNjaGVkdWxlclR5cGUgSUQgb2YgYSByZWdpc3RlcmVkIHNjaGVkdWxlciB0eXBlIHRoYXQgaXMgdXNlZCB0byB3cml0ZSB0aGUgcHJvcGVydHlcclxuXHQgKiB2YWx1ZSB0byB0aGUgRE9NLiBJZiB1bmRlZmluZWQsIHRoZSBjdXJyZW50IGRlZmF1bHQgc2NoZWR1bGVyIHdpbGwgYmUgdXNlZC5cclxuXHQgKi9cclxuXHRzZXRDdXN0b21Qcm9wPEsgZXh0ZW5kcyBWYXJUZW1wbGF0ZU5hbWU+KCBjdXN0b21WYXI6IElWYXJSdWxlPEs+LCB2YWx1ZTogRXh0ZW5kZWRWYXJWYWx1ZTxLPixcclxuXHRcdGltcG9ydGFudD86IGJvb2xlYW4sIHNjaGVkdWxlclR5cGU/OiBudW1iZXIpOiB2b2lkO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYElDbGFzc1J1bGVgIGludGVyZmFjZSByZXByZXNlbnRzIGEgc3R5bGUgcnVsZSB3aGVyZSB0aGUgc2VsZWN0b3IgaXMgYSBzaW5nbGUgY2xhc3MgbmFtZS5cclxuICogVGhpcyBpbnRlcmZhY2UgaXMgcmV0dXJuZWQgZnJvbSB0aGUgW1skY2xhc3NdXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNsYXNzUnVsZSBleHRlbmRzIElTdHlsZVJ1bGUsIElQcmVmaXhlZE5hbWVkRW50aXR5XHJcbntcclxuXHQvLyBQcmVmaXggZm9yIENTUyBjbGFzc2VzLlxyXG5cdHByZWZpeDogXCIuXCI7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgSUNsYXNzTmFtZVJ1bGVgIGludGVyZmFjZSByZXByZXNlbnRzIGEgY29tYmluYXRpb24gb2YgdHdvIG9yIG1vcmUgY2xhc3MgbmFtZXMuIEl0IGNhbiBiZVxyXG4gKiB1c2VkIHRvIG1ha2UgaXQgZWFzaWVyIHRvIGNyZWF0ZSBlbGVtZW50cyB3aXRoIG1vcmUgdGhhbiBvbmUgQ1NTIGNsYXNzLiBUaGlzIGludGVyZmFjZSBpc1xyXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBbWyRjbGFzc25hbWVdXSBmdW5jdGlvbi5cclxuICpcclxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhlIGBJQ2xhc3NOYW1lUnVsZWAgaW50ZXJmYWNlIGhhdmUgdGhlIGBuYW1lYCBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZVxyXG4gKiBjb21iaW5lZCBjbGFzcyBuYW1lLCBlLmcuIGBcImNsYXNzMSBjbGFzczJcImAuIFRoZSBgY3NzQ2xhc3NOYW1lYCBwcm9wZXJ0eSBjb250YWlucyB0aGUgY29tYmluZWRcclxuICogc2VsZWN0b3IsIGUuZy4gYFwiXCIuY2xhc3MxLmNsYXNzMlwiYC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNsYXNzTmFtZVJ1bGUgZXh0ZW5kcyBJUHJlZml4ZWROYW1lZEVudGl0eSwgSVJ1bGVXaXRoU2VsZWN0b3Jcclxue1xyXG5cdC8vIFByZWZpeCBmb3IgQ1NTIGNsYXNzZXMuXHJcblx0cHJlZml4OiBcIi5cIjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgZGVmaW5pbmcgdGhlIGBjbGFzc2AgcHJvcGVydHkgb2YgSFRNTCBlbGVtZW50cy4gSXQgY2FuIGJlIGV4cHJlc3NlZCBpbiBvbmUgb2YgdGhlXHJcbiAqIGZvbGxvd2luZyB3YXlzOlxyXG4gKiAtIGFzIGEgc3RyaW5nLlxyXG4gKiAtIGFzIGEgY2xhc3MgcnVsZSByZXR1cm5lZCBmb3JtIHRoZSBbWyRjbGFzc11dIGZ1bmN0aW9uLlxyXG4gKiAtIGFzIGEgY2xhc3MgbmFtZSBydWxlIHJldHVybmVkIGZvcm0gdGhlIFtbJGNsYXNzbmFtZV1dIGZ1bmN0aW9uLlxyXG4gKiAtIGFzIGFuIGFycmF5IG9mIHRoZSBhYm92ZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIENsYXNzUHJvcFR5cGUgPSBzdHJpbmcgfCBJQ2xhc3NSdWxlIHwgSUNsYXNzTmFtZVJ1bGUgfCBDbGFzc1Byb3BUeXBlW107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYElJRFJ1bGVgIGludGVyZmFjZSByZXByZXNlbnRzIGEgc3R5bGUgcnVsZSB3aGVyZSB0aGUgc2VsZWN0b3IgaXMgYSBzaW5nbGUgZWxlbWVudCBJRC5cclxuICogVGhpcyBpbnRlcmZhY2UgaXMgcmV0dXJuZWQgZnJvbSB0aGUgW1skaWRdXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUlEUnVsZSBleHRlbmRzIElTdHlsZVJ1bGUsIElQcmVmaXhlZE5hbWVkRW50aXR5XHJcbntcclxuXHQvLyBQcmVmaXggZm9yIENTUyBlbGVtZW50IGlkZW50aWZpZXJzLlxyXG5cdHByZWZpeDogXCIjXCI7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBBbmltYXRpb25XYXlwb2ludCB0eXBlIGRlZmluZXMgYSB0eXBlIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIGEgd2F5cG9pbnQgaW4gYW5cclxuICogYW5pbWF0aW9uIHNlcXVlbmNlLiBXaGVuIGEgd2F5cG9pbnQgaXMgc3BlY2lmaWVkIGFzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIHBlcmNlbnRzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQW5pbWF0aW9uV2F5cG9pbnQgPSBcImZyb21cIiB8IFwidG9cIiB8IG51bWJlciB8IChcImZyb21cIiB8IFwidG9cIiB8IG51bWJlcilbXTtcclxuXHJcbi8qKlxyXG4gKiBUaGUgQW5pbWF0aW9uRnJhbWUgdHlwZSBkZWZpbmVzIGEgc2luZ2xlIGtleWZyYW1lIHdpdGhpbiBhIGBAa2V5ZnJhbWVzYCBydWxlLlxyXG4gKiBUaGUgd2F5cG9pbnQgY2FuIGJlIHNwZWNpZmllZCBhcyBcImZyb21cIiBvciBcInRvXCIgc3RyaW5ncyBvciBhcyBhIG51bWJlciAwIHRvIDEwMCwgd2hpY2ggd2lsbCBiZVxyXG4gKiB0cmVhdGVkIGFzIHBlcmNlbnRzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQW5pbWF0aW9uRnJhbWUgPSBbQW5pbWF0aW9uV2F5cG9pbnQsIEFuaW1hdGlvblN0eWxlc2V0IHwgQW5pbWF0aW9uU3R5bGVzZXRbXV07XHJcblxyXG4vKipcclxuICogVGhlIElBbmltYXRpb25SdWxlIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBgQGtleWZyYW1lc2AgcnVsZS5cclxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhpcyBpbnRlcmZhY2UgYXJlIHJldHVybmVkIGZyb20gdGhlIFtbJGtleWZyYW1lc11dIGZ1bmN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQW5pbWF0aW9uUnVsZSBleHRlbmRzIElSdWxlLCBJTmFtZWRFbnRpdHlcclxue1xyXG5cdC8qKiBDU1NPTSBrZXlmcmFtZXMgcnVsZSAqL1xyXG5cdHJlYWRvbmx5IGNzc1J1bGU6IENTU0tleWZyYW1lc1J1bGUgfCBudWxsO1xyXG5cclxuXHQvKiogTGlzdCBvZiBzdHlsZSBydWxlcyByZXByZXNlbnRpbmcgYW5pbWF0aW9uIGZyYW1lcyAqL1xyXG5cdHJlYWRvbmx5IGZyYW1lUnVsZXM6IElBbmltYXRpb25GcmFtZVJ1bGVbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBJQW5pbWF0aW9uRnJhbWVSdWxlIGludGVyZmFjZSByZXByZXNlbnRzIGEgc2luZ2xlIGZyYW1lIGluIHRoZSBgQGtleWZyYW1lc2AgcnVsZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdGlvbkZyYW1lUnVsZSBleHRlbmRzIElTdHlsZVJ1bGVcclxue1xyXG5cdC8qKiBJZGVudGlmaWVyIG9mIHRoZSB3YXlwb2ludCAqL1xyXG5cdHJlYWRvbmx5IHdheXBvaW50OiBBbmltYXRpb25XYXlwb2ludDtcclxuXHJcblx0LyoqIENTU09NIGtleWZyYW1lIHJ1bGUgKi9cclxuXHRyZWFkb25seSBjc3NLZXlmcmFtZVJ1bGU6IENTU0tleWZyYW1lUnVsZTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElWYXJSdWxlIGludGVyZmFjZSByZXByZXNlbnRzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eSBkZWZpbml0aW9uLiBPYmplY3RzIGltcGxlbWVudGluZyB0aGlzXHJcbiAqIGludGVyZmFjZSBhcmUgcmV0dXJuZWQgZnJvbSB0aGUgW1skdmFyXV0gYW5kIFtbJHByb3BlcnR5XV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElWYXJSdWxlPEsgZXh0ZW5kcyBWYXJUZW1wbGF0ZU5hbWUgPSBhbnk+IGV4dGVuZHMgSVByZWZpeGVkTmFtZWRFbnRpdHksIElDdXN0b21WYXI8VmFyVmFsdWU8Sz4+XHJcbntcclxuXHQvKipcclxuICAgICAqIE5hbWUgb2YgYSBub24tY3VzdG9tIENTUyBwcm9wZXJ0eSB3aG9zZSB0eXBlIGRldGVybWluZXMgdGhlIHR5cGUgb2YgdGhlIGN1c3RvbSBwcm9wZXJ0eVxyXG4gICAgICogdmFsdWUuIFRoaXMgbmFtZSBpcyBhIHByb3BlcnR5IG9mIFtbSVZhclRlbXBsYXRlU3R5bGVzZXRdXSBpbnRlcmZhY2U7IHRoYXQgaXMsIGl0IGlzIGVpdGhlclxyXG4gICAgICogYSBuYW1lIG9mIGEgQ1NTIHN0eWxlIHByb3BlcnR5IChpbiBjYW1lbC1jYXNlKSBvciBhIHN0cmluZyBjb3JyZXNwb25kaW5nIHRvIG9uZSBvZiBiYXNpY1xyXG4gICAgICogTWltY3NzIHR5cGVzIHN1Y2ggYXMgYFwiQ3NzTGVuZ3RoXCJgLCBgXCJDc3NDb2xvclwiYCwgZXRjLlxyXG4gICAgICovXHJcblx0cmVhZG9ubHkgdGVtcGxhdGU6IEs7XHJcblxyXG4gICAgLyoqXHJcblx0ICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5LlxyXG5cdCAqL1xyXG5cdGdldFZhbHVlKCk6IEV4dGVuZGVkVmFyVmFsdWU8Sz47XHJcblxyXG4gICAgLyoqXHJcblx0ICogU2V0cyBuZXcgdmFsdWUgb2YgdGhpcyBjdXN0b20gQ1NTIHByb3BlcnR5IGF0IHRoZSBnbG9iYWwgbGV2ZWw7IHRoYXQgaXMsIHVuZGVyIGA6cm9vdGAuIFRvXHJcbiAgICAgKiBzZXQgYSB2YWx1ZSBvZiB0aGUgQ1NTIGN1c3RvbSBwcm9wZXJ0eSB1bmRlciBhIGNlcnRhaW4gQ1NTIHJ1bGUsIHVzZSB0aGVcclxuICAgICAqIFtbSVN0eWxlUnVsZS5zZXRDdXN0b21Qcm9wXV0gbWV0aG9kLlxyXG5cdCAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgZm9yIHRoZSBDU1MgcHJvcGVydHkuXHJcblx0ICogQHBhcmFtIHNjaGVkdWxlclR5cGUgSUQgb2YgYSByZWdpc3RlcmVkIHNjaGVkdWxlciB0eXBlIHRoYXQgaXMgdXNlZCB0byB3cml0ZSB0aGUgcHJvcGVydHlcclxuXHQgKiB2YWx1ZSB0byB0aGUgRE9NLiBJZiB1bmRlZmluZWQsIHRoZSBjdXJyZW50IGRlZmF1bHQgc2NoZWR1bGVyIHdpbGwgYmUgdXNlZC5cclxuXHQgKi9cclxuXHRzZXRWYWx1ZSggdmFsdWU6IEV4dGVuZGVkVmFyVmFsdWU8Sz4sIHNjaGVkdWxlclR5cGU/OiBudW1iZXIpOiB2b2lkO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUNvbnN0UnVsZSBpbnRlcmZhY2UgcmVwcmVzZW50cyBhIFwiY29uc3RhbnRcIiB0aGF0IGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoZSB0eXBlIGRlZmluZWQgYnlcclxuICogdGhlIGB0ZW1wbGF0ZWAgcGFyYW1ldGVyIGNhbiBiZSB1c2VkLiBUaGVzZSBhcmUgY2FsbGVkIGNvbnN0YW50cywgYmVjYXVzZSB0aGV5IHByb3ZpZGUgdGhlXHJcbiAqIGNvbnZlbmllbnQgYW5kIGxpZ2h0d2VpZ2h0IHdheSBvZiBkZWZpbmluZyB2YWx1ZXMgdGhhdCBhcmUgdW5jaGFuZ2VkIGR1cmluZyB0aGUgYXBwbGljYXRpb25cclxuICogbGlmZXRpbWUuIEFsdGhvdWdoIGNvbnN0YW50cyBhcmUgZGVmaW5lZCB2ZXJ5IHNpbWlsYXJseSB0byBjdXN0b20gcHJvcGVydGllcyAoc2VlIHRoZVxyXG4gKiBbW0lWYXJSdWxlXV0gaW50ZXJmYWNlKSwgdGhleSBjYW5ub3QgcGFydGljaXBhdGUgaW4gdGhlIGNhc2NhZGUgYW5kIGNhbm5vdCBiZSByZWRlZmluZWQgdW5kZXJcclxuICogZWxlbWVudHMuIENvbnN0YW50IGNhbiwgaG93ZXZlciwgdXNlIGFueSBleHByZXNzaW9uIHRoYXQgc2F0aXNmaWVzIHRoZSB0eXBlIGRlZmluZWQgYnkgdGhlXHJcbiAqIGB0ZW1wbGF0ZWAgcGFyYW1ldGVyIGluY2x1ZGluZyBvdGhlciBjb25zdGFudHMsIGN1c3RvbSBwcm9wZXJ0aWVzIGFuZCBmdW5jdGlvbnMuXHJcbiAqIE9iamVjdHMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGFyZSByZXR1cm5lZCBmcm9tIHRoZSBbWyRjb25zdF1dIGZ1bmN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ29uc3RSdWxlPEsgZXh0ZW5kcyBWYXJUZW1wbGF0ZU5hbWUgPSBhbnk+IGV4dGVuZHMgSUNvbnN0YW50PFZhclZhbHVlPEs+PlxyXG57XHJcblx0LyoqXHJcbiAgICAgKiBOYW1lIG9mIGEgbm9uLWN1c3RvbSBDU1MgcHJvcGVydHkgb3Igc2ltcGxlIHR5cGUgd2hvc2UgdHlwZSBkZXRlcm1pbmVzIHRoZSB0eXBlIG9mIHRoZVxyXG4gICAgICogY3VzdG9tIHByb3BlcnR5IHZhbHVlLlxyXG4gICAgICovXHJcblx0cmVhZG9ubHkgdGVtcGxhdGU6IEs7XHJcblxyXG4gICAgLyoqXHJcblx0ICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5LlxyXG5cdCAqL1xyXG5cdGdldFZhbHVlKCk6IEV4dGVuZGVkVmFyVmFsdWU8Sz47XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJQ291bnRlclJ1bGUgaW50ZXJmYWNlIHJlcHJlc2VudHMgYSBuYW1lZCBjb3VudGVyIGRlZmluaXRpb24uIFVzZSB0aGlzIHJ1bGUgdG8gY3JlYXRlXHJcbiAqIGNvdW50ZXIgb2JqZWN0cyB0aGF0IGNhbiBiZSB1c2VkIGluIGNvdW50ZXItaW5jcmVtZW50LCBjb3VudGVyLXJlc2V0IGFuZCBjb3VudGVyLXNldCBzdHlsZVxyXG4gKiBwcm9wZXJ0aWVzLiBObyBDU1MgcnVsZSBpcyBjcmVhdGVkIGZvciBjb3VudGVycyAtIHRoZXkgYXJlIG5lZWRlZCBvbmx5IHRvIHByb3ZpZGUgdHlwZS1zYWZlXHJcbiAqIGNvdW50ZXIgZGVmaW5pdGlvbnMuXHJcbiAqIE9iamVjdHMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGFyZSByZXR1cm5lZCBmcm9tIHRoZSBbWyRjb3VudGVyXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDb3VudGVyUnVsZSBleHRlbmRzIElOYW1lZEVudGl0eVxyXG57XHJcblx0LyoqXHJcbiAgICAgKiBOYW1lIG9mIHRoZSBjb3VudGVyIC0gdGhpcyBwcm9wZXJ0eSByZXR1cm5zIHRoZSBzYW1lIHZhbHVlIGFzIHRoZSBgbmFtZWAgcHJvcGVydHlcclxuICAgICAqIGluaGVyaXRlZCBmcm9tIHRoZSBbW0lOYW1lZEVudGl0eV1dIGludGVyZmFjZS4gVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IG5lZWRlZCB0byBkaXN0aW5ndWlzaFxyXG4gICAgICogdGhpcyBpbnRlcmZhY2UgZnJvbSBvdGhlcnMuXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKi9cclxuXHRyZWFkb25seSBjb3VudGVyTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUNvdW50ZXJSdWxlIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBgQGNvdW50ZXItc3R5bGVgIHJ1bGUuXHJcbiAqIE9iamVjdHMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGFyZSByZXR1cm5lZCBmcm9tIHRoZSBbWyRjb3VudGVyU3R5bGVdXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNvdW50ZXJTdHlsZVJ1bGUgZXh0ZW5kcyBJUnVsZSwgSU5hbWVkRW50aXR5XHJcbntcclxuXHQvKiogQ1NTT00gY291bnRlci1zdHlsZSBydWxlICovXHJcblx0cmVhZG9ubHkgY3NzUnVsZTogQ1NTQ291bnRlclN0eWxlUnVsZSB8IG51bGw7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJSW1wb3J0UnVsZSBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgQ1NTIGBAaW1wb3J0YCBydWxlLlxyXG4gKiBPYmplY3RzIGltcGxlbWVudGluZyB0aGlzIGludGVyZmFjZSBhcmUgcmV0dXJuZWQgZnJvbSB0aGUgW1skaW1wb3J0XV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElJbXBvcnRSdWxlIGV4dGVuZHMgSVJ1bGVcclxue1xyXG5cdC8qKiBDU1NPTSBpbXBvcnQgcnVsZSAqL1xyXG5cdHJlYWRvbmx5IGNzc1J1bGU6IENTU0ltcG9ydFJ1bGUgfCBudWxsO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUZvbnRGYWNlUnVsZSBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgQ1NTIGBAZm9udC1mYWNlYCBydWxlLlxyXG4gKiBPYmplY3RzIGltcGxlbWVudGluZyB0aGlzIGludGVyZmFjZSBhcmUgcmV0dXJuZWQgZnJvbSB0aGUgW1skZm9udGZhY2VdXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZvbnRGYWNlUnVsZSBleHRlbmRzIElSdWxlXHJcbntcclxuXHQvKiogQ1NTT00gZm9udC1mYWNlIHJ1bGUgKi9cclxuXHRyZWFkb25seSBjc3NSdWxlOiBDU1NGb250RmFjZVJ1bGUgfCBudWxsO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSU5hbWVzcGFjZVJ1bGUgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIENTUyBgQG5hbWVzcGFjZWAgcnVsZS5cclxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhpcyBpbnRlcmZhY2UgYXJlIHJldHVybmVkIGZyb20gdGhlIFtbJG5hbWVzcGFjZV1dIGZ1bmN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTmFtZXNwYWNlUnVsZSBleHRlbmRzIElSdWxlXHJcbntcclxuXHQvKiogTmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIHJ1bGUgKi9cclxuXHRyZWFkb25seSBuYW1lc3BhY2U6IHN0cmluZztcclxuXHJcblx0LyoqIE9wdGlvbmFsIHByZWZpeCBmb3IgdGhlIHJ1bGUgKi9cclxuXHRyZWFkb25seSBwcmVmaXg6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuXHJcblx0LyoqIENTU09NIG5hbWVzcGFjZSBydWxlICovXHJcblx0cmVhZG9ubHkgY3NzUnVsZTogQ1NTTmFtZXNwYWNlUnVsZSB8IG51bGw7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJUGFnZVJ1bGUgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIENTUyBgQHBhZ2VgIHJ1bGUuXHJcbiAqIE9iamVjdHMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGFyZSByZXR1cm5lZCBmcm9tIHRoZSBbWyRwYWdlXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQYWdlUnVsZSBleHRlbmRzIElTdHlsZVJ1bGVcclxue1xyXG5cdC8qKiBPcHRpb25hbCBuYW1lIG9mIHRoZSBwYWdlIHBzZXVkbyBzdHlsZSAoZS5nLiBcIlwiOmZpcnN0XCIpICovXHJcblx0cmVhZG9ubHkgcHNldWRvQ2xhc3M/OiBQYWdlUHNldWRvQ2xhc3MgfCB1bmRlZmluZWQ7XHJcblxyXG5cdC8qKiBDU1NPTSBwYWdlIHJ1bGUgKi9cclxuXHRyZWFkb25seSBjc3NSdWxlOiBDU1NQYWdlUnVsZSB8IG51bGw7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJR3JpZExpbmVSdWxlIGludGVyZmFjZSByZXByZXNlbnRzIGEgZGVmaW5pdGlvbiBvZiBhIG5hbWVkIGdyaWQgbGluZS5cclxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhpcyBpbnRlcmZhY2UgYXJlIHJldHVybmVkIGZyb20gdGhlIFtbJGdyaWRsaW5lXV0gZnVuY3Rpb24gb3IgY3JlYXRlZFxyXG4gKiB3aGVuIGEgZ3JpZCBhcmVhIGlzIGRlZmluZWQgdXNpbmcgdGhlIFtbJGdyaWRhcmVhXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkTGluZVJ1bGUgZXh0ZW5kcyBJTmFtZWRFbnRpdHlcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgbGluZSBpcyBhIHN0YXJ0IG9yIGVuZCBsaW5lIG9mIGEgZ3JpZCBhcmVhLiBUaGUgdmFsdWUgaXMgdHJ1ZVxyXG4gICAgICogaWYgdGhpcyBpcyB0aGUgc3RhcnQgbGluZTsgZmFsc2UgaWYgdGhpcyBpcyB0aGUgZW5kIGxpbmU7IGFuZCB1bmRlZmluZWQgaWYgdGhlIGxpbmUgaXNcclxuICAgICAqIG5vdCByZWxhdGVkIHRvIGFueSBhcmVhLlxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBpc1N0YXJ0RW5kT3JOb25lPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5hbWUgb2YgdGhlIGdyaWQgYXJlYSBvZiB3aGljaCB0aGUgbGluZSBpcyBlaXRoZXIgYSBzdGFydCBvciBhbiBlbmQgbGluZS4gSXQgaXMgZGVmaW5lZFxyXG4gICAgICogb25seSBpZiB0aGUgbGluZSBuYW1lIGVuZHMgd2l0aCBcIi1zdGFydFwiIG9yIFwiLWVuZFwiLlxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBhcmVhTmFtZT86IHN0cmluZztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElHcmlkQXJlYVJ1bGUgaW50ZXJmYWNlIHJlcHJlc2VudHMgYSBkZWZpbml0aW9uIG9mIGEgbmFtZWQgZ3JpZCBhcmUuIEdyaWQgYXJlYSBydWxlXHJcbiAqIGRlZmluZXMgdHdvIGxpbmUgcnVsZXM6IGZvciBpdHMgc3RhcnQgYW5kIGVuZCBsaW5lcy5cclxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhpcyBpbnRlcmZhY2UgYXJlIHJldHVybmVkIGZyb20gdGhlIFtbJGdyaWRhcmVhXV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkQXJlYVJ1bGUgZXh0ZW5kcyBJTmFtZWRFbnRpdHlcclxue1xyXG4gICAgLyoqIFN0YXJ0IGxpbmUgb2YgdGhlIGFyZWEuICovXHJcbiAgICByZWFkb25seSBzdGFydExpbmU6IElHcmlkTGluZVJ1bGU7XHJcblxyXG4gICAgLyoqIEVuZCBsaW5lIG9mIHRoZSBhcmVhLiAqL1xyXG4gICAgcmVhZG9ubHkgZW5kTGluZTogSUdyaWRMaW5lUnVsZTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGBJU3R5bGVEZWZpbml0aW9uYCBpbnRlcmZhY2UgcmVwcmVzZW50cyBhIGNsYXNzIHRoYXQgY29udGFpbiBkZWZpbmluaXRpb25zIG9mIENTUyBydWxlcy5cclxuICogVGhpcyBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgYnkgdGhlIFtbU3R5bGVEZWZpbml0aW9uXV0gY2xhc3MgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZVxyXG4gKiBpbXBsZW1lbnRlZCBieSBkZXZlbG9wZXJzXHJcbiAqXHJcbiAqIEB0eXBlcGFyYW0gUCBQYXJlbnQgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcy4gUGFyZW50IG9mIGEgdG9wLWxldmVsIGNsYXNzIGlzIG51bGwuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTdHlsZURlZmluaXRpb248UCBleHRlbmRzIElTdHlsZURlZmluaXRpb24gPSBhbnk+XHJcbntcclxuXHQvKipcclxuXHQgKiBSZWZlcnMgdG8gdGhlIGluc3RhbmNlIG9mIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIHdoaWNoIGlzIHRoZSBwYXJudCBvZiB0aGlzIHN0eWxlXHJcbiAgICAgKiBkZWZpbml0aW9uIG9iamVjdCBpbiB0aGUgY2hhaW4gb2Ygc3R5bGUgZGVmaW5pdGlvbiBjbGFzc2VzLiBUaHJvdWdoIHRoaXMgbWVtYmVyLCBhbGwgcnVsZXNcclxuICAgICAqIGFuZCBvdGhlciBtZW1iZXJzIGRlZmluZWQgaW4gdGhlIHBhcmVudCBkZWZpbml0aW9uIGNsYXNzIGNhbiBiZSBhY2Nlc3NlZC4gRm9yIHRvcC1sZXZlbFxyXG4gICAgICogc3R5bGUgZGVmaW5pdGlvbnMsIHRoaXMgcHJvcGVydHkgaXMgYWx3YXlzIHVuZGVmaW5lZC4gVGhpcyBwcm9wZXJ0eSBjYW4gYWxzbyBiZSB1bmRlZmluZWRcclxuICAgICAqIGlmIGl0IHdhcyBub3QgcHJvdmlkZWQgdG8gdGhlIGNvbnN0cnVjdG9yIHdoZW4gY3JlYXRpbmcgdGhlIHN0eWxlIGRlZmluaXRpb24gY2xhc3MgbWFudWFsbHkuXHJcblx0ICovXHJcblx0cmVhZG9ubHkgJHBhcmVudD86IFA7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFwiQ29uc3RydWN0b3JcIiBpbnRlcmZhY2UgZGVmaW5pbmcgaG93IHN0eWxlIGRlZmluaXRpb24gY2xhc3NlcyBjYW4gYmUgY3JlYXRlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVN0eWxlRGVmaW5pdGlvbkNsYXNzPFQgZXh0ZW5kcyBJU3R5bGVEZWZpbml0aW9uPFA+ID0gYW55LFxyXG4gICAgUCBleHRlbmRzIElTdHlsZURlZmluaXRpb24gPSBhbnk+XHJcbntcclxuXHQvKiogQWxsIHN0eWxlIGRlZmluaXRpb24gY2xhc3NlcyBzaG91bGQgY29uZm9ybSB0byB0aGlzIGNvbnN0cnVjdG9yICovXHJcblx0bmV3KCBwYXJlbnQ/OiBQKTogVDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElHcm91cFJ1bGUgaW50ZXJmYWNlIHJlcHJlc2VudHMgYSBncm91cGluZyBDU1MgcnVsZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdyb3VwUnVsZTxUIGV4dGVuZHMgSVN0eWxlRGVmaW5pdGlvbiA9IGFueSwgUiBleHRlbmRzIENTU0dyb3VwaW5nUnVsZSA9IGFueT4gZXh0ZW5kcyBJUnVsZVxyXG57XHJcblx0LyoqIENvbmRpdGlvbiBvZiB0aGlzIGdyb3VwaW5nIHJ1bGUuICovXHJcblx0cmVhZG9ubHkgY29uZGl0aW9uOiBzdHJpbmc7XHJcblxyXG5cdC8qKiBJbnN0YW5jZSBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBkZWZpbmluZyB0aGUgcnVsZXMgdW5kZXIgdGhpcyBncm91cGluZyBydWxlICovXHJcblx0cmVhZG9ubHkgZ3NkOiBUO1xyXG5cclxuXHQvKiogQ1NTT00gZ3JvdXBpbmcgcnVsZSAqL1xyXG5cdHJlYWRvbmx5IGNzc1J1bGU6IFIgfCBudWxsO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSVN1cHBvcnRzUnVsZSBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgQ1NTIEBzdXBwb3J0cyBydWxlLlxyXG4gKiBPYmplY3RzIGltcGxlbWVudGluZyB0aGlzIGludGVyZmFjZSBhcmUgcmV0dXJuZWQgZnJvbSB0aGUgW1skc3VwcG9ydHNdXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVN1cHBvcnRzUnVsZTxUIGV4dGVuZHMgSVN0eWxlRGVmaW5pdGlvbiA9IGFueT4gZXh0ZW5kcyBJR3JvdXBSdWxlPFQsQ1NTU3VwcG9ydHNSdWxlPlxyXG57XHJcblx0LyoqIEZsYWcgaW5kaWNhdGVkIHdoZXRoZXIgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhpcyBydWxlJ3MgcXVlcnkgKi9cclxuICAgIHJlYWRvbmx5IGlzU3VwcG9ydGVkOiBib29sZWFuO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSU1lZGlhUnVsZSBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgQ1NTIEBtZWRpYSBydWxlLlxyXG4gKiBPYmplY3RzIGltcGxlbWVudGluZyB0aGlzIGludGVyZmFjZSBhcmUgcmV0dXJuZWQgZnJvbSB0aGUgW1skbWVkaWFdXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1lZGlhUnVsZTxUIGV4dGVuZHMgSVN0eWxlRGVmaW5pdGlvbiA9IGFueT4gZXh0ZW5kcyBJR3JvdXBSdWxlPFQsQ1NTTWVkaWFSdWxlPlxyXG57XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYE1lZGlhUXVlcnlMaXN0YCBvYmplY3QgdGhhdCBhbGxvd3MgcHJvZ3JhbW1hdGljIGNoZWNraW5nIHdoZXRoZXIgdGhlIGRvY3VtZW50IG1hdGNoZXNcclxuICAgICAqIHRoZSBtZWRpYSBzdGF0ZW1lbnQgYW5kIGFsc28gYWxsb3dzIGxpc3RlbmluZyB0byBpdHMgYGNoYW5nZWAgZXZlbnRcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgcXVlcnlMaXN0OiBNZWRpYVF1ZXJ5TGlzdCB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gTmFtZSBnZW5lcmF0aW9uLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBQcm92aWRlcyB2YWx1ZXMgdGhhdCBpZGVudGlmeSB0aGUgbWV0aG9kIHVzZWQgdG8gZ2VuZXJhdGUgbmFtZXMgb2YgQ1NTIG5hbWVkIGVudGl0aWVzIChlLmcuXHJcbiAqIGNsYXNzZXMsIGlkZW50aWZpZXJzLCBjb3VudGVycywgYW5pbWF0aW9ucywgY3VzdG9tIHByb3BlcnRpZXMsIGV0Yy4pLiBUaGUgZGV2ZWxvcG1lbnQgdmVyc2lvblxyXG4gKiBvZiB0aGUgTWltY3NzIGxpYnJhcnkgdXNlcyB0aGUgYFVuaXF1ZVNjb3BlZGAgbWV0aG9kIHdoaWxlIHRoZSBwcm9kdWN0aW9uIHZlcnNpb24gdXNlcyB0aGVcclxuICogYE9wdGltaXplZGAgbWV0aG9kLiBUaGUgW1tjb25maWdOYW1lR2VuZXJhdGlvbl1dIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gY2hhbmdlIHRoZSBkZWZhdWx0XHJcbiAqIG1ldGhvZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBlbnVtIE5hbWVHZW5lcmF0aW9uTWV0aG9kXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogTmFtZXMgYXJlIGdlbmVyYXRlZCB1c2luZyB0aGUgbmFtZSBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBjb25jYXRlbmF0ZWQgd2l0aCB0aGVcclxuICAgICAqIHByb3BlcnR5IG5hbWUgZGVmaW5pbmcgdGhlIENTUyBlbnRpdHkgYW5kIGNvbmNhdGVuYXRlZCB3aXRoIGEgdW5pcXVlIG51bWJlci4gVGhlIHVuaXF1ZVxyXG4gICAgICogbnVtYmVyIGlzIG5lZWRlZCB0byBnZW5lcmF0ZSB0cnVseSB1bmlxdWUgbmFtZXMgZXZlbiBpbiB0aGUgcHJlc2VuY2Ugb2YgaWRlbnRpY2FsbHkgbmFtZWRcclxuICAgICAqIHN0eWxlIGRlZmluaXRpb24gY2xhc3NlcyBhbmQgcHJvcGVydGllcy4gVGhpcyBtZXRob2QgcHJvZHVjZXMgcmVsYXRpdmVseSBsb25nIG5hbWVzIGFuZFxyXG4gICAgICogc2hvdWxkIGJlIHVzZWQgZHVyaW5nIGRldmVsb3BtZW50LiBIYXZpbmcgdGhlIG5hbWVzIG9mIHRoZSBjbGFzcyBhbmQgcHJvcGVydHkgZGVmaW5pbmcgdGhlXHJcbiAgICAgKiBDU1MgZW50aXR5IGFsbG93cyBkZXZlbG9wZXJzIHRvIGVhc2lseSBmaW5kIHRoZSBwbGFjZSB3aGVyZSB0aGUgZW50aXR5IGlzIGRlZmluZWQuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCBieSBkZWZhdWx0IGluIHRoZSBkZXZlbG9wbWVudCB2ZXJzaW9uIG9mIHRoZSBNaW1jc3MgbGlicmFyeS5cclxuICAgICAqXHJcbiAgICAgKiAqKkV4YW1wbGU6KipcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNzcy5jb25maWdOYW1lR2VuZXJhdGlvbiggTmFtZUdlbmVyYXRpb25NZXRob2QuVW5pcXVlU2NvcGVkKTtcclxuICAgICAqXHJcbiAgICAgKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICAgICAqIHtcclxuICAgICAqICAgICAvLyBjbGFzcyBuYW1lIHdpbGwgYmUgZ2VuZXJhdGVkIGFzIFwiTXlTdHlsZXNfcmVkX25ublwiLCB3aGVyZSAnbm5uJyBpcyBhIHVuaXF1ZSBudW1iZXIuXHJcbiAgICAgKiAgICAgcmVkID0gdGhpcy4kY2xhc3MoeyBjb2xvcjogXCJyZWRcIn0pXHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgVW5pcXVlU2NvcGVkID0gMSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5hbWVzIGFyZSBnZW5lcmF0ZWQgdXNpbmcgYSBwcmVmaXggY29uY2F0ZW5hdGVkIHdpdGggYSB1bmlxdWUgbnVtYmVyLiBUaGUgZGVmYXVsdCBwcmVmaXggaXNcclxuICAgICAqIGBcIm5cImAsIHdoaWNoIGNhbiBiZSBjaGFuZ2VkIHVzaW5nIHRoZSBbW2NvbmZpZ05hbWVHZW5lcmF0aW9uXV0gZnVuY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCBieSBkZWZhdWx0IGluIHRoZSBwcm9kdWN0aW9uIHZlcnNpb24gb2YgdGhlIE1pbWNzcyBsaWJyYXJ5LlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY3NzLmNvbmZpZ05hbWVHZW5lcmF0aW9uKCBOYW1lR2VuZXJhdGlvbk1ldGhvZC5PcHRpbWl6ZWQsIFwibXlfXCIpO1xyXG4gICAgICpcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIGNsYXNzIG5hbWUgd2lsbCBiZSBnZW5lcmF0ZWQgYXMgXCJteV9ubm5cIiwgd2hlcmUgJ25ubicgaXMgYSB1bmlxdWUgbnVtYmVyLlxyXG4gICAgICogICAgIHJlZCA9IHRoaXMuJGNsYXNzKHsgY29sb3I6IFwicmVkXCJ9KVxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIE9wdGltaXplZCxcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5hbWVzIGFyZSBnZW5lcmF0ZWQgdXNpbmcgdGhlIG5hbWUgb2YgdGhlIHN0eWxlIGRlZmluaXRpb24gY2xhc3MgY29uY2F0ZW5hdGVkIHdpdGggdGhlXHJcbiAgICAgKiBwcm9wZXJ0eSBuYW1lIGRlZmluaW5nIHRoZSBDU1MgZW50aXR5LiBUaGlzIG1ldGhvZCBwcm9kdWNlcyBwcmVkaWNhdGFibGUgbmFtZXMgKHNpbmNlIG5vXHJcbiAgICAgKiB1bmlxdWUgbnVtYmVycyBhcmUgaW52b2x2ZWQpIGFuZCB0aHVzIGlzIHN1aXRhYmxlIGZvciB0ZXN0aW5nIGVudmlyb25tZW50cyB3aGVyZSBDU1MgbmFtZXNcclxuICAgICAqIGFyZSB1c2VkIGZvciBpZGVudGlmeWluZyBlbGVtZW50cyBvbiB0aGUgcGFnZS4gTm90ZSB0aGF0IGlmIGRpZmZlcmVudCBKYXZhU2NyaXB0IG1vZHVsZXNcclxuICAgICAqIGhhdmUgaWRlbnRpY2FsbHkgbmFtZWQgY2xhc3NlcyB3aXRoIGlkZW50aWNhbGx5IG5hbWVkIHByb3BlcnRpZXMsIHRoZSBnZW5lcmF0ZWQgbmFtZXNcclxuICAgICAqIHdpbGwgYmUgaWRlbnRpY2FsLlxyXG4gICAgICpcclxuICAgICAqICoqRXhhbXBsZToqKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY3NzLmNvbmZpZ05hbWVHZW5lcmF0aW9uKCBOYW1lR2VuZXJhdGlvbk1ldGhvZC5TY29wZWQpO1xyXG4gICAgICpcclxuICAgICAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gICAgICoge1xyXG4gICAgICogICAgIC8vIGNsYXNzIG5hbWUgd2lsbCBiZSBnZW5lcmF0ZWQgYXMgXCJNeVN0eWxlc19yZWRcIi5cclxuICAgICAqICAgICByZWQgPSB0aGlzLiRjbGFzcyh7IGNvbG9yOiBcInJlZFwifSlcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBTY29wZWQsXHJcbn1cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IHtJU2NoZWR1bGVyfSBmcm9tIFwiLi4vYXBpL1NjaGVkdWxpbmdUeXBlc1wiO1xyXG5pbXBvcnQgKiBhcyBpbXBsIGZyb20gXCIuLi9pbXBsL1NjaGVkdWxpbmdJbXBsXCI7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFNjaGVkdWxpbmcuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogV3JpdGVzIHRvIERPTSBhbGwgc3R5bGUgY2hhbmdlcyBjYXVzZWQgYnkgdGhlIGNhbGxzIHRvIHRoZSBhY3RpdmF0ZSBhbmQgZGVhY3RpdmF0ZSBmdW5jdGlvbnNcclxuICogYWNjdW11bGF0ZWQgc2luY2UgdGhlIGxhc3QgYWN0aXZhdGlvbiBvZiB0aGUgZ2l2ZW4gc2NoZWR1bGluZyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGZvcmNlRE9NVXBkYXRlID0gKHNjaGVkdWxlclR5cGU/OiBudW1iZXIpOiB2b2lkID0+XHJcblx0aW1wbC5nZXRBY3RpdmF0b3Ioc2NoZWR1bGVyVHlwZSkuZm9yY2VET01VcGRhdGUoKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYWxsIHNjaGVkdWxlZCBhY3RpdmF0aW9ucyBjYXVzZWQgYnkgdGhlIGNhbGxzIHRvIHRoZSBhY3RpdmF0ZSBhbmQgZGVhY3RpdmF0ZSBmdW5jdGlvbnNcclxuICogYWNjdW11bGF0ZWQgc2luY2UgdGhlIGxhc3QgYWN0aXZhdGlvbiBvZiB0aGUgZ2l2ZW4gc2NoZWR1bGluZyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNhbmNlbERPTVVwZGF0ZSA9IChzY2hlZHVsZXJUeXBlPzogbnVtYmVyKTogdm9pZCA9PlxyXG5cdGltcGwuZ2V0QWN0aXZhdG9yKHNjaGVkdWxlclR5cGUpLmNhbmNlbERPTVVwZGF0ZSgpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgZGVmYXVsdCBzY2hlZHVsaW5nIHR5cGUgdGhhdCBpcyB1c2VkIGJ5IGFjdGl2YXRlIGFuZCBkZWFjdGl2YXRlIGZ1bmN0aW9ucyB0aGF0IGFyZVxyXG4gKiBjYWxsZWQgd2l0aG91dCBleHBsaWNpdGx5IHByb3ZpZGluZyB2YWx1ZSB0byB0aGUgc2NoZWR1bGluZyBwYXJhbWV0ZXIuIFJldHVybnMgdGhlIHR5cGUgb2YgdGhlXHJcbiAqIHByZXZpb3VzIGRlZmF1bHQgYWN0aXZhdG9yIG9yIDAgaWYgYW4gZXJyb3Igb2NjdXJzIChlLmcuIHRoZSBnaXZlbiBzY2hlZHVsZXIgdHlwZSBJRCBpcyBub3RcclxuICogcmVnaXN0ZXJlZCkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2V0RGVmYXVsdFNjaGVkdWxlciA9IChzY2hlZHVsZXJUeXBlOiBudW1iZXIpOiBudW1iZXIgPT5cclxuICAgIGltcGwuc2V0RGVmYXVsdFNjaGVkdWxlciggc2NoZWR1bGVyVHlwZSk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgdGhlIGdpdmVuIHNjaGVkdWxlciBvYmplY3QgYW5kIHJldHVybnMgdGhlIHNjaGVkdWxlciB0eXBlIGlkZW50aWZpZXIsIHdoaWNoXHJcbiAqIHNob3VsZCBiZSB1c2VkIHdoZW4gY2FsbGluZyBhY3RpdmF0ZSBhbmQgZGVhY3RpdmF0ZSBmdW5jdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJTY2hlZHVsZXIgPSAoc2NoZWR1bGVyOiBJU2NoZWR1bGVyKTogbnVtYmVyID0+XHJcbiAgICBpbXBsLnJlZ2lzdGVyU2NoZWR1bGVyKCBzY2hlZHVsZXIpO1xyXG5cclxuXHJcblxyXG4iLCIvKipcclxuICogVGhlIFNjaGVkdWxlclR5cGUgZW51bWVyYXRpb24gcHJvdmlkZXMgdmFsdWVzIHVzZWQgdG8gZGVmaW5lIGhvdyB0aGUgY2FsbHMgdG8gdGhlXHJcbiAqIGFjdGl2YXRlIGFuZCBkZWFjdGl2YXRlIGZ1bmN0aW9ucyBzY2hlZHVsZSB0aGUgd3JpdGluZyBvZiBzdHlsZSBjaGFuZ2VzIHRvIHRoZSBET00uXHJcbiAqL1xyXG4gZXhwb3J0IGNvbnN0IGVudW0gU2NoZWR1bGVyVHlwZVxyXG4ge1xyXG4gICAgIC8qKlxyXG4gICAgICAqIFN5bmNocm9ub3VzIGFjdGl2YXRpb24gLSBzdHlsZSBkZWZpbml0aW9ucyBhcmUgd3JpdHRlbiB0byB0aGUgRE9NIHVwb24gdGhlIGFjdGl2YXRlXHJcbiAgICAgICogYW5kIGRlYWN0aXZhdGUgY2FsbHMuXHJcbiAgICAgICovXHJcbiAgICAgU3luYyA9IDEsXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICAqIENhbGxzIHRvIGFjdGl2YXRlIGFuZCBkZWFjdGl2YXRlIGZ1bmN0aW9ucyBhcmUgYWNjdW11bGF0ZWQgdW50aWwgdGhlIG5leHQgYW5pbWF0aW9uXHJcbiAgICAgICogZnJhbWUgYW5kIHRoZW4gZXhlY3V0ZWQgYWxsdG9nZXRoZXIuXHJcbiAgICAgICovXHJcbiAgICAgQW5pbWF0aW9uRnJhbWUsXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICAqIENhbGxzIHRvIGFjdGl2YXRlIGFuZCBkZWFjdGl2YXRlIGZ1bmN0aW9ucyBhcmUgYWNjdW11bGF0ZWQgdW50aWwgdGhlIGNhbGwgdG8gdGhlXHJcbiAgICAgICogZm9yY2VET01VcGRhdGUgZnVuY3Rpb24gYW5kIHRoZW4gZXhlY3V0ZWQgYWxsdG9nZXRoZXIuXHJcbiAgICAgICovXHJcbiAgICAgTWFudWFsLFxyXG4gfVxyXG5cclxuXHJcblxyXG4gLyoqXHJcbiAgKiBUaGUgSVNjaGVkdWxlciBpbnRlcmZhY2Ugc2hvdWxkIGJlIGltcGxlbWVudGVkIGJ5IGN1c3RvbSBzY2hlZHVsZXJzLiBJdHMgbWV0aG9kcyBhcmUgaW52b2tlZFxyXG4gICogYnkgdGhlIGFjdGl2YXRpb24gaW5mcmFzdHJ1Y3R1cmUuXHJcbiAgKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSVNjaGVkdWxlclxyXG4ge1xyXG4gICAgIC8qKlxyXG4gICAgICAqIEluaXRpYWxpemVzIHRoZSBzY2hlZHVsZXIgb2JqZWN0IGFuZCBwcm92aWRlcyB0aGUgY2FsbGJhY2sgdGhhdCBzaG91bGQgYmUgaW52b2tlZCB3aGVuIHRoZVxyXG4gICAgICAqIHNjaGVkdWxlciBkZWNpZGVzIHRvIG1ha2UgY2hhbmdlcyB0byB0aGUgRE9NLlxyXG4gICAgICAqL1xyXG4gICAgIGluaXQoIGRvRE9NVXBkYXRlOiAoKSA9PiB2b2lkKTogdm9pZDtcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgICogSXMgaW52b2tlZCB3aGVuIHRoZSBzY2hlZHVsZXIgbmVlZHMgdG8gc2NoZWR1bGUgaXRzIGNhbGxiYWNrIG9yIGV2ZW50LlxyXG4gICAgICAqL1xyXG4gICAgIHNjaGVkdWxlRE9NVXBkYXRlKCk6IHZvaWQ7XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICAqIElzIGludm9rZWQgd2hlbiB0aGUgc2NoZWR1bGVyIG5lZWRzIHRvIGNhbmNlbCBpdHMgc2NoZWR1bGVkIGNhbGxiYWNrIG9yIGV2ZW50LlxyXG4gICAgICAqL1xyXG4gICAgIGNhbmNlbERPTVVwZGF0ZSgpOiB2b2lkO1xyXG4gfVxyXG5cclxuXHJcblxyXG4iLCLvu79pbXBvcnQge0Nzc0ltYWdlLCBFeHRlbmRlZCwgRXh0ZW50S2V5d29yZH0gZnJvbSBcIi4vQ29yZVR5cGVzXCI7XHJcbmltcG9ydCB7Qm9yZGVyUmFkaXVzLCBDc3NBbmdsZSwgQ3NzTGVuZ3RoLCBDc3NOdW1iZXIsIENzc1BlcmNlbnQsIENzc1BvaW50LCBDc3NQb3NpdGlvbn0gZnJvbSBcIi4vTnVtZXJpY1R5cGVzXCI7XHJcbmltcG9ydCB7Q3NzQ29sb3J9IGZyb20gXCIuL0NvbG9yVHlwZXNcIjtcclxuaW1wb3J0IHtcclxuICAgIEdyYWRpZW50U3RvcE9ySGludCwgTGluZWFyR3JhZGllbnRBbmdsZSwgU2hhcGVSYWRpdXMsIElNaW5NYXhGdW5jLCBJUGF0aEJ1aWxkZXIsXHJcbiAgICBJUmVwZWF0RnVuYywgSUdyaWRTcGFuRnVuYywgRmlsbFJ1bGUsIElDaXJjbGVCdWlsZGVyLCBJRWxsaXBzZUJ1aWxkZXIsXHJcbiAgICBJSW5zZXRCdWlsZGVyLCBJUG9seWdvbkJ1aWxkZXIsIFBhdGhDb21tYW5kLCBQYXRoQ29tbWFuZFBhcmFtLCBJUmF5RnVuYyxcclxuICAgIFBlcmNlbnRGaWx0ZXJOYW1lcywgSVBlcmNlbnRGaWx0ZXJGdW5jLCBJQmx1ckZ1bmMsIElEcm9wU2hhZG93RnVuYywgSUh1ZVJvdGF0ZUZ1bmMsIElNYXRyaXhGdW5jLFxyXG4gICAgSU1hdHJpeDNkRnVuYywgSVBlcnNwZWN0aXZlRnVuYywgSVJvdGF0ZUZ1bmMsIElSb3RhdGUzZEZ1bmMsIElTY2FsZTFkRnVuYywgSVNjYWxlRnVuYywgSVNjYWxlM2RGdW5jLFxyXG4gICAgSVNrZXdGdW5jLCBJU2tldzFkRnVuYywgSVRyYW5zbGF0ZTFkRnVuYywgSVRyYW5zbGF0ZTNkRnVuYywgSVRyYW5zbGF0ZUZ1bmMsIElMaW5lYXJHcmFkaWVudEJ1aWxkZXIsXHJcbiAgICBJTGluZWFyR3JhZGllbnRGdW5jLCBJUmFkaWFsR3JhZGllbnRCdWlsZGVyLCBJUmFkaWFsR3JhZGllbnRGdW5jLCBJQ29uaWNHcmFkaWVudEJ1aWxkZXIsXHJcbiAgICBJQ29uaWNHcmFkaWVudEZ1bmMsIElHcmFkaWVudEJ1aWxkZXIsIElHcmFkaWVudEZ1bmMsIElDcm9zc0ZhZGVCdWlsZGVyLCBJQ3Jvc3NGYWRlRnVuYywgSUltYWdlU2V0RnVuYyxcclxuICAgIEltYWdlU2V0SXRlbSwgSW1hZ2VTZXRSZXNvbHV0aW9uLCBJUGFpbnRXb3JrbGV0cywgSVBhaW50RnVuY1xyXG59IGZyb20gXCIuL1NoYXBlVHlwZXNcIjtcclxuaW1wb3J0IHtHcmlkTGluZUNvdW50T3JOYW1lLCBHcmlkVHJhY2ssIEdyaWRUcmFja1NpemV9IGZyb20gXCIuL1N0eWxlVHlwZXNcIjtcclxuaW1wb3J0IHttdjJzLCBXS0YsIHYycywgd2tmLCBhMnMsIGZkbywgZjJzfSBmcm9tIFwiLi4vaW1wbC9VdGlsc1wiO1xyXG5pbXBvcnQgeyBNYXBwZWRTeW50YXhUeXBlcywgU3ludGF4S2V5IH0gZnJvbSBcIi4vU3R5bGVzZXRzXCI7XHJcbmltcG9ydCB7IHNwMnMgfSBmcm9tIFwiLi4vaW1wbC9TdHlsZUltcGxcIjtcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEltYWdlcyBhbmQgZ3JhZGllbnRzLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbmNvbnN0IGdyYWRpZW50TmFtZVRvU3RyaW5nID0gKHZhbDogSUdyYWRpZW50RnVuYzxhbnk+KTogc3RyaW5nID0+IGAke3ZhbC5yZXBlYXQgPyBcInJlcGVhdGluZy1cIiA6IFwiXCJ9JHt2YWwuZm59YDtcclxuXHJcbmNvbnN0IGdyYWRpZW50U3RvcHNPckhpbnRzVG9TdHJpbmcgPSAodmFsOiBHcmFkaWVudFN0b3BPckhpbnQ8YW55PltdLCBtYXRoOiBXS0YuTGVuZ3RoIHwgV0tGLkFuZ2xlKTogc3RyaW5nID0+XHJcbiAgICB2MnMoIHZhbCwge1xyXG4gICAgICAgIGl0ZW06IHtcclxuICAgICAgICAgICAgbnVtOiBXS0YuQ29sb3IsXHJcbiAgICAgICAgICAgIGFycjogeyAxOiBbbWF0aF0sIGFueTogW1dLRi5Db2xvciwgbWF0aCwgbWF0aF0gfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VwOiBcIixcIlxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiByZXR1cm5pbmcgdGhlIElMaW5lYXJHcmFkaWVudEJ1aWxkZXIgaW50ZXJmYWNlIHJlcHJlc2VudGluZyB0aGUgYGxpbmVhci1ncmFkaWVudGAgQ1NTIGZ1bmN0aW9ucy5cclxuICpcclxuICogKkV4YW1wbGVzOipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBiYWNrZ3JvdW5kSW1hZ2U6IGxpbmVhckdyYWRpZW50KCBcInJlZFwiLCBcImJsdWVcIilcclxuICpcclxuICogYmFja2dyb3VuZEltYWdlOiBsaW5lYXJHcmFkaWVudCggW1wicmVkXCIsIDMwXSwgW1wiZ3JlZW5cIiwgNTAsIDYwXSwgW1wiYmx1ZVwiLCA4MF0pLnJlcGVhdGluZygpXHJcbiAqXHJcbiAqIGJhY2tncm91bmRJbWFnZTogbGluZWFyR3JhZGllbnQoIFwicmVkXCIsIFwiYmx1ZVwiKS50byggNDUpXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcGFyYW0gc3RvcHMgVmFyaWFibGUgYXJndW1lbnQgbGlzdCBzcGVjaWZ5aW5nIHN0b3BzIG9yIGhpbnRzIHRoYXQgd2lsbCBiZSBhZGRlZCB0b1xyXG4gKiB0aGUgZ3JhZGllbnQgZGVmaW5pdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgbGluZWFyR3JhZGllbnQgPSAoLi4uc3RvcHM6IEdyYWRpZW50U3RvcE9ySGludDxDc3NMZW5ndGg+W10pOiBJTGluZWFyR3JhZGllbnRCdWlsZGVyID0+XHJcbiAgICBuZXcgTGluZWFyR3JhZGllbnRCdWlsZGVyKCBzdG9wcyk7XHJcblxyXG5mZG9bXCJsaW5lYXItZ3JhZGllbnRcIl0gPSB7XHJcbiAgICBmbjogZ3JhZGllbnROYW1lVG9TdHJpbmcsXHJcbiAgICBmOiAodmFsOiBJTGluZWFyR3JhZGllbnRGdW5jKSA9PiBtdjJzKFtcclxuICAgICAgICB2MnMoIHZhbC5hbmdsZSwge251bTogV0tGLkFuZ2xlLCBzdHI6IHYgPT4gXCJ0byBcIiArIHZ9KSxcclxuICAgICAgICBncmFkaWVudFN0b3BzT3JIaW50c1RvU3RyaW5nKCB2YWwuc3RvcHMsIFdLRi5MZW5ndGgpXHJcbiAgICBdLCBcIixcIilcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBJUmFkaWFsR3JhZGllbnQgaW50ZXJmYWNlIHJlcHJlc2VudGluZyB0aGUgYHJhZGlhbC1ncmFkaWVudGAgQ1NTIGZ1bmN0aW9ucy5cclxuICpcclxuICogKkV4YW1wbGVzOipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBiYWNrZ3JvdW5kSW1hZ2U6IHJhZGlhbEdyYWRpZW50KCBcInJlZFwiLCBcImJsdWVcIilcclxuICpcclxuICogYmFja2dyb3VuZEltYWdlOiByYWRpYWxHcmFkaWVudCggXCJyZWRcIiwgXCJibHVlXCIpLmNpcmNsZSggY3NzLnBlcmNlbnQoMzApKS5hdCggW1wiY2VudGVyXCIsIGNzcy5wZXJjZW50KDY1KV0pXHJcbiAqXHJcbiAqIGJhY2tncm91bmRJbWFnZTogcmFkaWFsR3JhZGllbnQoIFwicmVkXCIsIFwiYmx1ZVwiKS5jaXJjbGUoIDIwMCkucmVwZWF0aW5nKClcclxuICpcclxuICogYmFja2dyb3VuZEltYWdlOiByYWRpYWxHcmFkaWVudCggXCJyZWRcIiwgXCJibHVlXCIpLmVsbGlwc2UoIFwiY2xvc2VzdC1zaWRlXCIpXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcGFyYW0gc3RvcHMgVmFyaWFibGUgYXJndW1lbnQgbGlzdCBzcGVjaWZ5aW5nIHN0b3BzIG9yIGhpbnRzIHRoYXQgd2lsbCBiZSBhZGRlZCB0b1xyXG4gKiB0aGUgZ3JhZGllbnQgZGVmaW5pdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmFkaWFsR3JhZGllbnQgPSAoLi4uc3RvcHM6IEdyYWRpZW50U3RvcE9ySGludDxDc3NMZW5ndGg+W10pOiBJUmFkaWFsR3JhZGllbnRCdWlsZGVyID0+XHJcbiAgICBuZXcgUmFkaWFsR3JhZGllbnRCdWlsZGVyKCBzdG9wcyk7XHJcblxyXG5mZG9bXCJyYWRpYWwtZ3JhZGllbnRcIl0gPSB7XHJcbiAgICBmbjogZ3JhZGllbnROYW1lVG9TdHJpbmcsXHJcbiAgICBmOiAodmFsOiBJUmFkaWFsR3JhZGllbnRGdW5jKSA9PiBtdjJzKFtcclxuICAgICAgICBtdjJzKFsgdmFsLnNoYXBlLCBbdmFsLnNpemUsIFdLRi5NdWx0aUxlbmd0aFdpdGhTcGFjZV0sIFt2YWwucG9zLCBXS0YuQXRQb3NpdGlvbl0gXSksXHJcbiAgICAgICAgZ3JhZGllbnRTdG9wc09ySGludHNUb1N0cmluZyggdmFsLnN0b3BzLCBXS0YuTGVuZ3RoKVxyXG4gICAgXSwgXCIsXCIpXHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiByZXR1cm5pbmcgdGhlIElDb25pY0dyYWRpZW50IGludGVyZmFjZSByZXByZXNlbnRpbmcgdGhlIGByYWRpYWwtZ3JhZGllbnRgIENTUyBmdW5jdGlvbnMuXHJcbiAqXHJcbiAqICpFeGFtcGxlczoqXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogYmFja2dyb3VuZEltYWdlOiBjb25pY0dyYWRpZW50KCBcInJlZFwiLCBcImJsdWVcIilcclxuICpcclxuICogYmFja2dyb3VuZEltYWdlOiBjb25pY0dyYWRpZW50KCkucmVwZWF0aW5nKCkuYWRkKCBcInJlZFwiLCBcImJsdWVcIilcclxuICpcclxuICogYmFja2dyb3VuZEltYWdlOiBjb25pY0dyYWRpZW50KCBcInJlZFwiLCBcImJsdWVcIikuZnJvbSggMC4yNSkuYXQoIFtcImNlbnRlclwiLCBjc3MucGVyY2VudCg2NSldKVxyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHN0b3BzIFZhcmlhYmxlIGFyZ3VtZW50IGxpc3Qgc3BlY2lmeWluZyBzdG9wcyBvciBoaW50cyB0aGF0IHdpbGwgYmUgYWRkZWQgdG9cclxuICogdGhlIGdyYWRpZW50IGRlZmluaXRpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBJbWFnZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbmljR3JhZGllbnQgPSAoLi4uc3RvcHM6IEdyYWRpZW50U3RvcE9ySGludDxDc3NBbmdsZT5bXSk6IElDb25pY0dyYWRpZW50QnVpbGRlciA9PlxyXG4gICAgbmV3IENvbmljR3JhZGllbnRCdWlsZGVyKCBzdG9wcyk7XHJcblxyXG5mZG9bXCJjb25pYy1ncmFkaWVudFwiXSA9IHtcclxuICAgIGZuOiBncmFkaWVudE5hbWVUb1N0cmluZyxcclxuICAgIGY6ICh2YWw6IElDb25pY0dyYWRpZW50RnVuYykgPT4gbXYycyhbXHJcbiAgICAgICAgbXYycyhbIFt2YWwuYW5nbGUsICh2OiBFeHRlbmRlZDxDc3NBbmdsZT4pID0+IFwiZnJvbSBcIiArIHYycyggdiwgV0tGLkFuZ2xlKV0sIFt2YWwucG9zLCBXS0YuQXRQb3NpdGlvbl0gXSksXHJcbiAgICAgICAgZ3JhZGllbnRTdG9wc09ySGludHNUb1N0cmluZyggdmFsLnN0b3BzLCBXS0YuQW5nbGUpXHJcbiAgICBdLCBcIixcIilcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIGdyYWRpZW50IGltcGxlbWVudGF0aW9uXHJcbiAqL1xyXG5hYnN0cmFjdCBjbGFzcyBHcmFkaWVudEJ1aWxkZXI8VCBleHRlbmRzIChDc3NMZW5ndGggfCBDc3NBbmdsZSk+IGltcGxlbWVudHMgSUdyYWRpZW50QnVpbGRlcjxUPlxyXG57XHJcbiAgICBmbjogXCJsaW5lYXItZ3JhZGllbnRcIiB8IFwicmFkaWFsLWdyYWRpZW50XCIgfCBcImNvbmljLWdyYWRpZW50XCI7XHJcblxyXG4gICAgcmVwZWF0PzogYm9vbGVhbjtcclxuICAgIHN0b3BzOiBHcmFkaWVudFN0b3BPckhpbnQ8VD5bXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvciggc3RvcHM6IEdyYWRpZW50U3RvcE9ySGludDxUPltdKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuc3RvcHMgPSBzdG9wcyA/PyBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVwZWF0aW5nKCBmbGFnPzogYm9vbGVhbik6IHRoaXNcclxuICAgIHtcclxuICAgICAgICB0aGlzLnJlcGVhdCA9IGZsYWcgPT0gbnVsbCA/IHRydWUgOiBmbGFnOyByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkKCAuLi5zdG9wc09ySGludHM6IEdyYWRpZW50U3RvcE9ySGludDxUPltdKTogdGhpc1xyXG4gICAge1xyXG4gICAgICAgIHRoaXMuc3RvcHMucHVzaCggLi4uc3RvcHNPckhpbnRzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogSW1wbGVtZW50cyBmdW5jdGlvbmFsaXR5IG9mIGxpbmVhciBncmFkaWVudHNcclxuICovXHJcbmNsYXNzIExpbmVhckdyYWRpZW50QnVpbGRlciBleHRlbmRzIEdyYWRpZW50QnVpbGRlcjxDc3NMZW5ndGg+IGltcGxlbWVudHMgSUxpbmVhckdyYWRpZW50QnVpbGRlclxyXG57XHJcbiAgICBmbjogXCJsaW5lYXItZ3JhZGllbnRcIiA9IFwibGluZWFyLWdyYWRpZW50XCI7XHJcblxyXG4gICAgYW5nbGU/OiBMaW5lYXJHcmFkaWVudEFuZ2xlO1xyXG5cclxuICAgIHB1YmxpYyB0byggYW5nbGU/OiBMaW5lYXJHcmFkaWVudEFuZ2xlKTogdGhpcyB7IHRoaXMuYW5nbGUgPSBhbmdsZTsgcmV0dXJuIHRoaXM7IH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogSW1wbGVtZW50cyBmdW5jdGlvbmFsaXR5IG9mIHJhZGlhbCBncmFkaWVudHNcclxuICovXHJcbmNsYXNzIFJhZGlhbEdyYWRpZW50QnVpbGRlciBleHRlbmRzIEdyYWRpZW50QnVpbGRlcjxDc3NMZW5ndGg+IGltcGxlbWVudHMgSVJhZGlhbEdyYWRpZW50QnVpbGRlclxyXG57XHJcbiAgICBmbjogXCJyYWRpYWwtZ3JhZGllbnRcIiA9IFwicmFkaWFsLWdyYWRpZW50XCI7XHJcblxyXG4gICAgc2hhcGU/OiBcImNpcmNsZVwiIHwgXCJlbGxpcHNlXCI7XHJcblx0c2l6ZT86IEV4dGVuZGVkPENzc0xlbmd0aD4gfCBFeHRlbmRlZDxFeHRlbnRLZXl3b3JkPiB8IFtFeHRlbmRlZDxDc3NMZW5ndGg+LCBFeHRlbmRlZDxDc3NMZW5ndGg+XTtcclxuICAgIHBvcz86IEV4dGVuZGVkPENzc1Bvc2l0aW9uPjtcclxuXHJcblx0cHVibGljIGNpcmNsZSggc2l6ZU9yRXh0ZW50PzogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPiB8IEV4dGVuZGVkPEV4dGVudEtleXdvcmQ+KTogdGhpc1xyXG4gICAge1xyXG4gICAgICAgIHRoaXMuc2hhcGUgPSBcImNpcmNsZVwiO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemVPckV4dGVudDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblx0cHVibGljIGVsbGlwc2UoIC4uLnBhcmFtczogYW55W10pOiB0aGlzXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5zaGFwZSA9IFwiZWxsaXBzZVwiO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9XHJcbiAgICAgICAgICAgIHBhcmFtcy5sZW5ndGggPT09IDEgPyBwYXJhbXNbMF0gYXMgRXh0ZW5kZWQ8RXh0ZW50S2V5d29yZD4gOlxyXG4gICAgICAgICAgICBwYXJhbXMubGVuZ3RoID09PSAyID8gW3BhcmFtc1swXSBhcyBFeHRlbmRlZDxDc3NMZW5ndGg+LCBwYXJhbXNbMV0gYXMgRXh0ZW5kZWQ8Q3NzTGVuZ3RoPl0gOlxyXG4gICAgICAgICAgICB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcblx0cHVibGljIGV4dGVudCggZXh0ZW50OiBFeHRlbmRlZDxFeHRlbnRLZXl3b3JkPik6IHRoaXMgeyB0aGlzLnNpemUgPSBleHRlbnQ7IHJldHVybiB0aGlzOyB9XHJcblx0cHVibGljIGF0KCBwb3M6IEV4dGVuZGVkPENzc1Bvc2l0aW9uPik6IHRoaXMgeyB0aGlzLnBvcyA9IHBvczsgcmV0dXJuIHRoaXM7IH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogSW1wbGVtZW50cyBmdW5jdGlvbmFsaXR5IG9mIGNvbmljIGdyYWRpZW50c1xyXG4gKi9cclxuY2xhc3MgQ29uaWNHcmFkaWVudEJ1aWxkZXIgZXh0ZW5kcyBHcmFkaWVudEJ1aWxkZXI8Q3NzQW5nbGU+IGltcGxlbWVudHMgSUNvbmljR3JhZGllbnRCdWlsZGVyXHJcbntcclxuICAgIGZuOiBcImNvbmljLWdyYWRpZW50XCIgPSBcImNvbmljLWdyYWRpZW50XCI7XHJcblxyXG4gICAgYW5nbGU/OiBFeHRlbmRlZDxDc3NBbmdsZT47XHJcbiAgICBwb3M/OiBFeHRlbmRlZDxDc3NQb3NpdGlvbj47XHJcblxyXG5cdHB1YmxpYyBmcm9tKCBhbmdsZT86IEV4dGVuZGVkPENzc0FuZ2xlPik6IHRoaXMgeyB0aGlzLmFuZ2xlID0gYW5nbGU7IHJldHVybiB0aGlzOyB9XHJcblx0cHVibGljIGF0KCBwb3M/OiBFeHRlbmRlZDxDc3NQb3NpdGlvbj4pOiB0aGlzIHsgdGhpcy5wb3MgPSBwb3M7IHJldHVybiB0aGlzOyB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgSUNyb3NzRmFkZUZ1bmMgaW50ZXJmYWNlIHJlcHJlc2VudGluZyB0aGUgXCJvbGRlclwiIGBjcm9zcy1mYWRlYCBDU1NcclxuICogZnVuY3Rpb24gaW52b2NhdGlvbiB0aGF0IGFjY2VwdHMgdHdvIGltYWdlcyBhbmQgYSBzaW5nbGUgcGVyY2VudGFnZS5cclxuICpcclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3NGYWRlKCBvbGQ6IFtFeHRlbmRlZDxDc3NJbWFnZT4sIEV4dGVuZGVkPENzc0ltYWdlPiwgRXh0ZW5kZWQ8Q3NzUGVyY2VudD5dKTogSUNyb3NzRmFkZUZ1bmM7XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBJQ3Jvc3NGYWRlRnVuYyBpbnRlcmZhY2UgcmVwcmVzZW50aW5nIHRoZSBcIm5ld2VyXCIgYGNyb3NzLWZhZGVgIENTU1xyXG4gKiBmdW5jdGlvbiBpbnZvY2F0aW9uIHRoYXQgYWNjZXB0cyBtdWx0aXBsZSBpbWFnZXMgLSBlYWNoIHdpdGggYW4gb3B0aW9uYWwgcGVyY2VudGFnZS5cclxuICpcclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3NGYWRlKCAuLi5pbWFnZXM6IChFeHRlbmRlZDxDc3NJbWFnZT4gfCBbRXh0ZW5kZWQ8Q3NzSW1hZ2U+LCBFeHRlbmRlZDxDc3NQZXJjZW50Pl0pW10pOiBJQ3Jvc3NGYWRlQnVpbGRlcjtcclxuXHJcbi8qKiBJbXBsZW1lbnRhdGlvbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3NGYWRlKCk6IElDcm9zc0ZhZGVCdWlsZGVyXHJcbntcclxuICAgIHJldHVybiBuZXcgQ3Jvc3NGYWRlQnVpbGRlciggLi4uYXJndW1lbnRzKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudHMgZnVuY3Rpb25hbGl0eSBvZiBjcm9zcy1mYWRlKClcclxuICovXHJcbmNsYXNzIENyb3NzRmFkZUJ1aWxkZXIgaW1wbGVtZW50cyBJQ3Jvc3NGYWRlQnVpbGRlclxyXG57XHJcbiAgICBmbjogXCJjcm9zcy1mYWRlXCIgPSBcImNyb3NzLWZhZGVcIjtcclxuXHJcbiAgICBvbGQ/OiBbRXh0ZW5kZWQ8Q3NzSW1hZ2U+LCBFeHRlbmRlZDxDc3NJbWFnZT4sIEV4dGVuZGVkPENzc1BlcmNlbnQ+XTtcclxuICAgIGltYWdlcz86IFtFeHRlbmRlZDxDc3NJbWFnZT4sIEV4dGVuZGVkPENzc1BlcmNlbnQ+P11bXTtcclxuICAgIGM/OiBFeHRlbmRlZDxDc3NDb2xvcj47XHJcblxyXG4gICAgLy8gY29uc3RydWN0b3IgZm9yIG9sZCBmdW5jdGlvbiBzaWduYXR1cmVcclxuXHRjb25zdHJ1Y3Rvciggb2xkOiBbRXh0ZW5kZWQ8Q3NzSW1hZ2U+LCBFeHRlbmRlZDxDc3NJbWFnZT4sIEV4dGVuZGVkPENzc1BlcmNlbnQ+XSk7XHJcblxyXG4gICAgLy8gY29uc3RydWN0b3IgZm9yIG5ldyBmdW5jdGlvbiBzaWduYXR1cmVcclxuXHRjb25zdHJ1Y3RvciggLi4uaW1hZ2VzOiAoRXh0ZW5kZWQ8Q3NzSW1hZ2U+IHwgW0V4dGVuZGVkPENzc0ltYWdlPiwgRXh0ZW5kZWQ8Q3NzUGVyY2VudD5dKVtdKTtcclxuXHJcblx0Y29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBwMSA9IGFyZ3VtZW50c1swXTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSggcDEpICYmIHAxLmxlbmd0aCA9PT0gMylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIG9sZCBzaWduYXR1cmVcclxuICAgICAgICAgICAgdGhpcy5vbGQgPSBwMSBhcyBbRXh0ZW5kZWQ8Q3NzSW1hZ2U+LCBFeHRlbmRlZDxDc3NJbWFnZT4sIEV4dGVuZGVkPENzc1BlcmNlbnQ+XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgbmV3IHNpZ25hdHVyZVxyXG4gICAgICAgICAgICB0aGlzLmFkZCggLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cdGFkZCggLi4uaW1hZ2VzOiAoRXh0ZW5kZWQ8Q3NzSW1hZ2U+IHwgW0V4dGVuZGVkPENzc0ltYWdlPiwgRXh0ZW5kZWQ8Q3NzUGVyY2VudD5dKVtdKTogdGhpc1xyXG4gICAge1xyXG4gICAgICAgIGlmICghdGhpcy5pbWFnZXMpXHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzID0gW107XHJcblxyXG4gICAgICAgIGZvciggbGV0IGl0ZW0gb2YgaW1hZ2VzKVxyXG4gICAgICAgICAgICB0aGlzLmltYWdlcy5wdXNoKCBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbSA6IFtpdGVtXSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHRjb2xvciggYzogRXh0ZW5kZWQ8Q3NzQ29sb3I+KTogdGhpcyB7IHRoaXMuYyA9IGM7IHJldHVybiB0aGlzOyB9XHJcbn1cclxuXHJcbmZkb1tcImNyb3NzLWZhZGVcIl0gPSAodmFsOiBJQ3Jvc3NGYWRlRnVuYyk6IHN0cmluZyA9PlxyXG4gICAgZjJzKCBcImNyb3NzLWZhZGVcIiwgW1xyXG4gICAgICAgIHZhbC5pbWFnZXNcclxuICAgICAgICAgICAgPyBtdjJzKCBbW3ZhbC5pbWFnZXMsIHsgaXRlbTogeyBhcnI6IFtXS0YuRGVmYXVsdCwgV0tGLlBlcmNlbnRdIH0sIHNlcDogXCIsXCIgfV0sIFt2YWwuYywgV0tGLkNvbG9yXV0sIFwiLFwiKVxyXG4gICAgICAgICAgICA6IHYycyggdmFsLm9sZCwgeyBhcnI6IFtXS0YuRGVmYXVsdCwgV0tGLkRlZmF1bHQsIFdLRi5QZXJjZW50XSwgc2VwOiBcIixcIiB9KVxyXG4gICAgXSlcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gSUltYWdlU2V0RnVuYyBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgaW1hZ2Utc2V0KClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGl0ZW1zIE9uZSBvciBtb3JlIGl0ZW1zIHNwZWNpZnlpbmcgYW4gaW1hZ2UgYW5kIG9wdGlvbmFsbHkgaW1hZ2UgdHlwZSBhbmQgcmVzb2x1dGlvbi5cclxuICogQHJldHVybnNcclxuICpcclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaW1hZ2VTZXQgPSAoLi4uaXRlbXM6IEltYWdlU2V0SXRlbVtdKTogSUltYWdlU2V0RnVuYyA9PiAoeyBmbjogXCJpbWFnZS1zZXRcIiwgaXRlbXMgfSlcclxuXHJcbmNvbnN0IGltYWdlVHlwZVRvU3RyaW5nID0gKHZhbDogRXh0ZW5kZWQ8c3RyaW5nPik6IHN0cmluZyA9PiB2MnMoIHZhbCwge1xyXG4gICAgc3RyOiB2ID0+IGB0eXBlKFwiJHt2LmluZGV4T2YoXCIvXCIpID4gMCA/IHZhbCA6IFwiaW1hZ2UvXCIgKyB2YWx9XCIpYFxyXG59KTtcclxuXHJcbmNvbnN0IGltYWdlUmVzb2x1dGlvblRvU3RyaW5nID0gKHZhbDogRXh0ZW5kZWQ8SW1hZ2VTZXRSZXNvbHV0aW9uPik6IHN0cmluZyA9PiB2MnMoIHZhbCwge1xyXG4gICAgbnVtOiB2ID0+IHYgKyBcInhcIlxyXG59KTtcclxuXHJcbmZkb1tcImltYWdlLXNldFwiXSA9IFtcclxuICAgIFtcclxuICAgICAgICBcIml0ZW1zXCIsIHtcclxuICAgICAgICAgICAgaXRlbToge1xyXG4gICAgICAgICAgICAgICAgc3RyOiBXS0YuUXVvdGVkLFxyXG4gICAgICAgICAgICAgICAgYXJyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgMTogW1dLRi5RdW90ZWRdLFxyXG4gICAgICAgICAgICAgICAgICAgIDI6IFtXS0YuUXVvdGVkLCB7c3RyOiBpbWFnZVR5cGVUb1N0cmluZywgbnVtOiBpbWFnZVJlc29sdXRpb25Ub1N0cmluZ31dLFxyXG4gICAgICAgICAgICAgICAgICAgIDM6IFtXS0YuUXVvdGVkLCBpbWFnZVR5cGVUb1N0cmluZywgaW1hZ2VSZXNvbHV0aW9uVG9TdHJpbmddLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXA6IFwiLFwiXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG5dXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYSBwYWludCB3b3JrbGV0IHdpdGggdGhlIGdpdmVuIG5hbWUsIG9wdGlvbmFsIGFyZ3VtZW50IHN5bnRheCBhbmQgb3B0aW9uYWwgVVJMIG9mXHJcbiAqIHRoZSB3b3JrbGV0IG1vZHVsZS4gVGhlIHdvcmtsZXQgbmFtZSBzaG91bGQgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBbW0lQYWludFdvcmtsZXRzXV0gaW50ZXJmYWNlXHJcbiAqIHVzaW5nIHRoZSBtb2R1bGUgYXVnbWVudGF0aW9uIHRlY2huaXF1ZS4gQWx0aG91Z2ggaXQgaXMgcG9zc2libGUgdG8gdXNlIHBhaW50IHdvcmtsZXRzIHdpdGhvdXRcclxuICogYWRkaW5nIHRoZW0gdG8gdGhlIFtbSVBhaW50V29ya2xldHNdXSBpbnRlcmZhY2UsIHRoaXMgd2lsbCBwcmV2ZW50IE1pbWNzcyBmcm9tIGVuZm9yY2luZyB0aGVcclxuICogdHlwZXMgb2YgYXJndW1lbnRzIHdoZW4gdGhlIFtbcGFpbnRdXSBmdW5jdGlvbiBpcyBpbnZva2VkLlxyXG4gKiBAcGFyYW0gbmFtZSBXb3JrbGV0IG5hbWVcclxuICogQHBhcmFtIHN5bnRheCBUdXBsZSBjb250YWluaW5nIHN5bnRheCBkZWZpbml0aW9ucyBmb3Igd29ya2xldCBhcmd1bWVudHMuXHJcbiAqIEBwYXJhbSB1cmwgVVJMIHRvIHRoZSB3b3JrbGV0IG1vZHVsZS4gSWYgc3BlY2lmaWVkLCB0aGUgbW9kdWxlIHdpbGwgYmUgYXV0b21hdGljYWxseSBhZGRlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlclBhaW50V29ya2xldCA9IGFzeW5jIDxLIGV4dGVuZHMga2V5b2YgSVBhaW50V29ya2xldHM+KCBuYW1lOiBLLFxyXG4gICAgc3ludGF4OiBJUGFpbnRXb3JrbGV0c1tLXSA9IFtdLCB1cmw/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+ID0+XHJcbntcclxuICAgIGlmICgoQ1NTIGFzIGFueSkucGFpbnRXb3JrbGV0KVxyXG4gICAge1xyXG4gICAgICAgIGlmICghcmVnaXN0ZXJlZFBhaW50V29ya2xldEluZm9zW25hbWVdKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJlZFBhaW50V29ya2xldEluZm9zW25hbWVdID0ge3N5bnRheCwgdXJsfTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIFVSTCBpcyBzcGVjaWZpZWQgdXNlIGl0IHRvIGFkZCB3b3JrbGV0IG1vZHVsZVxyXG4gICAgICAgICAgICBpZiAodXJsICYmICFhZGRlZFBhaW50V29ya2xldE1vZHVsZXMuaGFzKHVybCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFkZGVkUGFpbnRXb3JrbGV0TW9kdWxlcy5hZGQodXJsKTtcclxuICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IChDU1MgYXMgYW55KS5wYWludFdvcmtsZXQuYWRkTW9kdWxlKCB1cmwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2goeClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCBgRXJyb3IgYWRkaW5nIG1vZHVsZSAnJHt1cmx9JyBmb3IgcGFpbnQgd29ya2xldCAnJHtuYW1lfSdgLCB4KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRGVmaW5lcyBpbmZvcm1hdGlvbiB3ZSBrZWVwIGZvciByZWdpc3RlcmVkIHBhaW50IHdvcmtsZXRzLlxyXG4gKi9cclxudHlwZSBQYWludFdvcmtsZXRJbmZvPEsgZXh0ZW5kcyBrZXlvZiBJUGFpbnRXb3JrbGV0cz4gPSB7IHN5bnRheDogSVBhaW50V29ya2xldHNbS10sIHVybD86IHN0cmluZyB9O1xyXG5cclxuLyoqXHJcbiAqIEluZm9ybWF0aW9uIGFib3V0IHJlZ2lzdGVyZWQgcGFpbnQgd29ya2xldHMuXHJcbiAqL1xyXG5sZXQgcmVnaXN0ZXJlZFBhaW50V29ya2xldEluZm9zOiB7IFtLIGluIGtleW9mIElQYWludFdvcmtsZXRzXT86IFBhaW50V29ya2xldEluZm88Sz4gfSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIFNldCBvZiBVUkxzIG9mIGFscmVhZHkgYWRkZWQgcGFpbnQgd29ya2xldCBtb2R1bGVzLlxyXG4gKi9cclxubGV0IGFkZGVkUGFpbnRXb3JrbGV0TW9kdWxlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgSVBhaW50RnVuYyBvYmplY3QgZGVzY3JpYmluZyBhbiBpbnZvY2F0aW9uIG9mIHRoZSBgcGFpbnQoKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZSBQYWludCB3b3JrbGV0IG5hbWUuXHJcbiAqIEBwYXJhbSBhcmdzIFBhcmFtZXRlcnMgdG8gYmUgcGFzc2VkIHRvIHRoZSBwYWludCB3b3JrbGV0LlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgSW1hZ2VcclxuICpcclxuICogQHRzLWV4cGVjdC1lcnJvcjogRXJyb25lb3VzbHkgcmVwb3J0cyBUUzIzNzAgYWx0aG91Z2ggdGhlIHJlc3QncyB0eXBlIGlzIGFuIGFycmF5IChhIHR1cGxlKSAqL1xyXG5leHBvcnQgY29uc3QgcGFpbnQgPSA8SyBleHRlbmRzIGtleW9mIElQYWludFdvcmtsZXRzPiggbmFtZTogSywgLi4uYXJnczogTWFwcGVkU3ludGF4VHlwZXM8SVBhaW50V29ya2xldHNbS10+KTogSVBhaW50RnVuYyA9PlxyXG4gICAgKHsgZm46IFwicGFpbnRcIiwgbmFtZTogbmFtZSBhcyBzdHJpbmcsIGFyZ3M6IGFyZ3MgYXMgYW55IGFzIHN0cmluZ1tdIH0pXHJcblxyXG5mZG9bXCJwYWludFwiXSA9ICh2OiBJUGFpbnRGdW5jKTogc3RyaW5nID0+XHJcbntcclxuICAgIGlmICghdj8uYXJncz8ubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybiBgcGFpbnQoJHt2Lm5hbWV9KWA7XHJcblxyXG4gICAgbGV0IGluZm8gPSByZWdpc3RlcmVkUGFpbnRXb3JrbGV0SW5mb3Nbdi5uYW1lXTtcclxuICAgIGxldCBidWY6IHN0cmluZ1tdID0gW107XHJcbiAgICBmb3IoIGxldCBpID0gMDsgaSA8IHYuYXJncy5sZW5ndGg7IGkrKylcclxuICAgIHtcclxuICAgICAgICBsZXQgc3ludGF4ID0gaW5mbz8uc3ludGF4W2ldO1xyXG4gICAgICAgIGJ1Zi5wdXNoKCBzeW50YXggPyBzcDJzKCBzeW50YXgsIHYuYXJnc1tpXSkgOiB2MnMoIHYuYXJnc1tpXSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBgcGFpbnQoJHt2Lm5hbWV9LCR7YnVmLmZpbHRlcih2PT4hIXYpLmpvaW4oXCIsXCIpfSlgO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEZpbHRlcnNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElGaWx0ZXJQcm94eSBmdW5jdGlvbiByZXByZXNlbnRpbmcgb25lIG9mIHRoZSBmaWx0ZXIgQ1NTIGZ1bmN0aW9uLlxyXG4gKi9cclxuY29uc3QgZmlsdGVyUGVyY2VudCA9IChmbjogUGVyY2VudEZpbHRlck5hbWVzLCBwOiBFeHRlbmRlZDxDc3NQZXJjZW50Pik6IElQZXJjZW50RmlsdGVyRnVuYyA9PiAoeyBmbiwgcCB9KTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gW1tJUGVyY2VudEZpbHRlckZ1bmNdXSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgYnJpZ2h0bmVzcygpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICoqRXhhbXBsZSoqXHJcbiAqXHJcbiAqIGBgYHRzeFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gZmlsdGVyOiBicmlnaHRuZXNzKDE1MCUpXHJcbiAqICAgICBicmlnaHQgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmJyaWdodG5lc3MoMTUwKX0pXHJcbiAqXHJcbiAqICAgICAvLyBmaWx0ZXI6IGJyaWdodG5lc3MoNTAlKVxyXG4gKiAgICAgZGltID0gdGhpcy4kY2xhc3MoeyBmaWx0ZXI6IGNzcy5icmlnaHRuZXNzKDAuNSl9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcGFyYW0gcCBWYWx1ZSBpbnRlcnByZXRlZCBhcyBwZXJjZW50YWdlLiBJbnRlZ2VyIG51bWJlciBpcyB1c2VkIGFzIGlzIHdoaWxlICBmbG9hdGluZyBwb2ludFxyXG4gKiBudW1iZXJzIGFyZSBtdWx0aXBsaWVkIGJ5IDEwMC5cclxuICogQHJldHVybnMgVGhlIGBJUGVyY2VudEZpbHRlckZ1bmNgIGludGVyZmFjZSBjb250YWluaW5nIHBlcmNlbnRhZ2UgdmFsdWVcclxuICogQGNhdGVnb3J5IEZpbHRlclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGJyaWdodG5lc3MgPSAocDogRXh0ZW5kZWQ8Q3NzUGVyY2VudD4pOiBJUGVyY2VudEZpbHRlckZ1bmMgPT4gZmlsdGVyUGVyY2VudCggXCJicmlnaHRuZXNzXCIsIHApO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBbW0lQZXJjZW50RmlsdGVyRnVuY11dIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGBjb250cmFzdCgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICoqRXhhbXBsZSoqXHJcbiAqXHJcbiAqIGBgYHRzeFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gZmlsdGVyOiBjb250cmFzdCgxNTAlKVxyXG4gKiAgICAgaGlnaENvbnRyYXN0ID0gdGhpcy4kY2xhc3MoeyBmaWx0ZXI6IGNzcy5jb250cmFzdCgxNTApfSlcclxuICpcclxuICogICAgIC8vIGZpbHRlcjogY29udHJhc3QoNTAlKVxyXG4gKiAgICAgbG93Q29udHJhc3QgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmNvbnRyYXN0KDAuNSl9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcGFyYW0gcCBWYWx1ZSBpbnRlcnByZXRlZCBhcyBwZXJjZW50YWdlLiBJbnRlZ2VyIG51bWJlciBpcyB1c2VkIGFzIGlzIHdoaWxlICBmbG9hdGluZyBwb2ludFxyXG4gKiBudW1iZXJzIGFyZSBtdWx0aXBsaWVkIGJ5IDEwMC5cclxuICogQHJldHVybnMgVGhlIGBJUGVyY2VudEZpbHRlckZ1bmNgIGludGVyZmFjZSBjb250YWluaW5nIHBlcmNlbnRhZ2UgdmFsdWVcclxuICogQGNhdGVnb3J5IEZpbHRlclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbnRyYXN0ID0gKHA6IEV4dGVuZGVkPENzc1BlcmNlbnQ+KTogSVBlcmNlbnRGaWx0ZXJGdW5jID0+IGZpbHRlclBlcmNlbnQoIFwiY29udHJhc3RcIiwgcCk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIFtbSVBlcmNlbnRGaWx0ZXJGdW5jXV0gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgYGdyYXlzY2FsZSgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICoqRXhhbXBsZSoqXHJcbiAqXHJcbiAqIGBgYHRzeFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gZmlsdGVyOiBncmF5c2NhbGUoMTAwJSlcclxuICogICAgIGdyYXkgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmdyYXlzY2FsZSgxMDApfSlcclxuICpcclxuICogICAgIC8vIGZpbHRlcjogZ3JheXNjYWxlKDUwJSlcclxuICogICAgIGhhbGZDb2xvciA9IHRoaXMuJGNsYXNzKHsgZmlsdGVyOiBjc3MuZ3JheXNjYWxlKDAuNSl9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcGFyYW0gcCBWYWx1ZSBpbnRlcnByZXRlZCBhcyBwZXJjZW50YWdlLiBJbnRlZ2VyIG51bWJlciBpcyB1c2VkIGFzIGlzIHdoaWxlICBmbG9hdGluZyBwb2ludFxyXG4gKiBudW1iZXJzIGFyZSBtdWx0aXBsaWVkIGJ5IDEwMC5cclxuICogQHJldHVybnMgVGhlIGBJUGVyY2VudEZpbHRlckZ1bmNgIGludGVyZmFjZSBjb250YWluaW5nIHBlcmNlbnRhZ2UgdmFsdWVcclxuICogQGNhdGVnb3J5IEZpbHRlclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdyYXlzY2FsZSA9IChwOiBFeHRlbmRlZDxDc3NQZXJjZW50Pik6IElQZXJjZW50RmlsdGVyRnVuYyA9PiBmaWx0ZXJQZXJjZW50KCBcImdyYXlzY2FsZVwiLCBwKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gW1tJUGVyY2VudEZpbHRlckZ1bmNdXSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgaW52ZXJ0KClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogKipFeGFtcGxlKipcclxuICpcclxuICogYGBgdHN4XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBmaWx0ZXI6IGludmVydCgxMDAlKVxyXG4gKiAgICAgaW52ZXJ0ZWQgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmludmVydCgxMDApfSlcclxuICpcclxuICogICAgIC8vIGZpbHRlcjogaW52ZXJ0KDc1JSlcclxuICogICAgIHNvbWV3aGF0bnZlcnRlZCA9IHRoaXMuJGNsYXNzKHsgZmlsdGVyOiBjc3MuaW52ZXJ0KDAuNzUpfSlcclxuICpcclxuICogICAgIC8vIGZpbHRlcjogaW52ZXJ0KDUwJSlcclxuICogICAgIGdyYXkgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmludmVydCgwLjUpfSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHAgVmFsdWUgaW50ZXJwcmV0ZWQgYXMgcGVyY2VudGFnZS4gSW50ZWdlciBudW1iZXIgaXMgdXNlZCBhcyBpcyB3aGlsZSAgZmxvYXRpbmcgcG9pbnRcclxuICogbnVtYmVycyBhcmUgbXVsdGlwbGllZCBieSAxMDAuXHJcbiAqIEByZXR1cm5zIFRoZSBgSVBlcmNlbnRGaWx0ZXJGdW5jYCBpbnRlcmZhY2UgY29udGFpbmluZyBwZXJjZW50YWdlIHZhbHVlXHJcbiAqIEBjYXRlZ29yeSBGaWx0ZXJcclxuICovXHJcbmV4cG9ydCBjb25zdCBpbnZlcnQgPSAocDogRXh0ZW5kZWQ8Q3NzUGVyY2VudD4pOiBJUGVyY2VudEZpbHRlckZ1bmMgPT4gZmlsdGVyUGVyY2VudCggXCJpbnZlcnRcIiwgcCk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIFtbSVBlcmNlbnRGaWx0ZXJGdW5jXV0gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgYG9wYWNpdHkoKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGUqKlxyXG4gKlxyXG4gKiBgYGB0c3hcclxuICogY2xhc3MgTXlTdHlsZXMgZXh0ZW5kcyBjc3MuU3R5bGVEZWZpbml0aW9uXHJcbiAqIHtcclxuICogICAgIC8vIGZpbHRlcjogb3BhY2l0eSg1MCUpXHJcbiAqICAgICBoYWxmVHJhbnNwYXJlbnQgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLm9wYWNpdHkoMC41KX0pXHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBwIFZhbHVlIGludGVycHJldGVkIGFzIHBlcmNlbnRhZ2UuIEludGVnZXIgbnVtYmVyIGlzIHVzZWQgYXMgaXMgd2hpbGUgIGZsb2F0aW5nIHBvaW50XHJcbiAqIG51bWJlcnMgYXJlIG11bHRpcGxpZWQgYnkgMTAwLlxyXG4gKiBAcmV0dXJucyBUaGUgYElQZXJjZW50RmlsdGVyRnVuY2AgaW50ZXJmYWNlIGNvbnRhaW5pbmcgcGVyY2VudGFnZSB2YWx1ZVxyXG4gKiBAY2F0ZWdvcnkgRmlsdGVyXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgb3BhY2l0eSA9IChwOiBFeHRlbmRlZDxDc3NQZXJjZW50Pik6IElQZXJjZW50RmlsdGVyRnVuYyA9PiBmaWx0ZXJQZXJjZW50KCBcIm9wYWNpdHlcIiwgcCk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIFtbSVBlcmNlbnRGaWx0ZXJGdW5jXV0gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgYHNhdHVyYXRlKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogKipFeGFtcGxlKipcclxuICpcclxuICogYGBgdHN4XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBmaWx0ZXI6IHNhdHVyYXRlKDE1MCUpXHJcbiAqICAgICBzdXBlclNhdHVyYXRlZCA9IHRoaXMuJGNsYXNzKHsgZmlsdGVyOiBjc3Muc2F0dXJhdGUoMTUwKX0pXHJcbiAqXHJcbiAqICAgICAvLyBmaWx0ZXI6IHNhdHVyYXRlKDUwJSlcclxuICogICAgIHVuZGVyU2F0dXJhdGVkID0gdGhpcy4kY2xhc3MoeyBmaWx0ZXI6IGNzcy5zYXR1cmF0ZSgwLjUpfSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHAgVmFsdWUgaW50ZXJwcmV0ZWQgYXMgcGVyY2VudGFnZS4gSW50ZWdlciBudW1iZXIgaXMgdXNlZCBhcyBpcyB3aGlsZSAgZmxvYXRpbmcgcG9pbnRcclxuICogbnVtYmVycyBhcmUgbXVsdGlwbGllZCBieSAxMDAuXHJcbiAqIEByZXR1cm5zIFRoZSBgSVBlcmNlbnRGaWx0ZXJGdW5jYCBpbnRlcmZhY2UgY29udGFpbmluZyBwZXJjZW50YWdlIHZhbHVlXHJcbiAqIEBjYXRlZ29yeSBGaWx0ZXJcclxuICovXHJcbmV4cG9ydCBjb25zdCBzYXR1cmF0ZSA9IChwOiBFeHRlbmRlZDxDc3NQZXJjZW50Pik6IElQZXJjZW50RmlsdGVyRnVuYyA9PiBmaWx0ZXJQZXJjZW50KCBcInNhdHVyYXRlXCIsIHApO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBbW0lQZXJjZW50RmlsdGVyRnVuY11dIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGBzZXBpYSgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICoqRXhhbXBsZSoqXHJcbiAqXHJcbiAqIGBgYHRzeFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gZmlsdGVyOiBzZXBpYSgxMDAlKVxyXG4gKiAgICAgdmludGFnZSA9IHRoaXMuJGNsYXNzKHsgZmlsdGVyOiBjc3Muc2VwaWEoMTAwKX0pXHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBwIFZhbHVlIGludGVycHJldGVkIGFzIHBlcmNlbnRhZ2UuIEludGVnZXIgbnVtYmVyIGlzIHVzZWQgYXMgaXMgd2hpbGUgIGZsb2F0aW5nIHBvaW50XHJcbiAqIG51bWJlcnMgYXJlIG11bHRpcGxpZWQgYnkgMTAwLlxyXG4gKiBAcmV0dXJucyBUaGUgYElQZXJjZW50RmlsdGVyRnVuY2AgaW50ZXJmYWNlIGNvbnRhaW5pbmcgcGVyY2VudGFnZSB2YWx1ZVxyXG4gKiBAY2F0ZWdvcnkgRmlsdGVyXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2VwaWEgPSAocDogRXh0ZW5kZWQ8Q3NzUGVyY2VudD4pOiBJUGVyY2VudEZpbHRlckZ1bmMgPT4gZmlsdGVyUGVyY2VudCggXCJzZXBpYVwiLCBwKTtcclxuXHJcbmZkby5icmlnaHRuZXNzID0gZmRvLmNvbnRyYXN0ID0gZmRvLmdyYXlzY2FsZSA9IGZkby5pbnZlcnQgPSBmZG8ub3BhY2l0eSA9IGZkby5zYXR1cmF0ZSA9XHJcbiAgICBmZG8uc2VwaWEgPSBXS0YuUGVyY2VudDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gW1tJQmx1ckZ1bmNdXSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgYmx1cigpYCBDU1MgZnVuY3Rpb24gcGFyYW1ldGVycy5cclxuICpcclxuICogKipFeGFtcGxlKipcclxuICpcclxuICogYGBgdHN4XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBmaWx0ZXI6IGJsdXIoMClcclxuICogICAgIHNoYXJwID0gdGhpcy4kY2xhc3MoeyBmaWx0ZXI6IGNzcy5ibHVyKDApfSlcclxuICpcclxuICogICAgIC8vIGZpbHRlcjogYmx1cigycHgpXHJcbiAqICAgICBibHVycmVkID0gdGhpcy4kY2xhc3MoeyBmaWx0ZXI6IGNzcy5ibHVyKDIpfSlcclxuICpcclxuICogICAgIC8vIGZpbHRlcjogYmx1cigxLjVlbSlcclxuICogICAgIHN1cGVyQmx1cnJlZCA9IHRoaXMuJGNsYXNzKHsgZmlsdGVyOiBjc3MuYmx1cigxLjUpfSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHIgUmFkaXVzIG9mIHRoZSBibHVyLlxyXG4gKiBAcmV0dXJucyBUaGUgYElCbHVyRnVuY2AgaW50ZXJmYWNlIGNvbnRhaW5pbmcgdGhlIGJsdXIgcmFkaXVzXHJcbiAqIEBjYXRlZ29yeSBGaWx0ZXJcclxuICovXHJcbmV4cG9ydCBjb25zdCBibHVyID0gKCByOiBFeHRlbmRlZDxDc3NMZW5ndGg+KTogSUJsdXJGdW5jID0+ICh7IGZuOiBcImJsdXJcIiwgciB9KTtcclxuXHJcbmZkby5ibHVyID0gV0tGLkxlbmd0aDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gW1tJRHJvcFNoYWRvd0Z1bmNdXSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgZHJvcFNoYWRvdygpYCBDU1MgZnVuY3Rpb24gcGFyYW1ldGVycy5cclxuICpcclxuICogKipFeGFtcGxlKipcclxuICpcclxuICogYGBgdHN4XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBmaWx0ZXI6IGRyb3Atc2hhZG93KDMwcHggMTBweCA0cHggYmx1ZSlcclxuICogICAgIGJsdXJyZWRTaGFkb3cgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmRyb3BTaGFkb3coIDMwLCAxMCwgXCJibHVlXCIsIDQpfSlcclxuICpcclxuICogICAgIC8vIGZpbHRlcjogZHJvcC1zaGFkb3coMi41ZW0gLTEuNWVtIGdyZWVuKVxyXG4gKiAgICAgc2hhcnBTaGFkb3cgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmRyb3BTaGFkb3coIDIuNSwgLTEuNSwgXCJncmVlblwiKX0pXHJcbiAqXHJcbiAqICAgICAvLyBmaWx0ZXI6IGRyb3Atc2hhZG93KDAgMCAyMHB4IG9yYW5nZSlcclxuICogICAgIGhhbG9TaGFkb3cgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmRyb3BTaGFkb3coIDAsIDAsIFwib3JhbmdlXCIsIDIwcHgpfSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHggSG9yaXpvbnRhbCBvZmZzZXQgb2YgdGhlIHNoYWRvdy5cclxuICogQHBhcmFtIHkgVmVydGljYWwgb2Zmc2V0IG9mIHRoZSBzaGFkb3cuXHJcbiAqIEBwYXJhbSBjb2xvciBDb2xvciBvZiB0aGUgc2hhZG93LiBJZiB1bmRlZmluZWQsIHRoZSBjb2xvciBvZiB0aGUgc2hhZG93IGlzIHRha2VuIGZyb20gdGhlIGNvbG9yXHJcbiAqIHByb3BlcnR5LlxyXG4gKiBAcGFyYW0gYmx1ciBWYWx1ZSBvZiB0aGUgc2hhZG93J3MgYmx1cnJpbmcuIElmIHVuZGVmaW5lZCwgdGhlIHNoYWRvdyB3aWxsIGJlIHNoYXJwIChub3QgYmx1cnJlZCkuXHJcbiAqIEByZXR1cm5zIFRoZSBgSURyb3BTaGFkb3dGdW5jYCBpbnRlcmZhY2UgY29udGFpbmluZyB0aGUgc2hhZG93IHBhcmFtZXRlcnMuXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBGaWx0ZXJcclxuICovXHJcbmV4cG9ydCBjb25zdCBkcm9wU2hhZG93ID0gKHg6IEV4dGVuZGVkPENzc0xlbmd0aD4sIHk6IEV4dGVuZGVkPENzc0xlbmd0aD4sXHJcbiAgICBjb2xvcj86IEV4dGVuZGVkPENzc0NvbG9yPiwgYmx1cj86IEV4dGVuZGVkPENzc0xlbmd0aD4pOiBJRHJvcFNoYWRvd0Z1bmMgPT4gKHsgZm46IFwiZHJvcC1zaGFkb3dcIiwgeCwgeSwgY29sb3IsIGJsdXIgfSk7XHJcblxyXG5mZG9bXCJkcm9wLXNoYWRvd1wiXSA9IHtcclxuICAgIHA6IFsgXCJ4XCIsIFwieVwiLCBcImJsdXJcIiwgW1wiY29sb3JcIiwgV0tGLkNvbG9yXSBdLFxyXG4gICAgZG86IFdLRi5MZW5ndGgsXHJcbiAgICBzOiBcIiBcIlxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIFtbSUh1ZVJvdGF0ZUZ1bmNdXSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgaHVlLXJvdGF0ZSgpYCBDU1MgZnVuY3Rpb24gcGFyYW1ldGVycy5cclxuICpcclxuICogKipFeGFtcGxlKipcclxuICpcclxuICogYGBgdHN4XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICAvLyBmaWx0ZXI6IGh1ZS1yb3RhdGUoOTBkZWcpXHJcbiAqICAgICB0b1RoZVJpZ2h0ID0gdGhpcy4kY2xhc3MoeyBmaWx0ZXI6IGNzcy5odWVSb3RhdGUoOTApfSlcclxuICpcclxuICogICAgIC8vIGZpbHRlcjogaHVlLXJvdGF0ZSgtMC4yNXR1cm4pXHJcbiAqICAgICB0b1RoZUxlZnQgPSB0aGlzLiRjbGFzcyh7IGZpbHRlcjogY3NzLmJsdXIoLTAuMjUpfSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIGEgVGhlIHJlbGF0aXZlIGNoYW5nZSBpbiBodWUgb2YgdGhlIGlucHV0IHNhbXBsZS5cclxuICogQHJldHVybnMgVGhlIGBJSHVlUm90YXRlRnVuY2AgaW50ZXJmYWNlIGNvbnRhaW5pbmcgdGhlIGh1ZSByb3RhdGlvbiBhbmdsZVxyXG4gKiBAY2F0ZWdvcnkgRmlsdGVyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaHVlUm90YXRlID0gKGE6IEV4dGVuZGVkPENzc0FuZ2xlPik6IElIdWVSb3RhdGVGdW5jID0+ICh7IGZuOiBcImh1ZS1yb3RhdGVcIiwgYSB9KTtcclxuXHJcbmZkb1tcImh1ZS1yb3RhdGVcIl0gPSBXS0YuQW5nbGVcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gVHJhbnNmb3Jtc1xyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gSU1hdHJpeEZ1bmMgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgYG1hdHJpeCgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbmV4cG9ydCBjb25zdCBtYXRyaXggPSAoYTogRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgYjogRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgYzogRXh0ZW5kZWQ8Q3NzTnVtYmVyPixcclxuXHRkOiBFeHRlbmRlZDxDc3NOdW1iZXI+LCB0eDogRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgdHk6IEV4dGVuZGVkPENzc051bWJlcj4pOiBJTWF0cml4RnVuYyA9PlxyXG4gICAgKHtmbjogXCJtYXRyaXhcIiwgYSwgYiwgYywgZCwgdHgsIHR5IH0pO1xyXG5cclxuZmRvLm1hdHJpeCA9IFsgXCJhXCIsIFwiYlwiLCBcImNcIiwgXCJkXCIsIFwidHhcIiwgXCJ0eVwiIF07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElNYXRyaXgzZEZ1bmMgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgbWF0cml4M2QoKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgbWF0cml4M2QgPSAoXHJcblx0XHRhMTogRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgYjE6IEV4dGVuZGVkPENzc051bWJlcj4sIGMxOiBFeHRlbmRlZDxDc3NOdW1iZXI+LCBkMTogRXh0ZW5kZWQ8Q3NzTnVtYmVyPixcclxuXHRcdGEyOiBFeHRlbmRlZDxDc3NOdW1iZXI+LCBiMjogRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgYzI6IEV4dGVuZGVkPENzc051bWJlcj4sIGQyOiBFeHRlbmRlZDxDc3NOdW1iZXI+LFxyXG5cdFx0YTM6IEV4dGVuZGVkPENzc051bWJlcj4sIGIzOiBFeHRlbmRlZDxDc3NOdW1iZXI+LCBjMzogRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgZDM6IEV4dGVuZGVkPENzc051bWJlcj4sXHJcblx0XHRhNDogRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgYjQ6IEV4dGVuZGVkPENzc051bWJlcj4sIGM0OiBFeHRlbmRlZDxDc3NOdW1iZXI+LCBkNDogRXh0ZW5kZWQ8Q3NzTnVtYmVyPixcclxuXHQpOiBJTWF0cml4M2RGdW5jID0+ICh7IGZuOiBcIm1hdHJpeDNkXCIsIGExLCBiMSwgYzEsIGQxLCBhMiwgYjIsIGMyLCBkMiwgYTMsIGIzLCBjMywgZDMsIGE0LCBiNCwgYzQsIGQ0IH0pO1xyXG5cclxuZmRvLm1hdHJpeCA9IFsgXCJhMVwiLCBcImIxXCIsIFwiYzFcIiwgXCJkMVwiLCBcImEyXCIsIFwiYjJcIiwgXCJjMlwiLCBcImQyXCIsIFwiYTNcIiwgXCJiM1wiLCBcImMzXCIsIFwiZDNcIiwgXCJhNFwiLCBcImI0XCIsIFwiYzRcIiwgXCJkNFwiIF07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElQZXJzcGVjdGl2ZUZ1bmMgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgcGVyc3BlY3RpdmUoKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcGVyc3BlY3RpdmUgPSAoZDogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPik6IElQZXJzcGVjdGl2ZUZ1bmMgPT4gKHsgZm46IFwicGVyc3BlY3RpdmVcIiwgZCB9KTtcclxuXHJcbmZkby5wZXJzcGVjdGl2ZSA9IFdLRi5MZW5ndGg7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElSb3RhdGVGdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHJvdGF0ZSgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbmV4cG9ydCBjb25zdCByb3RhdGUgPSAoYTogRXh0ZW5kZWQ8Q3NzQW5nbGU+KTogSVJvdGF0ZUZ1bmMgPT4gKHsgZm46IFwicm90YXRlXCIsIGEgfSk7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJVHJhbnNmb3JtUHJveHkgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgcm90YXRlWCgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbmV4cG9ydCBjb25zdCByb3RhdGVYID0gKGE6IEV4dGVuZGVkPENzc0FuZ2xlPik6IElSb3RhdGVGdW5jID0+ICh7IGZuOiBcInJvdGF0ZVhcIiwgYSB9KTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElUcmFuc2Zvcm1Qcm94eSBmdW5jdGlvbiByZXByZXNlbnRpbmcgdGhlIGByb3RhdGVZKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJvdGF0ZVkgPSAoYTogRXh0ZW5kZWQ8Q3NzQW5nbGU+KTogSVJvdGF0ZUZ1bmMgPT4gKHsgZm46IFwicm90YXRlWVwiLCBhIH0pO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gSVRyYW5zZm9ybVByb3h5IGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHJvdGF0ZVooKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgcm90YXRlWiA9IChhOiBFeHRlbmRlZDxDc3NBbmdsZT4pOiBJUm90YXRlRnVuYyA9PiAoeyBmbjogXCJyb3RhdGVaXCIsIGEgfSk7XHJcblxyXG5mZG8ucm90YXRlID0gZmRvLnJvdGF0ZVggPSBmZG8ucm90YXRlWSA9IGZkby5yb3RhdGVaID0gV0tGLkFuZ2xlO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJUm90YXRlM2RGdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHJvdGF0ZTNkKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJvdGF0ZTNkID0gKHg6IEV4dGVuZGVkPENzc051bWJlcj4sIHk6IEV4dGVuZGVkPENzc051bWJlcj4sXHJcbiAgICB6OiBFeHRlbmRlZDxDc3NOdW1iZXI+LCBhOiBFeHRlbmRlZDxDc3NBbmdsZT4pOiBJUm90YXRlM2RGdW5jID0+ICh7IGZuOiBcInJvdGF0ZTNkXCIsIHgsIHksIHosIGEgfSk7XHJcblxyXG5mZG8ucm90YXRlM2QgPSBbIFwieFwiLCBcInlcIiwgXCJ6XCIsIFtcImFcIiwgV0tGLkFuZ2xlXSBdO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJU2NhbGVGdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHNjYWxlKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNjYWxlID0gKHN4OiBFeHRlbmRlZDxDc3NOdW1iZXI+LCBzeT86IEV4dGVuZGVkPENzc051bWJlcj4pOiBJU2NhbGVGdW5jID0+ICh7IGZuOiBcInNjYWxlXCIsIHN4LCBzeSB9KTtcclxuXHJcbmZkby5zY2FsZSA9IFtcInN4XCIsIFwic3lcIl1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElTY2FsZTFkRnVuYyBmdW5jdGlvbiByZXByZXNlbnRpbmcgdGhlIGBzY2FsZVgoKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2NhbGVYID0gKHM6IEV4dGVuZGVkPENzc051bWJlcj4pOiBJU2NhbGUxZEZ1bmMgPT4gKHsgZm46IFwic2NhbGVYXCIsIHMgfSk7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJU2NhbGUxZEZ1bmMgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgc2NhbGVZKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNjYWxlWSA9IChzOiBFeHRlbmRlZDxDc3NOdW1iZXI+KTogSVNjYWxlMWRGdW5jID0+ICh7IGZuOiBcInNjYWxlWVwiLCBzIH0pO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gSVNjYWxlMWRGdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHNjYWxlWigpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbmV4cG9ydCBjb25zdCBzY2FsZVogPSAoczogRXh0ZW5kZWQ8Q3NzTnVtYmVyPik6IElTY2FsZTFkRnVuYyA9PiAoeyBmbjogXCJzY2FsZVpcIiwgcyB9KTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElTY2FsZTNkRnVuYyBmdW5jdGlvbiByZXByZXNlbnRpbmcgdGhlIGBzY2FsZTNkKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNjYWxlM2QgPSAoc3g6IEV4dGVuZGVkPENzc051bWJlcj4sIHN5OiBFeHRlbmRlZDxDc3NOdW1iZXI+LFxyXG4gICAgc3o6IEV4dGVuZGVkPENzc051bWJlcj4pOiBJU2NhbGUzZEZ1bmMgPT4gKHsgZm46IFwic2NhbGUzZFwiLCBzeCwgc3ksIHN6IH0pO1xyXG5cclxuZmRvLnNjYWxlM2QgPSBbXCJzeFwiLCBcInN5XCIsIFwic3pcIl1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gSVNrZXdGdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHNrZXcoKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2tldyA9IChheDogRXh0ZW5kZWQ8Q3NzQW5nbGU+LCBheT86IEV4dGVuZGVkPENzc0FuZ2xlPik6IElTa2V3RnVuYyA9PiAoeyBmbjogXCJza2V3XCIsIGF4LCBheSB9KTtcclxuXHJcbmZkby5za2V3ID0ge1xyXG4gICAgcDogW1wiYXhcIiwgXCJheVwiXSxcclxuICAgIGRvOiBXS0YuQW5nbGVcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gSVNrZXcxZEZ1bmMgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgc2tld1goKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2tld1ggPSAoYTogRXh0ZW5kZWQ8Q3NzQW5nbGU+KTogSVNrZXcxZEZ1bmMgPT4gKHsgZm46IFwic2tld1hcIiwgYSB9KTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElTa2V3MWRGdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHNrZXdZKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNrZXdZID0gKGE6IEV4dGVuZGVkPENzc0FuZ2xlPik6IElTa2V3MWRGdW5jID0+ICh7IGZuOiBcInNrZXdZXCIsIGEgfSk7XHJcblxyXG5mZG8uc2tld1ggPSBmZG8uc2tld1kgPSBXS0YuQW5nbGU7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElUcmFuc2xhdGVGdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHRyYW5zbGF0ZSgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGUgPSAoeDogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPiwgeT86IEV4dGVuZGVkPENzc0xlbmd0aD4pOiBJVHJhbnNsYXRlRnVuYyA9PiAoeyBmbjogXCJ0cmFuc2xhdGVcIiwgeCwgeSB9KTtcclxuXHJcbmZkby50cmFuc2xhdGUgPSB7XHJcbiAgICBwOiBbXCJ4XCIsIFwieVwiXSxcclxuICAgIGRvOiBXS0YuTGVuZ3RoXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElUcmFuc2xhdGUxZEZ1bmMgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgdHJhbnNsYXRlWCgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVYID0gKGQ6IEV4dGVuZGVkPENzc0xlbmd0aD4pOiBJVHJhbnNsYXRlMWRGdW5jID0+ICh7IGZuOiBcInRyYW5zbGF0ZVhcIiwgZCB9KTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElUcmFuc2xhdGUxZEZ1bmMgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgdHJhbnNsYXRlWSgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVZID0gKGQ6IEV4dGVuZGVkPENzc0xlbmd0aD4pOiBJVHJhbnNsYXRlMWRGdW5jID0+ICh7IGZuOiBcInRyYW5zbGF0ZVlcIiwgZCB9KTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElUcmFuc2xhdGUxZEZ1bmMgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBgdHJhbnNsYXRlWigpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVaID0gKGQ6IEV4dGVuZGVkPENzc0xlbmd0aD4pOiBJVHJhbnNsYXRlMWRGdW5jID0+ICh7IGZuOiBcInRyYW5zbGF0ZVpcIiwgZCB9KTtcclxuXHJcbmZkby50cmFuc2xhdGVYID0gZmRvLnRyYW5zbGF0ZVkgPSBmZG8udHJhbnNsYXRlWiA9IFdLRi5MZW5ndGg7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJVHJhbnNsYXRlM2RGdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHRyYW5zbGF0ZTNkKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZTNkID0gKHg6IEV4dGVuZGVkPENzc0xlbmd0aD4sIHk6IEV4dGVuZGVkPENzc0xlbmd0aD4sXHJcblx0ejogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPik6IElUcmFuc2xhdGUzZEZ1bmMgPT4gKHsgZm46IFwidHJhbnNsYXRlM2RcIiwgeCwgeSwgeiB9KTtcclxuXHJcbmZkby50cmFuc2xhdGUzZCA9IHtcclxuICAgIHA6IFtcInhcIiwgXCJ5XCIsIFwielwiXSxcclxuICAgIGRvOiBXS0YuTGVuZ3RoXHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gQmFzaWMgc2hhcGVzXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJSW5zZXRCdWlsZGVyIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGBpbnNldCgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICpFeGFtcGxlOipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGlwUGF0aDogaW5zZXQoIGNzcy5wZXJjZW50KDE1KSlcclxuICpcclxuICogY2xpcFBhdGg6IGluc2V0KCAxMCwgMTIsIDE0LCAxNikucm91bmQoIDgpXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgQmFzaWMgU2hhcGVcclxuICovXHJcbmV4cG9ydCBjb25zdCBpbnNldCA9IChvMTogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPiwgbzI/OiBFeHRlbmRlZDxDc3NMZW5ndGg+LFxyXG4gICAgbzM/OiBFeHRlbmRlZDxDc3NMZW5ndGg+LCBvND86IEV4dGVuZGVkPENzc0xlbmd0aD4pOiBJSW5zZXRCdWlsZGVyID0+XHJcbiAgICAoe1xyXG4gICAgICAgIGZuOiBcImluc2V0XCIsIG8xLCBvMiwgbzMsIG80LFxyXG4gICAgICAgIHJvdW5kKCByOiBFeHRlbmRlZDxCb3JkZXJSYWRpdXM+KSB7IHRoaXMuciA9IHI7IHJldHVybiB0aGlzOyB9XHJcbiAgICB9KTtcclxuXHJcbmZkby5pbnNldCA9IHtcclxuICAgIHA6IFsgXCJvMVwiLCBcIm8yXCIsIFwibzNcIiwgXCJvNFwiLCBbXCJyXCIsIHYgPT4gXCJyb3VuZCBcIiArIHdrZltXS0YuQm9yZGVyUmFkaXVzXSh2KV0gXSxcclxuICAgIGRvOiBXS0YuTGVuZ3RoLFxyXG4gICAgczogXCIgXCJcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJQ2lyY2xlQnVpbGRlciBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgY2lyY2xlKClgIENTUyBmdW5jdGlvbi5cclxuICpcclxuICogKkV4YW1wbGU6KlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsaXBQYXRoOiBjaXJjbGUoIDEwMClcclxuICpcclxuICogY2xpcFBhdGg6IGNpcmNsZSggMTAwKS5hdCggW1wiY2VudGVyXCIsIGNzcy5wZXJjZW50KDMwKV0pXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgQmFzaWMgU2hhcGVcclxuICovXHJcbmV4cG9ydCBjb25zdCBjaXJjbGUgPSAocj86IFNoYXBlUmFkaXVzKTogSUNpcmNsZUJ1aWxkZXIgPT5cclxuICAgICh7XHJcbiAgICAgICAgZm46IFwiY2lyY2xlXCIsIHIsXHJcbiAgICAgICAgYXQoIHBvczogRXh0ZW5kZWQ8Q3NzUG9zaXRpb24+KSB7IHRoaXMucG9zID0gcG9zOyByZXR1cm4gdGhpczsgfVxyXG4gICAgfSk7XHJcblxyXG5mZG8uY2lyY2xlID0ge1xyXG4gICAgcDogWyBbXCJyXCIsIFdLRi5MZW5ndGhdLCBbXCJwb3NcIiwgV0tGLkF0UG9zaXRpb25dIF0sXHJcbiAgICBzOiBcIiBcIlxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElFbGxpcHNlQnVpbGRlciBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgZWxsaXBzZSgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICpFeGFtcGxlOipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGlwUGF0aDogZWxsaXBzZSgpLmF0KCBbXCJ0b3BcIiwgXCI1MCVcIl0pXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgQmFzaWMgU2hhcGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlbGxpcHNlKCk6IElFbGxpcHNlQnVpbGRlcjtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElFbGxpcHNlQnVpbGRlciBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgZWxsaXBzZSgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICpFeGFtcGxlOipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGlwUGF0aDogZWxsaXBzZSggMTAwLCA1MClcclxuICpcclxuICogY2xpcFBhdGg6IGVsbGlwc2UoIDEwMCwgNTApLmF0KCBbXCJjZW50ZXJcIiwgY3NzLnBlcmNlbnQoMzApXSlcclxuICogYGBgXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBCYXNpYyBTaGFwZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVsbGlwc2UoIHJ4OiBTaGFwZVJhZGl1cywgcnk6IFNoYXBlUmFkaXVzKTogSUVsbGlwc2VCdWlsZGVyO1xyXG5cclxuLy8gaW1wbGVtZW50YXRpb25cclxuZXhwb3J0IGZ1bmN0aW9uIGVsbGlwc2UoKTogSUVsbGlwc2VCdWlsZGVyXHJcbntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZm46IFwiZWxsaXBzZVwiLCByeDogYXJndW1lbnRzWzBdLCByeTogYXJndW1lbnRzWzFdLFxyXG4gICAgICAgIGF0KCBwb3M6IEV4dGVuZGVkPENzc1Bvc2l0aW9uPikgeyB0aGlzLnBvcyA9IHBvczsgcmV0dXJuIHRoaXM7IH1cclxuICAgIH1cclxufVxyXG5cclxuZmRvLmVsbGlwc2UgPSB7XHJcbiAgICBwOiBbIFwicnhcIiwgXCJyeVwiLCBbXCJwb3NcIiwgV0tGLkF0UG9zaXRpb25dIF0sXHJcbiAgICBkbzogV0tGLkxlbmd0aCxcclxuICAgIHM6IFwiIFwiXHJcbn1cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJUG9seWdvbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBgcG9seWdvbigpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICpFeGFtcGxlOipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGlwUGF0aDogY3NzLnBvbHlnb24oIFswLDEwMF0sIFs1MCwwXSwgWzEwMCwxMDBdKVxyXG4gKlxyXG4gKiBjbGlwUGF0aDogY3NzLnBvbHlnb24oIFswLDEwMF0sIFs1MCwwXSwgWzEwMCwxMDBdKS5maWxsKCBcImV2ZW5vZGRcIilcclxuICogYGBgXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBCYXNpYyBTaGFwZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHBvbHlnb24gPSAoLi4ucG9pbnRzOiBDc3NQb2ludFtdKTogSVBvbHlnb25CdWlsZGVyID0+XHJcbiAgICAoe1xyXG4gICAgICAgIGZuOiBcInBvbHlnb25cIiwgcG9pbnRzOiBwb2ludHMgPz8gW10sXHJcbiAgICAgICAgYWRkKCAuLi5wb2ludHM6IENzc1BvaW50W10pIHsgdGhpcy5wb2ludHMucHVzaCggLi4ucG9pbnRzKTsgcmV0dXJuIHRoaXM7IH0sXHJcbiAgICAgICAgZmlsbCggcnVsZTogRmlsbFJ1bGUpIHsgdGhpcy5ydWxlID0gcnVsZTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIH0pO1xyXG5cclxuZmRvLnBvbHlnb24gPSBbXHJcbiAgICBcInJ1bGVcIixcclxuICAgIFtcInBvaW50c1wiLCB7IGl0ZW06IFdLRi5NdWx0aUxlbmd0aFdpdGhTcGFjZSwgc2VwOiBcIixcIn1dLFxyXG5dXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIElQYXRoQnVpbGRlciBvYmplY3QgdGhhdCBhbGxvd3MgYnVpbGRpbmcgYSBDU1MgcGF0aC5cclxuICpcclxuICogQGNhdGVnb3J5IEJhc2ljIFNoYXBlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcGF0aCA9IChmaWxsUnVsZT86IEZpbGxSdWxlKTogSVBhdGhCdWlsZGVyID0+IG5ldyBQYXRoQnVpbGRlciggZmlsbFJ1bGUpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElQYXRoQnVpbGRlciBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgb2JqZWN0IHRoYXQgYWNjdW11bGF0ZXMgcGF0aCBjb21tYW5kcyB0aGF0IGFyZSB0aGVuXHJcbiAqIGNvbnZlcnRlZCB0byBhIHN0cmluZyBwYXJhbWV0ZXIgb2YgdGhlIENTUyBgcGF0aCgpYCBmdW5jdGlvbi5cclxuICovXHJcbmNsYXNzIFBhdGhCdWlsZGVyIGltcGxlbWVudHMgSVBhdGhCdWlsZGVyXHJcbntcclxuICAgIGZuOiBcInBhdGhcIiA9IFwicGF0aFwiO1xyXG4gICAgcnVsZT86IEZpbGxSdWxlO1xyXG4gICAgaXRlbXM6IFBhdGhDb21tYW5kW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoIHJ1bGU/OiBGaWxsUnVsZSlcclxuICAgIHtcclxuICAgICAgICB0aGlzLnJ1bGUgPSBydWxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZHMgdGhlIGdpdmVuIGNvbW1hbmQgYW5kIHBhcmFtZXRlcnMgdG8gdGhlIHBhdGguXHJcbiAgICBwdWJsaWMgYWRkKCBjb21tYW5kOiBzdHJpbmcsIHBhcmFtcz86IFBhdGhDb21tYW5kUGFyYW1bXSk6IHRoaXNcclxuICAgIHtcclxuICAgICAgICB0aGlzLml0ZW1zLnB1c2goIFtjb21tYW5kLCBwYXJhbXNdKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTSggLi4ucGFyYW1zOiBbbnVtYmVyLG51bWJlcl1bXSk6IHRoaXMgeyByZXR1cm4gdGhpcy5hZGQoIFwiTVwiLCBwYXJhbXMpOyB9XHJcbiAgICBwdWJsaWMgbSggLi4ucGFyYW1zOiBbbnVtYmVyLG51bWJlcl1bXSk6IHRoaXMgeyByZXR1cm4gdGhpcy5hZGQoIFwibVwiLCBwYXJhbXMpOyB9XHJcblxyXG4gICAgcHVibGljIEwoIC4uLnBhcmFtczogW251bWJlcixudW1iZXJdW10pOiB0aGlzIHsgcmV0dXJuIHRoaXMuYWRkKCBcIkxcIiwgcGFyYW1zKTsgfVxyXG4gICAgcHVibGljIGwoIC4uLnBhcmFtczogW251bWJlcixudW1iZXJdW10pOiB0aGlzIHsgcmV0dXJuIHRoaXMuYWRkKCBcImxcIiwgcGFyYW1zKTsgfVxyXG5cclxuICAgIHB1YmxpYyBIKCAuLi5wYXJhbXM6IG51bWJlcltdKTogdGhpcyB7IHJldHVybiB0aGlzLmFkZCggXCJIXCIsIHBhcmFtcyk7IH1cclxuICAgIHB1YmxpYyBoKCAuLi5wYXJhbXM6IG51bWJlcltdKTogdGhpcyB7IHJldHVybiB0aGlzLmFkZCggXCJoXCIsIHBhcmFtcyk7IH1cclxuXHJcbiAgICBwdWJsaWMgViggLi4ucGFyYW1zOiBudW1iZXJbXSk6IHRoaXMgeyByZXR1cm4gdGhpcy5hZGQoIFwiVlwiLCBwYXJhbXMpOyB9XHJcbiAgICBwdWJsaWMgdiggLi4ucGFyYW1zOiBudW1iZXJbXSk6IHRoaXMgeyByZXR1cm4gdGhpcy5hZGQoIFwidlwiLCBwYXJhbXMpOyB9XHJcblxyXG4gICAgcHVibGljIEMoIC4uLnBhcmFtczogW251bWJlcixudW1iZXIsbnVtYmVyLG51bWJlcixudW1iZXIsbnVtYmVyXVtdKTogdGhpcyB7IHJldHVybiB0aGlzLmFkZCggXCJDXCIsIHBhcmFtcyk7IH1cclxuICAgIHB1YmxpYyBjKCAuLi5wYXJhbXM6IFtudW1iZXIsbnVtYmVyLG51bWJlcixudW1iZXIsbnVtYmVyLG51bWJlcl1bXSk6IHRoaXMgeyByZXR1cm4gdGhpcy5hZGQoIFwiY1wiLCBwYXJhbXMpOyB9XHJcblxyXG4gICAgcHVibGljIFMoIC4uLnBhcmFtczogW251bWJlcixudW1iZXIsbnVtYmVyLG51bWJlcl1bXSk6IHRoaXMgeyByZXR1cm4gdGhpcy5hZGQoIFwiU1wiLCBwYXJhbXMpOyB9XHJcbiAgICBwdWJsaWMgcyggLi4ucGFyYW1zOiBbbnVtYmVyLG51bWJlcixudW1iZXIsbnVtYmVyXVtdKTogdGhpcyB7IHJldHVybiB0aGlzLmFkZCggXCJzXCIsIHBhcmFtcyk7IH1cclxuXHJcbiAgICBwdWJsaWMgUSggLi4ucGFyYW1zOiBbbnVtYmVyLG51bWJlcixudW1iZXIsbnVtYmVyXVtdKTogdGhpcyB7IHJldHVybiB0aGlzLmFkZCggXCJRXCIsIHBhcmFtcyk7IH1cclxuICAgIHB1YmxpYyBxKCAuLi5wYXJhbXM6IFtudW1iZXIsbnVtYmVyLG51bWJlcixudW1iZXJdW10pOiB0aGlzIHsgcmV0dXJuIHRoaXMuYWRkKCBcInFcIiwgcGFyYW1zKTsgfVxyXG5cclxuICAgIHB1YmxpYyBUKCAuLi5wYXJhbXM6IFtudW1iZXIsbnVtYmVyXVtdKTogdGhpcyB7IHJldHVybiB0aGlzLmFkZCggXCJUXCIsIHBhcmFtcyk7IH1cclxuICAgIHB1YmxpYyB0KCAuLi5wYXJhbXM6IFtudW1iZXIsbnVtYmVyXVtdKTogdGhpcyB7IHJldHVybiB0aGlzLmFkZCggXCJ0XCIsIHBhcmFtcyk7IH1cclxuXHJcbiAgICBwdWJsaWMgQSggLi4ucGFyYW1zOiBbbnVtYmVyLG51bWJlcixudW1iZXIsMHwxLDB8MSxudW1iZXIsbnVtYmVyXVtdKTogdGhpcyB7IHJldHVybiB0aGlzLmFkZCggXCJBXCIsIHBhcmFtcyk7IH1cclxuICAgIHB1YmxpYyBhKCAuLi5wYXJhbXM6IFtudW1iZXIsbnVtYmVyLG51bWJlciwwfDEsMHwxLG51bWJlcixudW1iZXJdW10pOiB0aGlzIHsgcmV0dXJuIHRoaXMuYWRkKCBcImFcIiwgcGFyYW1zKTsgfVxyXG5cclxuICAgIHB1YmxpYyB6KCk6IHRoaXMgeyByZXR1cm4gdGhpcy5hZGQoIFwielwiKTsgfVxyXG59XHJcblxyXG5mZG8ucGF0aCA9IFsgXCJydWxlXCIsIFtcIml0ZW1zXCIsICh2OiBQYXRoQ29tbWFuZFtdKSA9PiBgXCIke2Eycyh2KX1cImBdIF1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gSVJheSBvYmplY3QgcmVwcmVzZW50aW5nIGludm9jYXRpb24gb2YgdGhlIGByYXkoKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgQmFzaWMgU2hhcGVcclxuICovXHJcbiBleHBvcnQgY29uc3QgcmF5ID0gKGFuZ2xlOiBFeHRlbmRlZDxDc3NBbmdsZT4sIHNpemU/OiBFeHRlbmRlZDxFeHRlbnRLZXl3b3JkIHwgQ3NzTGVuZ3RoPixcclxuICAgIGNvbnRhaW4/OiBib29sZWFuKTogSVJheUZ1bmMgPT4gKHsgZm46IFwicmF5XCIsIGFuZ2xlLCBzaXplLCBjb250YWluIH0pO1xyXG5cclxuZmRvLnJheSA9IHtcclxuICAgIHA6IFtcclxuICAgICAgICBbXCJhbmdsZVwiLCBXS0YuQW5nbGVdLFxyXG4gICAgICAgIFtcInNpemVcIiwgV0tGLkxlbmd0aF0sXHJcbiAgICAgICAgW1wiY29udGFpblwiLCAodjogYm9vbGVhbikgPT4gKHYgPyBcImNvbnRhaW5cIiA6IFwiXCIpXVxyXG4gICAgXSxcclxuICAgIHM6IFwiIFwiXHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gR3JpZHNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAvKipcclxuICogUmV0dXJucyBhbiBJTWluTWF4IGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYG1pbm1heCgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBHcmlkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgbWlubWF4ID0gKG1pbjogR3JpZFRyYWNrU2l6ZSwgbWF4OiBHcmlkVHJhY2tTaXplKTogSU1pbk1heEZ1bmMgPT5cclxuICAgICh7IGZuOiBcIm1pbm1heFwiLCBtaW4sIG1heCB9KTtcclxuXHJcbmZkby5taW5tYXggPSBbIFtcIm1pblwiLCBXS0YuTGVuZ3RoXSwgW1wibWF4XCIsIFdLRi5MZW5ndGhdIF1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gSVJlcGVhdCBmdW5jdGlvbiByZXByZXNlbnRpbmcgdGhlIGByZXBlYXQoKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAY2F0ZWdvcnkgR3JpZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJlcGVhdCA9IChjb3VudDogRXh0ZW5kZWQ8Q3NzTnVtYmVyPiB8IFwiYXV0by1maWxsXCIgfCBcImF1dG8tZml0XCIsXHJcbiAgICAuLi50cmFja3M6IEdyaWRUcmFja1tdKTogSVJlcGVhdEZ1bmMgPT4gKHsgZm46IFwicmVwZWF0XCIsIGNvdW50LCB0cmFja3MgfSk7XHJcblxyXG5mZG8ucmVwZWF0ID0gWyBcImNvdW50XCIsIFtcInRyYWNrc1wiLCB7IGl0ZW06IFdLRi5HcmlkVHJhY2sgfV0gXVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBJR3JpZFNwYW5GdW5jIGZ1bmN0aW9uIHJlcHJlc2VudGluZyB0aGUgYHNwYW5gIGV4cHJlc3Npb24gZm9yIGdyaWQgbGF5b3V0cy4gSWYgdGhlIGZpcnN0XHJcbiAqIHBhcmFtZXRlciBpcyBhIG51bWJlciwgdGhlIHNlY29uZCBwYXJhbWV0ZXIgKGlmIGRlZmluZWQpIG11c3QgYmUgYSBuYW1lOyBpZiB0aGUgZmlyc3QgcGFyYW1ldGVyXHJcbiAqIGlzIGEgbmFtZSwgdGhlIHNlY29uZCBwYXJhbWV0ZXIgKGlmIGRlZmluZWQpIG11c3QgYmUgYSBudW1iZXIuXHJcbiAqXHJcbiAqIEBjYXRlZ29yeSBHcmlkXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc3BhbiA9IChwMTogRXh0ZW5kZWQ8R3JpZExpbmVDb3VudE9yTmFtZT4sIHAyPzogRXh0ZW5kZWQ8R3JpZExpbmVDb3VudE9yTmFtZT4pOiBJR3JpZFNwYW5GdW5jID0+XHJcbiAgICAoeyBmbjogXCJzcGFuXCIsIHAxLCBwMiB9KTtcclxuXHJcbmZkby5zcGFuID0gKHY6IElHcmlkU3BhbkZ1bmMpID0+IG12MnMoIFtcInNwYW5cIiwgdi5wMSwgdi5wMl0pXHJcblxyXG5cclxuXHJcbiIsIu+7v2ltcG9ydCB7Q3NzSW1hZ2UsIEV4dGVuZGVkLCBFeHRlbnRLZXl3b3JkLCBJQ3NzRnVuY09iamVjdCwgSUNzc0ltYWdlRnVuY30gZnJvbSBcIi4vQ29yZVR5cGVzXCI7XHJcbmltcG9ydCB7Qm9yZGVyUmFkaXVzLCBDc3NBbmdsZSwgQ3NzTGVuZ3RoLCBDc3NOdW1iZXIsIENzc1BlcmNlbnQsIENzc1BvaW50LCBDc3NQb3NpdGlvbiwgSVJlc29sdXRpb25Qcm94eX0gZnJvbSBcIi4vTnVtZXJpY1R5cGVzXCI7XHJcbmltcG9ydCB7Q3NzQ29sb3J9IGZyb20gXCIuL0NvbG9yVHlwZXNcIjtcclxuaW1wb3J0IHtHcmlkTGluZUNvdW50T3JOYW1lLCBHcmlkVHJhY2ssIEdyaWRUcmFja1NpemV9IGZyb20gXCIuL1N0eWxlVHlwZXNcIjtcclxuaW1wb3J0IHsgU3ludGF4S2V5IH0gZnJvbSBcIi4vU3R5bGVzZXRzXCI7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBJbWFnZSBhbmQgZ3JhZGllbnQgQ1NTIGZ1bmN0aW9ucy5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogVHlwZSByZXByZXNlbnRpbmcgZWl0aGVyIGNvbG9yIHN0b3Agb3IgY29sb3IgaGludCBmb3IgdGhlIGA8Z3JhZGllbnQ+YCBDU1MgZnVuY3Rpb25zLiBDb2xvclxyXG4gKiBzdG9wIGlzIHJlcHJlc2VudGVkIGJ5IGVpdGhlciBhIHNpbXBsZSBjb2xvciB2YWx1ZSBvciBhIHR3by10by10aHJlZSBlbGVtZW50IHR1cGxlLiBJbiB0aGlzXHJcbiAqIHR1cGxlLCB0aGUgZmlyc3QgaXRlbSBpcyB0aGUgY29sb3IgdmFsdWUsIHRoZSBzZWNvbmQgaXRlbSBpcyB0aGUgZGlzdGFuY2UvYW5nbGUgb2Ygd2hlcmUgdGhlXHJcbiAqIGNvbG9yIHN0YXJ0cyBhbmQgdGhlIG9wdGlvbmFsIHRoaXJkIGl0ZW0gaXMgdGhlIGRpc3RhbmNlL2FuZ2xlIHdoZXJlIHRoZSBjb2xvciBzdG9wcy5cclxuICpcclxuICogSGludCB2YWx1ZSBpcyBleHByZXNzZWQgYXMgYSBzaW5nbGUtaXRlbSBhcnJheSB0aGF0IGNvbnRhaW5zIGEgc2luZ2xlIENTUyBudW1lcmljIHZhbHVlLlxyXG4gKiBBbHRob3VnaCBoaW50IGlzIGEgc2luZ2xlIG51bWJlciwgaXQgbXVzdCBiZSBlbmNsb3NlZCBpbiBhbiBhcnJheSB0byBkaXN0aW5ndWlzaCBpdCBmcm9tIGNvbG9yXHJcbiAqIHZhbHVlcyBiZWNhdXNlIGFueSBudW1lcmljIHZhbHVlcyBpbiB0aGUgZ3JhZGllbnQgZnVuY3Rpb25zIGFyZSBpbnRlcnByZXRlZCBhcyBjb2xvcnMuXHJcbiAqXHJcbiAqIEZvciBsaW5lYXIgYW5kIHJhZGlhbCBncmFkaWVudHMgbnVtZXJpYyB2YWx1ZXMgYXJlIG9mIHR5cGUgW1tDc3NMZW5ndGhdXTsgZm9yIGNvbmljIGdyYWRpZW50cyxcclxuICogdGhlc2UgYXJlIG9mIHR5cGUgW1tDc3NBbmdsZV1dLiBQZXJjZW50cyBjYW4gYmUgdXNlZCBmb3IgYWxsIHR5cGVzIG9mIGdyYWRpZW50cy5cclxuICpcclxuICogKipFeGFtcGxlczoqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIC8vIGxpbmVhciBncmFkaWVudCB3aXRoIDUwcHggaGludFxyXG4gKiBsaW5lYXJHcmFkaWVudCggQ29sb3JzLnJlZCwgWzUwXSwgQ29sb3JzLmJsdWUpXHJcbiAqXHJcbiAqIC8vIHJhZGlhbCBncmFkaWVudCB3aXRoIGEgc2Vjb25kIGNvbG9yIHN0YXJ0aW5nIGF0IDIwJVxyXG4gKiByYWRpYWxHcmFkaWVudCggXCJyZWRcIiwgW1wiYmx1ZVwiLCBjc3MucGVyY2VudCgyMCldLCBcInllbGxvd1wiKVxyXG4gKlxyXG4gKiAvLyBjb25pYyBncmFkaWVudCB3aXRoIGEgc2Vjb25kIGNvbG9yIHN0YXJ0aW5nIGF0IDAuNHR1cm4gYW5kIHN0b3BwaW5nIGF0IDAuNnR1cm5cclxuICogY29uaWNHcmFkaWVudCggXCJyZWRcIiwgW1wiYmx1ZVwiLCAwLjQsIDAuNl0sIFwieWVsbG93XCIpXHJcbiAqIGBgYFxyXG4gKiBAdHlwZXBhcmFtIFQgVHlwZSBvZiBudW1lcmljIHZhbHVlcyB1c2VkIGZvciBoaW50cyBhbmQgY29sb3Igc3RvcHMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBHcmFkaWVudFN0b3BPckhpbnQ8VCBleHRlbmRzIChDc3NMZW5ndGggfCBDc3NBbmdsZSk+ID1cclxuICAgIEV4dGVuZGVkPENzc0NvbG9yPiB8IFtFeHRlbmRlZDxDc3NDb2xvcj4sIEV4dGVuZGVkPFQ+LCBFeHRlbmRlZDxUPj9dIHwgW0V4dGVuZGVkPFQ+XTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgdGhhdCBlbnVtZXJhdGVzIHBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgc2lkZS1vci1jb3JuZXIgZm9yIHRoZSBbW2xpbmVhckdyYWRpZW50XV0gZnVuY3Rpb24uXHJcbiAqIFRoZXNlIHZhbHVlcyBjYW4gYmUgc3BlY2lmaWVkIGluIGxpZXUgb2YgdGhlIGFuZ2xlIGluIHRoZSBbW0lMaW5lYXJHcmFkaWVudC50b3x0b11dIG1ldGhvZCBvZlxyXG4gKiB0aGUgW1tJTGluZWFyR3JhZGllbnRdXSBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqICoqRXhhbXBsZXM6KipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBsaW5lYXJHcmFkaWVudCggQ29sb3JzLnJlZCwgQ29sb3JzLmJsdWUpLnRvKCBcImJvdHRvbSByaWdodFwiKVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIFNpZGVPckNvcm5lciA9IFwiYm90dG9tXCIgfCBcImxlZnRcIiB8IFwidG9wXCIgfCBcInJpZ2h0XCIgfFxyXG4gICAgXCJ0b3AgbGVmdFwiIHwgXCJ0b3AgcmlnaHRcIiB8IFwiYm90dG9tIHJpZ2h0XCIgfCBcImJvdHRvbSBsZWZ0XCIgfFxyXG4gICAgXCJsZWZ0IHRvcFwiIHwgXCJyaWdodCB0b3BcIiB8IFwibGVmdCBib3R0b21cIiB8IFwicmlnaHQgYm90dG9tXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHRoYXQgcmVwcmVzZW50cyB0aGUgYW5nbGUgb2YgdGhlIFtbbGluZWFyR3JhZGllbnRdXSBDU1MgZnVuY3Rpb24uIFRoZXNlIHZhbHVlcyBjYW4gYmVcclxuICogc3BlY2lmaWVkIGluIGxpZXUgb2YgdGhlIGFuZ2xlIGluIHRoZSBbW0lMaW5lYXJHcmFkaWVudC50b3x0b11dIG1ldGhvZCBvZiB0aGVcclxuICogW1tJTGluZWFyR3JhZGllbnRdXSBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqICoqRXhhbXBsZXM6KipcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiAvLyBsaW5lYXIgZ3JhZGllbnQgZGlyZWN0ZWQgYXQgdGhlIGJvdHRvbSBjb3JuZXIgb2YgdGhlIGVsZW1lbnRcclxuICogbGluZWFyR3JhZGllbnQoIENvbG9ycy5yZWQsIENvbG9ycy5ibHVlKS50byggXCJib3R0b20gcmlnaHRcIilcclxuICpcclxuICogLy8gbGluZWFyIGdyYWRpZW50IGF0IDQ1ZGVnIGFuZ2xlXHJcbiAqIGxpbmVhckdyYWRpZW50KCBDb2xvcnMucmVkLCBDb2xvcnMuYmx1ZSkudG8oIDQ1KVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIExpbmVhckdyYWRpZW50QW5nbGUgPSBFeHRlbmRlZDxDc3NBbmdsZT4gfCBTaWRlT3JDb3JuZXI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIGZvciBncmFkaWVudHNcclxuICogQHR5cGVwYXJhbSBUIFR5cGUgb2YgbnVtZXJpYyB2YWx1ZXMgdXNlZCBmb3IgaGludHMgYW5kIGNvbG9yIHN0b3BzLlxyXG4gKiBAY2F0ZWdvcnkgSW1hZ2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdyYWRpZW50RnVuYzxUIGV4dGVuZHMgKENzc0xlbmd0aCB8IENzc0FuZ2xlKT4gZXh0ZW5kcyBJQ3NzSW1hZ2VGdW5jXHJcbntcclxuICAgIC8qKiBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgZ3JhZGllbnQgaXMgcmVwZWF0aW5nICovXHJcbiAgICByZXBlYXQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKiBBcnJheSBvZiBzdG9wcyBhbmQgaGludHMgKi9cclxuICAgIHN0b3BzOiBHcmFkaWVudFN0b3BPckhpbnQ8VD5bXTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgZ3JhZGllbnQgYnVpbGRlcnMuXHJcbiAqIEB0eXBlcGFyYW0gVCBUeXBlIG9mIG51bWVyaWMgdmFsdWVzIHVzZWQgZm9yIGhpbnRzIGFuZCBjb2xvciBzdG9wcy5cclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElHcmFkaWVudEJ1aWxkZXI8VCBleHRlbmRzIChDc3NMZW5ndGggfCBDc3NBbmdsZSk+IGV4dGVuZHMgSUdyYWRpZW50RnVuYzxUPlxyXG57XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBncmFkaWVudCBpcyByZXBlYXRpbmcuXHJcbiAgICAgKiBAcGFyYW0gcmVwZWF0RmZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRvIHNldCB0aGUgZ3JhZGllbnQgYXMgcmVwZWF0aW5nOyB0aGUgZGVmYXVsdCB2YWx1ZVxyXG4gICAgICogaXMgdHJ1ZS5cclxuICAgICAqL1xyXG4gICAgcmVwZWF0aW5nKCByZXBlYXQ/OiBib29sZWFuKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgc3RvcHMgb3IgaGludHMgdG8gdGhlIGdyYWRpZW50IGRlZmluaXRpb24uXHJcbiAgICAgKiBAcGFyYW0gc3RvcHMgVmFyaWFibGUgYXJndW1lbnQgbGlzdCBzcGVjaWZ5aW5nIHN0b3BzIG9yIGhpbnRzIHRoYXQgd2lsbCBiZSBhZGRlZCB0b1xyXG4gICAgICogdGhlIGdyYWRpZW50IGRlZmluaXRpb24uXHJcbiAgICAgKi9cclxuICAgIGFkZCggLi4uc3RvcHM6IEdyYWRpZW50U3RvcE9ySGludDxUPltdKTogdGhpcztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBvYmplY3QgdGhhdCBwcm9kdWNlcyBlaXRoZXIgYGxpbmVhci1ncmFkaWVudGAgb3JcclxuICogYHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnRgIENTUyBmdW5jdGlvbi4gSXQgY2FuIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvIGEgc3VpdGFibGUgc3R5bGVcclxuICogcHJvcGVydHkgKGUuZy4gYmFja2dyb3VuZC1pbWFnZSkuIE9iamVjdHMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGNhbiBiZSB1c2VkIHdoZXJlZXZlclxyXG4gKiBncmFkaWVudHMgYXJlIHVzZWQuXHJcbiAqIEBjYXRlZ29yeSBJbWFnZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTGluZWFyR3JhZGllbnRGdW5jIGV4dGVuZHMgSUdyYWRpZW50RnVuYzxDc3NMZW5ndGg+XHJcbntcclxuICAgIGZuOiBcImxpbmVhci1ncmFkaWVudFwiO1xyXG5cclxuICAgIC8qKiBHcmFkaWVudCBhbmdsZSAqL1xyXG5cdGFuZ2xlPzogTGluZWFyR3JhZGllbnRBbmdsZTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBvYmplY3QgdGhhdCBwcm9kdWNlcyBlaXRoZXIgYGxpbmVhci1ncmFkaWVudGBcclxuICogb3IgYHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnRgIENTUyBmdW5jdGlvbi4gSXQgY2FuIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvIGEgc3VpdGFibGUgc3R5bGVcclxuICogcHJvcGVydHkgKGUuZy4gYmFja2dyb3VuZC1pbWFnZSkuIEluIGFkZGl0aW9uIGl0IGhhcyB0aGUgYHRvYCBtZXRob2QgdGhhdCBjYW4gYmUgY2FsbGVkIHRvXHJcbiAqIHNwZWNpZnkgdGhlIGFuZ2xlIG9mIHRoZSBncmFkaWVudC5cclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElMaW5lYXJHcmFkaWVudEJ1aWxkZXIgZXh0ZW5kcyBJTGluZWFyR3JhZGllbnRGdW5jLCBJR3JhZGllbnRCdWlsZGVyPENzc0xlbmd0aD5cclxue1xyXG4gICAgZm46IFwibGluZWFyLWdyYWRpZW50XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBhbmdsZSBhdCB3aGljaCB0aGUgbGluZWFyIGdyYWRpZW50IGNoYW5nZXMgY29sb3JzXHJcbiAgICAgKiBAcGFyYW0gYW5nbGUgRWl0aGVyIGFuIGFuZ2xlIHZhbHVlIG9yIGFuIGluZGljYXRpb24gb2Ygc2lkZSBvciBjb3JuZXIgc3VjaCBhcyBgcmlnaHRgIG9yXHJcbiAgICAgKiBgdG9wIGxlZnRgLlxyXG4gICAgICovXHJcblx0dG8oIGFuZ2xlOiBMaW5lYXJHcmFkaWVudEFuZ2xlKTogdGhpcztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBvYmplY3QgdGhhdCBwcm9kdWNlcyBlaXRoZXIgYHJhZGlhbC1ncmFkaWVudGAgb3JcclxuICogYHJlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnRgIENTUyBmdW5jdGlvbi4gSXQgY2FuIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvIGEgc3VpdGFibGUgc3R5bGVcclxuICogcHJvcGVydHkgKGUuZy4gYmFja2dyb3VuZC1pbWFnZSkuIE9iamVjdHMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGNhbiBiZSB1c2VkIHdoZXJlZXZlclxyXG4gKiBncmFkaWVudHMgYXJlIHVzZWQuXHJcbiAqIEBjYXRlZ29yeSBJbWFnZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUmFkaWFsR3JhZGllbnRGdW5jIGV4dGVuZHMgSUdyYWRpZW50RnVuYzxDc3NMZW5ndGg+XHJcbntcclxuICAgIGZuOiBcInJhZGlhbC1ncmFkaWVudFwiO1xyXG5cclxuICAgIC8qKiBHcmFkaWVudCdzIGVuZGluZyBzaGFwZSAqL1xyXG4gICAgc2hhcGU/OiBcImNpcmNsZVwiIHwgXCJlbGxpcHNlXCI7XHJcblxyXG4gICAgLyoqIFNpemUgb2YgdGhlIGdyYWRpZW50J3MgZW5kaW5nIHNoYXBlICovXHJcblx0c2l6ZT86IEV4dGVuZGVkPENzc0xlbmd0aD4gfCBFeHRlbmRlZDxFeHRlbnRLZXl3b3JkPiB8IFtFeHRlbmRlZDxDc3NMZW5ndGg+LCBFeHRlbmRlZDxDc3NMZW5ndGg+XTtcclxuXHJcbiAgICAvKiogR3JhZGllbnQncyBwb3NpdGlvbiAqL1xyXG4gICAgcG9zPzogRXh0ZW5kZWQ8Q3NzUG9zaXRpb24+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIG9iamVjdCB0aGF0IHByb2R1Y2VzIGVpdGhlciBgcmFkaWFsLWdyYWRpZW50YCBvclxyXG4gKiBgcmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudGAgQ1NTIGZ1bmN0aW9uLiBJdCBjYW4gYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gYSBzdWl0YWJsZSBzdHlsZVxyXG4gKiBwcm9wZXJ0eSAoZS5nLiBiYWNrZ3JvdW5kLWltYWdlKS4gSW4gYWRkaXRpb24gaXQgaGFzIHRoZSBgY2lyY2xlYCwgYGVsbGlwc2VgLCBgZXh0ZW50YCBhbmQgYGF0YFxyXG4gKiBtZXRob2RzIHRoYXQgY2FuIGJlIGNhbGxlZCB0byBzcGVjaWZ5IHBhcmFtZXRlcnMgb2YgdGhlIGdyYWRpZW50LlxyXG4gKiBAY2F0ZWdvcnkgSW1hZ2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJhZGlhbEdyYWRpZW50QnVpbGRlciBleHRlbmRzIElSYWRpYWxHcmFkaWVudEZ1bmMsIElHcmFkaWVudEJ1aWxkZXI8Q3NzTGVuZ3RoPlxyXG57XHJcbiAgICBmbjogXCJyYWRpYWwtZ3JhZGllbnRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHNoYXBlIG9mIHRoZSBncmFkaWVudCB0byBjaXJjbGUuXHJcbiAgICAgKi9cclxuXHRjaXJjbGUoKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHNoYXBlIG9mIHRoZSBncmFkaWVudCB0byBjaXJjbGUgd2l0aCB0aGUgZ2l2ZW4gc2l6ZS5cclxuICAgICAqIEBwYXJhbSBzaXplIENpcmNsZSByYWRpdXMuXHJcbiAgICAgKi9cclxuXHRjaXJjbGUoIHNpemU6IEV4dGVuZGVkPENzc0xlbmd0aD4pOiB0aGlzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgc2hhcGUgb2YgdGhlIGdyYWRpZW50IHRvIGNpcmNsZSB3aXRoIHRoZSBnaXZlbiBleHRlbnQuXHJcbiAgICAgKiBAcGFyYW0gZUV4dGVudCBDaXJjbGUgZXh0ZW50IGtleXdvcmQuXHJcbiAgICAgKi9cclxuXHRjaXJjbGUoIGV4dGVudD86IEV4dGVuZGVkPEV4dGVudEtleXdvcmQ+KTogdGhpcztcclxuXHJcbiAgICAvLyAvKipcclxuICAgIC8vICAqIFNldHMgdGhlIHNoYXBlIG9mIHRoZSBncmFkaWVudCB0byBlbGxpcHNlIHdpdGggdGhlIGdpdmVuIHJhZGl1cyB2YWx1ZXMgb3IgZXh0ZW50LlxyXG4gICAgLy8gICogQHBhcmFtIHNpemVPckV4dGVudCBFaXRoZXIgYSB0b3VwbGUgb2YgZWxsaXBzZSdzIHR3byByYWRpaSBvciBhbiBleHRlbnQga2V5d29yZC5cclxuICAgIC8vICAqL1xyXG5cdC8vIGVsbGlwc2UoIHNpemVPckV4dGVudD86IFtFeHRlbmRlZDxDc3NMZW5ndGg+LCBFeHRlbmRlZDxDc3NMZW5ndGg+XSB8IEV4dGVuZGVkPEV4dGVudEtleXdvcmQ+KTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHNoYXBlIG9mIHRoZSBncmFkaWVudCB0byBlbGxpcHNlLlxyXG4gICAgICovXHJcbiAgICBlbGxpcHNlKCk6IHRoaXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBzaGFwZSBvZiB0aGUgZ3JhZGllbnQgdG8gZWxsaXBzZSB3aXRoIHRoZSBnaXZlbiByYWRpdXMgdmFsdWVzIG9yIGV4dGVudC5cclxuICAgICAqIEBwYXJhbSByeCBFbGxpcHNlJ3MgWC1heGlzIHJhZGl1cy5cclxuICAgICAqIEBwYXJhbSByeCBFbGxpcHNlJ3MgWS1heGlzIHJhZGl1cy5cclxuICAgICAqL1xyXG5cdGVsbGlwc2UoIHJ4OiBFeHRlbmRlZDxDc3NMZW5ndGg+LCByeTogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPik6IHRoaXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBzaGFwZSBvZiB0aGUgZ3JhZGllbnQgdG8gZWxsaXBzZSB3aXRoIHRoZSBnaXZlbiByYWRpdXMgdmFsdWVzIG9yIGV4dGVudC5cclxuICAgICAqIEBwYXJhbSBleHRlbnQgRXh0ZW50IGtleXdvcmQuXHJcbiAgICAgKi9cclxuXHRlbGxpcHNlKCBleHRlbnQ6IEV4dGVuZGVkPEV4dGVudEtleXdvcmQ+KTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGV4dGVudCBvZiB0aGUgZ3JhZGllbnQuXHJcbiAgICAgKiBAcGFyYW0gZXh0ZW50IEV4dGVudCBrZXl3b3JkLlxyXG4gICAgICovXHJcblx0ZXh0ZW50KCBleHRlbnQ6IEV4dGVuZGVkPEV4dGVudEtleXdvcmQ+KTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBncmFkaWVudCdzIGNlbnRlci5cclxuICAgICAqIEBwYXJhbSBwb3MgUG9zaXRpb24gdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGF0KCBwb3M6IEV4dGVuZGVkPENzc1Bvc2l0aW9uPik6IHRoaXM7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gaW52b2NhdGlvbiBvZiB0aGUgYGNvbmljLWdyYWRpZW50YCBvciBgcmVwZWF0aW5nLWNvbmljLWdyYWRpZW50YCBDU1MgZnVuY3Rpb24uXHJcbiAqIEl0IGNhbiBiZSBkaXJlY3RseSBhc3NpZ25lZCB0byBhIHN1aXRhYmxlIHN0eWxlIHByb3BlcnR5IChlLmcuIGBiYWNrZ3JvdW5kLWltYWdlYCkuIE9iamVjdHNcclxuICogaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGNhbiBiZSB1c2VkIHdoZXJldmVyIHRoZSBDU1MgYDxpbWFnZT5gIHR5cGUgaXMgdXNlZC5cclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDb25pY0dyYWRpZW50RnVuYyBleHRlbmRzIElHcmFkaWVudEZ1bmM8Q3NzQW5nbGU+XHJcbntcclxuICAgIGZuOiBcImNvbmljLWdyYWRpZW50XCI7XHJcblxyXG4gICAgLyoqIEdyYWRpZW50J3Mgcm90YXRpb24gYW5nbGUgKi9cclxuICAgIGFuZ2xlPzogRXh0ZW5kZWQ8Q3NzQW5nbGU+O1xyXG5cclxuICAgIC8qKiBHcmFkaWVudCdzIHBvc2l0aW9uICovXHJcbiAgICBwb3M/OiBFeHRlbmRlZDxDc3NQb3NpdGlvbj47XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IHRoYXQgcHJvZHVjZXMgZWl0aGVyIGBjb25pYy1ncmFkaWVudGAgb3JcclxuICogYHJlcGVhdGluZy1jb25pYy1ncmFkaWVudGAgQ1NTIGZ1bmN0aW9uLiBJdCBjYW4gYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gYSBzdWl0YWJsZSBzdHlsZVxyXG4gKiBwcm9wZXJ0eSAoZS5nLiBgYmFja2dyb3VuZC1pbWFnZWApLiBJbiBhZGRpdGlvbiBpdCBoYXMgdGhlIGBmcm9tYCBhbmQgYGF0YCBtZXRob2RzIHRoYXQgY2FuIGJlXHJcbiAqIGNhbGxlZCB0byBzcGVjaWZ5IHRoZSBzdGFydGluZyBhbmdsZSBhbmQgY2VudGVyIG9mIHRoZSBncmFkaWVudC5cclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDb25pY0dyYWRpZW50QnVpbGRlciBleHRlbmRzIElDb25pY0dyYWRpZW50RnVuYywgSUdyYWRpZW50QnVpbGRlcjxDc3NBbmdsZT5cclxue1xyXG4gICAgZm46IFwiY29uaWMtZ3JhZGllbnRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGFuZ2xlIGZyb20gd2hpY2ggdGhlIGdyYWRpZW50IHN0YXJ0cy5cclxuICAgICAqIEBwYXJhbSBhbmdsZSBBbmdsZSB2YWx1ZVxyXG4gICAgICovXHJcblx0ZnJvbSggYW5nbGU6IEV4dGVuZGVkPENzc0FuZ2xlPik6IHRoaXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgZ3JhZGllbnQncyBjZW50ZXIuXHJcbiAgICAgKiBAcGFyYW0gcG9zIFBvc2l0aW9uIHZhbHVlXHJcbiAgICAgKi9cclxuXHRhdCggcG9zOiBFeHRlbmRlZDxDc3NQb3NpdGlvbj4pOiB0aGlzO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIGBjcm9zcy1mYWRlKClgIENTUyBmdW5jdGlvbi4gSXQgY2FuIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvXHJcbiAqIGEgc3VpdGFibGUgc3R5bGUgcHJvcGVydHkgKGUuZy4gYGJhY2tncm91bmQtaW1hZ2VgKS4gT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhpcyBpbnRlcmZhY2UgY2FuIGJlXHJcbiAqIHVzZWQgd2hlcmV2ZXIgdGhlIENTUyBgPGltYWdlPmAgdHlwZSBpcyB1c2VkLlxyXG4gKiBAY2F0ZWdvcnkgSW1hZ2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNyb3NzRmFkZUZ1bmMgZXh0ZW5kcyBJQ3NzSW1hZ2VGdW5jXHJcbntcclxuICAgIGZuOiBcImNyb3NzLWZhZGVcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcnMgb2YgdGhlIG9sZCBzaWduYXR1cmUgb2YgdGhlIGZ1bmN0aW9uLiBUaGlzIHByb3BlcnR5IGlzIGlnbm9yZWQgaWYgdGhlIGBpbWFnZWBcclxuICAgICAqIHByb3BlcnR5IGlzIGRlZmluZWQuXHJcbiAgICAgKi9cclxuICAgIG9sZD86IFtFeHRlbmRlZDxDc3NJbWFnZT4sIEV4dGVuZGVkPENzc0ltYWdlPiwgRXh0ZW5kZWQ8Q3NzUGVyY2VudD5dO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgdHVwbGVzIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGlzIGFuIGltYWdlIGFuZCB0aGUgc2Vjb25kLCBvcHRpb25hbCwgZWxlbWVudCBpc1xyXG4gICAgICogdGhlIHBlcmNlbnRhZ2Ugb2YgdGhpcyBpbWFnZSB0byBiZSB1c2VkLlxyXG4gICAgICovXHJcbiAgICBpbWFnZXM/OiBbRXh0ZW5kZWQ8Q3NzSW1hZ2U+LCBFeHRlbmRlZDxDc3NQZXJjZW50Pj9dW107XHJcblxyXG4gICAgLyoqIE9wdGlvbmFsIGNvbG9yIGFzIHRoZSBsYXN0IGltYWdlICovXHJcbiAgICBjPzogRXh0ZW5kZWQ8Q3NzQ29sb3I+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIGBjcm9zcy1mYWRlKClgIENTUyBmdW5jdGlvbi4gSXQgY2FuIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvXHJcbiAqIGEgc3VpdGFibGUgc3R5bGUgcHJvcGVydHkgKGUuZy4gYGJhY2tncm91bmQtaW1hZ2VgKS4gT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhpcyBpbnRlcmZhY2UgY2FuIGJlXHJcbiAqIHVzZWQgd2hlcmV2ZXIgdGhlIENTUyBgPGltYWdlPmAgdHlwZSBpcyB1c2VkLiBJbiBhZGRpdGlvbiwgaXQgaGFzIGNvbnZlbmllbnQgbWV0aG9kcyB0aGF0XHJcbiAqIGNhbiBncmFkdWFsbHkgYnVpbGQgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGBjcm9zcy1mYWRlKClgIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgSW1hZ2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNyb3NzRmFkZUJ1aWxkZXIgZXh0ZW5kcyBJQ3Jvc3NGYWRlRnVuY1xyXG57XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgb25lIG9yIG1vcmUgaW1hZ2VzIHdpdGggb3B0aW9uYWwgcGVyY2VudGFnZXMuXHJcbiAgICAgKiBAcGFyYW0gaW1hZ2VzIEFycmF5IHdoZXJlIGVhY2ggaXRlbSBpcyBlaXRoZXIgYSBzaW5nbGUgaW1hZ2Ugb3IgYSB0dXBsZSBvZiBpbWFnZSBhbmRcclxuICAgICAqIHBlcmNlbnRhZ2VcclxuICAgICAqL1xyXG5cdGFkZCggLi4uaW1hZ2VzOiAoRXh0ZW5kZWQ8Q3NzSW1hZ2U+IHwgW0V4dGVuZGVkPENzc0ltYWdlPiwgRXh0ZW5kZWQ8Q3NzUGVyY2VudD5dKVtdKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGNvbG9yIHRoYXQgY2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgdGhlIGxhc3QgaW1hZ2UuXHJcbiAgICAgKiBAcGFyYW0gcG9zIFBvc2l0aW9uIHZhbHVlXHJcbiAgICAgKi9cclxuXHRjb2xvciggYzogRXh0ZW5kZWQ8Q3NzQ29sb3I+KTogdGhpcztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBvZiBhbiBpbWFnZSB0aGF0IGNhbiBiZSBzcGVjaWZpZWQgaW4gdGhlIFtbaW1hZ2VTZXRdXSBmdW5jdGlvbi4gU2luY2UgdGhlIGBpbWFnZS1zZXQoKWBcclxuICogQ1NTIGZ1bmN0aW9uIGRvZXNuJ3QgYWxsb3cgdXNpbmcgYGltYWdlLXNldCgpYCByZWN1cnNpdmVseSwgdGhpcyB0eXBlIGV4Y2x1ZGVzIGl0LiBBbiBpbWFnZVxyXG4gKiBjYW4gYWxzbyBiZSBzcGVjaWZpZWQganVzdCBhcyBhIFVSTCBzdHJpbmcuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJbWFnZVNldEltYWdlID0gRXhjbHVkZTxDc3NJbWFnZSxJSW1hZ2VTZXRGdW5jPiB8IHN0cmluZztcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGEgcmVzb2x1dGlvbiBpbiB0aGUgW1tpbWFnZVNldF1dIGZ1bmN0aW9uLiBJdCBjYW4gYmUgc3BlY2lmaWVkIGVpdGhlciBhcyBhXHJcbiAqIG51bWJlciwgaW4gd2hpY2ggY2FzZSBpdCB3aWxsIHVzZSB0aGUgXCJ4XCIgdW5pdHMsIG9yIGFueSBvdGhlciByZXNvbHV0aW9uIHNwZWNpZmljYXRpb24sIGUuZy5cclxuICogW1tkcGldXSBmdW5jdGlvbi5cclxuICovXHJcbmV4cG9ydCB0eXBlIEltYWdlU2V0UmVzb2x1dGlvbiA9IG51bWJlciB8IElSZXNvbHV0aW9uUHJveHk7XHJcblxyXG4vKipcclxuICogVHlwZSBvZiBzaW5nbGUgaXRlbSB0aGF0IGNhbiBiZSBzcGVjaWZpZWQgaW4gdGhlIFtbaW1hZ2VTZXRdXSBmdW5jdGlvbi4gVGhpcyBjYW4gYmUgZWl0aGVyIGFuXHJcbiAqIGltYWdlIG9yIGEgdHVwbGUgdGhhdCBjb250YWlucyBhbiBpbWFnZSBhbmQgYWRkaXRpb25hbCBwYXJhbWV0ZXJzLiBUaGUgZm9sbG93aW5nIHR1cGxlXHJcbiAqIHN0cnVjdHVyZXMgYXJlIGFsbG93ZWQ6XHJcbiAqICAgMS4gVHdvLWVsZW1lbnQgdHVwbGUgd2l0aCBpbWFnZSBhbmQgcmVzb2x1dGlvbi5cclxuICogICAxLiBUd28tZWxlbWVudCB0dXBsZSB3aXRoIGltYWdlIGFuZCB0eXBlLlxyXG4gKiAgIDEuIFRocmVlLWVsZW1lbnQgdHVwbGUgd2l0aCBpbWFnZSwgdHlwZSBhbmQgcmVzb2x1dGlvbi5cclxuICovXHJcbmV4cG9ydCB0eXBlIEltYWdlU2V0SXRlbSA9IEltYWdlU2V0SW1hZ2UgfFxyXG4gICAgW0V4dGVuZGVkPEltYWdlU2V0SW1hZ2U+LCBFeHRlbmRlZDxJbWFnZVNldFJlc29sdXRpb24+XSB8XHJcbiAgICBbRXh0ZW5kZWQ8SW1hZ2VTZXRJbWFnZT4sIEV4dGVuZGVkPHN0cmluZz5dIHxcclxuICAgIFtFeHRlbmRlZDxJbWFnZVNldEltYWdlPiwgRXh0ZW5kZWQ8c3RyaW5nPiwgRXh0ZW5kZWQ8SW1hZ2VTZXRSZXNvbHV0aW9uPl07XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBpbnZvY2F0aW9uIG9mIHRoZSBgY3Jvc3MtZmFkZSgpYCBDU1MgZnVuY3Rpb24uIEl0IGNhbiBiZSBkaXJlY3RseSBhc3NpZ25lZCB0b1xyXG4gKiBhIHN1aXRhYmxlIHN0eWxlIHByb3BlcnR5IChlLmcuIGBiYWNrZ3JvdW5kLWltYWdlYCkuIE9iamVjdHMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGNhbiBiZVxyXG4gKiB1c2VkIHdoZXJldmVyIHRoZSBDU1MgYDxpbWFnZT5gIHR5cGUgaXMgdXNlZC5cclxuICogQGNhdGVnb3J5IEltYWdlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElJbWFnZVNldEZ1bmMgZXh0ZW5kcyBJQ3NzSW1hZ2VGdW5jXHJcbntcclxuICAgIGZuOiBcImltYWdlLXNldFwiO1xyXG5cclxuICAgIC8qKiBBcnJheSBvZiBpbWFnZSBzcGVjaWZpY2F0aW9ucyAqL1xyXG4gICAgaXRlbXM6IEltYWdlU2V0SXRlbVtdO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBNYXBzIG5hbWVzIG9mIHBhaW50IHdvcmtsZXRzIHRvIHR1cGxlIHR5cGVzIGRlZmluaW5nIHRoZSBhcmd1bWVudHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZVxyXG4gKiBbW3BhaW50XV0gZnVuY3Rpb24uIFRoaXMgaW50ZXJmYWNlIGlzIGludGVuZGVkIHRvIGJlIGV4dGVuZGVkIHVzaW5nIHRoZSBtb2R1bGUgYXVnbWVudGF0aW9uXHJcbiAqIHRlY2huaXF1ZS4gQWZ0ZXIgYSB3b3JrbGV0IGlzIGRlZmluZWQgYXMgcGFydCBvZiB0aGlzIGludGVyZmFjZSwgaXQgYWxzbyBoYXMgdG8gYmUgcmVnaXN0ZXJlZFxyXG4gKiB1c2luZyB0aGUgW1tyZWdpc3RlclBhaW50V29ya2xldF1dIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiAqKkV4YW1wbGUqKlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIC8vIEFkZCBvdXIgd29ya2xldCB0byB0aGUgSVBhaW50V29ya2xldEFyZ3MgaW50ZXJmYWNlXHJcbiAqIGRlY2xhcmUgbW9kdWxlIFwibWltY3NzXCJcclxuICoge1xyXG4gKiAgICAgaW50ZXJmYWNlIElQYWludFdvcmtsZXRBcmdzXHJcbiAqICAgICB7XHJcbiAqICAgICAgICAgbXlQYWludFdvcmtsZXQ6IFtcIjxjb2xvcj5cIiwgXCI8bGVuZ3RoPlwiXVxyXG4gKiAgICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIC8vIFJlZ2lzdGVyIG91ciB3b3JrbGV0XHJcbiAqIGNzcy5yZWdpc3RlclBhaW50V29ya2xldCggXCJteVBhaW50V29ya2xldFwiLCBbXCI8Y29sb3I+XCIsIFwiPGxlbmd0aD5cIl0sIFwibXktcGFpbnQtd29ya2xldC5qc1wiKTtcclxuICpcclxuICogLy8gVXNlIG91ciB3b3JrbGV0XHJcbiAqIGNsYXNzIE15U3R5bGVzIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICBwYWludGVkMSA9IHRoaXMuJGNsYXNzKHtcclxuICogICAgICAgICAvLyBwYXNzIGNvbG9yIFwicmVkXCIgYW5kIGxlbmd0aCBcIjIwcHhcIlxyXG4gKiAgICAgICAgIGJhY2tncm91bmRJbWFnZTogY3NzLnBhaW50KCBcIm15UGFpbnRXb3JrbGV0XCIsIFwicmVkXCIsIDIwKVxyXG4gKiAgICAgfSlcclxuICpcclxuICogICAgIHBhaW50ZWQxID0gdGhpcy4kY2xhc3Moe1xyXG4gKiAgICAgICAgIC8vIHBhc3MgY29sb3IgXCJibHVlXCIgYW5kIGxlbmd0aCBcIjFpbmNoXCJcclxuICogICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGNzcy5wYWludCggXCJteVBhaW50V29ya2xldFwiLCBcInJlZFwiLCBjc3MuaW5jaCgxKSlcclxuICogICAgIH0pXHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQYWludFdvcmtsZXRzXHJcbntcclxuICAgIFtQOiBzdHJpbmddOiBTeW50YXhLZXlbXTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBpbnZvY2F0aW9uIG9mIHRoZSBgcGFpbnQoKWAgQ1NTIGZ1bmN0aW9uLiBJdCBjYW4gYmUgZGlyZWN0bHkgYXNzaWduZWQgdG9cclxuICogYSBzdWl0YWJsZSBzdHlsZSBwcm9wZXJ0eSAoZS5nLiBgYmFja2dyb3VuZC1pbWFnZWApLiBPYmplY3RzIGltcGxlbWVudGluZyB0aGlzIGludGVyZmFjZSBjYW4gYmVcclxuICogdXNlZCB3aGVyZXZlciB0aGUgQ1NTIGA8aW1hZ2U+YCB0eXBlIGlzIHVzZWQuXHJcbiAqIEBjYXRlZ29yeSBJbWFnZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUGFpbnRGdW5jIGV4dGVuZHMgSUNzc0ltYWdlRnVuY1xyXG57XHJcbiAgICBmbjogXCJwYWludFwiO1xyXG5cclxuICAgIC8qKiBOYW1lIG9mIHRoZSBwYWludCB3b3JrbGV0ICovXHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqIEFycmF5IG9mIGFyZ3VtZW50cyAqL1xyXG4gICAgYXJnczogc3RyaW5nW107XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEZpbHRlciBDU1MgZnVuY3Rpb25zXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIFRoZSBQZXJjZW50RmlsdGVyTmFtZXMgdHlwZSByZXByZXNlbnRzIHRoZSBuYW1lcyBvZiB0aGUgcGVyY2VudGFnZS1iYXNlZCBmaWx0ZXIgZnVuY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGVyY2VudEZpbHRlck5hbWVzID0gXCJicmlnaHRuZXNzXCIgfCBcImNvbnRyYXN0XCIgfCBcImdyYXlzY2FsZVwiIHwgXCJpbnZlcnRcIiB8XHJcbiAgICBcIm9wYWNpdHlcIiB8IFwic2F0dXJhdGVcIiB8IFwic2VwaWFcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgSVBlcmNlbnRGaWx0ZXJGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXIgb2YgcGVyY2VudGFnZS1iYXNlZCBmaWx0ZXIuIEl0IGNhblxyXG4gKiBiZSBkaXJlY3RseSBhc3NpZ25lZCB0byBhIHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyBmaWx0ZXIgdmFsdWVzIChlLmcuIGZpbHRlcikuXHJcbiAqIEBjYXRlZ29yeSBGaWx0ZXJcclxuICovXHJcbiBleHBvcnQgaW50ZXJmYWNlIElQZXJjZW50RmlsdGVyRnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBQZXJjZW50RmlsdGVyTmFtZXM7XHJcblxyXG4gICAgLyoqIFBlcmNlbnRhZ2UgdmFsdWUgKi9cclxuICAgIHA6IEV4dGVuZGVkPENzc1BlcmNlbnQ+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUJsdXJGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBgYmx1cigpYCBDU1MgZnVuY3Rpb24uIEl0IGNhblxyXG4gKiBiZSBkaXJlY3RseSBhc3NpZ25lZCB0byBhIHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyBmaWx0ZXIgdmFsdWVzIChlLmcuIGZpbHRlcikuIEl0IGlzXHJcbiAqIHJldHVybmVkIGZyb20gdGhlIFtbYmx1cl1dIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgRmlsdGVyXHJcbiAqL1xyXG4gZXhwb3J0IGludGVyZmFjZSBJQmx1ckZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJibHVyXCI7XHJcblxyXG4gICAgLyoqIEJsdXIgcmFkaXVzICovXHJcbiAgICByOiBFeHRlbmRlZDxDc3NMZW5ndGg+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSURyb3BTaGFkb3dGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBgZHJvcC1zaGFkb3coKWAgQ1NTIGZ1bmN0aW9uLlxyXG4gKiBJdCBjYW4gYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gYSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgZmlsdGVyIHZhbHVlcyAoZS5nLiBmaWx0ZXIpLiBJdCBpc1xyXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBbW2Ryb3BTaGFkb3ddXSBmdW5jdGlvbi5cclxuICogQGNhdGVnb3J5IEZpbHRlclxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSURyb3BTaGFkb3dGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwiZHJvcC1zaGFkb3dcIjtcclxuXHJcbiAgICAvKiogWC1heGlzIG9mZnNldCBvZiB0aGUgc2hhZG93ICovXHJcbiAgICB4OiBFeHRlbmRlZDxDc3NMZW5ndGg+O1xyXG5cclxuICAgIC8qKiBZLWF4aXMgb2Zmc2V0IG9mIHRoZSBzaGFkb3cgKi9cclxuICAgIHk6IEV4dGVuZGVkPENzc0xlbmd0aD47XHJcblxyXG4gICAgLyoqIFNoYWRvdyBjb2xvciAqL1xyXG4gICAgY29sb3I/OiBFeHRlbmRlZDxDc3NDb2xvcj47XHJcblxyXG4gICAgLyoqIEJsdXIgcmFkaXVzICovXHJcbiAgICBibHVyPzogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElIdWVSb3RhdGVGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBgaHVlLXJvdGF0ZSgpYCBDU1MgZnVuY3Rpb24uXHJcbiAqIEl0IGNhbiBiZSBkaXJlY3RseSBhc3NpZ25lZCB0byBhIHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyBmaWx0ZXIgdmFsdWVzIChlLmcuIGZpbHRlcikuIEl0IGlzXHJcbiAqIHJldHVybmVkIGZyb20gdGhlIFtbaHVlUm90YXRlXV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBGaWx0ZXJcclxuICovXHJcbiBleHBvcnQgaW50ZXJmYWNlIElIdWVSb3RhdGVGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwiaHVlLXJvdGF0ZVwiO1xyXG5cclxuICAgIC8qKiBIdWUgcm90YXRpb24gYW5nbGUgKi9cclxuICAgIGE6IEV4dGVuZGVkPENzc0FuZ2xlPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIEZpbHRlckZ1bmNzIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgb25lIG9mIHRoZSBDU1MgYDxmaWx0ZXI+YCBmdW5jdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBGaWx0ZXJGdW5jcyA9IElQZXJjZW50RmlsdGVyRnVuYyB8IElCbHVyRnVuYyB8IElEcm9wU2hhZG93RnVuYyB8IElIdWVSb3RhdGVGdW5jO1xyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gVHJhbnNmb3JtIENTUyBmdW5jdGlvbnNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogVGhlIElNYXRyaXhGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBgbWF0cml4KClgIENTUyBmdW5jdGlvbi4gSXQgY2FuXHJcbiAqIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvIGEgc3R5bGUgcHJvcGVydHkgdGhhdCBhY2NlcHRzIHRyYW5zZm9ybSB2YWx1ZXMgKGUuZy4gdHJhbnNmb3JtKS4gSXQgaXNcclxuICogcmV0dXJuZWQgZnJvbSB0aGUgW1ttYXRyaXhdXSBmdW5jdGlvbi5cclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSU1hdHJpeEZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJtYXRyaXhcIjtcclxuXHJcbiAgICBhOiBFeHRlbmRlZDxDc3NOdW1iZXI+O1xyXG4gICAgYjogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjtcclxuICAgIGM6IEV4dGVuZGVkPENzc051bWJlcj47XHJcblx0ZDogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjtcclxuICAgIHR4OiBFeHRlbmRlZDxDc3NOdW1iZXI+O1xyXG4gICAgdHk6IEV4dGVuZGVkPENzc051bWJlcj47XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJTWF0cml4M2RGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBgbWF0cml4M2QoKWAgQ1NTIGZ1bmN0aW9uLiBJdCBjYW5cclxuICogYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gYSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgdHJhbnNmb3JtIHZhbHVlcyAoZS5nLiB0cmFuc2Zvcm0pLiBJdCBpc1xyXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBbW21hdHJpeDNkXV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbiBleHBvcnQgaW50ZXJmYWNlIElNYXRyaXgzZEZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJtYXRyaXgzZFwiO1xyXG5cclxuICAgIGExOiBFeHRlbmRlZDxDc3NOdW1iZXI+OyBiMTogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjsgYzE6IEV4dGVuZGVkPENzc051bWJlcj47IGQxOiBFeHRlbmRlZDxDc3NOdW1iZXI+O1xyXG4gICAgYTI6IEV4dGVuZGVkPENzc051bWJlcj47IGIyOiBFeHRlbmRlZDxDc3NOdW1iZXI+OyBjMjogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjsgZDI6IEV4dGVuZGVkPENzc051bWJlcj47XHJcbiAgICBhMzogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjsgYjM6IEV4dGVuZGVkPENzc051bWJlcj47IGMzOiBFeHRlbmRlZDxDc3NOdW1iZXI+OyBkMzogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjtcclxuICAgIGE0OiBFeHRlbmRlZDxDc3NOdW1iZXI+OyBiNDogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjsgYzQ6IEV4dGVuZGVkPENzc051bWJlcj47IGQ0OiBFeHRlbmRlZDxDc3NOdW1iZXI+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSVBlcnNwZWN0aXZlRnVuYyBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgcGFyYW1ldGVycyBvZiB0aGUgYHBlcnNwZWN0aXZlKClgIENTUyBmdW5jdGlvbi4gSXQgY2FuXHJcbiAqIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvIGEgc3R5bGUgcHJvcGVydHkgdGhhdCBhY2NlcHRzIHRyYW5zZm9ybSB2YWx1ZXMgKGUuZy4gdHJhbnNmb3JtKS4gSXQgaXNcclxuICogcmV0dXJuZWQgZnJvbSB0aGUgW1twZXJzcGVjdGl2ZV1dIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG4gZXhwb3J0IGludGVyZmFjZSBJUGVyc3BlY3RpdmVGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwicGVyc3BlY3RpdmVcIjtcclxuXHJcbiAgICBkOiBFeHRlbmRlZDxDc3NMZW5ndGg+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSVJvdGF0ZUZ1bmMgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGByb3RhdGUoKWAgQ1NTIGZ1bmN0aW9uLiBJdCBjYW5cclxuICogYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gYSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgdHJhbnNmb3JtIHZhbHVlcyAoZS5nLiB0cmFuc2Zvcm0pLiBJdCBpc1xyXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBbW3JvdGF0ZV1dIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG4gZXhwb3J0IGludGVyZmFjZSBJUm90YXRlRnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcInJvdGF0ZVwiIHwgXCJyb3RhdGVYXCIgfCBcInJvdGF0ZVlcIiB8IFwicm90YXRlWlwiO1xyXG5cclxuICAgIGE6IEV4dGVuZGVkPENzc0FuZ2xlPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElSb3RhdGUzZEZ1bmMgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGByb3RhdGUzZCgpYCBDU1MgZnVuY3Rpb24uIEl0IGNhblxyXG4gKiBiZSBkaXJlY3RseSBhc3NpZ25lZCB0byBhIHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyB0cmFuc2Zvcm0gdmFsdWVzIChlLmcuIHRyYW5zZm9ybSkuIEl0IGlzXHJcbiAqIHJldHVybmVkIGZyb20gdGhlIFtbcm90YXRlM2RdXSBmdW5jdGlvbi5cclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSVJvdGF0ZTNkRnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcInJvdGF0ZTNkXCI7XHJcblxyXG4gICAgeDogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjtcclxuICAgIHk6IEV4dGVuZGVkPENzc051bWJlcj47XHJcbiAgICB6OiBFeHRlbmRlZDxDc3NOdW1iZXI+O1xyXG4gICAgYTogRXh0ZW5kZWQ8Q3NzQW5nbGU+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSVNjYWxlMWRGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBgc2NhbGVYKClgIENTUyBmdW5jdGlvbi4gSXQgY2FuXHJcbiAqIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvIGEgc3R5bGUgcHJvcGVydHkgdGhhdCBhY2NlcHRzIHRyYW5zZm9ybSB2YWx1ZXMgKGUuZy4gdHJhbnNmb3JtKS4gSXQgaXNcclxuICogcmV0dXJuZWQgZnJvbSB0aGUgW1tzY2FsZVhdXSBmdW5jdGlvbi5cclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSVNjYWxlMWRGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwic2NhbGVYXCIgfCBcInNjYWxlWVwiIHwgXCJzY2FsZVpcIjtcclxuXHJcbiAgICBzOiBFeHRlbmRlZDxDc3NOdW1iZXI+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSVNjYWxlRnVuYyBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgcGFyYW1ldGVycyBvZiB0aGUgYHNjYWxlKClgIENTUyBmdW5jdGlvbi4gSXQgY2FuXHJcbiAqIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvIGEgc3R5bGUgcHJvcGVydHkgdGhhdCBhY2NlcHRzIHRyYW5zZm9ybSB2YWx1ZXMgKGUuZy4gdHJhbnNmb3JtKS4gSXQgaXNcclxuICogcmV0dXJuZWQgZnJvbSB0aGUgW1tzY2FsZV1dIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG4gZXhwb3J0IGludGVyZmFjZSBJU2NhbGVGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwic2NhbGVcIjtcclxuXHJcbiAgICBzeDogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjtcclxuICAgIHN5PzogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElTY2FsZTNkRnVuYyBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgcGFyYW1ldGVycyBvZiB0aGUgYHNjYWxlM2QoKWAgQ1NTIGZ1bmN0aW9uLiBJdCBjYW5cclxuICogYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gYSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgdHJhbnNmb3JtIHZhbHVlcyAoZS5nLiB0cmFuc2Zvcm0pLiBJdCBpc1xyXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBbW3NjYWxlM2RdXSBmdW5jdGlvbi5cclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSVNjYWxlM2RGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwic2NhbGUzZFwiO1xyXG5cclxuICAgIHN4OiBFeHRlbmRlZDxDc3NOdW1iZXI+O1xyXG4gICAgc3k6IEV4dGVuZGVkPENzc051bWJlcj47XHJcbiAgICBzejogRXh0ZW5kZWQ8Q3NzTnVtYmVyPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElTa2V3MWRGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBgc2tld1goKWAgQ1NTIGZ1bmN0aW9uLiBJdCBjYW5cclxuICogYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gYSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgdHJhbnNmb3JtIHZhbHVlcyAoZS5nLiB0cmFuc2Zvcm0pLiBJdCBpc1xyXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBbW3NrZXdYXV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbiBleHBvcnQgaW50ZXJmYWNlIElTa2V3MWRGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwic2tld1hcIiB8IFwic2tld1lcIjtcclxuXHJcbiAgICBhOiBFeHRlbmRlZDxDc3NBbmdsZT47XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJU2tld0Z1bmMgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGBza2V3KClgIENTUyBmdW5jdGlvbi4gSXQgY2FuXHJcbiAqIGJlIGRpcmVjdGx5IGFzc2lnbmVkIHRvIGEgc3R5bGUgcHJvcGVydHkgdGhhdCBhY2NlcHRzIHRyYW5zZm9ybSB2YWx1ZXMgKGUuZy4gdHJhbnNmb3JtKS4gSXQgaXNcclxuICogcmV0dXJuZWQgZnJvbSB0aGUgW1tza2V3XV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBUcmFuc2Zvcm1cclxuICovXHJcbiBleHBvcnQgaW50ZXJmYWNlIElTa2V3RnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcInNrZXdcIjtcclxuXHJcbiAgICBheDogRXh0ZW5kZWQ8Q3NzQW5nbGU+O1xyXG4gICAgYXk/OiBFeHRlbmRlZDxDc3NBbmdsZT47XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJVHJhbnNsYXRlMWRGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBgdHJhbnNsYXRlWCgpYCBDU1MgZnVuY3Rpb24uIEl0IGNhblxyXG4gKiBiZSBkaXJlY3RseSBhc3NpZ25lZCB0byBhIHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyB0cmFuc2Zvcm0gdmFsdWVzIChlLmcuIHRyYW5zZm9ybSkuIEl0IGlzXHJcbiAqIHJldHVybmVkIGZyb20gdGhlIFtbdHJhbnNsYXRlWF1dIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG4gZXhwb3J0IGludGVyZmFjZSBJVHJhbnNsYXRlMWRGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwidHJhbnNsYXRlWFwiIHwgXCJ0cmFuc2xhdGVZXCIgfCBcInRyYW5zbGF0ZVpcIjtcclxuXHJcbiAgICBkOiBFeHRlbmRlZDxDc3NMZW5ndGg+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSVRyYW5zbGF0ZUZ1bmMgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGB0cmFuc2xhdGUoKWAgQ1NTIGZ1bmN0aW9uLiBJdCBjYW5cclxuICogYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gYSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgdHJhbnNmb3JtIHZhbHVlcyAoZS5nLiB0cmFuc2Zvcm0pLiBJdCBpc1xyXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBbW3RyYW5zbGF0ZV1dIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtXHJcbiAqL1xyXG4gZXhwb3J0IGludGVyZmFjZSBJVHJhbnNsYXRlRnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcInRyYW5zbGF0ZVwiO1xyXG5cclxuICAgIHg6IEV4dGVuZGVkPENzc0xlbmd0aD47XHJcbiAgICB5PzogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElUcmFuc2xhdGUzZEZ1bmMgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGB0cmFuc2xhdGUzZCgpYCBDU1MgZnVuY3Rpb24uIEl0IGNhblxyXG4gKiBiZSBkaXJlY3RseSBhc3NpZ25lZCB0byBhIHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyB0cmFuc2Zvcm0gdmFsdWVzIChlLmcuIHRyYW5zZm9ybSkuIEl0IGlzXHJcbiAqIHJldHVybmVkIGZyb20gdGhlIFtbdHJhbnNsYXRlM2RdXSBmdW5jdGlvbi5cclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSVRyYW5zbGF0ZTNkRnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcInRyYW5zbGF0ZTNkXCI7XHJcblxyXG4gICAgeDogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPjtcclxuICAgIHk6IEV4dGVuZGVkPENzc0xlbmd0aD47XHJcbiAgICB6OiBFeHRlbmRlZDxDc3NMZW5ndGg+O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgVHJhbnNmb3JtRnVuY3MgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyBvbmUgb2YgdGhlIENTUyBgPHRyYW5zZm9ybT5gIGZ1bmN0aW9ucy5cclxuICovXHJcbmV4cG9ydCB0eXBlIFRyYW5zZm9ybUZ1bmNzID0gSU1hdHJpeEZ1bmMgfCBJTWF0cml4M2RGdW5jIHwgSVBlcnNwZWN0aXZlRnVuYyB8XHJcbiAgICBJUm90YXRlRnVuYyB8IElSb3RhdGUzZEZ1bmMgfCBJU2NhbGUxZEZ1bmMgfCBJU2NhbGVGdW5jIHwgSVNjYWxlM2RGdW5jIHxcclxuICAgIElTa2V3MWRGdW5jIHwgSVNrZXdGdW5jIHwgSVRyYW5zbGF0ZTFkRnVuYyB8IElUcmFuc2xhdGVGdW5jIHwgSVRyYW5zbGF0ZTNkRnVuYztcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEJhc2ljIHNoYXBlIENTUyBmdW5jdGlvbnNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IGlzIHVzZWQgdG8gc3BlY2lmeSBhIHJhZGl1cyBpbiBbY2lyY2xlXV0gYW5kIFtlbGxpcHNlXV0gZnVuY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU2hhcGVSYWRpdXMgPSBFeHRlbmRlZDxDc3NMZW5ndGggfCBcImNsb3Nlc3Qtc2lkZVwiIHwgXCJmYXJ0aGVzdC1zaWRlXCI+O1xyXG5cclxuLyoqIFR5cGUgZm9yIGZpbGwtcnVsZSBzdHlsZSBwcm9wZXJ0eSAqL1xyXG5leHBvcnQgdHlwZSBGaWxsUnVsZSA9IFwibm9uemVyb1wiIHwgXCJldmVub2RkXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUluc2V0RnVuYyBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgZGF0YSBvZiB0aGUgQ1NTIGluc2V0IGJhc2ljIHNoYXBlLiBJdCBjYW4gYmUgZGlyZWN0bHlcclxuICogYXNzaWduZWQgdG8gYW55IHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyB2YWx1ZXMgb2YgdGhlIFtbQmFzaWNTaGFwZV1dIHR5cGUgKGUuZy4gY2xpcC1wYXRoKS5cclxuICogQGNhdGVnb3J5IEJhc2ljIFNoYXBlXHJcbiAqL1xyXG4gZXhwb3J0IGludGVyZmFjZSBJSW5zZXRGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwiaW5zZXRcIjtcclxuXHJcbiAgICAvKiogRmlyc3Qgb2Zmc2V0IHZhbHVlICovXHJcbiAgICBvMTogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPjtcclxuXHJcbiAgICAvKiogRmlyc3Qgb2Zmc2V0IHZhbHVlICovXHJcbiAgICBvMj86IEV4dGVuZGVkPENzc0xlbmd0aD47XHJcblxyXG4gICAgLyoqIEZpcnN0IG9mZnNldCB2YWx1ZSAqL1xyXG4gICAgbzM/OiBFeHRlbmRlZDxDc3NMZW5ndGg+O1xyXG5cclxuICAgIC8qKiBGaXJzdCBvZmZzZXQgdmFsdWUgKi9cclxuICAgIG80PzogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPjtcclxuXHJcbiAgICAvKiogQm9yZGVyIHJhZGl1cyB2YWx1ZSAqL1xyXG4gICAgcj86IEV4dGVuZGVkPEJvcmRlclJhZGl1cz47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUluc2V0QnVpbGRlciBpbnRlcmZhY2UgZXh0ZW5kcyB0aGUgW1tJSW5zZXRGdW5jXV0gaW50ZXJmYWNlIGFuZCBhZGRzIHRoZSBgcm91bmRgIG1ldGhvZCB0aGF0XHJcbiAqIGNhbiBiZSBjYWxsZWQgdG8gc3BlY2lmeSB0aGUgYm9yZGVyIHJhZGl1cyBvZiB0aGUgaW5zZXQgcmVjdGFuZ2xlLiBJdCBpcyB0aGUgcmVzdWx0IG9mIGludm9raW5nXHJcbiAqIHRoZSBbW2luc2V0XV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBCYXNpYyBTaGFwZVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSUluc2V0QnVpbGRlciBleHRlbmRzIElJbnNldEZ1bmNcclxue1xyXG4gICAgLyoqIFNldHMgdGhlIGJvcmRlciByYWRpdXMgKi9cclxuICAgIHJvdW5kKCByPzogRXh0ZW5kZWQ8Qm9yZGVyUmFkaXVzPik6IHRoaXM7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJQ2lyY2xlRnVuYyBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgZGF0YSBvZiB0aGUgQ1NTIGNpcmNsZSBiYXNpYyBzaGFwZS4gSXQgY2FuIGJlIGRpcmVjdGx5XHJcbiAqIGFzc2lnbmVkIHRvIGFueSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgdmFsdWVzIG9mIHRoZSBbW0Jhc2ljU2hhcGVdXSB0eXBlIChlLmcuIGNsaXAtcGF0aCkuXHJcbiAqIEBjYXRlZ29yeSBCYXNpYyBTaGFwZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ2lyY2xlRnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcImNpcmNsZVwiO1xyXG5cclxuICAgIC8qKiBDaXJjbGUncyByYWRpdXMuICovXHJcbiAgICByPzogU2hhcGVSYWRpdXM7XHJcblxyXG4gICAgLyoqIFBvc2l0aW9uIG9mIHRoZSBjaXJjbGUncyBjZW50ZXIuICovXHJcbiAgICBwb3M/OiBFeHRlbmRlZDxDc3NQb3NpdGlvbj47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUNpcmNsZUJ1aWxkZXIgaW50ZXJmYWNlIGV4dGVuZHMgdGhlIFtbSUNpcmNsZUZ1bmNdXSBpbnRlcmZhY2UgYW5kIGFkZHMgdGhlIGBhdGAgbWV0aG9kIHRoYXRcclxuICogY2FuIGJlIGNhbGxlZCB0byBzcGVjaWZ5IHRoZSBwb3NpdGlvbiBvZiB0aGUgY2lyY2xlJ3MgY2VudGVyLiBJdCBpcyB0aGUgcmVzdWx0IG9mIGludm9raW5nXHJcbiAqIHRoZSBbW2NpcmNsZV1dIGZ1bmN0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgQmFzaWMgU2hhcGVcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNpcmNsZUJ1aWxkZXIgZXh0ZW5kcyBJQ2lyY2xlRnVuY1xyXG57XHJcbiAgICAvKiogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGNpcmNsZSdzIGNlbnRlci4gKi9cclxuICAgIGF0KCBwb3M6IEV4dGVuZGVkPENzc1Bvc2l0aW9uPik6IHRoaXM7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJRWxsaXBzZUZ1bmMgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIGRhdGEgb2YgdGhlIENTUyBlbGxpcHNlIGJhc2ljIHNoYXBlLiBJdCBjYW4gYmUgZGlyZWN0bHlcclxuICogYXNzaWduZWQgdG8gYW55IHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyB2YWx1ZXMgb2YgdGhlIFtbQmFzaWNTaGFwZV1dIHR5cGUgKGUuZy4gY2xpcC1wYXRoKS5cclxuICogQGNhdGVnb3J5IEJhc2ljIFNoYXBlXHJcbiAqL1xyXG4gZXhwb3J0IGludGVyZmFjZSBJRWxsaXBzZUZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJlbGxpcHNlXCI7XHJcblxyXG4gICAgLyoqIEVsbGlwc2VzJ3MgWC1heGlzIHJhZGl1cy4gKi9cclxuICAgIHJ4PzogU2hhcGVSYWRpdXM7XHJcblxyXG4gICAgLyoqIEVsbGlwc2VzJ3MgWS1heGlzIHJhZGl1cy4gKi9cclxuICAgIHJ5PzogU2hhcGVSYWRpdXM7XHJcblxyXG4gICAgLyoqIFBvc2l0aW9uIG9mIHRoZSBlbGxpcHNlJ3MgY2VudGVyLiAqL1xyXG4gICAgcG9zPzogRXh0ZW5kZWQ8Q3NzUG9zaXRpb24+O1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIElFbGxpcHNlQnVpbGRlciBpbnRlcmZhY2UgZXh0ZW5kcyB0aGUgW1tJRWxsaXBzZUZ1bmNdXSBpbnRlcmZhY2UgYW5kIGFkZHMgdGhlIGBhdGAgbWV0aG9kIHRoYXRcclxuICogY2FuIGJlIGNhbGxlZCB0byBzcGVjaWZ5IHRoZSBwb3NpdGlvbiBvZiB0aGUgZWxsaXBzZSdzIGNlbnRlci4gSXQgaXMgdGhlIHJlc3VsdCBvZiBpbnZva2luZ1xyXG4gKiB0aGUgW1tlbGxpcHNlXV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBCYXNpYyBTaGFwZVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSUVsbGlwc2VCdWlsZGVyIGV4dGVuZHMgSUVsbGlwc2VGdW5jXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGVsbGlwc2UncyBjZW50ZXIuXHJcbiAgICAgKiBAcGFyYW0gcG9zIFBvc2l0aW9uIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBhdCggcG9zOiBFeHRlbmRlZDxDc3NQb3NpdGlvbj4pOiB0aGlzO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSVBvbHlnb25GdW5jIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBkYXRhIG9mIHRoZSBDU1MgcG9seWdvbiBiYXNpYyBzaGFwZS4gSXQgY2FuIGJlIGRpcmVjdGx5XHJcbiAqIGFzc2lnbmVkIHRvIGFueSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgdmFsdWVzIG9mIHRoZSBbW0Jhc2ljU2hhcGVdXSB0eXBlIChlLmcuIGNsaXAtcGF0aCkuXHJcbiAqIEBjYXRlZ29yeSBCYXNpYyBTaGFwZVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSVBvbHlnb25GdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwicG9seWdvblwiO1xyXG5cclxuICAgIC8qKiBQb2x5Z29uIHBvaW50cyAqL1xyXG4gICAgcG9pbnRzOiBDc3NQb2ludFtdO1xyXG5cclxuICAgIC8qKiBQb2xpZ29uIGZpbGxpbmcgcnVsZSAqL1xyXG4gICAgcnVsZT86IEZpbGxSdWxlO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIElQb2x5Z29uQnVpbGRlciBpbnRlcmZhY2UgZXh0ZW5kcyB0aGUgW1tJUG9seWdvbkZ1bmNdXSBpbnRlcmZhY2UgYW5kIGFkZHMgc2V2ZXJhbCBtZXRob2RzIHRoYXRcclxuICogYWxsb3cgY2hhbmdpbmcgdGhlIHBvbHlnb24gcGFyYW1ldGVycy4gSXQgaXMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgW1twb2x5Z29uXV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBCYXNpYyBTaGFwZVxyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSVBvbHlnb25CdWlsZGVyIGV4dGVuZHMgSVBvbHlnb25GdW5jXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gcG9pbnRzIHRvIHRoZSBwb2x5Z29uXHJcbiAgICAgKiBAcGFyYW0gcG9pbnRzXHJcbiAgICAgKi9cclxuICAgIGFkZCggLi4ucG9pbnRzOiBDc3NQb2ludFtdKTogdGhpcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGZpbGxpbmcgcnVsZSB1c2VkIHRvIGRldGVybWluZSB0aGUgaW5zaWRlIHBhcnQgb2YgdGhlIHBvbHlnb25cclxuICAgICAqIEBwYXJhbSBydWxlXHJcbiAgICAgKi9cclxuICAgIGZpbGwoIHJ1bGU6IEZpbGxSdWxlKTogdGhpcztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0eXBlIG9mIHBhdGggY29tbWFuZCBwYXJhbWV0ZXJzLCB3aGljaCBjb3VsZCBiZSBlaXRoZXIgYSBzaW5nbGUgbnVtYmVyIG9yIGFuIGFycmF5XHJcbiAqIG9mIG51bWJlcnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQYXRoQ29tbWFuZFBhcmFtID0gbnVtYmVyIHwgbnVtYmVyW107XHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0eXBlIHVzZWQgdG8gc3RvcmUgYSBwYXRoIGNvbW1hbmQuIFRoaXMgaW5jbHVkZXMgdGhlIGNvbW1hbmQgbmFtZSBhbmQgaXRzIHBhcmFtZXRlcnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQYXRoQ29tbWFuZCA9IFtzdHJpbmcsIFBhdGhDb21tYW5kUGFyYW1bXT9dO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBJUGF0aEZ1bmMgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIGRhdGEgb2YgdGhlIENTUyBwYXRoIGJhc2ljIHNoYXBlLiBJdCBjYW4gYmUgZGlyZWN0bHlcclxuICogYXNzaWduZWQgdG8gYW55IHN0eWxlIHByb3BlcnR5IHRoYXQgYWNjZXB0cyB2YWx1ZXMgb2YgdGhlIFtbQmFzaWNTaGFwZV1dIHR5cGUgKGUuZy4gY2xpcC1wYXRoKS5cclxuICogQGNhdGVnb3J5IEJhc2ljIFNoYXBlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQYXRoRnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcInBhdGhcIjtcclxuXHJcbiAgICAvKiogUGF0aCBmaWxsaW5nIHJ1bGUgKi9cclxuICAgIHJ1bGU/OiBGaWxsUnVsZTtcclxuXHJcbiAgICAvKiogQXJyYXkgb2YgcGF0aCBjb21tYW5kcyAqL1xyXG4gICAgaXRlbXM6IFBhdGhDb21tYW5kW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgSVBhdGhCdWlsZGVyIGludGVyZmFjZSBleHRlbmRzIHRoZSBbW0lQYXRoRnVuY11dIGludGVyZmFjZSBhbmQgYWRkcyBzZXZlcmFsIG1ldGhvZHMgdGhhdCBhbGxvd1xyXG4gKiBhZGRpbmcgcGF0aCBjb21tYW5kcy4gSXQgaXMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgW1twYXRoXV0gZnVuY3Rpb24uIFRoZSBtZXRob2RzIGluIHRoaXNcclxuICogaW50ZXJmYWNlIG1pbWljIHRoZSBTVkcgcGF0aCBjb21tYW5kcyBkZXNjcmliZWQgaW4gTUROOlxyXG4gKiA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9kI3BhdGhfY29tbWFuZHNcIiB0YXJnZXQ9XCJtZG5cIj5QYXRoIENvbW1hbmRzPC9hPlxyXG4gKiBAY2F0ZWdvcnkgQmFzaWMgU2hhcGVcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBhdGhCdWlsZGVyIGV4dGVuZHMgSVBhdGhGdW5jXHJcbntcclxuICAgIC8vIEFkZHMgdGhlIGdpdmVuIGNvbW1hbmQgYW5kIHBhcmFtZXRlcnMgdG8gdGhlIHBhdGguXHJcbiAgICBhZGQoIGNvbW1hbmQ6IHN0cmluZywgcGFyYW1zPzogUGF0aENvbW1hbmRQYXJhbVtdKTogdGhpc1xyXG5cclxuICAgIC8qKiBNb3ZlLXRvIGNvbW1hbmQgd2l0aCBhYnNvbHV0ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIE0oIC4uLnBhcmFtczogW251bWJlcixudW1iZXJdW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKiBNb3ZlLXRvIGNvbW1hbmQgd2l0aCByZWxhdGl2ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIG0oIC4uLnBhcmFtczogW251bWJlcixudW1iZXJdW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKiBMaW5lLXRvIGNvbW1hbmQgd2l0aCBhYnNvbHV0ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIEwoIC4uLnBhcmFtczogW251bWJlcixudW1iZXJdW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKiBMaW5lLXRvIGNvbW1hbmQgd2l0aCByZWxhdGl2ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIGwoIC4uLnBhcmFtczogW251bWJlcixudW1iZXJdW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKiBIb3Jpem9udGFsIGxpbmUtdG8gY29tbWFuZCB3aXRoIGFic29sdXRlIGNvb3JkaW5hdGVzLiAqL1xyXG4gICAgSCggLi4ucGFyYW1zOiBudW1iZXJbXSk6IHRoaXM7XHJcblxyXG4gICAgLyoqIEhvcml6b250YWwgbGluZS10byBjb21tYW5kIHdpdGggcmVsYXRpdmUgY29vcmRpbmF0ZXMuICovXHJcbiAgICBoKCAuLi5wYXJhbXM6IG51bWJlcltdKTogdGhpcztcclxuXHJcbiAgICAvKiogVmVydGljYWwgbGluZS10byBjb21tYW5kIHdpdGggYWJzb2x1dGUgY29vcmRpbmF0ZXMuICovXHJcbiAgICBWKCAuLi5wYXJhbXM6IG51bWJlcltdKTogdGhpcztcclxuXHJcbiAgICAvKiogVmVydGljYWwgbGluZS10byBjb21tYW5kIHdpdGggcmVsYXRpdmUgY29vcmRpbmF0ZXMuICovXHJcbiAgICB2KCAuLi5wYXJhbXM6IG51bWJlcltdKTogdGhpcztcclxuXHJcbiAgICAvKiogQ3ViaWMgYmV6aWVyIGN1cnZlIGNvbW1hbmQgd2l0aCBhYnNvbHV0ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIEMoIC4uLnBhcmFtczogW251bWJlcixudW1iZXIsbnVtYmVyLG51bWJlcixudW1iZXIsbnVtYmVyXVtdKTogdGhpcztcclxuXHJcbiAgICAvKiogQ3ViaWMgYmV6aWVyIGN1cnZlIGNvbW1hbmQgd2l0aCByZWxhdGl2ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIGMoIC4uLnBhcmFtczogW251bWJlcixudW1iZXIsbnVtYmVyLG51bWJlcixudW1iZXIsbnVtYmVyXVtdKTogdGhpcztcclxuXHJcbiAgICAvKiogU21vb3RoIGN1YmljIGJlemllciBjdXJ2ZSBjb21tYW5kIHdpdGggYWJzb2x1dGUgY29vcmRpbmF0ZXMuICovXHJcbiAgICBTKCAuLi5wYXJhbXM6IFtudW1iZXIsbnVtYmVyLG51bWJlcixudW1iZXJdW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKiBTbW9vdGggY3ViaWMgYmV6aWVyIGN1cnZlIGNvbW1hbmQgd2l0aCByZWxhdGl2ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIHMoIC4uLnBhcmFtczogW251bWJlcixudW1iZXIsbnVtYmVyLG51bWJlcl1bXSk6IHRoaXM7XHJcblxyXG4gICAgLyoqIFF1YWRyYXRpYyBiZXppZXIgY3VydmUgY29tbWFuZCB3aXRoIGFic29sdXRlIGNvb3JkaW5hdGVzLiAqL1xyXG4gICAgUSggLi4ucGFyYW1zOiBbbnVtYmVyLG51bWJlcixudW1iZXIsbnVtYmVyXVtdKTogdGhpcztcclxuXHJcbiAgICAvKiogUXVhZHJhdGljIGJlemllciBjdXJ2ZSBjb21tYW5kIHdpdGggcmVsYXRpdmUgY29vcmRpbmF0ZXMuICovXHJcbiAgICBxKCAuLi5wYXJhbXM6IFtudW1iZXIsbnVtYmVyLG51bWJlcixudW1iZXJdW10pOiB0aGlzO1xyXG5cclxuICAgIC8qKiBTbW9vdGggcXVhZHJhdGljIGJlemllciBjdXJ2ZSBjb21tYW5kIHdpdGggYWJzb2x1dGUgY29vcmRpbmF0ZXMuICovXHJcbiAgICBUKCAuLi5wYXJhbXM6IFtudW1iZXIsbnVtYmVyXVtdKTogdGhpcztcclxuXHJcbiAgICAvKiogU21vb3RoIHF1YWRyYXRpYyBiZXppZXIgY3VydmUgY29tbWFuZCB3aXRoIHJlbGF0aXZlIGNvb3JkaW5hdGVzLiAqL1xyXG4gICAgdCggLi4ucGFyYW1zOiBbbnVtYmVyLG51bWJlcl1bXSk6IHRoaXM7XHJcblxyXG4gICAgLyoqIEVsbGlwdGljYWwgYXJjIGN1cnZlIGNvbW1hbmQgd2l0aCBhYnNvbHV0ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIEEoIC4uLnBhcmFtczogW251bWJlcixudW1iZXIsbnVtYmVyLDB8MSwwfDEsbnVtYmVyLG51bWJlcl1bXSk6IHRoaXM7XHJcblxyXG4gICAgLyoqIEVsbGlwdGljYWwgYXJjIGN1cnZlIGNvbW1hbmQgd2l0aCByZWxhdGl2ZSBjb29yZGluYXRlcy4gKi9cclxuICAgIGEoIC4uLnBhcmFtczogW251bWJlcixudW1iZXIsbnVtYmVyLDB8MSwwfDEsbnVtYmVyLG51bWJlcl1bXSk6IHRoaXM7XHJcblxyXG4gICAgLyoqIENsb3NlLXBhdGggY29tbWFuZC4gKi9cclxuICAgIHooKTogdGhpcztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIEJhc2ljU2hhcGVUeXBlIHJlcHJlc2VudHMgYW4gaW52b2NhdGlvbiBvZiBvbmUgdGhlIENTUyBgPGJhc2ljLXNoYXBlPmAgZnVuY3Rpb25zIHN1Y2ggYXNcclxuICogW1tpbnNldF1dLCBbW2NpcmNsZV1dLCBbW2VsbGlwc2VdXSwgW1twb2x5Z29uXV0sIFtbcGF0aF1dLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFzaWNTaGFwZSA9IElJbnNldEZ1bmMgfCBJQ2lyY2xlRnVuYyB8IElFbGxpcHNlRnVuYyB8IElQb2x5Z29uRnVuYyB8IElQYXRoQnVpbGRlcjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJUmF5RnVuYyBpbnRlcmZhY2UgcmVwcmVzZW50cyB0aGUgZGF0YSBvZiB0aGUgQ1NTIHJheSBmdW5jdGlvbi4gSXQgY2FuIGJlIGRpcmVjdGx5XHJcbiAqIGFzc2lnbmVkIHRvIGFueSBzdHlsZSBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgdGhlIHN1aXRhYmxlIHR5cGUgKGUuZy4gb2Zmc2V0LXBhdGgpLlxyXG4gKiBAY2F0ZWdvcnkgQmFzaWMgU2hhcGVcclxuKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUmF5RnVuYyBleHRlbmRzIElDc3NGdW5jT2JqZWN0XHJcbntcclxuICAgIGZuOiBcInJheVwiO1xyXG5cclxuICAgIC8qKiBSYXkncyBhbmdsZS4gKi9cclxuICAgIGFuZ2xlOiBFeHRlbmRlZDxDc3NBbmdsZT47XHJcblxyXG4gICAgLyoqIFJheSdzIHNpemUgKi9cclxuICAgIHNpemU/OiBFeHRlbmRlZDxFeHRlbnRLZXl3b3JkIHwgQ3NzTGVuZ3RoPjtcclxuXHJcbiAgICAvKiogRmxhZyBkZXRlcm1pbmluZyB0aGUgcHJlc2VuY2Ugb2YgdGhlIGtleXdvcmQgXCJjb250YWluXCIgKi9cclxuICAgIGNvbnRhaW4/OiBib29sZWFuO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBHcmlkIENTUyBmdW5jdGlvbnNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogVGhlIElNaW5NYXhGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIFtbbWlubWF4XV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBHcmlkXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElNaW5NYXhGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwibWlubWF4XCI7XHJcblxyXG4gICAgLyoqIE1pbmltdW0gdHJhY2sgc2l6ZSAqL1xyXG4gICAgbWluOiBHcmlkVHJhY2tTaXplO1xyXG5cclxuICAgIC8qKiBNaW5pbXVtIHRyYWNrIHNpemUgKi9cclxuICAgIG1heDogR3JpZFRyYWNrU2l6ZTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElSZXBlYXRGdW5jIGludGVyZmFjZSByZXByZXNlbnRzIGFuIGludm9jYXRpb24gb2YgdGhlIFtbcmVwZWF0XV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBHcmlkXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElSZXBlYXRGdW5jIGV4dGVuZHMgSUNzc0Z1bmNPYmplY3Rcclxue1xyXG4gICAgZm46IFwicmVwZWF0XCI7XHJcblxyXG4gICAgLyoqIE51bWJlciBvZiByZXBldGl0aW9ucyAqL1xyXG4gICAgY291bnQ6IEV4dGVuZGVkPENzc051bWJlcj4gfCBcImF1dG8tZmlsbFwiIHwgXCJhdXRvLWZpdFwiO1xyXG5cclxuICAgIC8qKiBBcnJheSBvZiB0cmFjayBkZWZpbml0aW9ucyAqL1xyXG4gICAgdHJhY2tzOiBHcmlkVHJhY2tbXTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIElHcmlkU3BhbkZ1bmMgaW50ZXJmYWNlIHJlcHJlc2VudHMgYSBzcGFuIGV4cHJlc3Npb24gZm9yIGdyaWQgbGF5b3V0cy4gSXQgaXMgcmV0dXJuZWQgZnJvbVxyXG4gKiB0aGUgW1tzcGFuXV0gZnVuY3Rpb24uXHJcbiAqIEBjYXRlZ29yeSBHcmlkXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkU3BhbkZ1bmMgZXh0ZW5kcyBJQ3NzRnVuY09iamVjdFxyXG57XHJcbiAgICBmbjogXCJzcGFuXCI7XHJcblxyXG4gICAgLyoqIEZpcnN0IHNwYW4gYXJndW1lbnQgKi9cclxuICAgIHAxOiBFeHRlbmRlZDxHcmlkTGluZUNvdW50T3JOYW1lPjtcclxuXHJcbiAgICAvKiogU2Vjb25kIHNwYW4gYXJndW1lbnQgKi9cclxuICAgIHAyPzogRXh0ZW5kZWQ8R3JpZExpbmVDb3VudE9yTmFtZT47XHJcbn1cclxuXHJcblxyXG5cclxuIiwi77u/aW1wb3J0IHtNZWRpYVN0YXRlbWVudCwgU3VwcG9ydHNTdGF0ZW1lbnR9IGZyb20gXCIuL01lZGlhVHlwZXNcIjtcclxuaW1wb3J0IHtTdHlsZXNldCwgRXh0ZW5kZWRJU3R5bGVzZXQsIFN0cmluZ1N0eWxlc2V0LCBJU3R5bGVzZXR9IGZyb20gXCIuL1N0eWxlc2V0c1wiXHJcbmltcG9ydCB7c3Aycywgc19yZWdpc3RlclNQLCBzMnNzLCBzMnN9IGZyb20gXCIuLi9pbXBsL1N0eWxlSW1wbFwiXHJcbmltcG9ydCB7Z2V0QWN0aXZhdG9yfSBmcm9tIFwiLi4vaW1wbC9TY2hlZHVsaW5nSW1wbFwiO1xyXG5pbXBvcnQge21lZGlhMnMsIHN1cHBvcnRzMnN9IGZyb20gXCIuLi9pbXBsL01pc2NJbXBsXCI7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBTdHlsZXNldCBtYW5pcHVsYXRpb25cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogUmVnaXN0ZXJzIHRoZSBnaXZlbiBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBjb252ZXJ0aW5nIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gc3R5bGUgcHJvcGVydHkgdG9cclxuICogc3RyaW5nLiBUaGUgYHJlZ2lzdGVyU3R5bGVQcm9wZXJ0eWAgZnVuY3Rpb24gbXVzdCBiZSB1c2VkIGFmdGVyIGFkZGluZyB0aGUgcHJvcGVydHkgdG8gdGhlXHJcbiAqIFtbSVN0eWxlc2V0XV0gaW50ZXJmYWNlIHZpYSB0aGUgbW9kdWxlIGF1Z21lbnRhdGlvbiB0ZWNobmlxdWUgaWYgdGhlIGNvbnZlcnNpb24gdG8gc3RyaW5nXHJcbiAqIHJlcXVpcmVzIG5vbi1zdGFuZGFyZCBvcGVyYXRpb25zLiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgY2FsbGVkIGZvciBwcm9wZXRpZXMgd2hvc2VcclxuICogdmFsdWVzIG9ubHkgaW5jbHVkZSBudW1iZXJzLCBzdHJpbmdzLCBmdW5jdGlvbnMgcmV0dXJuaW5nIGEgc3RyaW5nLCBvYmplY3RzIHdob3NlIGB0b1N0cmluZ2BcclxuICogbWV0aG9kIHByb2R1Y2VzIHRoZSBuZWNlc3Nhcnkgc3RyaW5nIG9yIGFycmF5cyBvZiB0aGUgYWJvdmUgdHlwZXMuXHJcbiAqXHJcbiAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgZm9yIHN0eWxlIHByb3BlcnRpZXMgdGhhdCBhcmUgbm90IHlldCBzdXBwb3J0ZWQgYnkgTWltY3NzLiBUaGlzIGlzXHJcbiAqIGFsc28gdGhlIHdheSB0byBzdXBwb3J0IHByb3BlcnRpZXMgd2l0aCB2ZW5kb3IgcHJlZml4ZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJTdHlsZVByb3BlcnR5ID0gKG5hbWU6IHN0cmluZywgdG9TdHJpbmdGdW5jOiAodjogYW55KSA9PiBzdHJpbmcpOiBib29sZWFuID0+XHJcbiAgICBzX3JlZ2lzdGVyU1AoIG5hbWUsIHRvU3RyaW5nRnVuYyk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gc3R5bGUgcHJvcGVydHkgdG8gYSBDU1Mgc3RyaW5nLlxyXG4gKiBAcGFyYW0gc3R5bGVQcm9wTmFtZSBTdHlsZSBwcm9wZXJ0eSBuYW1lIHRoYXQgZGV0ZXJtaW5lcyBob3cgdGhlIHZhbHVlIHNob3VsZCBiZSBjb252ZXJ0ZWRcclxuICogdG8gYSBDU1MgY29tcGxpYW50IHN0cmluZy5cclxuICogQHBhcmFtIHN0eWxlUHJvcFZhbHVlIFZhbHVlIHRvIGNvbnZlcnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0U3R5bGVQcm9wVmFsdWUgPSA8SyBleHRlbmRzIGtleW9mIElTdHlsZXNldD4oIHN0eWxlUHJvcE5hbWU6IEssXHJcblx0c3R5bGVQcm9wVmFsdWU6IEV4dGVuZGVkSVN0eWxlc2V0W0tdKTogc3RyaW5nID0+IHNwMnMoIHN0eWxlUHJvcE5hbWUsIHN0eWxlUHJvcFZhbHVlKTtcclxuXHJcblxyXG5cclxuLy8gU2V0cyBzdHlsZSBwcm9wZXJ0eSBvbiBIVE1MIG9yIFNWRyBlbGVtZW50XHJcbmNvbnN0IHNldEVsZW1lbnRTdHlsZVByb3AgPSA8SyBleHRlbmRzIGtleW9mIElTdHlsZXNldD4oIGVsbTogRWxlbWVudENTU0lubGluZVN0eWxlLCBuYW1lOiBLLFxyXG4gICAgdmFsdWU6IEV4dGVuZGVkSVN0eWxlc2V0W0tdLCBzY2hlZHVsZXJUeXBlPzogbnVtYmVyKTogdm9pZCA9PlxyXG4gICAgZ2V0QWN0aXZhdG9yKHNjaGVkdWxlclR5cGUpLnVwZGF0ZVN0eWxlKCBlbG0sIG5hbWUsIHNwMnMoIG5hbWUsIHZhbHVlKSwgZmFsc2UpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogU2V0cyB2YWx1ZXMgb2YgdGhlIHN0eWxlIHByb3BlcnRpZXMgZnJvbSB0aGUgZ2l2ZW4gU3R5bGVzZXQgb2JqZWN0IHRvIHRoZSBgc3R5bGVgIGF0dHJpYnV0ZVxyXG4gKiBvZiB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gKiBAcGFyYW0gZWxtIEhUTUwvU1ZHIGVsZW1lbnQgd2hvc2Ugc3R5bGVzIHdpbGwgYmUgc2V0LlxyXG4gKiBAcGFyYW0gc3R5bGVzZXQgU3R5bGVzZXQgb2JqZWN0IHdoaWNoIHByb3ZpZGVzIHZhbHVlcyBmb3Igc3R5bGUgcHJvcGVydGllcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBzZXRFbGVtZW50U3R5bGUgPSAoZWxtOiBFbGVtZW50Q1NTSW5saW5lU3R5bGUsIHN0eWxlc2V0OiBTdHlsZXNldCB8IG51bGwgfCB1bmRlZmluZWQsXHJcblx0c2NoZWR1bGVyVHlwZT86IG51bWJlcik6IHZvaWQgPT5cclxuICAgIHNldEVsZW1lbnRTdHJpbmdTdHlsZSggZWxtLCBzdHlsZXNldCA/IHN0eWxlc2V0VG9TdHJpbmdTdHlsZXNldChzdHlsZXNldCkgOiBudWxsLCBzY2hlZHVsZXJUeXBlKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFNldHMgdmFsdWVzIG9mIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGZyb20gdGhlIGdpdmVuIFN0cmluZ1N0eWxlc2V0IG9iamVjdCB0byB0aGUgYHN0eWxlYCBhdHRyaWJ1dGVcclxuICogb2YgdGhlIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICogQHBhcmFtIGVsbSBIVE1ML1NWRyBlbGVtZW50IHdob3NlIHN0eWxlcyB3aWxsIGJlIHNldC5cclxuICogQHBhcmFtIHN0eWxlc2V0IFtbU3RyaW5nU3R5bGVzZXRdXSBvYmplY3Qgd2hpY2ggcHJvdmlkZXMgdmFsdWVzIGZvciBzdHlsZSBwcm9wZXJ0aWVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNldEVsZW1lbnRTdHJpbmdTdHlsZSA9IChlbG06IEVsZW1lbnRDU1NJbmxpbmVTdHlsZSwgc3R5bGVzZXQ6IFN0cmluZ1N0eWxlc2V0IHwgbnVsbCB8IHVuZGVmaW5lZCxcclxuXHRzY2hlZHVsZXJUeXBlPzogbnVtYmVyKTogdm9pZCA9PlxyXG4gICAgZ2V0QWN0aXZhdG9yKHNjaGVkdWxlclR5cGUpLnVwZGF0ZVN0eWxlKCBlbG0sIG51bGwsIHN0eWxlc2V0LCBmYWxzZSk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBbW1N0eWxlc2V0XV0gdG8gYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSBzdHlsZXNldFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHN0eWxlc2V0VG9TdHJpbmcgPSAoc3R5bGVzZXQ6IFN0eWxlc2V0KTogc3RyaW5nID0+IHMycyggc3R5bGVzZXQpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIGdpdmVuIFtbU3R5bGVzZXRdXSBvYmplY3QgaW50byBhbiBvYmplY3QsIHdoZXJlIGVhY2ggU3R5bGVzZXQncyBwcm9wZXJ0eSBpc1xyXG4gKiBjb252ZXJ0ZWQgdG8gaXRzIHN0cmluZyB2YWx1ZS5cclxuICogQHBhcmFtIHN0eWxlc2V0XHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc3R5bGVzZXRUb1N0cmluZ1N0eWxlc2V0ID0gKHN0eWxlc2V0OiBTdHlsZXNldCk6IFN0cmluZ1N0eWxlc2V0ID0+IHMyc3MoIHN0eWxlc2V0KTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENvbXBhcmVzIHR3byBTdHlsZXNldCBvYmplY3RzIGJ5IGNvbnZlcnRpbmcgc3R5bGUgcHJvcGVydGllcyB0byBzdHJpbmdzIGFuZCByZXR1cm5zIGFuIG9iamVjdFxyXG4gKiB0aGF0IGNvbnRhaW5zIHN0cmluZyB2YWx1ZXMgb2YgcHJvcGVydGllcyB0aGF0IHdlcmUgbmV3IG9yIGhhdmUgZGlmZmVyZW50IHZhbHVlcyBpbiB0aGUgbmV3XHJcbiAqIHN0eWxlc2V0IGFuZCB1bmRlZmluZWQgdmFsdWVzIGZvciBwcm9wZXJ0aWVzIHRoYXQgZXhpc3QgaW4gdGhlIG9sZCBzdHlsZXNldCBidXQgZG9uJ3QgZXhpc3RcclxuICogaW4gdGhlIG5ldyBvbmUuXHJcbiAqIEBwYXJhbSBvbGRTdHlsZXNldFxyXG4gKiBAcGFyYW0gbmV3U3R5bGVzZXRcclxuICogQHJldHVybnMgU3RyaW5nU3R5bGVzZXQgb2JqZWN0IHdpdGggcHJvcGVydGllcyB0aGF0IGhhdmUgZGlmZmVyZW50IHZhbHVlcyBpbiB0aGUgb2xkIGFuZCBuZXdcclxuICogc3R5bGVzZXRzLiBQcm9wZXJ0aWVzIHRoYXQgZXhpc3RlZCBpbiB0aGUgb2xkIGJ1dCBkb24ndCBleGlzdCBpbiB0aGUgbmV3IHN0eWxlc2V0LCB3aWxsIGhhdmVcclxuICogdGhlaXIgdmFsdWVzIHNldCB0byBgXCJ1bnNldFwiYC4gSWYgdGhlcmUgaXMgbm8gZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGUgdHdvIHN0eWxlc2V0cyBudWxsIGlzXHJcbiAqIHJldHVybmVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGRpZmZTdHlsZXNldHMgPSAob2xkU3R5bGVzZXQ6IFN0eWxlc2V0LCBuZXdTdHlsZXNldDogU3R5bGVzZXQpOiBTdHJpbmdTdHlsZXNldCB8IG51bGwgPT5cclxue1xyXG5cdGlmICghb2xkU3R5bGVzZXQgJiYgIW5ld1N0eWxlc2V0KVxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0ZWxzZSBpZiAoIW9sZFN0eWxlc2V0KVxyXG5cdFx0cmV0dXJuIHMyc3MoIG5ld1N0eWxlc2V0KTtcclxuXHRlbHNlIGlmICghbmV3U3R5bGVzZXQpXHJcblx0XHRyZXR1cm4gczJzcyggb2xkU3R5bGVzZXQpO1xyXG5cclxuXHQvLyBmaXJzdCBjb252ZXJ0IGJvdGggc3R5bGVzZXRzIHRvIHRoZWlyIHN0cmluZyB2ZXJzaW9uc1xyXG5cdGxldCBvbGRTdHJpbmdTdHlsZXNldCA9XHRzMnNzKCBvbGRTdHlsZXNldCk7XHJcblx0bGV0IG5ld1N0cmluZ1N0eWxlc2V0ID1cdHMyc3MoIG5ld1N0eWxlc2V0KTtcclxuXHJcblx0bGV0IHVwZGF0ZVZhbDogU3RyaW5nU3R5bGVzZXQgfCBudWxsID0gbnVsbDtcclxuXHJcblx0Ly8gbG9vcCBvdmVyIGtleXMgaW4gdGhlIG9sZCBzdHlsZSBvYmplY3QgYW5kIGZpbmQgdGhvc2UgdGhhdCBhcmUgbm90IGluIHRoZSBuZXcgb25lLiBUaGVzZVxyXG5cdC8vIHdpbGwgYmUgcmVtb3ZlZC5cclxuXHRmb3IoIGxldCBrZXkgaW4gb2xkU3RyaW5nU3R5bGVzZXQpXHJcblx0e1xyXG5cdFx0bGV0IG5ld1N0cmluZ1ZhbCA9IG5ld1N0cmluZ1N0eWxlc2V0W2tleV07XHJcblx0XHRpZiAobmV3U3RyaW5nVmFsID09IG51bGwpXHJcblx0XHR7XHJcblx0XHRcdHVwZGF0ZVZhbCA9IHVwZGF0ZVZhbCB8fCB7fTtcclxuXHRcdFx0dXBkYXRlVmFsW2tleV0gPSBcInVuc2V0XCI7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdGxldCBvbGRTdHJpbmdWYWwgPSBvbGRTdHJpbmdTdHlsZXNldFtrZXldO1xyXG5cdFx0XHRpZiAob2xkU3RyaW5nVmFsICE9PSBuZXdTdHJpbmdWYWwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR1cGRhdGVWYWwgPSB1cGRhdGVWYWwgfHwge307XHJcblx0XHRcdFx0dXBkYXRlVmFsW2tleV0gPSBuZXdTdHJpbmdWYWw7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIGxvb3Agb3ZlciBrZXlzIGluIHRoZSBuZXcgc3R5bGUgb2JqZWN0IGFuZCBmaW5kIHRob3NlIHRoYXQgYXJlIG5vdCBpbiB0aGUgb2xkIG9uZS4gVGhlc2VcclxuXHQvLyB3aWxsIGJlIGFkZGVkLlxyXG5cdGZvciggbGV0IGtleSBpbiBuZXdTdHJpbmdTdHlsZXNldClcclxuXHR7XHJcblx0XHRsZXQgb2xkU3RyaW5nVmFsID0gb2xkU3RyaW5nU3R5bGVzZXRba2V5XTtcclxuXHRcdGlmIChvbGRTdHJpbmdWYWwgPT0gbnVsbClcclxuXHRcdHtcclxuXHRcdFx0dXBkYXRlVmFsID0gdXBkYXRlVmFsIHx8IHt9O1xyXG5cdFx0XHR1cGRhdGVWYWxba2V5XSA9IG5ld1N0cmluZ1N0eWxlc2V0W2tleV07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdXBkYXRlVmFsO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBBZGRpbmcgbWV0aG9kcyB0byBzZXZlcmFsIERPTSBwcm90b3R5cGVzIHVzaW5nIG1vZHVsZSBhdWdtZW50YXRpb25cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5kZWNsYXJlIGdsb2JhbFxyXG57XHJcbiAgICBpbnRlcmZhY2UgRWxlbWVudENTU0lubGluZVN0eWxlXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0IHRoZSBnaXZlbiB2YWx1ZSB0byB0aGUgZ2l2ZW4gc3R5bGUgcHJvcGVydHkgb2YgdGhlIGVsZW1lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgUHJvcGVydHkgbmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSBOZXcgcHJvcGVydHkgdmFsdWUgdG8gc2V0LlxyXG4gICAgICAgICAqIEBwYXJhbSBzY2hlZHVsZXJUeXBlIFNjaGVkdWxlciBpZGVudGlmaWVyLiBJZiBvbWl0dGVkLCB0aGUgY3VycmVudCBkZWZhdWx0IHNjaGVkdWxlclxyXG4gICAgICAgICAqIHdpbGwgYmUgdXNlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRTdHlsZVByb3A8SyBleHRlbmRzIGtleW9mIElTdHlsZXNldD4oIG5hbWU6IEssIHZhbHVlOiBFeHRlbmRlZElTdHlsZXNldFtLXSxcclxuICAgICAgICAgICAgc2NoZWR1bGVyVHlwZT86IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1lcmdlcyBvciByZXBsYWNlcyB0aGUgZWxlbWVudCdzIHN0eWxlcyB3aXRoIHRoZSBnaXZlbiBzdHlsZXNldC5cclxuICAgICAgICAgKiBAcGFyYW0gc3R5bGVzZXQgU3R5bGVzZXQgdG8gc2V0IG9yIHJlcGxhY2VcclxuICAgICAgICAgKiBAcGFyYW0gcmVwbGFjZSBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgbmV3IHN0eWxlc2V0IHNob3VsZCBjb21wbGV0ZWx5IHJlcGxhY2UgdGhlXHJcbiAgICAgICAgICogZXhpc3RpbmcgZWxlbWVudCBzdHlsZXMgd2l0aCB0aGUgbmV3IHN0eWxlcyAodHJ1ZSkgb3IgbWVyZ2UgdGhlIG5ldyBzdHlsZXMgd2l0aCB0aGVcclxuICAgICAgICAgKiBleGlzdGluZyBvbmVzIChmYWxzZSkuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxyXG4gICAgICAgICAqIEBwYXJhbSBzY2hlZHVsZXJUeXBlIFNjaGVkdWxlciBpZGVudGlmaWVyLiBJZiBvbWl0dGVkLCB0aGUgY3VycmVudCBkZWZhdWx0IHNjaGVkdWxlclxyXG4gICAgICAgICAqIHdpbGwgYmUgdXNlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRTdHlsZXNldCggc3R5bGVzZXQ6IFN0eWxlc2V0LCBzY2hlZHVsZXJUeXBlPzogbnVtYmVyKTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuLy8gU2V0cyBzdHlsZSBwcm9wZXJ0eSBvbiBIVE1MIG9yIFNWRyBlbGVtZW50XHJcbkhUTUxFbGVtZW50LnByb3RvdHlwZS5zZXRTdHlsZVByb3AgPSBTVkdFbGVtZW50LnByb3RvdHlwZS5zZXRTdHlsZVByb3AgPVxyXG4gICAgZnVuY3Rpb24gPEsgZXh0ZW5kcyBrZXlvZiBJU3R5bGVzZXQ+KCBuYW1lOiBLLCB2YWx1ZTogRXh0ZW5kZWRJU3R5bGVzZXRbS10sXHJcbiAgICAgICAgc2NoZWR1bGVyVHlwZT86IG51bWJlcik6IHZvaWRcclxue1xyXG4gICAgc2V0RWxlbWVudFN0eWxlUHJvcCggdGhpcywgbmFtZSwgdmFsdWUsIHNjaGVkdWxlclR5cGUpO1xyXG59XHJcblxyXG4vLyBTZXRzIHN0eWxlc2V0IG9uIEhUTUwgb3IgU1ZHIGVsZW1lbnRcclxuSFRNTEVsZW1lbnQucHJvdG90eXBlLnNldFN0eWxlc2V0ID0gU1ZHRWxlbWVudC5wcm90b3R5cGUuc2V0U3R5bGVzZXQgPVxyXG4gICAgZnVuY3Rpb24oIHN0eWxlc2V0OiBTdHlsZXNldCwgc2NoZWR1bGVyVHlwZT86IG51bWJlcik6IHZvaWRcclxue1xyXG4gICAgc2V0RWxlbWVudFN0eWxlKCB0aGlzLCBzdHlsZXNldCwgc2NoZWR1bGVyVHlwZSk7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEBtZWRpYSBhbmQgQHN1cHBvcnRzIHF1ZXJpZXMuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBtZWRpYSBxdWVyeSB2YWx1ZSB0byB0aGUgQ1NTIG1lZGlhIHF1ZXJ5IHN0cmluZy4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZFxyXG4gKiBieSBsaWJyYXJpZXMgdGhhdCBhbGxvdyBzcGVjaWZ5aW5nIFtbTWVkaWFTdGF0ZW1lbnRdXSBmb3IgdGhlIGBtZWRpYWAgYXR0cmlidXRlIG9mIGVsZW1lbnRzXHJcbiAqIHN1Y2ggYXMgYDxsaW5rPmAsIGA8c3R5bGU+YCBhbmQgYDxzb3VyY2U+YFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG1lZGlhVG9TdHJpbmcgPSAocXVlcnk6IE1lZGlhU3RhdGVtZW50KTogc3RyaW5nID0+IG1lZGlhMnMoIHF1ZXJ5KTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBzdXBwb3J0cyBxdWVyeSB2YWx1ZSB0byB0aGUgQ1NTIHN1cHBvcnRzIHF1ZXJ5IHN0cmluZy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBzdXBwb3J0c1RvU3RyaW5nID0gKHF1ZXJ5OiBTdXBwb3J0c1N0YXRlbWVudCk6IHN0cmluZyA9PiBzdXBwb3J0czJzKCBxdWVyeSk7XHJcblxyXG5cclxuXHJcbiIsIu+7v2ltcG9ydCB7XHJcbiAgICBFeHRlbmRlZCwgT25lT3JQYWlyLCBPbmVPckJveCwgT25lT3JNYW55LCBDc3NTdHJpbmcsIENzc0ltYWdlLCBJQ3Vyc29yRnVuYywgSVVybEZ1bmMsIFRpbWluZ0Z1bmN0aW9uXHJcbn0gZnJvbSBcIi4vQ29yZVR5cGVzXCJcclxuaW1wb3J0IHtcclxuICAgIENzc051bWJlciwgQ3NzUG9zaXRpb24sIENzc1RpbWUsIENzc0xlbmd0aCwgQ3NzQW5nbGUsIENzc1BlcmNlbnQsIEhvcml6b250YWxQb3NpdGlvbktleXdvcmQsXHJcbiAgICBWZXJ0aWNhbFBvc2l0aW9uS2V5d29yZCwgSUZpdENvbnRlbnRQcm94eSwgSUxlbmd0aFByb3h5LCBDc3NBc3BlY3RSYXRpbywgSVJlY3RQcm94eSwgQ3NzTGVuZ3RoT3JBdXRvLFxyXG4gICAgQW5nbGVVbml0cywgRnJlcXVlbmN5VW5pdHMsIExlbmd0aFVuaXRzLCBQZXJjZW50VW5pdHMsIFJlc29sdXRpb25Vbml0cywgVGltZVVuaXRzXHJcbn0gZnJvbSBcIi4vTnVtZXJpY1R5cGVzXCJcclxuaW1wb3J0IHtDc3NDb2xvciwgQ3NzTm9uTnVtZXJpY0NvbG9yfSBmcm9tIFwiLi9Db2xvclR5cGVzXCI7XHJcbmltcG9ydCB7Rm9udFN0cmV0Y2hLZXl3b3JkLCBGb250U3R5bGUsIEZvbnRXZWlnaHQsIFN5c3RlbUZvbnR9IGZyb20gXCIuL0ZvbnRUeXBlc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgQmFzaWNTaGFwZSwgSU1pbk1heEZ1bmMsIElSZXBlYXRGdW5jLCBJR3JpZFNwYW5GdW5jLCBGaWx0ZXJGdW5jcyxcclxuICAgIElSYXlGdW5jLCBUcmFuc2Zvcm1GdW5jc1xyXG59IGZyb20gXCIuL1NoYXBlVHlwZXNcIjtcclxuaW1wb3J0IHtcclxuICAgIElWYXJSdWxlLCBJQW5pbWF0aW9uUnVsZSwgSUNvdW50ZXJSdWxlLCBJSURSdWxlLCBJR3JpZExpbmVSdWxlLCBJR3JpZEFyZWFSdWxlLCBJQ291bnRlclN0eWxlUnVsZVxyXG59IGZyb20gXCIuL1J1bGVUeXBlc1wiO1xyXG5pbXBvcnQge0lTdHlsZXNldH0gZnJvbSBcIi4vU3R5bGVzZXRzXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHJlcHJlc2VudGluZyBrZXl3b3JkcyB1c2VkIHRvIGRlZmluZSBhIHR5cGUgdXNlZCBpbiB0aGUgQ1NTIGBhdHRyKClgIGZ1bmN0aW9uLlxyXG4gKi9cclxuIGV4cG9ydCB0eXBlIEF0dHJUeXBlS2V5d29yZCA9IFwic3RyaW5nXCIgfCBcImNvbG9yXCIgfCBcInVybFwiIHwgXCJpbnRlZ2VyXCIgfCBcIm51bWJlclwiIHwgXCJsZW5ndGhcIiB8XHJcbiAgICBcImFuZ2xlXCIgfCBcInRpbWVcIiB8IFwiZnJlcXVlbmN5XCI7XHJcblxyXG4gLyoqXHJcbiAgKiBUeXBlIHJlcHJlc2VudGluZyBrZXl3b3JkcyB1c2VkIHRvIGRlZmluZSBhIHVuaXQgdXNlZCBpbiB0aGUgQ1NTIGBhdHRyKClgIGZ1bmN0aW9uLlxyXG4gICovXHJcbiBleHBvcnQgdHlwZSBBdHRyVW5pdEtleXdvcmQgPSBQZXJjZW50VW5pdHMgfCBMZW5ndGhVbml0cyB8IFRpbWVVbml0cyB8IEFuZ2xlVW5pdHMgfCBSZXNvbHV0aW9uVW5pdHMgfCBGcmVxdWVuY3lVbml0cztcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIENTUyBzdHlsZSBwcm9wZXJ0eSB0eXBlcy5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogS2V5d29yZHMgdXNlZCBmb3IgdGhlIFtbYWxpZ25Db250ZW50XV0gc3R5bGUgcHJvcGVydHkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBbGlnbkNvbnRlbnRLZXl3b3JkcyA9IFwibm9ybWFsXCIgfCBcInN0cmV0Y2hcIiB8IFwiY2VudGVyXCIgfCBcInN0YXJ0XCIgfCBcImVuZFwiIHwgXCJmbGV4LXN0YXJ0XCIgfCBcImZsZXgtZW5kXCIgfFxyXG4gICAgXCJiYXNlbGluZVwiIHwgXCJmaXJzdCBiYXNlbGluZVwiIHwgXCJsYXN0IGJhc2VsaW5lXCIgfCBcInNhZmUgY2VudGVyXCIgfCBcInVuc2FmZSBjZW50ZXJcIiB8XHJcbiAgICBcInNwYWNlLWJldHdlZW5cIiB8IFwic3BhY2UtYXJvdW5kXCIgfCBcInNwYWNlLWV2ZW5seVwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogS2V5d29yZHMgdXNlZCBmb3IgdGhlIFtbYWxpZ25JdGVtc11dIHN0eWxlIHByb3BlcnR5XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBbGlnbkl0ZW1zS2V5d29yZHMgPSBcIm5vcm1hbFwiIHwgXCJzdHJldGNoXCIgfCBcImNlbnRlclwiIHwgXCJzdGFydFwiIHwgXCJlbmRcIiB8IFwiZmxleC1zdGFydFwiIHwgXCJmbGV4LWVuZFwiIHxcclxuICAgIFwiYmFzZWxpbmVcIiB8IFwiZmlyc3QgYmFzZWxpbmVcIiB8IFwibGFzdCBiYXNlbGluZVwiIHwgXCJzYWZlIGNlbnRlclwiIHwgXCJ1bnNhZmUgY2VudGVyXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBLZXl3b3JkcyB1c2VkIGZvciB0aGUgW1thbGlnblNlbGZdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQWxpZ25TZWxmS2V5d29yZHMgPSBcImF1dG9cIiB8IFwibm9ybWFsXCIgfCBcInN0cmV0Y2hcIiB8IFwiY2VudGVyXCIgfCBcInN0YXJ0XCIgfCBcImVuZFwiIHwgXCJmbGV4LXN0YXJ0XCIgfCBcImZsZXgtZW5kXCIgfFxyXG4gICAgXCJzZWxmLXN0YXJ0XCIgfCBcInNlbGYtZW5kXCIgfCBcImJhc2VsaW5lXCIgfCBcImZpcnN0IGJhc2VsaW5lXCIgfCBcImxhc3QgYmFzZWxpbmVcIiB8XHJcbiAgICBcInNhZmUgY2VudGVyXCIgfCBcInVuc2FmZSBjZW50ZXJcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEtleXdvcmRzIHVzZWQgZm9yIHRoZSBbW2FsaWdubWVudEJhc2VsaW5lXV0gc3R5bGUgcHJvcGVydHlcclxuICovXHJcbmV4cG9ydCB0eXBlIEFsaWdubWVudEJhc2VsaW5lS2V5d29yZHMgPSBcImF1dG9cIiB8IFwiYmFzZWxpbmVcIiB8IFwiYmVmb3JlLWVkZ2VcIiB8IFwidGV4dC1iZWZvcmUtZWRnZVwiIHxcclxuICAgIFwibWlkZGxlXCIgfCBcImNlbnRyYWxcIiB8IFwiYWZ0ZXItZWRnZVwiIHwgXCJ0ZXh0LWFmdGVyLWVkZ2VcIiB8IFwiaWRlb2dyYXBoaWNcIiB8IFwiYWxwaGFiZXRpY1wiIHxcclxuICAgIFwiaGFuZ2luZ1wiIHwgXCJtYXRoZW1hdGljYWxcIiB8IFwidG9wXCIgfCBcImNlbnRlclwiIHwgXCJib3R0b21cIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHNpbmdsZSBhbmltYXRpb24uIFVzZWQgYnkgW1tBbmltYXRpb25fU3R5bGVUeXBlXV0gc3R5bGUgcHJvcGVydHkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBbmltYXRpb25fU2luZ2xlID1cclxuICAgIHtcclxuICAgICAgICBuYW1lPzogRXh0ZW5kZWQ8QW5pbWF0aW9uTmFtZV9TaW5nbGU+O1xyXG4gICAgICAgIGR1cmF0aW9uPzogRXh0ZW5kZWQ8Q3NzVGltZT47XHJcbiAgICAgICAgZnVuYz86IEV4dGVuZGVkPFRpbWluZ0Z1bmN0aW9uPjtcclxuICAgICAgICBkZWxheT86IEV4dGVuZGVkPENzc1RpbWU+O1xyXG4gICAgICAgIGNvdW50PzogRXh0ZW5kZWQ8QW5pbWF0aW9uSXRlcmF0aW9uQ291bnRfU2luZ2xlPjtcclxuICAgICAgICBkaXJlY3Rpb24/OiBFeHRlbmRlZDxBbmltYXRpb25EaXJlY3Rpb25LZXl3b3Jkcz47XHJcbiAgICAgICAgbW9kZT86IEV4dGVuZGVkPEFuaW1hdGlvbkZpbGxNb2RlS2V5d29yZHM+O1xyXG4gICAgICAgIHN0YXRlPzogRXh0ZW5kZWQ8QW5pbWF0aW9uUGxheVN0YXRlS2V5d29yZHM+O1xyXG4gICAgfTtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2FuaW1hdGlvbl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBbmltYXRpb25fU3R5bGVUeXBlID0gT25lT3JNYW55PHN0cmluZyB8IEFuaW1hdGlvbl9TaW5nbGU+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogS2V5d29yZHMgdXNlZCBmb3IgdGhlIFtbYW5pbWF0aW9uRGlyZWN0aW9uXV0gc3R5bGUgcHJvcGVydHkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBbmltYXRpb25EaXJlY3Rpb25LZXl3b3JkcyA9IFwibm9ybWFsXCIgfCBcInJldmVyc2VcIiB8IFwiYWx0ZXJuYXRlXCIgfCBcImFsdGVybmF0ZS1yZXZlcnNlXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIEtleXdvcmRzIHVzZWQgZm9yIHRoZSBbW2FuaW1hdGlvbkZpbGxNb2RlXV0gc3R5bGUgcHJvcGVydHlcclxuICovXHJcbmV4cG9ydCB0eXBlIEFuaW1hdGlvbkZpbGxNb2RlS2V5d29yZHMgPSBcIm5vbmVcIiB8IFwiZm9yd2FyZHNcIiB8IFwiYmFja3dhcmRzXCIgfCBcImJvdGhcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQW5pbWF0aW9uSXRlcmF0aW9uQ291bnRfU2luZ2xlID0gXCJpbmZpbml0ZVwiIHwgQ3NzTnVtYmVyO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1thbmltYXRpb25OYW1lXV0gc3R5bGUgcHJvcGVydHlcclxuICovXHJcbmV4cG9ydCB0eXBlIEFuaW1hdGlvbk5hbWVfU2luZ2xlID0gXCJub25lXCIgfCBzdHJpbmcgfCBJQW5pbWF0aW9uUnVsZTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEtleXdvcmRzIHVzZWQgZm9yIHRoZSBbW2FuaW1hdGlvblBsYXlTdGF0ZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBbmltYXRpb25QbGF5U3RhdGVLZXl3b3JkcyA9IFwicGF1c2VkXCIgfCBcInJ1bm5pbmdcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEtleXdvcmRzIHVzZWQgZm9yIHRoZSBbW2FwcGVhcmFuY2VdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZUtleXdvcmRzID0gXCJub25lXCIgfCBcImF1dG9cIiB8IFwidGV4dGZpZWxkXCIgfCBcIm1lbnVsaXN0LWJ1dHRvblwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1thc3BlY3RSYXRpb11dIHN0eWxlIHByb3BlcnR5XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBc3BlY3RSYXRpb19TdHlsZVR5cGUgPSBDc3NBc3BlY3RSYXRpbyB8IFwiYXV0b1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogS2V5d29yZHMgdXNlZCBmb3IgdGhlIFtbYmFja2ZhY2VWaXNpYmlsaXR5TW9kZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCYWNrZmFjZVZpc2liaWxpdHlNb2RlX1N0eWxlVHlwZSA9IFwidmlzaWJsZVwiIHwgXCJoaWRkZW5cIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHNpbmdsZSBiYWNrZ3JvdW5kIHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kX1NpbmdsZSA9IHN0cmluZyB8IENzc0NvbG9yIHwgQ3NzSW1hZ2UgfFxyXG4gICAge1xyXG4gICAgICAgIGNvbG9yPzogRXh0ZW5kZWQ8Q3NzQ29sb3I+LFxyXG4gICAgICAgIGltYWdlPzogRXh0ZW5kZWQ8Q3NzSW1hZ2U+LFxyXG4gICAgICAgIHBvc2l0aW9uPzogRXh0ZW5kZWQ8Q3NzUG9zaXRpb24+LFxyXG4gICAgICAgIHNpemU/OiBFeHRlbmRlZDxCYWNrZ3JvdW5kU2l6ZT4sXHJcbiAgICAgICAgcmVwZWF0PzogRXh0ZW5kZWQ8QmFja2dyb3VuZFJlcGVhdD4sXHJcbiAgICAgICAgYXR0YWNobWVudD86IEV4dGVuZGVkPEJhY2tncm91bmRBdHRhY2htZW50PixcclxuICAgICAgICBvcmlnaW4/OiBFeHRlbmRlZDxCYWNrZ3JvdW5kT3JpZ2luPixcclxuICAgICAgICBjbGlwPzogRXh0ZW5kZWQ8QmFja2dyb3VuZENsaXA+LFxyXG4gICAgfTtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2JhY2tncm91bmRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZF9TdHlsZVR5cGUgPSBPbmVPck1hbnk8QmFja2dyb3VuZF9TaW5nbGU+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogS2V5d29yZHMgdXNlZCBmb3IgdGhlIFtbYmFja2dyb3VuZEF0dGFjaG1lbnRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZEF0dGFjaG1lbnQgPSBcInNjcm9sbFwiIHwgXCJmaXhlZFwiIHwgXCJsb2NhbFwiO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYmFja2dyb3VuZEF0dGFjaG1lbnRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZEF0dGFjaG1lbnRfU3R5bGVUeXBlID0gT25lT3JNYW55PEJhY2tncm91bmRBdHRhY2htZW50PjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqS2V5d29yZHMgdXNlZCBmb3IgdGhlIFtbYmFja2dyb3VuZEJsZW5kTW9kZV1dIGFuZCBbW21peEJsZW5kTW9kZV1dIHByb3BlcnRpZXNcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEJsZW5kTW9kZUtleXdvcmRzID0gXCJub3JtYWxcIiB8IFwibXVsdGlwbHlcIiB8IFwic2NyZWVuXCIgfCBcIm92ZXJsYXlcIiB8IFwiZGFya2VuXCIgfFxyXG4gICAgXCJsaWdodGVuXCIgfCBcImNvbG9yLWRvZGdlXCIgfCBcImNvbG9yLWJ1cm5cIiB8IFwiaGFyZC1saWdodFwiIHwgXCJzb2Z0LWxpZ2h0XCIgfCBcImRpZmZlcmVuY2VcIiB8XHJcbiAgICBcImV4Y2x1c2lvblwiIHwgXCJodWVcIiB8IFwic2F0dXJhdGlvblwiIHwgXCJjb2xvclwiIHwgXCJsdW1pbm9zaXR5XCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBLZXl3b3JkcyB1c2VkIGZvciB0aGUgW1tiYWNrZ3JvdW5kQ2xpcF1dIHByb3BlcnR5XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kQ2xpcCA9IFwiYm9yZGVyLWJveFwiIHwgXCJwYWRkaW5nLWJveFwiIHwgXCJjb250ZW50LWJveFwiIHwgXCJ0ZXh0XCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tiYWNrZ3JvdW5kQ2xpcF1dIHN0eWxlIHByb3BlcnR5XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kQ2xpcF9TdHlsZVR5cGUgPSBPbmVPck1hbnk8QmFja2dyb3VuZENsaXA+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tiYWNrZ3JvdW5kSW1hZ2VdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZEltYWdlX1N0eWxlVHlwZSA9IFwibm9uZVwiIHwgT25lT3JNYW55PENzc0ltYWdlPjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEtleXdvcmRzIHVzZWQgZm9yIHRoZSBbW2JhY2tncm91bmRPcmlnaW5dXSBwcm9wZXJ0eVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZE9yaWdpbiA9IFwiYm9yZGVyLWJveFwiIHwgXCJwYWRkaW5nLWJveFwiIHwgXCJjb250ZW50LWJveFwiIHwgXCJ0ZXh0XCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tiYWNrZ3JvdW5kT3JpZ2luXV0gc3R5bGUgcHJvcGVydHlcclxuICovXHJcbmV4cG9ydCB0eXBlIEJhY2tncm91bmRPcmlnaW5fU3R5bGVUeXBlID0gT25lT3JNYW55PEJhY2tncm91bmRPcmlnaW4+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogS2V5d29yZHMgZm9yIHNpbmdsZSBiYWNrZ3JvdW5kIHJlcGVhdFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZFJlcGVhdEtleXdvcmRzID0gXCJyZXBlYXRcIiB8IFwic3BhY2VcIiB8IFwicm91bmRcIiB8IFwibm8tcmVwZWF0XCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3Igc2luZ2xlIGJhY2tncm91bmQgcmVwZWF0XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kUmVwZWF0ID0gXCJyZXBlYXQteFwiIHwgXCJyZXBlYXQteVwiIHwgT25lT3JQYWlyPEJhY2tncm91bmRSZXBlYXRLZXl3b3Jkcz47XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tiYWNrZ3JvdW5kUmVwZWF0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLXJlcGVhdFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZFJlcGVhdF9TdHlsZVR5cGUgPSBPbmVPck1hbnk8QmFja2dyb3VuZFJlcGVhdD47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBiYWNrZ3JvdW5kIHNpemVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEJhY2tncm91bmRTaXplID0gXCJjb3ZlclwiIHwgXCJjb250YWluXCIgfCBPbmVPclBhaXI8Q3NzTGVuZ3RoT3JBdXRvPjtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2JhY2tncm91bmRTaXplXV0gc3R5bGUgcHJvcGVydHkuIFRoZSBiYWNrZ3JvdW5kLXNpemUgc3R5bGUgY2FuIHNwZWNpZnkgb25lIG9yIG1vcmVcclxuICogY29tbWEtc2VwYXJhdGVkIHNpemVzLCB3aGVyZSBlYWNoIHNpemUgY2FuIGJlIGEga2V5d29yZCwgYSBsZW5ndGggb3IgdHdvIGxlbmd0aHMuIFdlIG1vZGVsXHJcbiAqIHRoaXMgc3RydWN0dXJlIHRoZSBmb2xsb3dpbmcgd2F5OlxyXG4gKiAtIGlmIHRoZSB2YWx1ZSBpcyBhIHN0cmluZyBvciBhIG51bWJlciwgdGhhdCdzIHRoZSBvbmx5IHZhbHVlO1xyXG4gKiAtIGlmIHRoZSB2YWx1ZSBpcyBhbiBhcnJheSwgdGhlbiBpdCBpcyBhIGxpc3Qgb2Ygc2V2ZXJhbCBzaXplcy4gRWFjaCBlbGVtZW50IGluIHRoaXMgYXJyYXkgaXNcclxuICogICBlaXRoZXIgYSBrZXl3b3JkIG9yIGEgbGVuZ3RoIG9yIGFuIGFycmF5IG9mIHR3byBlbGVtZW50cy5cclxuICogVGh1cyBbMTAwLDIwMF0gd2lsbCBiZSBpbnRlcnByZXRlZCBhcyBcIjEwMHB4LCAyMDBweFwiIGFuZCBub3QgXCIxMDBweCAyMDBweFwiOyB0aGF0IGlzLCBpdCB3aWxsXHJcbiAqIGRlZmluZSB0d28gc2l6ZXMgZWFjaCB3aXRoIGEgd2lkdGggaW5zdGVhZCBvZiBvbmUgc2l6ZSB3aXRoIGJvdGggd2lkdGggYW5kIGhlaWdodC4gSWYgeW91IG5lZWRcclxuICogdG8gc3BlY2lmeSBib3RoIHdpZHRoIGFuZCBoZWlnaHQgeW91IG11c3QgdXNlIGFycmF5IHdpdGhpbiBhcnJheSAtIGV2ZW4gZm9yIGEgc2luZ2xlIHNpemU6XHJcbiAqIFtbMTAwLDIwMF1dIHdsbCBiZSBpbnRlcnByZXRlZCBhcyBcIjEwMHB4IDIwMHB4XCIuXHJcbiAqXHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYmFja2dyb3VuZC1zaXplXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kU2l6ZV9TdHlsZVR5cGUgPSBPbmVPck1hbnk8QmFja2dyb3VuZFNpemU+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tiYXNlbGluZVNoaWZ0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYXNlbGluZS1zaGlmdFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmFzZWxpbmVTaGlmdF9TdHlsZVR5cGUgPSBcInN1YlwiIHwgXCJzdXBlclwiIHwgQ3NzTGVuZ3RoO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tib3JkZXJDb2xsYXBzZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWNvbGxhcHNlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCb3JkZXJDb2xhcHNlX1N0eWxlVHlwZSA9IFwiY29sbGFwc2VcIiB8IFwic2VwYXJhdGVcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYm9yZGVyQ29sb3JdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1jb2xvclxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQm9yZGVyQ29sb3JfU3R5bGVUeXBlID0gT25lT3JCb3g8Q3NzQ29sb3I+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgYm9yZGVyLWltYWdlIHN0eWxlIHByb3BlcnR5IGV4cHJlc3NlZCBhcyBhbiBvYmplY3QuXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCb3JkZXJJbWFnZV9PYmplY3QgPVxyXG4gICAge1xyXG4gICAgICAgIHNvdXJjZTogRXh0ZW5kZWQ8Qm9yZGVySW1hZ2VTb3VyY2VfU3R5bGVUeXBlPixcclxuICAgICAgICBzbGljZT86IEV4dGVuZGVkPEJvcmRlckltYWdlU2xpY2VfU3R5bGVUeXBlPixcclxuICAgICAgICB3aWR0aD86IEV4dGVuZGVkPEJvcmRlckltYWdlV2lkdGhfU3R5bGVUeXBlPixcclxuICAgICAgICBvdXRzZXQ/OiBFeHRlbmRlZDxCb3JkZXJJbWFnZU91dHNldF9TdHlsZVR5cGU+LFxyXG4gICAgICAgIHJlcGVhdD86IEV4dGVuZGVkPEJvcmRlckltYWdlUmVwZWF0X1N0eWxlVHlwZT4sXHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYm9yZGVySW1hZ2VdXSBzdHlsZSBwcm9wZXJ0eS5cclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItaW1hZ2VcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEJvcmRlckltYWdlX1N0eWxlVHlwZSA9IENzc0ltYWdlIHwgQm9yZGVySW1hZ2VfT2JqZWN0IHwgc3RyaW5nO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYm9yZGVySW1hZ2VPdXRzZXRdXSBzdHlsZSBwcm9wZXJ0eS4gSXQgaXMgQ3NzTnVtYmVyIGFuZCBub3QgQ3NzTGVuZ3RoIGJlY2F1c2VcclxuICogYm9yZGVyLWltYWdlLW91dHNldCBjYW4gYmUgc3BlY2lmaWVkIGFzIGEgdW5pdGxlc3MgbnVtYmVyLlxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbWFnZS1vdXRzZXRcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEJvcmRlckltYWdlT3V0c2V0X1N0eWxlVHlwZSA9IE9uZU9yQm94PENzc051bWJlciB8IElMZW5ndGhQcm94eT47XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgYm9yZGVyLWltYWdlLXJlcGVhdCBrZXl3b3Jkc1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQm9yZGVySW1hZ2VSZXBlYXRLZXl3b3JkID0gXCJzdHJldGNoXCIgfCBcInJlcGVhdFwiIHwgXCJyb3VuZFwiIHwgXCJzcGFjZVwiO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYm9yZGVySW1hZ2VSZXBlYXRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbWFnZS1yZXBlYXRcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEJvcmRlckltYWdlUmVwZWF0X1N0eWxlVHlwZSA9IE9uZU9yUGFpcjxCb3JkZXJJbWFnZVJlcGVhdEtleXdvcmQ+O1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYm9yZGVySW1hZ2VTbGljZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWltYWdlLXNsaWNlXHJcbiAqXHJcbiAqIE5vdGU6IG51bWVyaWMgdmFsdWVzIGFyZSB0cmVhdGVkIGFzIGlzIC0gd2l0aG91dCBhcHBlbmRpbmcgdGhlIHBlcmNlbnQgc2lnbiB0byB0aGVtLlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQm9yZGVySW1hZ2VTbGljZV9TdHlsZVR5cGUgPSBPbmVPckJveDxDc3NQZXJjZW50IHwgXCJmaWxsXCI+IHxcclxuICAgIFtFeHRlbmRlZDxDc3NQZXJjZW50PiwgRXh0ZW5kZWQ8Q3NzUGVyY2VudD4sIEV4dGVuZGVkPENzc1BlcmNlbnQ+LCBFeHRlbmRlZDxDc3NQZXJjZW50PiwgXCJmaWxsXCJdO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYm9yZGVySW1hZ2VTb3VyY2VdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbWFnZS1zb3VyY2VcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEJvcmRlckltYWdlU291cmNlX1N0eWxlVHlwZSA9IENzc0ltYWdlIHwgXCJub25lXCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tib3JkZXJJbWFnZVdpZHRoXV0gc3R5bGUgcHJvcGVydHkuIEl0IGlzIENzc051bWJlciBhbmQgbm90IENzc0xlbmd0aCBiZWNhdXNlXHJcbiAqIGJvcmRlci1pbWFnZS13aWR0aCBjYW4gYmUgc3BlY2lmaWVkIGFzIGEgdW5pdGxlc3MgbnVtYmVyLlxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbWFnZS13aWR0aFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQm9yZGVySW1hZ2VXaWR0aF9TdHlsZVR5cGUgPSBPbmVPckJveDxDc3NOdW1iZXIgfCBJTGVuZ3RoUHJveHkgfCBcImF1dG9cIj47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2JvcmRlclNwYWNpbmddXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1zcGFjaW5nXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCb3JkZXJTcGFjaW5nX1N0eWxlVHlwZSA9IE9uZU9yUGFpcjxDc3NMZW5ndGg+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3Igc2luZ2xlIGJvcmRlciBzaWRlIHN0eWxlIHByb3BlcnR5XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCb3JkZXJTdHlsZSA9IFwibm9uZVwiIHwgXCJoaWRkZW5cIiB8IFwiZG90dGVkXCIgfCBcImRhc2hlZFwiIHwgXCJzb2xpZFwiIHwgXCJkb3VibGVcIiB8XHJcbiAgICBcImdyb292ZVwiIHwgXCJyaWRnZVwiIHwgXCJpbnNldFwiIHwgXCJvdXRzZXRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbYm9yZGVyU3R5bGVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1zdHlsZVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQm9yZGVyU3R5bGVfU3R5bGVUeXBlID0gT25lT3JCb3g8Qm9yZGVyU3R5bGU+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tib3JkZXJdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlclxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQm9yZGVyX1N0eWxlVHlwZSA9IExpbmVXaWR0aCB8IEJvcmRlclN0eWxlIHwgQ3NzTm9uTnVtZXJpY0NvbG9yIHxcclxuICAgIFtFeHRlbmRlZDxMaW5lV2lkdGg+LCBFeHRlbmRlZDxCb3JkZXJTdHlsZT4sIEV4dGVuZGVkPENzc0NvbG9yPj9dIHxcclxuICAgIFtFeHRlbmRlZDxMaW5lV2lkdGg+LCBFeHRlbmRlZDxDc3NDb2xvcj4sIEV4dGVuZGVkPEJvcmRlclN0eWxlPj9dIHxcclxuICAgIFtFeHRlbmRlZDxCb3JkZXJTdHlsZT4sIEV4dGVuZGVkPExpbmVXaWR0aD4sIEV4dGVuZGVkPENzc0NvbG9yPj9dIHxcclxuICAgIFtFeHRlbmRlZDxCb3JkZXJTdHlsZT4sIEV4dGVuZGVkPENzc0NvbG9yPiwgRXh0ZW5kZWQ8TGluZVdpZHRoPj9dIHxcclxuICAgIFtFeHRlbmRlZDxDc3NOb25OdW1lcmljQ29sb3I+LCBFeHRlbmRlZDxMaW5lV2lkdGg+LCBFeHRlbmRlZDxCb3JkZXJTdHlsZT4/XSB8XHJcbiAgICBbRXh0ZW5kZWQ8Q3NzTm9uTnVtZXJpY0NvbG9yPiwgRXh0ZW5kZWQ8Qm9yZGVyU3R5bGU+LCBFeHRlbmRlZDxMaW5lV2lkdGg+P107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHVzZWQgZm9yIHNldmVyYWwgc3R5bGUgcHJvcGVydGllcyB0aGF0IGFsbG93IGRlZmluaW5nIGxpbmUgd2lkdGggYXMgYSBgPGxlbmd0aD5gIENTU1xyXG4gKiB0eXBlIGFzIHdlbGwgYXMga2V5d29yZHMgc3VjaCBhcyBgdGhpbmAgYW5kIGB0aGlja2AuIEZvciBleGFtcGxlLCBzZWUgdGhlIFtbYm9yZGVyV2lkdGhdXVxyXG4gKiBwcm9wZXJ0eS5cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIExpbmVXaWR0aCA9IFwidGhpblwiIHwgXCJtZWRpdW1cIiB8IFwidGhpY2tcIiB8IENzc0xlbmd0aDtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2JvcmRlcldpZHRoXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItd2lkdGhcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEJvcmRlcldpZHRoX1N0eWxlVHlwZSA9IE9uZU9yQm94PExpbmVXaWR0aD47XHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tib3hEZWNvcmF0aW9uQnJlYWtdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JveC1kZWNvcmF0aW9uLWJyZWFrXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCb3hEZWNvcmF0aW9uQnJlYWtfU3R5bGVUeXBlID0gXCJzbGljZVwiIHwgXCJjbG9uZVwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3Igc2luZ2xlIGJveCBzaGFkb3cuXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCb3hTaGFkb3dfU2luZ2xlID0gXCJub25lXCIgfFxyXG4gICAge1xyXG4gICAgICAgIHg6IEV4dGVuZGVkPENzc0xlbmd0aD4sXHJcbiAgICAgICAgeTogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPixcclxuICAgICAgICBibHVyPzogRXh0ZW5kZWQ8Q3NzTGVuZ3RoPixcclxuICAgICAgICBzcHJlYWQ/OiBFeHRlbmRlZDxDc3NMZW5ndGg+LFxyXG4gICAgICAgIGNvbG9yPzogRXh0ZW5kZWQ8Q3NzQ29sb3I+LFxyXG4gICAgICAgIGluc2V0PzogRXh0ZW5kZWQ8Ym9vbGVhbj5cclxuICAgIH07XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tib3hTaGFkb3ddXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JveC1zaGFkb3dcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEJveFNoYWRvd19TdHlsZVR5cGUgPSBPbmVPck1hbnk8c3RyaW5nIHwgQm94U2hhZG93X1NpbmdsZT47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2JveFNpemluZ11dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm94LXNpemluZ1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQm94U2l6aW5nX1N0eWxlVHlwZSA9IFwiY29udGVudC1ib3hcIiB8IFwiYm9yZGVyLWJveFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1ticmVha0FmdGVyXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9icmVhay1hZnRlclxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQnJlYWtBZnRlcl9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwiYXZvaWRcIiB8IFwiYWx3YXlzXCIgfCBcImFsbFwiIHwgXCJhdm9pZC1wYWdlXCIgfCBcInBhZ2VcIiB8XHJcbiAgICBcImxlZnRcIiB8IFwicmlnaHRcIiB8IFwicmVjdG9cIiB8IFwidmVyc29cIiB8IFwiYXZvaWQtY29sdW1uXCIgfCBcImNvbHVtblwiIHxcclxuICAgIFwiYXZvaWQtcmVnaW9uXCIgfCBcInJlZ2lvblwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1ticmVha0JlZm9yZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYnJlYWstYmVmb3JlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCcmVha0JlZm9yZV9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwiYXZvaWRcIiB8IFwiYWx3YXlzXCIgfCBcImFsbFwiIHwgXCJhdm9pZC1wYWdlXCIgfCBcInBhZ2VcIiB8XHJcbiAgICBcImxlZnRcIiB8IFwicmlnaHRcIiB8IFwicmVjdG9cIiB8IFwidmVyc29cIiB8IFwiYXZvaWQtY29sdW1uXCIgfCBcImNvbHVtblwiIHxcclxuICAgIFwiYXZvaWQtcmVnaW9uXCIgfCBcInJlZ2lvblwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1ticmVha0luc2lkZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYnJlYWstaW5zaWRlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBCcmVha0luc2lkZV9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwiYXZvaWRcIiB8IFwiYXZvaWQtcGFnZVwiIHwgXCJhdm9pZC1jb2x1bW5cIiB8IFwiYXZvaWQtcmVnaW9uXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2NhcHRpb25TaWRlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jYXB0aW9uLXNpZGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENhcHRpb25TaWRlX1N0eWxlVHlwZSA9IFwidG9wXCIgfCBcImJvdHRvbVwiIHwgXCJibG9jay1zdGFydFwiIHwgXCJibG9jay1lbmRcIiB8IFwiaW5saW5lLXN0YXJ0XCIgfCBcImlubGluZS1lbmRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbY2FyZXRDb2xvcl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY2FyZXQtY29sb3JcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENhcmV0Q29sb3JfU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBDc3NDb2xvcjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbY2xlYXJdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NsZWFyXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDbGVhcl9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiIHwgXCJib3RoXCIgfCBcImlubGluZS1zdGFydFwiIHwgXCJpbmxpbmUtZW5kXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW0lTdHlsZXNldC5jbGlwfGNsaXBdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NsaXBcclxuICpcclxuICogQGRlcHJlY2F0ZWQgVGhlIENTUyBgY2xpcGAgcHJvcGVydHkgYW5kIGByZWN0KClgIGZ1bmN0aW9uIGFyZSBkZXByZWNhdGVkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2xpcF9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IElSZWN0UHJveHk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIHJlcHJlc2VudGluZyB0aGUgYm91bmRhcmllcyBvZiBhIGJveFxyXG4gKlxyXG4gKi9cclxuIGV4cG9ydCB0eXBlIEdlb21ldHJ5Qm94S2V5d29yZCA9IFwibWFyZ2luLWJveFwiIHwgXCJib3JkZXItYm94XCIgfCBcInBhZGRpbmctYm94XCIgfCBcImNvbnRlbnQtYm94XCIgfFxyXG4gICAgXCJmaWxsLWJveFwiIHwgXCJzdHJva2UtYm94XCIgfCBcInZpZXctYm94XCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjbGlwUGF0aF1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY2xpcC1wYXRcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENsaXBQYXRoX1N0eWxlVHlwZSA9IFwibm9uZVwiIHwgSVVybEZ1bmMgfCBCYXNpY1NoYXBlIHwgR2VvbWV0cnlCb3hLZXl3b3JkIHxcclxuICAgIFtHZW9tZXRyeUJveEtleXdvcmQsIEJhc2ljU2hhcGVdO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjbGlwUnVsZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY2xpcC1ydWxlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDbGlwUnVsZV9TdHlsZVR5cGUgPSBcIm5vbnplcm9cIiB8IFwiZXZlbm9kZFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjb2xvckFkanVzdF1dIGFuZCBjb2xvci1hZGp1c3Qgc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2xvci1hZGp1c3RcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENvbG9yQWRqdXN0X1N0eWxlVHlwZSA9IFwiZWNvbm9teVwiIHwgXCJleGFjdFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjb2xvckludGVycG9sYXRpb25dXSBhbmQgY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIHN0eWxlIHByb3BlcnRpZXNcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2xvci1pbnRlcnBvbGF0aW9uXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb2xvckludGVycG9sYXRpb25fU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBcInNSR0JcIiB8IFwibGluZWFyUkdCXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2NvbG9yU2NoZW1lXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2xvci1jb3VudFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29sb3JTY2hlbWVfU3R5bGVUeXBlID0gXCJub3JtYWxcIiB8IE9uZU9yTWFueTxcImxpZ2h0XCIgfCBcImRhcmtcIiB8IHN0cmluZz47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2NvbHVtbkNvdW50XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2x1bW4tY291bnRcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENvbHVtbkNvdW50X1N0eWxlVHlwZSA9IFwiYXV0b1wiIHwgQ3NzTnVtYmVyO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjb2x1bW5GaWxsXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2x1bW4tZmlsbFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29sdW1uRmlsbF9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwiYmFsYW5jZVwiIHwgXCJiYWxhbmNlLWFsbFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjb2x1bW5HYXBdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbHVtbi1nYXBcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENvbHVtbkdhcF9TdHlsZVR5cGUgPSBcIm5vcm1hbFwiIHwgQ3NzTGVuZ3RoO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjb2x1bW5TcGFuXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2x1bW4tc3BhblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29sdW1uU3Bhbl9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IFwiYWxsXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2NvbHVtbnNdXSBzdHlsZSBwcm9wZXJ0eS4gVGhlIHZhbHVlIGNhbiBiZSBwcm92aWRlZCBpbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBmb3JtcyBhbmRcclxuICogYW5kIHdpbGwgYmUgY29udmVydGVkIHRvIHN0cmluZyBhcyBmb2xsb3dzOlxyXG4gKlxyXG4gKiAtIG51bWJlcjogd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSB1bml0bGVzcyBudW1iZXIgLSBjb3VudCBvZiBjb2x1bW5zLlxyXG4gKiAtIElMZW5ndGhQcm94eSAoZS5nLiBweCg4KSk6IGNvbnZlcnRlZCB0byBhIG51bWJlciB3aXRoIHRoZSBwcm9wZXIgbGVuZ3RoIHVuaXRzLlxyXG4gKiAtIHR3byB2YXJpYW50cyBvZiB0d28gZWxlbWVudCBhcnJheXM6IG9uZSBvZiB0aGUgZWxlbWVudHMgd2lsbCBiZSB0cmVhdGVkIGFzIGEgbnVtYmVyIG9mIGNvbHVtbnNcclxuICogICB3aGlsZSBhbm90aGVyIGFzIHRoZSBjb2x1bW4gd2lkdGguXHJcbiAqXHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sdW1uc1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29sdW1uc19TdHlsZVR5cGUgPSBcImF1dG9cIiB8IENzc051bWJlciB8IEV4Y2x1ZGU8Q3NzTGVuZ3RoLG51bWJlcj4gfFxyXG4gICAgW1wiYXV0b1wiIHwgRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgXCJhdXRvXCIgfCBFeHRlbmRlZDxFeGNsdWRlPENzc0xlbmd0aCxudW1iZXI+Pl0gfFxyXG4gICAgW1wiYXV0b1wiIHwgRXh0ZW5kZWQ8RXhjbHVkZTxDc3NMZW5ndGgsbnVtYmVyPj4sIFwiYXV0b1wiIHwgRXh0ZW5kZWQ8Q3NzTnVtYmVyPl07XHJcbi8vIE5vdGUgdGhhdCBubyBzcGVjaWFsIGNvdmVyc2lvbiBmdW5jdGlvbiBpcyByZXF1aXJlZCBmb3IgdGhpcyBwcm9wZXJ0eSBiZWNhdXNlIHRoZSBudW1iZXIgdHlwZSB3aWxsXHJcbi8vIGFsd2F5cyBiZSBjb252ZXJ0ZWQgdG8gYSB1bml0bGVzcyBudW1iZXJcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEtleXdvcmRzIHRoYXQgY2FuIGJlIGNvbWJpbmVkIGluIHRoZSBbW0lTdHlsZXNldC5jb250YWlufGNvbnRhaW5dXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbnRhaW5cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENvbnRhaW5BdG9tS2V5d29yZCA9IFwic2l6ZVwiIHwgXCJsYXlvdXRcIiB8IFwic3R5bGVcIiB8IFwicGFpbnRcIjtcclxuXHJcbi8qKlxyXG4gKiBLZXl3b3JkcyB0aGF0IGNhbiBiZSBvbmx5IHVzZWQgYXMgYSBzb2xlIHZhbHVlIG9mIHRoZSBbW0lTdHlsZXNldC5jb250YWlufGNvbnRhaW5dXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbnRhaW5cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENvbnRhaW5Tb2xlS2V5d29yZCA9IFwibm9uZVwiIHwgXCJzdHJpY3RcIiB8IFwiY29udGVudFwiO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbSVN0eWxlc2V0LmNvbnRhaW58Y29udGFpbl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29udGFpblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29udGFpbl9TdHlsZVR5cGUgPSBDb250YWluU29sZUtleXdvcmQgfCBPbmVPck1hbnk8Q29udGFpbkF0b21LZXl3b3JkPltdO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjb250ZW50XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb250ZW50XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250ZW50SXRlbSA9IFwib3Blbi1xdW90ZVwiIHwgXCJjbG9zZS1xdW90ZVwiIHwgXCJuby1vcGVuLXF1b3RlXCIgfCBcIm5vLWNsb3NlLXF1b3RlXCIgfFxyXG4gICAgQ3NzU3RyaW5nIHwgQ3NzSW1hZ2U7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjb250ZW50XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb250ZW50XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250ZW50X1N0eWxlVHlwZSA9IHN0cmluZyB8IFwibm9uZVwiIHwgXCJub3JtYWxcIiB8IE9uZU9yTWFueTxDb250ZW50SXRlbT47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2NvbnRlbnRWaXNpYmlsaXR5XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb250ZW50LXZpc2liaWxpdHlcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENvbnRlbnRWaXNpYmlsaXR5X1N0eWxlVHlwZSA9IFwiYXV0b1wiIHwgXCJ2aXNpYmxlXCIgfCBcImhpZGRlblwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tjb3VudGVySW5jcmVtZW50XV0sIFtbY291bnRlclJlc2V0XV0gYW5kIFtbY291bnRlclNldF1dIHN0eWxlIHByb3BlcnRpZXNcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIENzc0NvdW50ZXIgPSBcIm5vbmVcIiB8IE9uZU9yTWFueTxJQ291bnRlclJ1bGUgfCBzdHJpbmcgfCBbSUNvdW50ZXJSdWxlIHwgc3RyaW5nLCBFeHRlbmRlZDxudW1iZXI+XT47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBjdXJzb3IgcHJlLWRlZmluZWQgbmFtZXNcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEN1cnNvcktleXdvcmQgPSBcImF1dG9cIiB8IFwiZGVmYXVsdFwiIHwgXCJub25lXCIgfCBcImNvbnRleHQtbWVudVwiIHwgXCJoZWxwXCIgfCBcInBvaW50ZXJcIiB8IFwicHJvZ3Jlc3NcIiB8XHJcbiAgICBcIndhaXRcIiB8IFwiY2VsbFwiIHwgXCJjcm9zc2hhaXJcIiB8IFwidGV4dFwiIHwgXCJ2ZXJ0aWNhbC10ZXh0XCIgfCBcImFsaWFzXCIgfCBcImNvcHlcIiB8IFwibW92ZVwiIHxcclxuICAgIFwibm8tZHJvcFwiIHwgXCJub3QtYWxsb3dlZFwiIHwgXCJlLXJlc2l6ZVwiIHwgXCJuLXJlc2l6ZVwiIHwgXCJuZS1yZXNpemVcIiB8IFwibnctcmVzaXplXCIgfFxyXG4gICAgXCJzLXJlc2l6ZVwiIHwgXCJzZS1yZXNpemVcIiB8IFwic3ctcmVzaXplXCIgfCBcInctcmVzaXplXCIgfCBcImV3LXJlc2l6ZVwiIHwgXCJucy1yZXNpemVcIiB8XHJcbiAgICBcIm5lc3ctcmVzaXplXCIgfCBcIm53c2UtcmVzaXplXCIgfCBcImNvbC1yZXNpemVcIiB8IFwicm93LXJlc2l6ZVwiIHwgXCJhbGwtc2Nyb2xsXCIgfCBcInpvb20taW5cIiB8XHJcbiAgICBcInpvb20tb3V0XCIgfCBcImdyYWJcIiB8IFwiZ3JhYmJpbmdcIjtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW0lTdHlsZXNldC5jdXJzb3J8Y3Vyc29yXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jdXJzb3JcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEN1cnNvcl9TdHlsZVR5cGUgPSBPbmVPck1hbnk8Q3Vyc29yS2V5d29yZCB8IElVcmxGdW5jIHwgSUN1cnNvckZ1bmM+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tkaXNwbGF5XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9kaXNwbGF5XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEaXNwbGF5X1N0eWxlVHlwZSA9IFwiYmxvY2tcIiB8IFwiaW5saW5lXCIgfCBcInJ1bi1pblwiIHwgXCJjb250ZW50c1wiIHwgXCJub25lXCIgfFxyXG4gICAgXCJpbmxpbmUtYmxvY2tcIiB8IFwiaW5saW5lLWxpc3QtaXRlbVwiIHwgXCJpbmxpbmUtdGFibGVcIiB8IFwiaW5saW5lLWZsZXhcIiB8IFwiaW5saW5lLWdyaWRcIiB8XHJcbiAgICBcImZsb3dcIiB8IFwiZmxvdy1yb290XCIgfCBcInRhYmxlXCIgfCBcImZsZXhcIiB8IFwiZ3JpZFwiIHwgXCJydWJ5XCIgfFxyXG4gICAgXCJ0YWJsZS1yb3ctZ3JvdXBcIiB8IFwidGFibGUtaGVhZGVyLWdyb3VwXCIgfCBcInRhYmxlLWZvb3Rlci1ncm91cFwiIHwgXCJ0YWJsZS1yb3dcIiB8IFwidGFibGUtY2VsbFwiIHxcclxuICAgICAgICBcInRhYmxlLWNvbHVtbi1ncm91cFwiIHwgXCJ0YWJsZS1jb2x1bW5cIiB8IFwidGFibGUtY2FwdGlvblwiIHwgXCJydWJ5LWJhc2VcIiB8IFwicnVieS10ZXh0XCIgfFxyXG4gICAgICAgIFwicnVieS1iYXNlLWNvbnRhaW5lclwiIHwgXCJydWJ5LXRleHQtY29udGFpbmVyXCIgfFxyXG4gICAgXCJsaXN0LWl0ZW1cIiB8IFwibGlzdC1pdGVtIGJsb2NrXCIgfCBcImxpc3QtaXRlbSBpbmxpbmVcIiB8IFwibGlzdC1pdGVtIGZsb3dcIiB8IFwibGlzdC1pdGVtIGZsb3ctcm9vdFwiIHxcclxuICAgICAgICBcImxpc3QtaXRlbSBibG9jayBmbG93XCIgfCBcImxpc3QtaXRlbSBibG9jayBmbG93LXJvb3RcIiB8IFwiZmxvdyBsaXN0LWl0ZW0gYmxvY2tcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbZG9taW5hbnRCYXNlbGluZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZG9taW5hbnQtYmFzZWxpbmVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIERvbWluYW50QmFzZWxpbmVfU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBcInRleHQtYm90dG9tXCIgfCBcImFscGhhYmV0aWNcIiB8IFwiaWRlb2dyYXBoaWNcIiB8IFwibWlkZGxlXCIgfFxyXG4gICAgXCJjZW50cmFsXCIgfCBcIm1hdGhlbWF0aWNhbFwiIHwgXCJoYW5naW5nXCIgfCBcInRleHQtdG9wXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2VtcHR5Q2VsbHNdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2VtcHR5LWNlbGxzXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFbXB0eUNlbGxzX1N0eWxlVHlwZSA9IFwic2hvd1wiIHwgXCJoaWRlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2ZpbHRlcl1dIGFuZCBbW2JhY2tkcm9wRmlsdGVyXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9maWx0ZXJcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEZpbHRlcl9TdHlsZVR5cGUgPSBPbmVPck1hbnk8SVVybEZ1bmMgfCBGaWx0ZXJGdW5jcz47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2ZsZXhdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZsZXhcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEZsZXhfU3R5bGVUeXBlID0gRmxleEJhc2lzX1N0eWxlVHlwZSB8XHJcbiAgICBbRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgRXh0ZW5kZWQ8RmxleEJhc2lzX1N0eWxlVHlwZT5dO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tmbGV4QmFzaXNdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZsZXgtYmFzaXNcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEZsZXhCYXNpc19TdHlsZVR5cGUgPSBDc3NMZW5ndGhPckF1dG8gfCBcImNvbnRlbnRcIiB8IFwiZmlsbFwiIHwgXCJtYXgtY29udGVudFwiIHwgXCJtaW4tY29udGVudFwiIHwgXCJmaXQtY29udGVudFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tmbGV4RGlyZWN0aW9uXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4LWRpcmVjdGlvblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRmxleERpcmVjdGlvbl9TdHlsZVR5cGUgPSBcInJvd1wiIHwgXCJyb3ctcmV2ZXJzZVwiIHwgXCJjb2x1bW5cIiB8IFwiY29sdW1uLXJldmVyc2VcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbZmxleEZsb3ddXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZsZXgtZmxvd1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRmxleEZsb3dfU3R5bGVUeXBlID0gRmxleERpcmVjdGlvbl9TdHlsZVR5cGUgfCBGbGV4V3JhcF9TdHlsZVR5cGUgfFxyXG4gICAgW0V4dGVuZGVkPEZsZXhEaXJlY3Rpb25fU3R5bGVUeXBlPiwgRXh0ZW5kZWQ8RmxleFdyYXBfU3R5bGVUeXBlPl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2ZsZXhXcmFwXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4LXdyYXBcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEZsZXhXcmFwX1N0eWxlVHlwZSA9IFwibm93cmFwXCIgfCBcIndyYXBcIiB8IFwid3JhcC1yZXZlcnNlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2Zsb2F0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbG9hdFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRmxvYXRfU3R5bGVUeXBlID0gXCJsZWZ0XCIgfCBcInJpZ2h0XCIgfCBcIm5vbmVcIiB8IFwiaW5saW5lLXN0YXJ0XCIgfCBcImlubGluZS1lbmRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbZm9udF1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRm9udF9TdHlsZVR5cGUgPSBTeXN0ZW1Gb250IHwgW3N0cmluZywgQ3NzTGVuZ3RoXSB8IFtDc3NMZW5ndGgsIHN0cmluZ10gfFxyXG4gICAge1xyXG4gICAgICAgIGZhbWlseTogRXh0ZW5kZWQ8c3RyaW5nPjtcclxuICAgICAgICBzaXplOiBFeHRlbmRlZDxDc3NMZW5ndGg+O1xyXG4gICAgICAgIHN0eWxlPzogRXh0ZW5kZWQ8Rm9udFN0eWxlPjtcclxuICAgICAgICB2YXJpYW50PzogRXh0ZW5kZWQ8c3RyaW5nPjtcclxuICAgICAgICB3ZWlnaHQ/OiBFeHRlbmRlZDxGb250V2VpZ2h0X1N0eWxlVHlwZT47XHJcbiAgICAgICAgc3RyZXRjaD86IEV4dGVuZGVkPEZvbnRTdHJldGNoS2V5d29yZD47XHJcbiAgICAgICAgbGluZUhlaWdodD86IEV4dGVuZGVkPENzc051bWJlcj5cclxuICAgIH07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2ZvbnRXZWlnaHRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtd2VpZ2h0XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBGb250V2VpZ2h0X1N0eWxlVHlwZSA9IEZvbnRXZWlnaHQgfCBcImJvbGRlclwiIHwgXCJsaWdodGVyXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2ZvcmNlZENvbG9yQWRqdXN0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb3JjZWQtY29sb3ItYWRqdXN0XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBGb3JjZWRDb2xvckFkanVzdF9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwibm9uZVwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tnYXBdXSBvciBbW2dyaWRHYXBdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2dhcFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR2FwX1N0eWxlVHlwZSA9IFJvd0dhcF9TdHlsZVR5cGUgfCBbUm93R2FwX1N0eWxlVHlwZSwgQ29sdW1uR2FwX1N0eWxlVHlwZV07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2dyaWRBdXRvQ29sdW1uc11dIGFuZCBbW2dyaWRBdXRvUm93c11dIHN0eWxlIHByb3BlcnRpZXNcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLWF1dG8tY29sdW1uc1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR3JpZEF1dG9BeGlzX1N0eWxlVHlwZSA9IE9uZU9yTWFueTxHcmlkVHJhY2tTaXplPjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbZ3JpZEF1dG9GbG93XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLWF1dG8tZmxvd1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR3JpZEF1dG9GbG93X1N0eWxlVHlwZSA9IFwicm93XCIgfCBcImNvbHVtblwiIHwgXCJkZW5zZVwiIHwgXCJyb3cgZGVuc2VcIiB8IFwiY29sdW1uIGRlbnNlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzcGVjaWZ5aW5nIGVpdGhlciBudW1iZXIgb2YgZ3JpZCBsaW5lcyBvciBuYW1lIG9mIGdyaWQgbGluZSBvciBhcmVhLiBUaGlzIHR5cGUgaXMgdXNlZFxyXG4gKiB3aGVuIGRlZmluaW5nIGdyaWQtY29sdW1uLXN0YXJ0L2VuZCBhbmQgZ3JpZC1yb3ctc3RhcnQvZW5kIHN0eWxlIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBHcmlkTGluZUNvdW50T3JOYW1lID0gQ3NzTnVtYmVyIHwgSUdyaWRBcmVhUnVsZSB8IElHcmlkTGluZVJ1bGU7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tncmlkQ29sdW1uU3RhcnRdXSwgW1tncmlkQ29sdW1uRW5kXV0sIFtbZ3JpZFJvd1N0YXJ0XV0gYW5kIFtbZ3JpZFJvd0VuZF1dIHN0eWxlIHByb3BlcnRpZXNcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLWNvbHVtbi1zdGFydFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR3JpZEF4aXNTaWRlX1N0eWxlVHlwZSA9IFwiYXV0b1wiIHwgR3JpZExpbmVDb3VudE9yTmFtZSB8IElHcmlkU3BhbkZ1bmMgfFxyXG4gICAgW0V4dGVuZGVkPENzc051bWJlcj4sIElHcmlkQXJlYVJ1bGUgfCBJR3JpZExpbmVSdWxlXTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbZ3JpZENvbHVtbl1dIGFuZCBbW2dyaWRSb3ddXSBzdHlsZSBwcm9wZXJ0aWVzXHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC1jb2x1bW5cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEdyaWRBeGlzX1N0eWxlVHlwZSA9IE9uZU9yUGFpcjxHcmlkQXhpc1NpZGVfU3R5bGVUeXBlPjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbZ3JpZEFyZWFdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2dyaWQtYXJlYVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR3JpZEFyZWFfU3R5bGVUeXBlID0gT25lT3JCb3g8R3JpZEF4aXNTaWRlX1N0eWxlVHlwZT47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBkZWZpbmluZyBhIHNpbmdsZSBncmlkIGFyZWEgcG9zaXRpb24uIFRoZSBudW1iZXJzIGFyZSAxLWJhc2VkIGluZGljZXMgb2YgdGhlIGxpbmVzIGluXHJcbiAqIHRoZSBmb2xsb3dpbmcgc2VxdWVuY2U6IGJsb2NrIHN0YXJ0LCBpbmxpbmUgc3RhcnQsIGJsb2NrIGVuZCwgaW5saW5lIGVuZC5cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEdyaWRUZW1wbGF0ZUFyZWFEZWZpbml0aW9uID0gW0lHcmlkQXJlYVJ1bGUgfCBFeHRlbmRlZDxzdHJpbmc+LFxyXG4gICAgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2dyaWRUZW1wbGF0ZUFyZWFzXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLXRlbXBsYXRlLWFyZWFzXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBHcmlkVGVtcGxhdGVBcmVhc19TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IHN0cmluZ1tdIHwgR3JpZFRlbXBsYXRlQXJlYURlZmluaXRpb25bXTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbZ3JpZFRlbXBsYXRlQ29sdW1uc11dIGFuZCBbW2dyaWRUZW1wbGF0ZVJvd3NdXSBzdHlsZSBwcm9wZXJ0aWVzXHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBHcmlkVGVtcGxhdGVBeGlzX1N0eWxlVHlwZSA9IFwibm9uZVwiIHwgT25lT3JNYW55PEdyaWRUcmFjaz4gfCBcInN1YmdyaWRcIjtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBhIHNpbmdsZSB0cmFjayBlbGVtZW50IG9mIGdyaWQgdGVtcGxhdGUgYXhpc1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR3JpZFRyYWNrID0gR3JpZFRyYWNrU2l6ZSB8IEdyaWRUcmFja0xpbmU7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgYSBzaW5nbGUgdGVtcGxhdGUgZWxlbWVudCBkZWZpbmluZyBuYW1lIG9yIG5hbWVzIGZvciBhIGdyaWQgbGluZSBpbiBncmlkIHRlbXBsYXRlLlxyXG4gKiBUaGlzIGlzIGFsd2F5cyBhbiBhcnJheSAtIGV2ZW4gaWYgYSBzaW5nbGUgbmFtZSBpcyBnaXZlbi5cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEdyaWRUcmFja0xpbmUgPSAoSUdyaWRMaW5lUnVsZSB8IEV4dGVuZGVkPHN0cmluZz4pW107XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgYSBzaW5nbGUgdGVtcGxhdGUgZWxlbWVudCBkZWZpbmluZyB0cmFjayBzaXplIGluIGdyaWQgdGVtcGxhdGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEdyaWRUcmFja1NpemUgPSBDc3NMZW5ndGhPckF1dG8gfCBcIm1pbi1jb250ZW50XCIgfCBcIm1heC1jb250ZW50XCIgfFxyXG4gICAgSUZpdENvbnRlbnRQcm94eSB8IElNaW5NYXhGdW5jIHwgSVJlcGVhdEZ1bmM7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2h5cGhlbnNdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2h5cGhlbnNcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEh5cGhlbnNfU3R5bGVUeXBlID0gXCJub25lXCIgfCBcIm1hbnVhbFwiIHwgXCJhdXRvXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2ltYWdlT3JpZW50YXRpb25dXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ltYWdlLW9yaWVudGF0aW9uXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJbWFnZU9yaWVudGF0aW9uX1N0eWxlVHlwZSA9IFwibm9uZVwiIHwgXCJmcm9tLWltYWdlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2ltYWdlUmVuZGVyaW5nXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9pbWFnZS1yZW5kZXJpbmdcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEltYWdlUmVuZGVyaW5nX1N0eWxlVHlwZSA9IFwiYXV0b1wiIHwgXCJjcmlzcC1lZGdlc1wiIHwgXCJwaXhlbGF0ZWRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbaW5pdGlhbExldHRlcl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW5pdGlhbC1sZXR0ZXJcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIEluaXRpYWxMZXR0ZXJfU3R5bGVUeXBlID0gT25lT3JQYWlyPENzc051bWJlcj47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2lzb2xhdGlvbl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaXNvbGF0aW9uXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJc29sYXRpb25fU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBcImlzb2xhdGVcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbanVzdGlmeUNvbnRlbnRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2p1c3RpZnktY29udGVudFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSnVzdGlmeUNvbnRlbnRfU3R5bGVUeXBlID0gXCJub3JtYWxcIiB8IFwic3BhY2UtYmV0d2VlblwiIHwgXCJzcGFjZS1hcm91bmRcIiB8IFwic3BhY2UtZXZlbmx5XCIgfCBcInN0cmV0Y2hcIiB8XHJcbiAgICBcImNlbnRlclwiIHwgXCJzdGFydFwiIHwgXCJlbmRcIiB8IFwiZmxleC1zdGFydFwiIHwgXCJmbGV4LWVuZFwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCIgfFxyXG4gICAgXCJzYWZlIGNlbnRlclwiIHwgXCJzYWZlIHN0YXJ0XCIgfCBcInNhZmUgZW5kXCIgfCBcInNhZmUgZmxleC1zdGFydFwiIHwgXCJzYWZlIGZsZXgtZW5kXCIgfCBcInNhZmUgbGVmdFwiIHwgXCJzYWZlIHJpZ2h0XCIgfFxyXG4gICAgXCJ1bnNhZmUgY2VudGVyXCIgfCBcInVuc2FmZSBzdGFydFwiIHwgXCJ1bnNhZmUgZW5kXCIgfCBcInVuc2FmZSBmbGV4LXN0YXJ0XCIgfCBcInVuc2FmZSBmbGV4LWVuZFwiIHwgXCJ1bnNhZmUgbGVmdFwiIHwgXCJ1bnNhZmUgcmlnaHRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbanVzdGlmeUl0ZW1zXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9qdXN0aWZ5LWl0ZW1zXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBKdXN0aWZ5SXRlbXNfU3R5bGVUeXBlID0gXCJub3JtYWxcIiB8IFwic3RyZXRjaFwiIHwgXCJiYXNlbGluZVwiIHwgXCJmaXJzdCBiYXNlbGluZVwiIHwgXCJsYXN0IGJhc2VsaW5lXCIgfFxyXG4gICAgXCJjZW50ZXJcIiB8IFwic3RhcnRcIiB8IFwiZW5kXCIgfCBcInNlbGYtc3RhcnRcIiB8IFwic2VsZi1lbmRcIiB8IFwiZmxleC1zdGFydFwiIHwgXCJmbGV4LWVuZFwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCIgfFxyXG4gICAgXCJzYWZlIGNlbnRlclwiIHwgXCJzYWZlIHN0YXJ0XCIgfCBcInNhZmUgZW5kXCIgfCBcInNhZmUgc2VsZi1zdGFydFwiIHwgXCJzYWZlIHNlbGYtZW5kXCIgfCBcInNhZmUgZmxleC1zdGFydFwiIHwgXCJzYWZlIGZsZXgtZW5kXCIgfCBcInNhZmUgbGVmdFwiIHwgXCJzYWZlIHJpZ2h0XCIgfFxyXG4gICAgXCJ1bnNhZmUgY2VudGVyXCIgfCBcInVuc2FmZSBzdGFydFwiIHwgXCJ1bnNhZmUgZW5kXCIgfCBcInVuc2FmZSBzZWxmLXN0YXJ0XCIgfCBcInVuc2FmZSBzZWxmLWVuZFwiIHwgXCJ1bnNhZmUgZmxleC1zdGFydFwiIHwgXCJ1bnNhZmUgZmxleC1lbmRcIiB8IFwidW5zYWZlIGxlZnRcIiB8IFwidW5zYWZlIHJpZ2h0XCIgfFxyXG4gICAgXCJsZWdhY3lcIiB8IFwibGVnYWN5IGxlZnRcIiB8IFwibGVnYWN5IHJpZ2h0XCIgfCBcImxlZ2FjeSBjZW50ZXJcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbanVzdGlmeVNlbGZdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2p1c3RpZnktc2VsZlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSnVzdGlmeVNlbGZfU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBcIm5vcm1hbFwiIHwgXCJzdHJldGNoXCIgfCBcImJhc2VsaW5lXCIgfCBcImZpcnN0IGJhc2VsaW5lXCIgfCBcImxhc3QgYmFzZWxpbmVcIiB8XHJcbiAgICBcImNlbnRlclwiIHwgXCJzdGFydFwiIHwgXCJlbmRcIiB8IFwic2VsZi1zdGFydFwiIHwgXCJzZWxmLWVuZFwiIHwgXCJmbGV4LXN0YXJ0XCIgfCBcImZsZXgtZW5kXCIgfCBcImxlZnRcIiB8IFwicmlnaHRcIiB8XHJcbiAgICBcInNhZmUgY2VudGVyXCIgfCBcInNhZmUgc3RhcnRcIiB8IFwic2FmZSBlbmRcIiB8IFwic2FmZSBzZWxmLXN0YXJ0XCIgfCBcInNhZmUgc2VsZi1lbmRcIiB8IFwic2FmZSBmbGV4LXN0YXJ0XCIgfCBcInNhZmUgZmxleC1lbmRcIiB8IFwic2FmZSBsZWZ0XCIgfCBcInNhZmUgcmlnaHRcIiB8XHJcbiAgICBcInVuc2FmZSBjZW50ZXJcIiB8IFwidW5zYWZlIHN0YXJ0XCIgfCBcInVuc2FmZSBlbmRcIiB8IFwidW5zYWZlIHNlbGYtc3RhcnRcIiB8IFwidW5zYWZlIHNlbGYtZW5kXCIgfCBcInVuc2FmZSBmbGV4LXN0YXJ0XCIgfCBcInVuc2FmZSBmbGV4LWVuZFwiIHwgXCJ1bnNhZmUgbGVmdFwiIHwgXCJ1bnNhZmUgcmlnaHRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbbGV0dGVyU3BhY2luZ11dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbGV0dGVyLXNwYWNpbmdcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIExldHRlclNwYWNpbmdfU3R5bGVUeXBlID0gXCJub3JtYWxcIiB8IENzc0xlbmd0aDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbbGluZUJyZWFrXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWJyZWFrXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaW5lQnJlYWtfU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBcImxvb3NlXCIgfCBcIm5vcm1hbFwiIHwgXCJzdHJpY3RcIiB8IFwiYW55d2hlcmVcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbbGluZUNsYW1wXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWNsYW1wXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaW5lQ2xhbXBfU3R5bGVUeXBlID0gXCJub25lXCIgfCBDc3NOdW1iZXIgfCBbRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgRXh0ZW5kZWQ8c3RyaW5nPl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW0lTdHlsZXNldC5saW5lSGVpZ2h0fGxpbmVIZWlnaHRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpbmUtaGVpZ2h0XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaW5lSGVpZ2h0X1N0eWxlVHlwZSA9IENzc051bWJlciB8IElMZW5ndGhQcm94eTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbbGlzdFN0eWxlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saXN0LXN0eWxlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaXN0U3R5bGVfU3R5bGVUeXBlID0gTGlzdFN0eWxlVHlwZV9TdHlsZVR5cGUgfCBMaXN0U3R5bGVQb3NpdGlvbl9TdHlsZVR5cGUgfCBMaXN0U3R5bGVJbWFnZV9TdHlsZVR5cGUgfFxyXG4gICAgW0V4dGVuZGVkPExpc3RTdHlsZUltYWdlX1N0eWxlVHlwZT4sIEV4dGVuZGVkPExpc3RTdHlsZVBvc2l0aW9uX1N0eWxlVHlwZT5dIHxcclxuICAgIFtFeHRlbmRlZDxMaXN0U3R5bGVJbWFnZV9TdHlsZVR5cGU+LCBFeHRlbmRlZDxMaXN0U3R5bGVUeXBlX1N0eWxlVHlwZT4/XSB8XHJcbiAgICBbRXh0ZW5kZWQ8TGlzdFN0eWxlVHlwZV9TdHlsZVR5cGU+LCBFeHRlbmRlZDxMaXN0U3R5bGVQb3NpdGlvbl9TdHlsZVR5cGU+XSB8XHJcbiAgICBbRXh0ZW5kZWQ8TGlzdFN0eWxlSW1hZ2VfU3R5bGVUeXBlPiwgRXh0ZW5kZWQ8TGlzdFN0eWxlUG9zaXRpb25fU3R5bGVUeXBlPiwgRXh0ZW5kZWQ8TGlzdFN0eWxlVHlwZV9TdHlsZVR5cGU+P107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW2xpc3RTdHlsZUltYWdlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saXN0LXN0eWxlLWltYWdlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaXN0U3R5bGVJbWFnZV9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IElVcmxGdW5jO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tsaXN0U3R5bGVQb3NpdGlvbl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbGlzdC1zdHlsZS1wb3NpdGlvblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTGlzdFN0eWxlUG9zaXRpb25fU3R5bGVUeXBlID0gXCJpbnNpZGVcIiB8IFwib3V0c2lkZVwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1tsaXN0U3R5bGVUeXBlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saXN0LXN0eWxlLXR5cGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIExpc3RTdHlsZVR5cGVfU3R5bGVUeXBlID0gSUNvdW50ZXJTdHlsZVJ1bGUgfFxyXG4gICAgXCJub25lXCIgfCBcImRpc2NcIiB8IFwiY2lyY2xlXCIgfCBcInNxdWFyZVwiIHwgXCJkZWNpbWFsXCIgfCBcImRlY2ltYWwtbGVhZGluZy16ZXJvXCIgfFxyXG4gICAgXCJjamstZGVjaW1hbFwiIHwgXCJjamstZWFydGhseS1icmFuY2hcIiB8IFwiY2prLWhlYXZlbmx5LXN0ZW1cIiB8IFwiY2prLWlkZW9ncmFwaGljXCIgfFxyXG4gICAgXCJsb3dlci1yb21hblwiIHwgXCJ1cHBlci1yb21hblwiIHwgXCJsb3dlci1ncmVla1wiIHwgXCJsb3dlci1hbHBoYVwiIHwgXCJsb3dlci1sYXRpblwiIHwgXCJ1cHBlci1hbHBoYVwiIHwgXCJ1cHBlci1sYXRpblwiIHxcclxuICAgIFwiYXJhYmljLWluZGljXCIgfCBcImFybWVuaWFuXCIgfCBcImJlbmdhbGlcIiB8IFwiY2FtYm9kaWFuXCIgfCBcImRldmFuYWdhcmlcIiB8IFwiZ2VvcmdpYW5cIiB8IFwiZ3VqYXJhdGlcIiB8IFwiZ3VybXVraGlcIiB8IFwiaGVicmV3XCIgfFxyXG4gICAgXCJoaXJhZ2FuYVwiIHwgXCJoaXJhZ2FuYS1pcm9oYVwiIHwgXCJqYXBhbmVzZS1mb3JtYWxcIiB8IFwiamFwYW5lc2UtaW5mb3JtYWxcIiB8IFwia2FubmFkYVwiIHwgXCJrYXRha2FuYVwiIHwgXCJrYXRha2FuYS1pcm9oYVwiIHxcclxuICAgIFwia2htZXJcIiB8IFwia29yZWFuLWhhbmd1bC1mb3JtYWxcIiB8IFwia29yZWFuLWhhbmphLWZvcm1hbFwiIHwgXCJrb3JlYW4taGFuamEtaW5mb3JtYWxcIiB8IFwibGFvXCIgfCBcImxvd2VyLWFybWVuaWFuXCIgfFxyXG4gICAgXCJtYWxheWFsYW1cIiB8IFwibW9uZ29saWFuXCIgfCBcIm15YW5tYXJcIiB8IFwib3JpeWFcIiB8IFwicGVyc2lhblwiIHwgXCJzaW1wLWNoaW5lc2UtZm9ybWFsXCIgfCBcInNpbXAtY2hpbmVzZS1pbmZvcm1hbFwiIHxcclxuICAgIFwidGFtaWxcIiB8IFwidGVsdWd1XCIgfCBcInRoYWlcIiB8IFwidGliZXRhblwiIHwgXCJ0cmFkLWNoaW5lc2UtZm9ybWFsXCIgfCBcInRyYWQtY2hpbmVzZS1pbmZvcm1hbFwiIHwgXCJ1cHBlci1hcm1lbmlhblwiIHxcclxuICAgIFwiZGlzY2xvc3VyZS1vcGVuXCIgfCBcImRpc2Nsb3N1cmUtY2xvc2VkXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1ttYXJnaW5UcmltXV0gc3R5bGUgcHJvcGVydGllc1xyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi10cmltXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNYXJnaW5UcmltX1N0eWxlVHlwZSA9IFwibm9uZVwiIHwgXCJpbi1mbG93XCIgfCBcImFsbFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbbWFya2VyU3RhcnRdXSwgW1ttYXJrZXJNaWRdXSBhbmQgW1ttYXJrZXJFbmRdXSBzdHlsZSBwcm9wZXJ0aWVzXHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFya2VyLXN0YXJ0XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNYXJrZXJfU3R5bGVUeXBlID0gXCJub25lXCIgfCBJSURSdWxlO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbbWFza0JvcmRlcl1dIHN0eWxlIHByb3BlcnRpZXNcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXNrLWJvcmRlclxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWFza0JvcmRlcl9PYmplY3QgPVxyXG4gICAge1xyXG4gICAgICAgIHNvdXJjZTogRXh0ZW5kZWQ8Qm9yZGVySW1hZ2VTb3VyY2VfU3R5bGVUeXBlPixcclxuICAgICAgICBzbGljZT86IEV4dGVuZGVkPEJvcmRlckltYWdlU2xpY2VfU3R5bGVUeXBlPixcclxuICAgICAgICB3aWR0aD86IEV4dGVuZGVkPEJvcmRlckltYWdlV2lkdGhfU3R5bGVUeXBlPixcclxuICAgICAgICBvdXRzZXQ/OiBFeHRlbmRlZDxCb3JkZXJJbWFnZU91dHNldF9TdHlsZVR5cGU+LFxyXG4gICAgICAgIHJlcGVhdD86IEV4dGVuZGVkPEJvcmRlckltYWdlUmVwZWF0X1N0eWxlVHlwZT4sXHJcbiAgICAgICAgbW9kZT86IEV4dGVuZGVkPE1hc2tCb3JkZXJNb2RlX1N0eWxlVHlwZT4sXHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbbWFza0JvcmRlcl1dIHN0eWxlIHByb3BlcnR5LlxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hc2stYm9yZGVyXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNYXNrQm9yZGVyX1N0eWxlVHlwZSA9IENzc0ltYWdlIHwgTWFza0JvcmRlcl9PYmplY3QgfCBzdHJpbmc7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1ttYXNrQm9yZGVyTW9kZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay1ib3JkZXItbW9kZVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWFza0JvcmRlck1vZGVfU3R5bGVUeXBlID0gXCJsdW1pbmFuY2VcIiB8IFwiYWxwaGFcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW21hc2tDb21wb3NpdGVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hc2stY29tcG9zaXRlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNYXNrQ29tcG9zaXRlS2V5d29yZCA9IFwiYWRkXCIgfCBcInN1YnRyYWN0XCIgfCBcImludGVyc2VjdFwiIHwgXCJleGNsdWRlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1ttYXNrTW9kZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay1tb2RlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNYXNrTW9kZUtleXdvcmQgPSBcImFscGhhXCIgfCBcImx1bWluYW5jZVwiIHwgXCJtYXRjaC1zb3VyY2VcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW21hc2tUeXBlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXNrLXR5cGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIE1hc2tUeXBlS2V5d29yZCA9IFwiYWxwaGFcIiB8IFwibHVtaW5hbmNlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1ttYXRoU3R5bGVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hdGgtc3R5bGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIE1hdGhTdHlsZV9TdHlsZVR5cGUgPSBcIm5vcm1hbFwiIHwgXCJjb21wYWN0XCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tvYmplY3RGaXRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL29iamVjdC1maXRcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIE9iamVjdEZpdF9TdHlsZVR5cGUgPSBcImZpbGxcIiB8IFwiY29udGFpblwiIHwgXCJjb3ZlclwiIHwgXCJub25lXCIgfCBcInNjYWxlLWRvd25cIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW29mZnNldF1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb2Zmc2V0XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPZmZzZXRfU3R5bGVUeXBlID0gT2Zmc2V0UGF0aF9TdHlsZVR5cGUgfFxyXG4gICAge1xyXG4gICAgICAgIGFuY2hvcj86IE9mZnNldEFuY2hvcl9TdHlsZVR5cGUsXHJcbiAgICAgICAgZGlzdGFuY2U/OiBDc3NMZW5ndGgsXHJcbiAgICAgICAgcGF0aD86IE9mZnNldFBhdGhfU3R5bGVUeXBlLFxyXG4gICAgICAgIHBvc2l0aW9uPzogQ3NzUG9zaXRpb24sXHJcbiAgICAgICAgcm90YXRlPzogT2Zmc2V0Um90YXRlX1N0eWxlVHlwZSxcclxuICAgIH1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW29mZnNldEFuY2hvcl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb2Zmc2V0LWFuY2hvclxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT2Zmc2V0QW5jaG9yX1N0eWxlVHlwZSA9IFwiYXV0b1wiIHwgQ3NzUG9zaXRpb247XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW29mZnNldFBhdGhdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL29mZnNldC1wYXRoXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPZmZzZXRQYXRoX1N0eWxlVHlwZSA9IFwibm9uZVwiIHwgSVJheUZ1bmMgfCBJVXJsRnVuYyB8IEJhc2ljU2hhcGUgfCBHZW9tZXRyeUJveEtleXdvcmQgfFxyXG4gICAgW0dlb21ldHJ5Qm94S2V5d29yZCwgQmFzaWNTaGFwZV07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW29mZnNldFBvc2l0aW9uXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vZmZzZXQtcG9zaXRpb25cclxuICovXHJcbmV4cG9ydCB0eXBlIE9mZnNldFBvc2l0aW9uX1N0eWxlVHlwZSA9IFwiYXV0b1wiIHwgQ3NzUG9zaXRpb247XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tvZmZzZXRSb3RhdGVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL29mZnNldC1yb3RhdGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIE9mZnNldFJvdGF0ZV9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwicmV2ZXJzZVwiIHwgQ3NzQW5nbGUgfCBbXCJhdXRvXCIgfCBcInJldmVyc2VcIiwgQ3NzQW5nbGVdO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIG92ZXJmbG93LXgveSBzdHlsZSBwcm9wZXJ0eVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT3ZlcmZsb3dLZXl3b3JkID0gXCJ2aXNpYmxlXCIgfCBcImhpZGRlblwiIHwgXCJjbGlwXCIgfCBcInNjcm9sbFwiIHwgXCJhdXRvXCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbb3ZlcmZsb3ddXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJmbG93XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPdmVyZmxvd19TdHlsZVR5cGUgPSBPbmVPclBhaXI8T3ZlcmZsb3dLZXl3b3JkPjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW292ZXJmbG93QW5jaG9yXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdmVyZmxvdy1hbmNob3JcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIE92ZXJmbG93QW5jaG9yX1N0eWxlVHlwZSA9IFwiYXV0b1wiIHwgXCJub25lXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tvdmVyZmxvd0NsaXBNYXJnaW5dXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJmbG93LWNsaXAtbWFyZ2luXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPdmVyZmxvd0NsaXBNYXJnaW5fU3R5bGVUeXBlID0gQ3NzTGVuZ3RoIHwgXCJib3JkZXItYm94XCIgfCBcInBhZGRpbmctYm94XCIgfCBcImNvbnRlbnQtYm94XCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tvdmVyZmxvd1dyYXBdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJmbG93LXdyYXBcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIE92ZXJmbG93V3JhcF9TdHlsZVR5cGUgPSBcIm5vcm1hbFwiIHwgXCJicmVhay13b3JkXCIgfCBcImFueXdoZXJlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tvdmVyc2Nyb2xsQmVoYXZpb3JYXV0gYW5kIFtbb3ZlcnNjcm9sbEJlaGF2aW9yWV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPdmVyc2Nyb2xsQmVoYXZpb3IgPSBcImNvbnRhaW5cIiB8IFwibm9uZVwiIHwgXCJhdXRvXCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbb3ZlcnNjcm9sbEJlaGF2aW9yXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdmVyc2Nyb2xsLWJlaGF2aW9yXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPdmVyc2Nyb2xsQmVoYXZpb3JfU3R5bGVUeXBlID0gT25lT3JQYWlyPE92ZXJzY3JvbGxCZWhhdmlvcj47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgcGFpbnQtb3JkZXIgc3R5bGUgcHJvcGVydHlcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFBhaW50T3JkZXJLZXl3b3JkID0gXCJmaWxsXCIgfCBcInN0cm9rZVwiIHwgXCJtYXJrZXJzXCI7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbcGFpbnRPcmRlcl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGFpbnQtb3JkZXJcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFBhaW50T3JkZXJfU3R5bGVUeXBlID0gXCJub3JtYWxcIiB8IFBhaW50T3JkZXJLZXl3b3JkIHxcclxuICAgIFtQYWludE9yZGVyS2V5d29yZCwgUGFpbnRPcmRlcktleXdvcmQ/LCBQYWludE9yZGVyS2V5d29yZD9dO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbcGVyc3BlY3RpdmVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BlcnNwZWN0aXZlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQZXJzcGVjdGl2ZV9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IENzc0xlbmd0aDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3BlcnNwZWN0aXZlT3JpZ2luXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wZXJzcGVjdGl2ZS1vcmlnaW5cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFBlcnNwZWN0aXZlT3JpZ2luX1N0eWxlVHlwZSA9IEhvcml6b250YWxQb3NpdGlvbktleXdvcmQgfCBWZXJ0aWNhbFBvc2l0aW9uS2V5d29yZCB8IENzc0xlbmd0aCB8XHJcbiAgICBbRXh0ZW5kZWQ8SG9yaXpvbnRhbFBvc2l0aW9uS2V5d29yZCB8IENzc0xlbmd0aD4sIEV4dGVuZGVkPFZlcnRpY2FsUG9zaXRpb25LZXl3b3JkIHwgQ3NzTGVuZ3RoPl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1twbGFjZUNvbnRlbnRdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BsYWNlLWNvbnRlbnRcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFBsYWNlQ29udGVudF9TdHlsZVR5cGUgPSBBbGlnbkNvbnRlbnRLZXl3b3JkcyB8IFtFeHRlbmRlZDxBbGlnbkNvbnRlbnRLZXl3b3Jkcz4sIEV4dGVuZGVkPEp1c3RpZnlDb250ZW50X1N0eWxlVHlwZT5dO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbcGxhY2VJdGVtc11dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGxhY2UtaXRlbXNcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFBsYWNlSXRlbXNfU3R5bGVUeXBlID0gQWxpZ25JdGVtc0tleXdvcmRzIHwgW0V4dGVuZGVkPEFsaWduSXRlbXNLZXl3b3Jkcz4sIEV4dGVuZGVkPEp1c3RpZnlJdGVtc19TdHlsZVR5cGU+XTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3BsYWNlU2VsZl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGxhY2Utc2VsZlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGxhY2VTZWxmX1N0eWxlVHlwZSA9IEFsaWduU2VsZktleXdvcmRzIHwgW0V4dGVuZGVkPEFsaWduU2VsZktleXdvcmRzPiwgRXh0ZW5kZWQ8SnVzdGlmeVNlbGZfU3R5bGVUeXBlPl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1twb2ludGVyRXZlbnRzXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wb2ludGVyLWV2ZW50c1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUG9pbnRlckV2ZW50c19TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwibm9uZVwiIHwgXCJ2aXNpYmxlUGFpbnRlZFwiIHwgXCJ2aXNpYmxlRmlsbFwiIHwgXCJ2aXNpYmxlU3Ryb2tlXCIgfCBcInZpc2libGVcIiB8XHJcbiAgICBcInBhaW50ZWRcIiB8IFwiZmlsbFwiIHwgXCJzdHJva2VcIiB8IFwiYWxsXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tJU3R5bGVzZXQucG9zaXRpb258cG9zaXRpb25dXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Bvc2l0aW9uXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQb3NpdGlvbl9TdHlsZVR5cGUgPSBcInN0YXRpY1wiIHwgXCJyZWxhdGl2ZVwiIHwgXCJhYnNvbHV0ZVwiIHwgXCJzdGlja3lcIiB8IFwiZml4ZWRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3F1b3Rlc11dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcXVvdGVzXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBRdW90ZXNfU3R5bGVUeXBlID0gXCJub25lXCIgfCBcImF1dG9cIiB8IE9uZU9yTWFueTxbRXh0ZW5kZWQ8Q3NzU3RyaW5nPixFeHRlbmRlZDxDc3NTdHJpbmc+XT47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tyZXNpemVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Jlc2l6ZVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVzaXplX1N0eWxlVHlwZSA9IFwibm9uZVwiIHwgXCJib3RoXCIgfCBcImhvcml6b250YWxcIiB8IFwidmVydGljYWxcIiB8IFwiYmxvY2tcIiB8IFwiaW5saW5lXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW0lTdHlsZXNldC5yb3RhdGV8cm90YXRlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9yb3RhdGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFJvdGF0ZV9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IENzc0FuZ2xlIHwgW1wieFwiIHwgXCJ5XCIgfCBcInpcIiwgRXh0ZW5kZWQ8Q3NzQW5nbGU+XSB8XHJcbiAgICBbRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgRXh0ZW5kZWQ8Q3NzTnVtYmVyPiwgRXh0ZW5kZWQ8Q3NzQW5nbGU+XTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbcm93R2FwXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9yb3ctZ2FwXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSb3dHYXBfU3R5bGVUeXBlID0gQ3NzTGVuZ3RoO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbSVN0eWxlc2V0LnNjYWxlfHNjYWxlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY2FsZVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU2NhbGVfU3R5bGVUeXBlID0gXCJub25lXCIgfCBDc3NOdW1iZXIgfFxyXG4gICAgW0V4dGVuZGVkPENzc051bWJlcj4sIEV4dGVuZGVkPENzc051bWJlcj4/LCBFeHRlbmRlZDxDc3NOdW1iZXI+P107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tzY3JvbGxiYXJDb2xvcl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsYmFyLWNvbG9yXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTY3JvbGxiYXJDb2xvcl9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwiZGFya1wiIHwgXCJsaWdodFwiIHxcclxuICAgIFtFeHRlbmRlZDxDc3NDb2xvcj4sIEV4dGVuZGVkPENzc0NvbG9yPl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tzY3JvbGxiYXJHdXR0ZXJdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbGJhci1ndXR0ZXJcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFNjcm9sbGJhckd1dHRlcl9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwic3RhYmxlXCIgfCBcInN0YWJsZSBib3RoLWVkZ2VzXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tzY3JvbGxiYXJXaWR0aF1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsYmFyLXdpZHRoXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTY3JvbGxiYXJXaWR0aF9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwidGhpblwiIHwgXCJub25lXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tzY3JvbGxCZWhhdmlvcl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLWJlaGF2aW9yXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTY3JvbGxCZWhhdmlvcl9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwic21vb3RoXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tzY3JvbGxTbmFwQWxpZ25dXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1zbmFwLWFsaWduXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTY3JvbGxTbmFwQWxpZ25fU3R5bGVUeXBlID0gT25lT3JQYWlyPFwibm9uZVwiIHwgXCJzdGFydFwiIHwgXCJlbmRcIiB8IFwiY2VudGVyXCI+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbc2Nyb2xsU25hcFN0b3BdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1zbmFwLXN0b3BcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFNjcm9sbFNuYXBTdG9wX1N0eWxlVHlwZSA9IFwibm9ybWFsXCIgfCBcImFsd2F5c1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbc2Nyb2xsU25hcFR5cGVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1zbmFwLXR5cGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFNjcm9sbFNuYXBUeXBlX1N0eWxlVHlwZSA9IFwibm9uZVwiIHxcclxuICAgIFtFeHRlbmRlZDxcInhcIiB8IFwieVwiIHwgXCJibG9ja1wiIHwgXCJpbmxpbmVcIiB8IFwiYm90aFwiPiwgRXh0ZW5kZWQ8XCJtYW5kYXRvcnlcIiB8IFwicHJveGltaXR5XCI+XTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbc2hhcGVPdXRzaWRlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zaGFwZS1vdXRzaWRlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTaGFwZU91dHNpZGVfU3R5bGVUeXBlID0gSVVybEZ1bmMgfCBCYXNpY1NoYXBlIHwgR2VvbWV0cnlCb3hLZXl3b3JkIHwgQ3NzSW1hZ2U7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1tzaGFwZVJlbmRlcmluZ11dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2hhcGUtcmVuZGVyaW5nXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTaGFwZVJlbmRlcmluZ19TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwib3B0aW1pemVTcGVlZFwiIHwgXCJjcmlzcEVkZ2VzXCIgfCBcImdlb21ldHJpY1ByZWNpc2lvblwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGFiU2l6ZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGFiLXNpemVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRhYlNpemVfU3R5bGVUeXBlID0gQ3NzTnVtYmVyIHwgSUxlbmd0aFByb3h5O1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RhYmxlTGF5b3V0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90YWJsZS1sYXlvdXRcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRhYmxlTGF5b3V0X1N0eWxlVHlwZSA9IFwiYXV0b1wiIHwgXCJmaXhlZFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGV4dEFsaWduXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWFsaWduXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0QWxpZ25fU3R5bGVUeXBlID0gXCJzdGFydFwiIHwgXCJlbmRcIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiIHwgXCJjZW50ZXJcIiB8IFwianVzdGlmeVwiIHwgXCJtYXRjaC1wYXJlbnRcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHRBbGlnbkxhc3RdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24tbGFzdFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGV4dEFsaWduTGFzdF9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwic3RhcnRcIiB8IFwiZW5kXCIgfCBcImxlZnRcIiB8IFwicmlnaHRcIiB8IFwiY2VudGVyXCIgfCBcImp1c3RpZnlcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHRBbmNob3JdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYW5jaG9yXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0QW5jaG9yX1N0eWxlVHlwZSA9IFwic3RhcnRcIiB8IFwibWlkZGxlXCIgfCBcImVuZFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGV4dENvbWJpbmVVcHJpZ2h0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWNvbWJpbmUtdXByaWdodFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGV4dENvbWJpbmVVcHJpZ2h0X1N0eWxlVHlwZSA9IFwibm9uZVwiIHwgXCJhbGxcIiB8IFwiZGlnaXRzXCIgfCBudW1iZXI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t0ZXh0RGVjb3JhdGlvbl1dIHN0eWxlIHByb3BlcnR5LiBJZiBhIG51bWJlciBpcyBzcGVjaWZpZWQsIGl0IHdpbGwgYmUgaW50ZXJwcmV0ZWRcclxuICogYXMgY29sb3IgLSBub3QgYXMgdGhpY2tuZXNzLlxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtZGVjb3JhdGlvblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGV4dERlY29yYXRpb25fU3R5bGVUeXBlID0gVGV4dERlY29yYXRpb25MaW5lX1N0eWxlVHlwZSB8IFRleHREZWNvcmF0aW9uU3R5bGVfU3R5bGVUeXBlIHxcclxuICAgIENzc0NvbG9yIHwgVGV4dERlY29yYXRpb25UaGlja25lc3NfU3R5bGVUeXBlIHxcclxuICAgIHtcclxuICAgICAgICBsaW5lPzogRXh0ZW5kZWQ8VGV4dERlY29yYXRpb25MaW5lX1N0eWxlVHlwZT4sXHJcbiAgICAgICAgc3R5bGU/OiBFeHRlbmRlZDxUZXh0RGVjb3JhdGlvblN0eWxlX1N0eWxlVHlwZT4sXHJcbiAgICAgICAgY29sb3I/OiBFeHRlbmRlZDxDc3NDb2xvcj4sXHJcbiAgICAgICAgdGhpY2tuZXNzPzogRXh0ZW5kZWQ8VGV4dERlY29yYXRpb25UaGlja25lc3NfU3R5bGVUeXBlPixcclxuICAgIH07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t0ZXh0RGVjb3JhdGlvbkxpbmVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtZGVjb3JhdGlvbi1saW5lXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0RGVjb3JhdGlvbkxpbmVfU3R5bGVUeXBlID0gXCJub25lXCIgfCBcInNwZWxsaW5nLWVycm9yXCIgfCBcImdyYW1tYXItZXJyb3JcIiB8XHJcbiAgICBPbmVPck1hbnk8XCJ1bmRlcmxpbmVcIiB8IFwib3ZlcmxpbmVcIiB8IFwibGluZS10aHJvdWdoXCI+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGV4dERlY29yYXRpb25TdHlsZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1kZWNvcmF0aW9uLXN0eWxlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0RGVjb3JhdGlvblN0eWxlX1N0eWxlVHlwZSA9IFwic29saWRcIiB8IFwiZG91YmxlXCIgfCBcImRvdHRlZFwiIHwgXCJkYXNoZWRcIiB8IFwid2F2eVwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGV4dERlY29yYXRpb25Ta2lwSW5rXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tc2tpcC1pbmtcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRleHREZWNvcmF0aW9uU2tpcElua19TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IFwiYXV0b1wiIHwgXCJhbGxcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHREZWNvcmF0aW9uVGhpY2tuZXNzXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tdGhpY2tuZXNzXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0RGVjb3JhdGlvblRoaWNrbmVzc19TdHlsZVR5cGUgPSBcImZyb20tZm9udFwiIHwgQ3NzTGVuZ3RoT3JBdXRvO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGV4dEVtcGhhc2lzXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWVtcGhhc2lzXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0RW1waGFzaXNfU3R5bGVUeXBlID0gVGV4dEVtcGhhc2lzU3R5bGVfU3R5bGVUeXBlIHwgQ3NzQ29sb3IgfFxyXG4gICAgW0V4dGVuZGVkPFRleHRFbXBoYXNpc1N0eWxlX1N0eWxlVHlwZT4sIEV4dGVuZGVkPENzc0NvbG9yPl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t0ZXh0RW1waGFzaXNQb3NpdGlvbl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1lbXBoYXNpcy1wb3NpdGlvblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGV4dEVtcGhhc2lzUG9zaXRpb25fU3R5bGVUeXBlID0gXCJvdmVyIGxlZnRcIiB8IFwib3ZlciByaWdodFwiIHwgXCJ1bmRlciBsZWZ0XCIgfCBcInVuZGVyIHJpZ2h0XCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBTaGFwZSBmb3IgdGhlIHRleHQtZW1waGFzaXMtc3R5bGUgc3R5bGUgcHJvcGVydHlcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRleHRFbXBoYXNpc1NoYXBlID0gXCJkb3RcIiB8IFwiY2lyY2xlXCIgfCBcImRvdWJsZS1jaXJjbGVcIiB8IFwidHJpYW5nbGVcIiB8IFwic2VzYW1lXCIgfCBzdHJpbmc7XHJcblxyXG4vKipcclxuICogRmlsbCBvcHRpb24gZm9yIHRoZSB0ZXh0LWVtcGhhc2lzLXN0eWxlIHN0eWxlIHByb3BlcnR5XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0RW1waGFzaXNGaWxsID0gXCJmaWxsZWRcIiB8IFwib3BlblwiO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHRFbXBoYXNpc1N0eWxlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWVtcGhhc2lzLXN0eWxlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0RW1waGFzaXNTdHlsZV9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IFRleHRFbXBoYXNpc0ZpbGwgfCBUZXh0RW1waGFzaXNTaGFwZSB8XHJcbiAgICBbRXh0ZW5kZWQ8VGV4dEVtcGhhc2lzRmlsbD4sIEV4dGVuZGVkPFRleHRFbXBoYXNpc1NoYXBlPl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t0ZXh0SW5kZW50XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWluZGVuXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0SW5kZW50X1N0eWxlVHlwZSA9IENzc0xlbmd0aCB8XHJcbiAgICBbRXh0ZW5kZWQ8Q3NzTGVuZ3RoPiwgT25lT3JNYW55PFwiZWFjaC1saW5lXCIgfCBcImhhbmdpbmdcIiB8IFwiZWFjaC1saW5lIGhhbmdpbmdcIj5dO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGV4dEp1c3RpZnldXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtanVzdGlmeVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGV4dEp1c3RpZnlfU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBcImludGVyLWNoYXJhY3RlclwiIHwgXCJpbnRlci13b3JkXCIgfCBcIm5vbmVcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHRPcmllbnRhdGlvbl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1vcmllbnRhdGlvblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGV4dE9yaWVudGF0aW9uX1N0eWxlVHlwZSA9IFwibWl4ZWRcIiB8IFwidXByaWdodFwiIHwgXCJzaWRld2F5c1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGV4dE92ZXJmbG93XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LW92ZXJmbG93XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0T3ZlcmZsb3dfU3R5bGVUeXBlID0gT25lT3JQYWlyPFwiY2xpcFwiIHwgXCJlbGxpcHNpc1wiIHwgXCJmYWRlXCIgfCBzdHJpbmc+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdGV4dFJlbmRlcmluZ11dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1yZW5kZXJpbmdcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRleHRSZW5kZXJpbmdfU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBcIm9wdGltaXplU3BlZWRcIiB8IFwib3B0aW1pemVMZWdpYmlsaXR5XCIgfCBcImdlb21ldHJpY1ByZWNpc2lvblwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIHNpbmdsZSB2YWx1ZSBvZiB0aGUgdGV4XCJ0LXNoYWRvdyBzdHlsZSBwcm9wZXJ0eVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGV4dFNoYWRvdyA9IFwibm9uZVwiIHxcclxuICAgIHtcclxuICAgICAgICB4OiBFeHRlbmRlZDxDc3NMZW5ndGg+LFxyXG4gICAgICAgIHk6IEV4dGVuZGVkPENzc0xlbmd0aD4sXHJcbiAgICAgICAgYmx1cj86IEV4dGVuZGVkPENzc0xlbmd0aD4sXHJcbiAgICAgICAgY29sb3I/OiBFeHRlbmRlZDxDc3NDb2xvcj4sXHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHRTaGFkb3ddXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtc2hhZG93XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0U2hhZG93X1N0eWxlVHlwZSA9IE9uZU9yTWFueTxUZXh0U2hhZG93PjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHRTaXplQWRqdXN0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LXNpemUtYWRqdXN0XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0U2l6ZUFkanVzdF9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IFwiYXV0b1wiIHwgQ3NzUGVyY2VudDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHRTdHJva2VdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtc3Ryb2tlXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXh0U3Ryb2tlX1N0eWxlVHlwZSA9IExpbmVXaWR0aCB8IENzc05vbk51bWVyaWNDb2xvciB8XHJcbiAgICBbRXh0ZW5kZWQ8TGluZVdpZHRoPiwgRXh0ZW5kZWQ8Q3NzQ29sb3I+XSB8XHJcbiAgICBbRXh0ZW5kZWQ8Q3NzTm9uTnVtZXJpY0NvbG9yPiwgTGluZVdpZHRoXSB8XHJcbiAgICB7IHdpZHRoOiBFeHRlbmRlZDxMaW5lV2lkdGg+LCBjb2xvcjogRXh0ZW5kZWQ8Q3NzQ29sb3I+IH07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t0ZXh0VHJhbnNmb3JtXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LXRyYW5zZm9ybVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGV4dFRyYW5zZm9ybV9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IFwiY2FwaXRhbGl6ZVwiIHwgXCJ1cHBlcmNhc2VcIiB8IFwibG93ZXJjYXNlXCIgfCBcImZ1bGwtd2lkdGhcIiB8IFwiZnVsbC1zaXplLWthbmFcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3RleHRVbmRlcmxpbmVQb3NpdGlvbl1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC11bmRlcmxpbmUtcG9zaXRpb25cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRleHRVbmRlcmxpbmVQb3NpdGlvbl9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwidW5kZXJcIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiIHwgXCJhdXRvLXBvc1wiIHwgXCJhYm92ZVwiIHwgXCJiZWxvd1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdG91Y2hBY3Rpb25dXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RvdWNoLWFjdGlvblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVG91Y2hBY3Rpb25fU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBcIm5vbmVcIiB8IFwibWFuaXB1bGF0aW9uXCIgfFxyXG4gICAgXCJwYW4teFwiIHwgXCJwYW4tbGVmdFwiIHwgXCJwYW4tcmlnaHRcIiB8IFwicGFuLXlcIiB8IFwicGFuLXVwXCIgfCBcInBhbi1kb3duXCIgfCBcInBpbmNoLXpvb21cIiB8XHJcbiAgICBbXCJwYW4teFwiIHwgXCJwYW4tbGVmdFwiIHwgXCJwYW4tcmlnaHRcIiwgIFwicGFuLXlcIiB8IFwicGFuLXVwXCIgfCBcInBhbi1kb3duXCJdIHxcclxuICAgIFtcInBhbi14XCIgfCBcInBhbi1sZWZ0XCIgfCBcInBhbi1yaWdodFwiLCAgXCJwaW5jaC16b29tXCJdIHxcclxuICAgIFtcInBhbi15XCIgfCBcInBhbi11cFwiIHwgXCJwYW4tZG93blwiLCBcInBpbmNoLXpvb21cIl0gfFxyXG4gICAgW1wicGFuLXhcIiB8IFwicGFuLWxlZnRcIiB8IFwicGFuLXJpZ2h0XCIsICBcInBhbi15XCIgfCBcInBhbi11cFwiIHwgXCJwYW4tZG93blwiLCBcInBpbmNoLXpvb21cIl07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBbW3RyYW5zZm9ybV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdHJhbnNmb3JtXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUcmFuc2Zvcm1fU3R5bGVUeXBlID0gXCJub25lXCIgfCBPbmVPck1hbnk8VHJhbnNmb3JtRnVuY3M+O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1t0cmFuc2Zvcm1Cb3hdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zZm9ybS1ib3hcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRyYW5zZm9ybUJveF9TdHlsZVR5cGUgPSBcImNvbnRlbnQtYm94XCIgfCBcImJvcmRlci1ib3hcIiB8IFwiZmlsbC1ib3hcIiB8IFwic3Ryb2tlLWJveFwiIHwgXCJ2aWV3LWJveFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1t0cmFuc2Zvcm1PcmlnaW5dXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zZm9ybS1vcmlnaW5cclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRyYW5zZm9ybU9yaWdpbl9TdHlsZVR5cGUgPSBIb3Jpem9udGFsUG9zaXRpb25LZXl3b3JkIHwgVmVydGljYWxQb3NpdGlvbktleXdvcmQgfCBDc3NMZW5ndGggfFxyXG4gICAgW0V4dGVuZGVkPEhvcml6b250YWxQb3NpdGlvbktleXdvcmQgfCBDc3NMZW5ndGg+LCBFeHRlbmRlZDxWZXJ0aWNhbFBvc2l0aW9uS2V5d29yZCB8IENzc0xlbmd0aD4sIEV4dGVuZGVkPENzc0xlbmd0aD4/XTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbdHJhbnNmb3JtU3R5bGVdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zZm9ybS1zdHlsZVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVHJhbnNmb3JtU3R5bGVfU3R5bGVUeXBlID0gXCJmbGF0XCIgfCBcInByZXNlcnZlLTNkXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzaW5nbGUgdHJhbnNpdGlvblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVHJhbnNpdGlvbl9TaW5nbGUgPSBzdHJpbmcgfFxyXG4gICAge1xyXG4gICAgICAgIHByb3BlcnR5PzogRXh0ZW5kZWQ8VHJhbnNpdGlvblByb3BlcnR5PjtcclxuICAgICAgICBkdXJhdGlvbj86IEV4dGVuZGVkPENzc1RpbWU+O1xyXG4gICAgICAgIGZ1bmM/OiBFeHRlbmRlZDxUaW1pbmdGdW5jdGlvbj47XHJcbiAgICAgICAgZGVsYXk/OiBFeHRlbmRlZDxDc3NUaW1lPjtcclxuICAgIH07XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1t0cmFuc2l0aW9uXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90cmFuc2l0aW9uXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUcmFuc2l0aW9uX1N0eWxlVHlwZSA9IE9uZU9yTWFueTxUcmFuc2l0aW9uX1NpbmdsZT47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBzaW5nbGUgW1t0cmFuc2l0aW9uUHJvcGVydHldXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVHJhbnNpdGlvblByb3BlcnR5ID0gXCJub25lXCIgfCBcImFsbFwiIHwga2V5b2YgSVN0eWxlc2V0IHwgSVZhclJ1bGU7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgW1t0cmFuc2l0aW9uUHJvcGVydHldXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zaXRpb24tcHJvcGVydHlcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRyYW5zaXRpb25Qcm9wZXJ0eV9TdHlsZVR5cGUgPSBPbmVPck1hbnk8VHJhbnNpdGlvblByb3BlcnR5PjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW0lTdHlsZXNldC50cmFuc2xhdGV8dHJhbnNsYXRlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90cmFuc2xhdGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFRyYW5zbGF0ZV9TdHlsZVR5cGUgPSBcIm5vbmVcIiB8IENzc0xlbmd0aCB8XHJcbiAgICBbRXh0ZW5kZWQ8Q3NzTGVuZ3RoPiwgRXh0ZW5kZWQ8Q3NzTGVuZ3RoPiwgRXh0ZW5kZWQ8Q3NzTGVuZ3RoPj9dO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdW5pY29kZUJpZGldXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3VuaWNvZGUtYmlkaVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVW5pY29kZUJpZGlfU3R5bGVUeXBlID0gXCJub3JtYWxcIiB8IFwiZW1iZWRcIiB8IFwiaXNvbGF0ZVwiIHwgXCJiaWRpLW92ZXJyaWRlXCIgfCBcImlzb2xhdGUtb3ZlcnJpZGVcIiB8IFwicGxhaW50ZXh0XCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t1c2VyU2VsZWN0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy91c2VyLXNlbGVjdFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVXNlclNlbGVjdF9TdHlsZVR5cGUgPSBcImF1dG9cIiB8IFwidGV4dFwiIHwgXCJub25lXCIgfCBcImNvbnRhaW5cIiB8IFwiYWxsXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t2ZXJ0aWNhbEFsaWduXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy92ZXJ0aWNhbC1hbGlnblxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVmVydGljYWxBbGlnbl9TdHlsZVR5cGUgPSBcImJhc2VsaW5lXCIgfCBcInN1YlwiIHwgXCJzdXBlclwiIHwgXCJ0ZXh0LXRvcFwiIHwgXCJ0ZXh0LWJvdHRvbVwiIHxcclxuICAgIFwibWlkZGxlXCIgfCBcInRvcFwiIHwgXCJib3R0b21cIiB8IENzc0xlbmd0aDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3Zpc2liaWxpdHldXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Zpc2liaWxpdHlcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFZpc2liaWxpdHlfU3R5bGVUeXBlID0gXCJ2aXNpYmxlXCIgfCBcImhpZGRlblwiIHwgXCJjb2xsYXBzZVwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbdmVjdG9yRWZmZWN0XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy92ZWN0b3ItZWZmZWN0XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBWZWN0b3JFZmZlY3RfU3R5bGVUeXBlID0gXCJub25lXCIgfCBcIm5vbi1zY2FsaW5nLXN0cm9rZVwiIHwgXCJub24tc2NhbGluZy1zaXplXCIgfCBcIm5vbi1yb3RhdGlvblwiIHwgXCJmaXhlZC1wb3NpdGlvblwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbd2hpdGVTcGFjZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvd2hpdGUtc3BhY2VcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFdoaXRlU3BhY2VfU3R5bGVUeXBlID0gXCJub3JtYWxcIiB8IFwicHJlXCIgfCBcIm5vd3JhcFwiIHwgXCJwcmUtd3JhcFwiIHwgXCJwcmUtbGluZVwiIHwgXCJicmVhay1zcGFjZXNcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIFtbd2lsbENoYW5nZV1dIHN0eWxlIHByb3BlcnR5XHJcbiAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvd2lsbC1jaGFuZ2VcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFdpbGxDaGFuZ2VfU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBPbmVPck1hbnk8XCJzY3JvbGwtcG9zaXRpb25cIiB8IFwiY29udGVudHNcIiB8IEV4Y2x1ZGU8a2V5b2YgSVN0eWxlc2V0LFwid2lsbENoYW5nZVwiPj47XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t3b3JkQnJlYWtdXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3dvcmQtYnJlYWtcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFdvcmRCcmVha19TdHlsZVR5cGUgPSBcIm5vcm1hbFwiIHwgXCJicmVhay1hbGxcIiB8IFwia2VlcC1hbGxcIiB8IFwiYnJlYWstd29yZFwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbd29yZFNwYWNpbmddXSBzdHlsZSBwcm9wZXJ0eVxyXG4gKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3dvcmQtc3BhY2luZ1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgV29yZFNwYWNpbmdfU3R5bGVUeXBlID0gXCJub3JtYWxcIiB8IENzc0xlbmd0aDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIHRoZSBbW3dyaXRpbmdNb2RlXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy93cml0aW5nLW1vZGVcclxuICpcclxuICovXHJcbmV4cG9ydCB0eXBlIFdyaXRpbmdNb2RlX1N0eWxlVHlwZSA9IFwiaG9yaXpvbnRhbC10YlwiIHwgXCJ2ZXJ0aWNhbC1ybFwiIHwgXCJ2ZXJ0aWNhbC1sclwiIHwgXCJzaWRld2F5cy1ybFwiIHwgXCJzaWRld2F5cy1sclwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgdGhlIFtbekluZGV4XV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy96LWluZGV4XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBaSW5kZXhfU3R5bGVUeXBlID0gXCJhdXRvXCIgfCBDc3NOdW1iZXI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciB0aGUgW1t6b29tXV0gc3R5bGUgcHJvcGVydHlcclxuICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy96b29tXHJcbiAqXHJcbiAqIEBkZXByZWNhdGVkXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBab29tX1N0eWxlVHlwZSA9IFwibm9ybWFsXCIgfCBcInJlc2V0XCIgfCBDc3NQZXJjZW50O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBmb3Igc3R5bGUgcHJvcGVydGllcyBmb3Igd2hpY2ggdGhlcmUgaXMgbm8gc3BlY2lhbCB0eXBlIGRlZmluZWQuXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEZWZhdWx0U3R5bGVUeXBlID0gc3RyaW5nO1xyXG5cclxuXHJcblxyXG4iLCLvu79pbXBvcnQge1xyXG4gICAgQ3NzSW1hZ2UsIENzc1NlbGVjdG9yLCBDc3NTdHJpbmcsIERlcGVuZGVudFJ1bGVDb21iaW5hdG9yLCBEaXJlY3Rpb24sIEV4dGVuZGVkUHJvcCxcclxuICAgIEdsb2JhbF9TdHlsZVR5cGUsIElQYXJhbWV0ZXJpemVkUHNldWRvRW50aXR5LCBPbmVPckJveCwgT25lT3JNYW55LCBPbmVPclBhaXIsIFBzZXVkb0VudGl0eSwgVGltaW5nRnVuY3Rpb25cclxufSBmcm9tIFwiLi9Db3JlVHlwZXNcIlxyXG5pbXBvcnQge0Nzc0NvbG9yfSBmcm9tIFwiLi9Db2xvclR5cGVzXCI7XHJcbmltcG9ydCB7Qm9yZGVyUmFkaXVzLCBDc3NBbmdsZSwgQ3NzQXNwZWN0UmF0aW8sIENzc0ZyZXF1ZW5jeSwgQ3NzTGVuZ3RoLCBDc3NMZW5ndGhPckF1dG8sXHJcbiAgICBDc3NNdWx0aVBvc2l0aW9uLCBDc3NNdWx0aVBvc2l0aW9uWCwgQ3NzTXVsdGlQb3NpdGlvblksIENzc051bWJlciwgQ3NzUGVyY2VudCwgQ3NzUG9pbnQsXHJcbiAgICBDc3NQb3NpdGlvbiwgQ3NzUmFkaXVzLCBDc3NSZXNvbHV0aW9uLCBDc3NTaXplLCBDc3NUaW1lfSBmcm9tIFwiLi9OdW1lcmljVHlwZXNcIjtcclxuaW1wb3J0ICogYXMgc3QgZnJvbSBcIi4vU3R5bGVUeXBlc1wiO1xyXG5pbXBvcnQge0ZpbGxSdWxlLCBUcmFuc2Zvcm1GdW5jc30gZnJvbSBcIi4vU2hhcGVUeXBlc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgRm9udEtlcm5pbmcsIEZvbnRPcHRpY2FsU2l6aW5nLCBGb250U2l6ZSwgRm9udFN0cmV0Y2gsIEZvbnRTdHlsZSwgRm9udFN5bnRoZXNpcyxcclxuICAgIEZvbnRWYXJpYW50Q2FwcywgRm9udFZhcmlhbnRQb3NpdGlvblxyXG59IGZyb20gXCIuL0ZvbnRUeXBlc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgSUNsYXNzTmFtZVJ1bGUsIElDbGFzc1J1bGUsIElTdHlsZURlZmluaXRpb24sIElTdHlsZURlZmluaXRpb25DbGFzcywgSVN0eWxlUnVsZSwgSVZhclJ1bGVcclxufSBmcm9tIFwiLi9SdWxlVHlwZXNcIjtcclxuXHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyBhIGNvbGxlY3Rpb24gb2YgYnVpbHQtaW4gc3R5bGUgcHJvcGVydGllcy4gRXZlcnkgYnVpbHQtaW4gcHJvcGVydHlcclxuICogYXBwZWFycyBpbiB0aGlzIGludGVyZmFjZS4gQWxzbyBpdCBpcyBwb3NzaWJsZSB0byBhZGQgYWRpdGlvbmFsIHByb3BlcnRpZXMgdmlhIG1vZHVsZVxyXG4gKiBhdWdtZW50YXRpb24gdGVjaG5pcXVlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJU3R5bGVzZXRcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2FjY2VudC1jb2xvclxyXG4gICAgICovXHJcbiAgICBhY2NlbnRDb2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FsaWduQ29udGVudC5tZF1dXHJcbiAgICAgKi9cclxuICAgIGFsaWduQ29udGVudD86IHN0LkFsaWduQ29udGVudEtleXdvcmRzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FsaWduSXRlbXMubWRdXVxyXG4gICAgICovXHJcbiAgICBhbGlnbkl0ZW1zPzogc3QuQWxpZ25JdGVtc0tleXdvcmRzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FsaWduU2VsZi5tZF1dXHJcbiAgICAgKi9cclxuICAgIGFsaWduU2VsZj86IHN0LkFsaWduU2VsZktleXdvcmRzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FsaWdubWVudEJhc2VsaW5lLm1kXV1cclxuICAgICAqL1xyXG4gICAgYWxpZ25tZW50QmFzZWxpbmU/OiBzdC5BbGlnbm1lbnRCYXNlbGluZUtleXdvcmRzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9hbGxcclxuICAgICAqL1xyXG4gICAgYWxsPzogR2xvYmFsX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFtbaW5jbHVkZTogc3R5bGVQcm9wcy9hbmltYXRpb24ubWRdXVxyXG4gICAgICovXHJcbiAgICBhbmltYXRpb24/OiBzdC5BbmltYXRpb25fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FuaW1hdGlvbkRlbGF5Lm1kXV1cclxuICAgICAqL1xyXG4gICAgYW5pbWF0aW9uRGVsYXk/OiBPbmVPck1hbnk8Q3NzVGltZT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBbW2luY2x1ZGU6IHN0eWxlUHJvcHMvYW5pbWF0aW9uRGlyZWN0aW9uLm1kXV1cclxuICAgICAqL1xyXG4gICAgYW5pbWF0aW9uRGlyZWN0aW9uPzogT25lT3JNYW55PHN0LkFuaW1hdGlvbkRpcmVjdGlvbktleXdvcmRzPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFtbaW5jbHVkZTogc3R5bGVQcm9wcy9hbmltYXRpb25EdXJhdGlvbi5tZF1dXHJcbiAgICAgKi9cclxuICAgIGFuaW1hdGlvbkR1cmF0aW9uPzogT25lT3JNYW55PENzc1RpbWU+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FuaW1hdGlvbkZpbGxNb2RlLm1kXV1cclxuICAgICAqL1xyXG4gICAgYW5pbWF0aW9uRmlsbE1vZGU/OiBPbmVPck1hbnk8c3QuQW5pbWF0aW9uRmlsbE1vZGVLZXl3b3Jkcz47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBbW2luY2x1ZGU6IHN0eWxlUHJvcHMvYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQubWRdXVxyXG4gICAgICovXHJcbiAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudD86IE9uZU9yTWFueTxzdC5BbmltYXRpb25JdGVyYXRpb25Db3VudF9TaW5nbGU+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FuaW1hdGlvbk5hbWUubWRdXVxyXG4gICAgICovXHJcbiAgICBhbmltYXRpb25OYW1lPzogT25lT3JNYW55PHN0LkFuaW1hdGlvbk5hbWVfU2luZ2xlPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFtbaW5jbHVkZTogc3R5bGVQcm9wcy9hbmltYXRpb25QbGF5U3RhdGUubWRdXVxyXG4gICAgICovXHJcbiAgICBhbmltYXRpb25QbGF5U3RhdGU/OiBPbmVPck1hbnk8c3QuQW5pbWF0aW9uUGxheVN0YXRlS2V5d29yZHM+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FuaW1hdGlvblRpbWluZ0Z1bmN0aW9uLm1kXV1cclxuICAgICAqL1xyXG4gICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24/OiBPbmVPck1hbnk8VGltaW5nRnVuY3Rpb24+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FwcGVhcmFuY2UubWRdXVxyXG4gICAgICovXHJcbiAgICBhcHBlYXJhbmNlPzogc3QuQXBwZWFyYW5jZUtleXdvcmRzIHwgc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogW1tpbmNsdWRlOiBzdHlsZVByb3BzL2FzcGVjdFJhdGlvLm1kXV1cclxuICAgICAqL1xyXG4gICAgYXNwZWN0UmF0aW8/OiBzdC5Bc3BlY3RSYXRpb19TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tkcm9wLWZpbHRlclxyXG4gICAgICovXHJcbiAgICBiYWNrZHJvcEZpbHRlcj86IHN0LkZpbHRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tmYWNlLXZpc2liaWxpdHlcclxuICAgICAqL1xyXG4gICAgYmFja2ZhY2VWaXNpYmlsaXR5Pzogc3QuQmFja2ZhY2VWaXNpYmlsaXR5TW9kZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tncm91bmRcclxuICAgICAqL1xyXG4gICAgYmFja2dyb3VuZD86IHN0LkJhY2tncm91bmRfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLWF0dGFjaG1lbnRcclxuICAgICAqL1xyXG4gICAgYmFja2dyb3VuZEF0dGFjaG1lbnQ/OiBzdC5CYWNrZ3JvdW5kQXR0YWNobWVudF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tncm91bmQtYmxlbmQtbW9kZVxyXG4gICAgICovXHJcbiAgICBiYWNrZ3JvdW5kQmxlbmRNb2RlPzogT25lT3JNYW55PHN0LkJsZW5kTW9kZUtleXdvcmRzPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYmFja2dyb3VuZC1jbGlwXHJcbiAgICAgKi9cclxuICAgIGJhY2tncm91bmRDbGlwPzogc3QuQmFja2dyb3VuZENsaXBfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLWNvbG9yXHJcbiAgICAgKi9cclxuICAgIGJhY2tncm91bmRDb2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLWltYWdlXHJcbiAgICAgKi9cclxuICAgIGJhY2tncm91bmRJbWFnZT86IHN0LkJhY2tncm91bmRJbWFnZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tncm91bmQtb3JpZ2luXHJcbiAgICAgKi9cclxuICAgIGJhY2tncm91bmRPcmlnaW4/OiBzdC5CYWNrZ3JvdW5kT3JpZ2luX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYmFja2dyb3VuZC1wb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb24/OiBDc3NNdWx0aVBvc2l0aW9uO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLXBvc2l0aW9uLXhcclxuICAgICAqL1xyXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWD86IENzc011bHRpUG9zaXRpb25YO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLXBvc2l0aW9uLXlcclxuICAgICAqL1xyXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWT86IENzc011bHRpUG9zaXRpb25ZO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLXJlcGVhdFxyXG4gICAgICovXHJcbiAgICBiYWNrZ3JvdW5kUmVwZWF0Pzogc3QuQmFja2dyb3VuZFJlcGVhdF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tncm91bmQtcmVwZWF0LXhcclxuICAgICAqL1xyXG4gICAgYmFja2dyb3VuZFJlcGVhdFg/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLXJlcGVhdC15XHJcbiAgICAgKi9cclxuICAgIGJhY2tncm91bmRSZXBlYXRZPzogc3QuRGVmYXVsdFN0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYmFja2dyb3VuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIGJhY2tncm91bmRTaXplPzogc3QuQmFja2dyb3VuZFNpemVfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYXNlbGluZS1zaGlmdFxyXG4gICAgICovXHJcbiAgICBiYXNlbGluZVNoaWZ0Pzogc3QuQmFzZWxpbmVTaGlmdF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2Jsb2NrLXNpemVcclxuICAgICAqL1xyXG4gICAgYmxvY2tTaXplPzogQ3NzU2l6ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyXHJcbiAgICAgKi9cclxuICAgIGJvcmRlcj86IHN0LkJvcmRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1ibG9ja1xyXG4gICAgICovXHJcbiAgICBib3JkZXJCbG9jaz86IHN0LkJvcmRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1ibG9jay1jb2xvclxyXG4gICAgICovXHJcbiAgICBib3JkZXJCbG9ja0NvbG9yPzogT25lT3JQYWlyPENzc0NvbG9yPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWJsb2NrLWVuZFxyXG4gICAgICovXHJcbiAgICBib3JkZXJCbG9ja0VuZD86IHN0LkJvcmRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1ibG9jay1lbmQtY29sb3JcclxuICAgICAqL1xyXG4gICAgYm9yZGVyQmxvY2tFbmRDb2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItYmxvY2stZW5kLXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGJvcmRlckJsb2NrRW5kU3R5bGU/OiBzdC5Cb3JkZXJTdHlsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWJsb2NrLWVuZC13aWR0aFxyXG4gICAgICovXHJcbiAgICBib3JkZXJCbG9ja0VuZFdpZHRoPzogc3QuTGluZVdpZHRoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItYmxvY2stc3RhcnRcclxuICAgICAqL1xyXG4gICAgYm9yZGVyQmxvY2tTdGFydD86IHN0LkJvcmRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1ibG9jay1zdGFydC1jb2xvclxyXG4gICAgICovXHJcbiAgICBib3JkZXJCbG9ja1N0YXJ0Q29sb3I/OiBDc3NDb2xvcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWJsb2NrLXN0YXJ0LXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGJvcmRlckJsb2NrU3RhcnRTdHlsZT86IHN0LkJvcmRlclN0eWxlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItYmxvY2stc3RhcnQtd2lkdGhcclxuICAgICAqL1xyXG4gICAgYm9yZGVyQmxvY2tTdGFydFdpZHRoPzogc3QuTGluZVdpZHRoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItYmxvY2stc3R5bGVcclxuICAgICAqL1xyXG4gICAgYm9yZGVyQmxvY2tTdHlsZT86IHN0LkJvcmRlclN0eWxlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItYmxvY2std2lkdGhcclxuICAgICAqL1xyXG4gICAgYm9yZGVyQmxvY2tXaWR0aD86IHN0LkxpbmVXaWR0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWJvdHRvbVxyXG4gICAgICovXHJcbiAgICBib3JkZXJCb3R0b20/OiBzdC5Cb3JkZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItY290dG9tLWNvbG9yXHJcbiAgICAgKi9cclxuICAgIGJvcmRlckJvdHRvbUNvbG9yPzogQ3NzQ29sb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXNcclxuICAgICAqL1xyXG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1cz86IENzc1JhZGl1cztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXNcclxuICAgICAqL1xyXG4gICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM/OiBDc3NSYWRpdXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1ib3R0b20tc3R5bGVcclxuICAgICAqL1xyXG4gICAgYm9yZGVyQm90dG9tU3R5bGU/OiBzdC5Cb3JkZXJTdHlsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWJvdHRvbS13aWR0aFxyXG4gICAgICovXHJcbiAgICBib3JkZXJCb3R0b21XaWR0aD86IHN0LkxpbmVXaWR0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWNvbGxhcHNlXHJcbiAgICAgKi9cclxuICAgIGJvcmRlckNvbGxhcHNlPzogc3QuQm9yZGVyQ29sYXBzZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1jb2xvclxyXG4gICAgICovXHJcbiAgICBib3JkZXJDb2xvcj86IHN0LkJvcmRlckNvbG9yX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWVuZC1lbmQtcmFkaXVzXHJcbiAgICAgKi9cclxuICAgIGJvcmRlckVuZEVuZFJhZGl1cz86IENzc1JhZGl1cztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWVuZC1zdGFydC1yYWRpdXNcclxuICAgICAqL1xyXG4gICAgYm9yZGVyRW5kU3RhcnRSYWRpdXM/OiBDc3NSYWRpdXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbWFnZVxyXG4gICAgICovXHJcbiAgICBib3JkZXJJbWFnZT86IHN0LkJvcmRlckltYWdlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWltYWdlLW91dHNldFxyXG4gICAgICovXHJcbiAgICBib3JkZXJJbWFnZU91dHNldD86IHN0LkJvcmRlckltYWdlT3V0c2V0X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWltYWdlLXJlcGVhdFxyXG4gICAgICovXHJcbiAgICBib3JkZXJJbWFnZVJlcGVhdD86IHN0LkJvcmRlckltYWdlUmVwZWF0X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWltYWdlLXNsaWNlXHJcbiAgICAgKi9cclxuICAgIGJvcmRlckltYWdlU2xpY2U/OiBzdC5Cb3JkZXJJbWFnZVNsaWNlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWltYWdlLXNvdXJjZVxyXG4gICAgICovXHJcbiAgICBib3JkZXJJbWFnZVNvdXJjZT86IHN0LkJvcmRlckltYWdlU291cmNlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWltYWdlLXdpZHRoXHJcbiAgICAgKi9cclxuICAgIGJvcmRlckltYWdlV2lkdGg/OiBzdC5Cb3JkZXJJbWFnZVdpZHRoX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWlubGluZVxyXG4gICAgICovXHJcbiAgICBib3JkZXJJbmxpbmU/OiBzdC5Cb3JkZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItaW5saW5lLWNvbG9yXHJcbiAgICAgKi9cclxuICAgIGJvcmRlcklubGluZUNvbG9yPzogT25lT3JQYWlyPENzc0NvbG9yPjtcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbmxpbmUtZW5kXHJcbiAgICAgKi9cclxuICAgIGJvcmRlcklubGluZUVuZD86IHN0LkJvcmRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbmxpbmUtZW5kLWNvbG9yXHJcbiAgICAgKi9cclxuICAgIGJvcmRlcklubGluZUVuZENvbG9yPzogQ3NzQ29sb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbmxpbmUtZW5kLXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGJvcmRlcklubGluZUVuZFN0eWxlPzogc3QuQm9yZGVyU3R5bGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbmxpbmUtZW5kLXdpZHRoXHJcbiAgICAgKi9cclxuICAgIGJvcmRlcklubGluZUVuZFdpZHRoPzogc3QuTGluZVdpZHRoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItaW5saW5lLXN0YXJ0XHJcbiAgICAgKi9cclxuICAgIGJvcmRlcklubGluZVN0YXJ0Pzogc3QuQm9yZGVyX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWlubGluZS1zdGFydC1jb2xvclxyXG4gICAgICovXHJcbiAgICBib3JkZXJJbmxpbmVTdGFydENvbG9yPzogQ3NzQ29sb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbmxpbmUtc3RhcnQtc3R5bGVcclxuICAgICAqL1xyXG4gICAgYm9yZGVySW5saW5lU3RhcnRTdHlsZT86IHN0LkJvcmRlclN0eWxlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItaW5saW5lLXN0YXJ0LXdpZHRoXHJcbiAgICAgKi9cclxuICAgIGJvcmRlcklubGluZVN0YXJ0V2lkdGg/OiBzdC5MaW5lV2lkdGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbmxpbmUtc3R5bGVcclxuICAgICAqL1xyXG4gICAgYm9yZGVySW5saW5lU3R5bGU/OiBzdC5Cb3JkZXJTdHlsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWlubGluZS13aWR0aFxyXG4gICAgICovXHJcbiAgICBib3JkZXJJbmxpbmVXaWR0aD86IHN0LkxpbmVXaWR0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWxlZnRcclxuICAgICAqL1xyXG4gICAgYm9yZGVyTGVmdD86IHN0LkJvcmRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1sZWZ0LWNvbG9yXHJcbiAgICAgKi9cclxuICAgIGJvcmRlckxlZnRDb2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItbGVmdC1zdHlsZVxyXG4gICAgICovXHJcbiAgICBib3JkZXJMZWZ0U3R5bGU/OiBzdC5Cb3JkZXJTdHlsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLWxlZnQtd2lkdGhcclxuICAgICAqL1xyXG4gICAgYm9yZGVyTGVmdFdpZHRoPzogc3QuTGluZVdpZHRoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItcmFkaXVzXHJcbiAgICAgKi9cclxuICAgIGJvcmRlclJhZGl1cz86IEJvcmRlclJhZGl1cztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXJpZ2h0XHJcbiAgICAgKi9cclxuICAgIGJvcmRlclJpZ2h0Pzogc3QuQm9yZGVyX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXJpZ2h0LWNvbG9yXHJcbiAgICAgKi9cclxuICAgIGJvcmRlclJpZ2h0Q29sb3I/OiBDc3NDb2xvcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXJpZ2h0LXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGJvcmRlclJpZ2h0U3R5bGU/OiBzdC5Cb3JkZXJTdHlsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXJpZ2h0LXdpZHRoXHJcbiAgICAgKi9cclxuICAgIGJvcmRlclJpZ2h0V2lkdGg/OiBzdC5MaW5lV2lkdGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1zcGFjaW5nXHJcbiAgICAgKi9cclxuICAgIGJvcmRlclNwYWNpbmc/OiBzdC5Cb3JkZXJTcGFjaW5nX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXN0YXJ0LWVuZC1yYWRpdXNcclxuICAgICAqL1xyXG4gICAgYm9yZGVyU3RhcnRFbmRSYWRpdXM/OiBDc3NSYWRpdXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1zdGFydC1zdGFydC1yYWRpdXNcclxuICAgICAqL1xyXG4gICAgYm9yZGVyU3RhcnRTdGFydFJhZGl1cz86IENzc1JhZGl1cztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGJvcmRlclN0eWxlPzogc3QuQm9yZGVyU3R5bGVfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItdG9wXHJcbiAgICAgKi9cclxuICAgIGJvcmRlclRvcD86IHN0LkJvcmRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci10b3AtY29sb3JcclxuICAgICAqL1xyXG4gICAgYm9yZGVyVG9wQ29sb3I/OiBDc3NDb2xvcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXRvcC1sZWZ0LXJhZGl1c1xyXG4gICAgICovXHJcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzPzogQ3NzUmFkaXVzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItdG9wLXJpZ2h0LXJhZGl1c1xyXG4gICAgICovXHJcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1cz86IENzc1JhZGl1cztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXRvcC1zdHlsZVxyXG4gICAgICovXHJcbiAgICBib3JkZXJUb3BTdHlsZT86IHN0LkJvcmRlclN0eWxlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItdG9wLXdpZHRoXHJcbiAgICAgKi9cclxuICAgIGJvcmRlclRvcFdpZHRoPzogc3QuTGluZVdpZHRoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItd2lkdGhcclxuICAgICAqL1xyXG4gICAgYm9yZGVyV2lkdGg/OiBzdC5Cb3JkZXJXaWR0aF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvdHRvbVxyXG4gICAgICovXHJcbiAgICBib3R0b20/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JveC1kZWNvcmF0aW9uLWJyZWFrXHJcbiAgICAgKi9cclxuICAgIGJveERlY29yYXRpb25CcmVhaz86IHN0LkJveERlY29yYXRpb25CcmVha19TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JveC1zaGFkb3dcclxuICAgICAqL1xyXG4gICAgYm94U2hhZG93Pzogc3QuQm94U2hhZG93X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm94LXNpemluZ1xyXG4gICAgICovXHJcbiAgICBib3hTaXppbmc/OiBzdC5Cb3hTaXppbmdfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9icmVhay1hZnRlclxyXG4gICAgICovXHJcbiAgICBicmVha0FmdGVyPzogc3QuQnJlYWtBZnRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JyZWFrLWJlZm9yZVxyXG4gICAgICovXHJcbiAgICBicmVha0JlZm9yZT86IHN0LkJyZWFrQmVmb3JlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYnJlYWstaW5zaWRlXHJcbiAgICAgKi9cclxuICAgIGJyZWFrSW5zaWRlPzogc3QuQnJlYWtJbnNpZGVfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9idWZmZXJlZC1yZW5kZXJpbmdcclxuICAgICAqL1xyXG4gICAgYnVmZmVyZWRSZW5kZXJpbmc/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jYXB0aW9uLXNpZGVcclxuICAgICAqL1xyXG4gICAgY2FwdGlvblNpZGU/OiBzdC5DYXB0aW9uU2lkZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NhcmV0LWNvbG9yXHJcbiAgICAgKi9cclxuICAgIGNhcmV0Q29sb3I/OiBzdC5DYXJldENvbG9yX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY2xlYXJcclxuICAgICAqL1xyXG4gICAgY2xlYXI/OiBzdC5DbGVhcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NsaXBcclxuICAgICAqIEBkZXByZWNhdGVkIFRoZSBDU1MgYGNsaXBgIHByb3BlcnR5IGFuZCBgcmVjdCgpYCBmdW5jdGlvbiBhcmUgZGVwcmVjYXRlZC5cclxuICAgICAqL1xyXG4gICAgY2xpcD86IHN0LkNsaXBfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jbGlwLXBhdGhcclxuICAgICAqL1xyXG4gICAgY2xpcFBhdGg/OiBzdC5DbGlwUGF0aF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9jbGlwLXJ1bGVcclxuICAgICAqL1xyXG4gICAgY2xpcFJ1bGU/OiBzdC5DbGlwUnVsZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yXHJcbiAgICAgKi9cclxuICAgIGNvbG9yPzogQ3NzQ29sb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yLWFkanVzdFxyXG4gICAgICovXHJcbiAgICBjb2xvckFkanVzdD86IHN0LkNvbG9yQWRqdXN0X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL2NvbG9yLWludGVycG9sYXRpb25cclxuICAgICAqL1xyXG4gICAgY29sb3JJbnRlcnBvbGF0aW9uPzogc3QuQ29sb3JJbnRlcnBvbGF0aW9uX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVyc1xyXG4gICAgICovXHJcbiAgICBjb2xvckludGVycG9sYXRpb25GaWx0ZXJzPzogc3QuQ29sb3JJbnRlcnBvbGF0aW9uX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sb3Itc2NoZW1lXHJcbiAgICAgKi9cclxuICAgIGNvbG9yU2NoZW1lPzogc3QuQ29sb3JTY2hlbWVfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2x1bW4tY291bnRcclxuICAgICAqL1xyXG4gICAgY29sdW1uQ291bnQ/OiBzdC5Db2x1bW5Db3VudF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbHVtbi1maWxsXHJcbiAgICAgKi9cclxuICAgIGNvbHVtbkZpbGw/OiBzdC5Db2x1bW5GaWxsX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sdW1uLWdhcFxyXG4gICAgICovXHJcbiAgICBjb2x1bW5HYXA/OiBzdC5Db2x1bW5HYXBfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2x1bW4tcnVsZVxyXG4gICAgICovXHJcbiAgICBjb2x1bW5SdWxlPzogc3QuQm9yZGVyX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sdW1uLXJ1bGUtY29sb3JcclxuICAgICAqL1xyXG4gICAgY29sdW1uUnVsZUNvbG9yPzogQ3NzQ29sb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbHVtbi1ydWxlLXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGNvbHVtblJ1bGVTdHlsZT86IHN0LkJvcmRlclN0eWxlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2x1bW4tcnVsZS13aWR0aFxyXG4gICAgICovXHJcbiAgICBjb2x1bW5SdWxlV2lkdGg/OiBzdC5MaW5lV2lkdGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbHVtbi1zcGFuXHJcbiAgICAgKi9cclxuICAgIGNvbHVtblNwYW4/OiBzdC5Db2x1bW5TcGFuX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sdW1uLXdpZHRoXHJcbiAgICAgKi9cclxuICAgIGNvbHVtbldpZHRoPzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2x1bW5zXHJcbiAgICAgKi9cclxuICAgIGNvbHVtbnM/OiBzdC5Db2x1bW5zX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29udGFpblxyXG4gICAgICovXHJcbiAgICBjb250YWluPzogc3QuQ29udGFpbl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbnRlbnRcclxuICAgICAqL1xyXG4gICAgY29udGVudD86IHN0LkNvbnRlbnRfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb250ZW50LXZpc2liaWxpdHlcclxuICAgICAqL1xyXG4gICAgY29udGVudFZpc2liaWxpdHk/OiBzdC5Db250ZW50VmlzaWJpbGl0eV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvdW50ZXItaW5jcmVtZW50XHJcbiAgICAgKi9cclxuICAgIGNvdW50ZXJJbmNyZW1lbnQ/OiBzdC5Dc3NDb3VudGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb3VudGVyLXJlc2V0XHJcbiAgICAgKi9cclxuICAgIGNvdW50ZXJSZXNldD86IHN0LkNzc0NvdW50ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvdW50ZXItc2V0XHJcbiAgICAgKi9cclxuICAgIGNvdW50ZXJTZXQ/OiBzdC5Dc3NDb3VudGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jdXJzb3JcclxuICAgICAqL1xyXG4gICAgY3Vyc29yPzogc3QuQ3Vyc29yX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZGlyZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGRpcmVjdGlvbj86IERpcmVjdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZGlzcGxheVxyXG4gICAgICovXHJcbiAgICBkaXNwbGF5Pzogc3QuRGlzcGxheV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2RvbWluYW50LWJhc2VsaW5lXHJcbiAgICAgKi9cclxuICAgIGRvbWluYW50QmFzZWxpbmU/OiBzdC5Eb21pbmFudEJhc2VsaW5lX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZW1wdHktY2VsbHNcclxuICAgICAqL1xyXG4gICAgZW1wdHlDZWxscz86IHN0LkVtcHR5Q2VsbHNfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9maWxsXHJcbiAgICAgKi9cclxuICAgIGZpbGw/OiBDc3NDb2xvcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZmlsbC1vcGFjaXR5XHJcbiAgICAgKi9cclxuICAgIGZpbGxPcGFjaXR5PzogQ3NzUGVyY2VudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZmlsbC1ydWxlXHJcbiAgICAgKi9cclxuICAgIGZpbGxSdWxlPzogRmlsbFJ1bGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZpbHRlclxyXG4gICAgICovXHJcbiAgICBmaWx0ZXI/OiBzdC5GaWx0ZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4XHJcbiAgICAgKi9cclxuICAgIGZsZXg/OiBzdC5GbGV4X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZmxleC1iYXNpc1xyXG4gICAgICovXHJcbiAgICBmbGV4QmFzaXM/OiBzdC5GbGV4QmFzaXNfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4LWRpcmVjdGlvblxyXG4gICAgICovXHJcbiAgICBmbGV4RGlyZWN0aW9uPzogc3QuRmxleERpcmVjdGlvbl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZsZXgtZmxvd1xyXG4gICAgICovXHJcbiAgICBmbGV4Rmxvdz86IHN0LkZsZXhGbG93X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZmxleC1ncm93XHJcbiAgICAgKi9cclxuICAgIGZsZXhHcm93PzogQ3NzTnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4LXNocmlua1xyXG4gICAgICovXHJcbiAgICBmbGV4U2hyaW5rPzogQ3NzTnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4LXdyYXBcclxuICAgICAqL1xyXG4gICAgZmxleFdyYXA/OiBzdC5GbGV4V3JhcF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2Zsb2F0XHJcbiAgICAgKi9cclxuICAgIGZsb2F0Pzogc3QuRmxvYXRfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbG9vZC1jb2xvclxyXG4gICAgICovXHJcbiAgICBmbG9vZENvbG9yPzogQ3NzQ29sb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2Zsb29kLW9wYWNpdHlcclxuICAgICAqL1xyXG4gICAgZmxvb2RPcGFjaXR5PzogQ3NzUGVyY2VudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udFxyXG4gICAgICovXHJcbiAgICBmb250Pzogc3QuRm9udF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtZmFtaWx5XHJcbiAgICAgKi9cclxuICAgIGZvbnRGYW1pbHk/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250LWZlYXR1cmUtc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgZm9udEZlYXR1cmVTZXR0aW5ncz86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQta2VybmluZ1xyXG4gICAgICovXHJcbiAgICBmb250S2VybmluZz86IEZvbnRLZXJuaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250LWxhbmd1YWdlLW92ZXJyaWRlXHJcbiAgICAgKi9cclxuICAgICBmb250TGFuZ3VhZ2VPdmVycmlkZT86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtb3B0aWNhbC1zaXppbmdcclxuICAgICAqL1xyXG4gICAgZm9udE9wdGljYWxTaXppbmc/OiBGb250T3B0aWNhbFNpemluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC1zaXplXHJcbiAgICAgKi9cclxuICAgIGZvbnRTaXplPzogRm9udFNpemU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtc2l6ZS1hZGp1c3RcclxuICAgICAqL1xyXG4gICAgZm9udFNpemVBZGp1c3Q/OiBDc3NOdW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtc3RyZXRjaFxyXG4gICAgICovXHJcbiAgICBmb250U3RyZXRjaD86IEZvbnRTdHJldGNoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250LXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGZvbnRTdHlsZT86IEZvbnRTdHlsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC1zeW50aGVzaXNcclxuICAgICAqL1xyXG4gICAgZm9udFN5bnRoZXNpcz86IEZvbnRTeW50aGVzaXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtdmFyaWFudFxyXG4gICAgICovXHJcbiAgICBmb250VmFyaWFudD86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQtdmFyaWFudC1hbHRlcm5hdGVzXHJcbiAgICAgKi9cclxuICAgIGZvbnRWYXJpYW50QWx0ZXJuYXRlcz86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250LXZhcmlhbnQtY2Fwc1xyXG4gICAgICovXHJcbiAgICBmb250VmFyaWFudENhcHM/OiBGb250VmFyaWFudENhcHM7XHJcblxyXG4gICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC12YXJpYW50LWVhc3QtYXNpYW5cclxuICAgICAqL1xyXG4gICAgZm9udFZhcmlhbnRFYXN0QXNpYW4/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250LXZhcmlhbnQtbGlnYXR1cmVzXHJcbiAgICAgKi9cclxuICAgIGZvbnRWYXJpYW50TGlnYXR1cmVzPzogc3QuRGVmYXVsdFN0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC12YXJpYW50LW51bWVyaWNcclxuICAgICAqL1xyXG4gICAgZm9udFZhcmlhbnROdW1lcmljPzogc3QuRGVmYXVsdFN0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC12YXJpYW50LXBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIGZvbnRWYXJpYW50UG9zaXRpb24/OiBGb250VmFyaWFudFBvc2l0aW9uO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250LXZhcmlhdGlvbi1zZXR0aW5nc1xyXG4gICAgICovXHJcbiAgICBmb250VmFyaWF0aW9uU2V0dGluZ3M/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250LXdpZ2h0XHJcbiAgICAgKi9cclxuICAgIGZvbnRXZWlnaHQ/OiBzdC5Gb250V2VpZ2h0X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9yY2VkLWNvbG9yLWFkanVzdFxyXG4gICAgICovXHJcbiAgICBmb3JjZWRDb2xvckFkanVzdD86IHN0LkZvcmNlZENvbG9yQWRqdXN0X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ2FwXHJcbiAgICAgKi9cclxuICAgIGdhcD86IHN0LkdhcF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2dyaWRcclxuICAgICAqL1xyXG4gICAgZ3JpZD86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2dyaWQtYXJlYVxyXG4gICAgICovXHJcbiAgICBncmlkQXJlYT86IHN0LkdyaWRBcmVhX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC1hdXRvLWNvbHVtbnNcclxuICAgICAqL1xyXG4gICAgZ3JpZEF1dG9Db2x1bW5zPzogc3QuR3JpZEF1dG9BeGlzX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC1hdXRvLWZsb3dcclxuICAgICAqL1xyXG4gICAgZ3JpZEF1dG9GbG93Pzogc3QuR3JpZEF1dG9GbG93X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC1hdXRvLXJvd3NcclxuICAgICAqL1xyXG4gICAgZ3JpZEF1dG9Sb3dzPzogc3QuR3JpZEF1dG9BeGlzX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC1jb2x1bW5cclxuICAgICAqL1xyXG4gICAgZ3JpZENvbHVtbj86IHN0LkdyaWRBeGlzX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC1jb2x1bW4tZW5kXHJcbiAgICAgKi9cclxuICAgIGdyaWRDb2x1bW5FbmQ/OiBzdC5HcmlkQXhpc1NpZGVfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLWNvbHVtbi1nYXBcclxuICAgICAqL1xyXG4gICAgZ3JpZENvbHVtbkdhcD86IHN0LkNvbHVtbkdhcF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2dyaWQtY29sdW1uLXN0YXJ0XHJcbiAgICAgKi9cclxuICAgIGdyaWRDb2x1bW5TdGFydD86IHN0LkdyaWRBeGlzU2lkZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2dyaWQtZ2FwXHJcbiAgICAgKi9cclxuICAgIGdyaWRHYXA/OiBzdC5HYXBfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLXJvd1xyXG4gICAgICovXHJcbiAgICBncmlkUm93Pzogc3QuR3JpZEF4aXNfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLXJvdy1lbmRcclxuICAgICAqL1xyXG4gICAgZ3JpZFJvd0VuZD86IHN0LkdyaWRBeGlzU2lkZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2dyaWQtcm93LWdhcFxyXG4gICAgICovXHJcbiAgICBncmlkUm93R2FwPzogc3QuUm93R2FwX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC1yb3ctc3RhcnRcclxuICAgICAqL1xyXG4gICAgZ3JpZFJvd1N0YXJ0Pzogc3QuR3JpZEF4aXNTaWRlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC10ZW1wbGF0ZVxyXG4gICAgICovXHJcbiAgICBncmlkVGVtcGxhdGU/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLXRlbXBsYXRlLWFyZWFzXHJcbiAgICAgKi9cclxuICAgIGdyaWRUZW1wbGF0ZUFyZWFzPzogc3QuR3JpZFRlbXBsYXRlQXJlYXNfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLXRlbXBsYXRlLWNvbHVtbnNcclxuICAgICAqL1xyXG4gICAgZ3JpZFRlbXBsYXRlQ29sdW1ucz86IHN0LkdyaWRUZW1wbGF0ZUF4aXNfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ncmlkLXRlbXBsYXRlLXJvd3NcclxuICAgICAqL1xyXG4gICAgZ3JpZFRlbXBsYXRlUm93cz86IHN0LkdyaWRUZW1wbGF0ZUF4aXNfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9oYW5naW5nLXB1bmN0dWF0aW9uXHJcbiAgICAgKi9cclxuICAgIGhhbmdpbmdQdW5jdHVhdGlvbj86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2hlaWdodFxyXG4gICAgICovXHJcbiAgICBoZWlnaHQ/OiBDc3NTaXplO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9oeXBoZW5zXHJcbiAgICAgKi9cclxuICAgIGh5cGhlbnM/OiBzdC5IeXBoZW5zX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW1hZ2Utb3JpZW50YXRpb25cclxuICAgICAqL1xyXG4gICAgaW1hZ2VPcmllbnRhdGlvbj86IHN0LkltYWdlT3JpZW50YXRpb25fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9pbWFnZS1yZW5kZXJpbmdcclxuICAgICAqL1xyXG4gICAgaW1hZ2VSZW5kZXJpbmc/OiBzdC5JbWFnZVJlbmRlcmluZ19TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2luaXRpYWwtbGV0dGVyXHJcbiAgICAgKi9cclxuICAgIGluaXRpYWxMZXR0ZXI/OiBzdC5Jbml0aWFsTGV0dGVyX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW5saW5lLXNpemVcclxuICAgICAqL1xyXG4gICAgaW5saW5lU2l6ZT86IENzc1NpemU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2luc2V0XHJcbiAgICAgKi9cclxuICAgIGluc2V0PzogT25lT3JCb3g8Q3NzTGVuZ3RoT3JBdXRvPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW5zZXQtYmxvY2tcclxuICAgICAqL1xyXG4gICAgaW5zZXRCbG9jaz86IE9uZU9yUGFpcjxDc3NMZW5ndGhPckF1dG8+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9pbnNldC1ibG9jay1lbmRcclxuICAgICAqL1xyXG4gICAgaW5zZXRCbG9ja0VuZD86IENzc0xlbmd0aE9yQXV0bztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW5zZXQtYmxvY2stc3RhcnRcclxuICAgICAqL1xyXG4gICAgaW5zZXRCbG9ja1N0YXJ0PzogQ3NzTGVuZ3RoT3JBdXRvO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9pbnNldC1pbmxpbmVcclxuICAgICAqL1xyXG4gICAgaW5zZXRJbmxpbmU/OiBPbmVPclBhaXI8Q3NzTGVuZ3RoT3JBdXRvPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW5zZXQtaW5saW5lLWVuZFxyXG4gICAgICovXHJcbiAgICBpbnNldElubGluZUVuZD86IENzc0xlbmd0aE9yQXV0bztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW5zZXQtaW5saW5lLXN0YXJ0XHJcbiAgICAgKi9cclxuICAgIGluc2V0SW5saW5lU3RhcnQ/OiBDc3NMZW5ndGhPckF1dG87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2lzb2xhdGlvblxyXG4gICAgICovXHJcbiAgICBpc29sYXRpb24/OiBzdC5Jc29sYXRpb25fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9qdXN0aWZ5LWNvbnRlbnRcclxuICAgICAqL1xyXG4gICAganVzdGlmeUNvbnRlbnQ/OiBzdC5KdXN0aWZ5Q29udGVudF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2p1c3RpZnktaXRlbXNcclxuICAgICAqL1xyXG4gICAganVzdGlmeUl0ZW1zPzogc3QuSnVzdGlmeUl0ZW1zX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvanVzdGlmeS1zZWxmXHJcbiAgICAgKi9cclxuICAgIGp1c3RpZnlTZWxmPzogc3QuSnVzdGlmeVNlbGZfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9sZWZ0XHJcbiAgICAgKi9cclxuICAgIGxlZnQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xldHRlci1zcGFjaW5nXHJcbiAgICAgKi9cclxuICAgIGxldHRlclNwYWNpbmc/OiBzdC5MZXR0ZXJTcGFjaW5nX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbGlnaHRpbmctY29sb3JcclxuICAgICAqL1xyXG4gICAgbGlnaHRpbmdDb2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWJyZWFrXHJcbiAgICAgKi9cclxuICAgIGxpbmVCcmVhaz86IHN0LkxpbmVCcmVha19TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpbmUtY2xhbXBcclxuICAgICAqL1xyXG4gICAgbGluZUNsYW1wPzogc3QuTGluZUNsYW1wX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbGluZS1oZWlnaHRcclxuICAgICAqL1xyXG4gICAgbGluZUhlaWdodD86IHN0LkxpbmVIZWlnaHRfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saXN0LXN0eWxlXHJcbiAgICAgKi9cclxuICAgIGxpc3RTdHlsZT86IHN0Lkxpc3RTdHlsZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpc3Qtc3R5bGUtaW1hZ2VcclxuICAgICAqL1xyXG4gICAgbGlzdFN0eWxlSW1hZ2U/OiBzdC5MaXN0U3R5bGVJbWFnZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpc3Qtc3R5bGUtcG9zaXRpb25cclxuICAgICAqL1xyXG4gICAgbGlzdFN0eWxlUG9zaXRpb24/OiBzdC5MaXN0U3R5bGVQb3NpdGlvbl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpc3Qtc3R5bGUtdHlwZVxyXG4gICAgICovXHJcbiAgICBsaXN0U3R5bGVUeXBlPzogc3QuTGlzdFN0eWxlVHlwZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpblxyXG4gICAgICovXHJcbiAgICBtYXJnaW4/OiBPbmVPckJveDxDc3NMZW5ndGhPckF1dG8+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXJnaW4tYmxvY2tcclxuICAgICAqL1xyXG4gICAgbWFyZ2luQmxvY2s/OiBPbmVPclBhaXI8Q3NzTGVuZ3RoT3JBdXRvPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFyZ2luLWJsb2NrLWVuZFxyXG4gICAgICovXHJcbiAgICBtYXJnaW5CbG9ja0VuZD86IENzc0xlbmd0aE9yQXV0bztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFyZ2luLWJsb2NrLXN0YXJ0XHJcbiAgICAgKi9cclxuICAgIG1hcmdpbkJsb2NrU3RhcnQ/OiBDc3NMZW5ndGhPckF1dG87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi1ib3R0b21cclxuICAgICAqL1xyXG4gICAgbWFyZ2luQm90dG9tPzogQ3NzTGVuZ3RoT3JBdXRvO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXJnaW4taW5saW5lXHJcbiAgICAgKi9cclxuICAgIG1hcmdpbklubGluZT86IE9uZU9yUGFpcjxDc3NMZW5ndGhPckF1dG8+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXJnaW4taW5saW5lLWVuZFxyXG4gICAgICovXHJcbiAgICBtYXJnaW5JbmxpbmVFbmQ/OiBDc3NMZW5ndGhPckF1dG87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi1pbmxpbmUtc3RhcnRcclxuICAgICAqL1xyXG4gICAgbWFyZ2luSW5saW5lU3RhcnQ/OiBDc3NMZW5ndGhPckF1dG87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi1sZWZ0XHJcbiAgICAgKi9cclxuICAgIG1hcmdpbkxlZnQ/OiBDc3NMZW5ndGhPckF1dG87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi1yaWdodFxyXG4gICAgICovXHJcbiAgICBtYXJnaW5SaWdodD86IENzc0xlbmd0aE9yQXV0bztcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFyZ2luLXRvcFxyXG4gICAgICovXHJcbiAgICBtYXJnaW5Ub3A/OiBDc3NMZW5ndGhPckF1dG87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi10cmltXHJcbiAgICAgKi9cclxuICAgIG1hcmdpblRyaW0/OiBzdC5NYXJnaW5UcmltX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFya2VyXHJcbiAgICAgKi9cclxuICAgIG1hcmtlcj86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmtlci1lbmRcclxuICAgICAqL1xyXG4gICAgbWFya2VyRW5kPzogc3QuTWFya2VyX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFya2VyLW1pZFxyXG4gICAgICovXHJcbiAgICBtYXJrZXJNaWQ/OiBzdC5NYXJrZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXJrZXItc3RhcnRcclxuICAgICAqL1xyXG4gICAgbWFya2VyU3RhcnQ/OiBzdC5NYXJrZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXNrXHJcbiAgICAgKi9cclxuICAgIG1hc2s/OnN0LiBEZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXNrLWJvcmRlclxyXG4gICAgICovXHJcbiAgICBtYXNrQm9yZGVyPzogc3QuTWFza0JvcmRlcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hc2stYm9yZGVyLW91dHNldFxyXG4gICAgICovXHJcbiAgICBtYXNrQm9yZGVyTW9kZT86IHN0Lk1hc2tCb3JkZXJNb2RlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay1ib3JkZXItb3V0c2V0XHJcbiAgICAgKi9cclxuICAgIG1hc2tCb3JkZXJPdXRzZXQ/OiBzdC5Cb3JkZXJJbWFnZU91dHNldF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hc2stYm9yZGVyLXJlcGVhdFxyXG4gICAgICovXHJcbiAgICBtYXNrQm9yZGVyUmVwZWF0Pzogc3QuQm9yZGVySW1hZ2VSZXBlYXRfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXNrLWJvcmRlci1zbGljZVxyXG4gICAgICovXHJcbiAgICBtYXNrQm9yZGVyU2xpY2U/OiBzdC5Cb3JkZXJJbWFnZVNsaWNlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay1ib3JkZXItc291cmNlXHJcbiAgICAgKi9cclxuICAgIG1hc2tCb3JkZXJTb3VyY2U/OiBzdC5Cb3JkZXJJbWFnZVNvdXJjZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hc2stYm9yZGVyLXdpZHRoXHJcbiAgICAgKi9cclxuICAgIG1hc2tCb3JkZXJXaWR0aD86IHN0LkJvcmRlckltYWdlV2lkdGhfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXNrLWNsaXBcclxuICAgICAqL1xyXG4gICAgbWFza0NsaXA/OiBPbmVPck1hbnk8c3QuR2VvbWV0cnlCb3hLZXl3b3JkPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay1jb21wb3NpdGVcclxuICAgICAqL1xyXG4gICAgbWFza0NvbXBvc2l0ZT86IE9uZU9yTWFueTxzdC5NYXNrQ29tcG9zaXRlS2V5d29yZD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hc2staW1hZ2VcclxuICAgICAqL1xyXG4gICAgbWFza0ltYWdlPzogT25lT3JNYW55PENzc0ltYWdlPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay1tb2RlXHJcbiAgICAgKi9cclxuICAgIG1hc2tNb2RlPzogT25lT3JNYW55PHN0Lk1hc2tNb2RlS2V5d29yZD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hc2stb3JpZ2luXHJcbiAgICAgKi9cclxuICAgIG1hc2tPcmlnaW4/OiBPbmVPck1hbnk8c3QuR2VvbWV0cnlCb3hLZXl3b3JkPjtcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hc2stcG9zaXRpb25cclxuICAgICAqL1xyXG4gICAgbWFza1Bvc2l0aW9uPzogQ3NzTXVsdGlQb3NpdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay1yZXBlYXRcclxuICAgICAqL1xyXG4gICAgbWFza1JlcGVhdD86IE9uZU9yTWFueTxzdC5CYWNrZ3JvdW5kUmVwZWF0PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay1zaXplXHJcbiAgICAgKi9cclxuICAgIG1hc2tTaXplPzogc3QuRGVmYXVsdFN0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFzay10eXBlXHJcbiAgICAgKi9cclxuICAgIG1hc2tUeXBlPzogc3QuTWFza1R5cGVLZXl3b3JkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXRoLXN0eWxlXHJcbiAgICAgKi9cclxuICAgIG1hdGhTdHlsZT86IHN0Lk1hdGhTdHlsZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21heC1ibG9jay1zaXplXHJcbiAgICAgKi9cclxuICAgIG1heEJsb2NrU2l6ZT86IENzc1NpemU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21heC1oZWlnaHRcclxuICAgICAqL1xyXG4gICAgbWF4SGVpZ2h0PzogQ3NzU2l6ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWF4LWlubGluZS1zaXplXHJcbiAgICAgKi9cclxuICAgIG1heElubGluZVNpemU/OiBDc3NTaXplO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXgtd2lkdGhcclxuICAgICAqL1xyXG4gICAgbWF4V2lkdGg/OiBDc3NTaXplO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9taW4tYmxvY2stc2l6ZVxyXG4gICAgICovXHJcbiAgICBtaW5CbG9ja1NpemU/OiBDc3NTaXplO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9taW4taGVpZ2h0XHJcbiAgICAgKi9cclxuICAgIG1pbkhlaWdodD86IENzc1NpemU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21pbi1pbmxpbmUtc2l6ZVxyXG4gICAgICovXHJcbiAgICBtaW5JbmxpbmVTaXplPzogQ3NzU2l6ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWluLXdpZHRoXHJcbiAgICAgKi9cclxuICAgIG1pbldpZHRoPzogQ3NzU2l6ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWl4LWJsZW5kLW1vZGVcclxuICAgICAqL1xyXG4gICAgbWl4QmxlbmRNb2RlPzogc3QuQmxlbmRNb2RlS2V5d29yZHM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL29iamVjdC1maXRcclxuICAgICAqL1xyXG4gICAgb2JqZWN0Rml0Pzogc3QuT2JqZWN0Rml0X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb2JqZWN0LXBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIG9iamVjdFBvc2l0aW9uPzogQ3NzUG9zaXRpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL29mZnNldFxyXG4gICAgICovXHJcbiAgICBvZmZzZXQ/OiBzdC5PZmZzZXRfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vZmZzZXQtYW5jaG9yXHJcbiAgICAgKi9cclxuICAgIG9mZnNldEFuY2hvcj86IHN0Lk9mZnNldEFuY2hvcl9TdHlsZVR5cGVcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb2Zmc2V0LWRpc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIG9mZnNldERpc3RhbmNlPzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vZmZzZXQtcGF0aFxyXG4gICAgICovXHJcbiAgICBvZmZzZXRQYXRoPzogc3QuT2Zmc2V0UGF0aF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL29mZnNldC1wb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBvZmZzZXRQb3NpdGlvbj86IHN0Lk9mZnNldFBvc2l0aW9uX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb2Zmc2V0LXJvdGF0ZVxyXG4gICAgICovXHJcbiAgICBvZmZzZXRSb3RhdGU/OiBzdC5PZmZzZXRSb3RhdGVfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vcGFjaXR5XHJcbiAgICAgKi9cclxuICAgIG9wYWNpdHk/OiBDc3NQZXJjZW50O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vcmRlclxyXG4gICAgICovXHJcbiAgICBvcmRlcj86IENzc051bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb3JwaGFuc1xyXG4gICAgICovXHJcbiAgICBvcnBoYW5zPzogQ3NzTnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdXRsaW5lXHJcbiAgICAgKi9cclxuICAgIG91dGxpbmU/OiBzdC5Cb3JkZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdXRsaW5lLWNvbG9yXHJcbiAgICAgKi9cclxuICAgIG91dGxpbmVDb2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdXRsaW5lLW9mZnNldFxyXG4gICAgICovXHJcbiAgICBvdXRsaW5lT2Zmc2V0PzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdXRsaW5lLXN0eWxlXHJcbiAgICAgKi9cclxuICAgIG91dGxpbmVTdHlsZT86IHN0LkJvcmRlclN0eWxlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb3V0bGluZS13aWR0aFxyXG4gICAgICovXHJcbiAgICBvdXRsaW5lV2lkdGg/OiBzdC5MaW5lV2lkdGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJmbG93XHJcbiAgICAgKi9cclxuICAgIG92ZXJmbG93Pzogc3QuT3ZlcmZsb3dfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdmVyZmxvdy1hbmNob3JcclxuICAgICAqL1xyXG4gICAgb3ZlcmZsb3dBbmNob3I/OiBzdC5PdmVyZmxvd0FuY2hvcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJmbG93LWJsb2NrXHJcbiAgICAgKi9cclxuICAgIG92ZXJmbG93QmxvY2s/OiBzdC5PdmVyZmxvd0tleXdvcmQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJmbG93LWNsaXAtbWFyZ2luXHJcbiAgICAgKi9cclxuICAgICBvdmVyZmxvd0NsaXBNYXJnaW4/OiBzdC5PdmVyZmxvd0NsaXBNYXJnaW5fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdmVyZmxvdy1pbmxpbmVcclxuICAgICAqL1xyXG4gICAgb3ZlcmZsb3dJbmxpbmU/OiBzdC5PdmVyZmxvd0tleXdvcmQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJmbG93LXdyYXBcclxuICAgICAqL1xyXG4gICAgb3ZlcmZsb3dXcmFwPzogc3QuT3ZlcmZsb3dXcmFwX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb3ZlcmZsb3cteFxyXG4gICAgICovXHJcbiAgICBvdmVyZmxvd1g/OiBzdC5PdmVyZmxvd0tleXdvcmQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJmbG93LXlcclxuICAgICAqL1xyXG4gICAgb3ZlcmZsb3dZPzogc3QuT3ZlcmZsb3dLZXl3b3JkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vdmVyc2Nyb2xsLWJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIG92ZXJzY3JvbGxCZWhhdmlvcj86IHN0Lk92ZXJzY3JvbGxCZWhhdmlvcl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJzY3JvbGwtYmVoYXZpb3ItYmxvY2tcclxuICAgICAqL1xyXG4gICAgb3ZlcnNjcm9sbEJlaGF2aW9yQmxvY2s/OiBzdC5PdmVyc2Nyb2xsQmVoYXZpb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJzY3JvbGwtYmVoYXZpb3ItaW5saW5lXHJcbiAgICAgKi9cclxuICAgIG92ZXJzY3JvbGxCZWhhdmlvcklubGluZT86IHN0Lk92ZXJzY3JvbGxCZWhhdmlvcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvb3ZlcnNjcm9sbC1iZWhhdmlvci14XHJcbiAgICAgKi9cclxuICAgIG92ZXJzY3JvbGxCZWhhdmlvclg/OiBzdC5PdmVyc2Nyb2xsQmVoYXZpb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL292ZXJzY3JvbGwtYmVoYXZpb3IteVxyXG4gICAgICovXHJcbiAgICBvdmVyc2Nyb2xsQmVoYXZpb3JZPzogc3QuT3ZlcnNjcm9sbEJlaGF2aW9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wYWRkaW5nXHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmc/OiBPbmVPckJveDxDc3NMZW5ndGg+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wYWRkaW5nLWJsb2NrXHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmdCbG9jaz86IE9uZU9yUGFpcjxDc3NMZW5ndGg+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wYWRkaW5nQi1ib2NrLWVuZFxyXG4gICAgICovXHJcbiAgICBwYWRkaW5nQmxvY2tFbmQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BhZGRpbmctYmxvY2stc3RhcnRcclxuICAgICAqL1xyXG4gICAgcGFkZGluZ0Jsb2NrU3RhcnQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BhZGRpbmctYm90dG9tXHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmdCb3R0b20/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BhZGRpbmctaW5saW5lXHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmdJbmxpbmU/OiBPbmVPclBhaXI8Q3NzTGVuZ3RoPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGFkZGluZy1pbmxpbmUtZW5kXHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmdJbmxpbmVFbmQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BhZGRpbmctaW5saW5lLXN0YXJ0XHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmdJbmxpbmVTdGFydD86IENzc0xlbmd0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGFkZGluZy1sZWZ0XHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmdMZWZ0PzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wYWRkaW5nLXJpZ2h0XHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmdSaWdodD86IENzc0xlbmd0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGFkZGluZy10b3BcclxuICAgICAqL1xyXG4gICAgcGFkZGluZ1RvcD86IENzc0xlbmd0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGFnZS1icmVhay1hZnRlclxyXG4gICAgICovXHJcbiAgICBwYWdlQnJlYWtBZnRlcj86IHN0LkJyZWFrQWZ0ZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wYWdlLWJyZWFrLWJlZm9yZVxyXG4gICAgICovXHJcbiAgICBwYWdlQnJlYWtCZWZvcmU/OiBzdC5CcmVha0JlZm9yZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BhZ2UtYnJlYWstaW5zaWRlXHJcbiAgICAgKi9cclxuICAgIHBhZ2VCcmVha0luc2lkZT86IHN0LkJyZWFrSW5zaWRlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGFpbnQtb3JkZXJcclxuICAgICAqL1xyXG4gICAgcGFpbnRPcmRlcj86IHN0LlBhaW50T3JkZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wZXJzcGVjdGl2ZVxyXG4gICAgICovXHJcbiAgICBwZXJzcGVjdGl2ZT86IHN0LlBlcnNwZWN0aXZlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGVyc3BlY3RpdmUtb3JpZ2luXHJcbiAgICAgKi9cclxuICAgIHBlcnNwZWN0aXZlT3JpZ2luPzogc3QuUGVyc3BlY3RpdmVPcmlnaW5fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wbGFjZS1jb250ZW50XHJcbiAgICAgKi9cclxuICAgIHBsYWNlQ29udGVudD86IHN0LlBsYWNlQ29udGVudF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BsYWNlLWl0ZW1zXHJcbiAgICAgKi9cclxuICAgIHBsYWNlSXRlbXM/OiBzdC5QbGFjZUl0ZW1zX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGxhY2Utc2VsZlxyXG4gICAgICovXHJcbiAgICBwbGFjZVNlbGY/OiBzdC5QbGFjZVNlbGZfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wb2ludGVyLWV2ZW50c1xyXG4gICAgICovXHJcbiAgICBwb2ludGVyRXZlbnRzPzogc3QuUG9pbnRlckV2ZW50c19TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Bvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIHBvc2l0aW9uPzogc3QuUG9zaXRpb25fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9xdW90ZXNcclxuICAgICAqL1xyXG4gICAgcXVvdGVzPzogc3QuUXVvdGVzX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcmVzaXplXHJcbiAgICAgKi9cclxuICAgIHJlc2l6ZT86IHN0LlJlc2l6ZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3JpZ2h0XHJcbiAgICAgKi9cclxuICAgIHJpZ2h0PzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9yb3RhdGVcclxuICAgICAqL1xyXG4gICAgcm90YXRlPzogc3QuUm90YXRlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvcm93LWdhcFxyXG4gICAgICovXHJcbiAgICByb3dHYXA/OiBzdC5Sb3dHYXBfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ydWJ5LWFsaWduXHJcbiAgICAgKi9cclxuICAgIHJ1YnlBbGlnbj86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3J1Ynktb3ZlcmhhbmdcclxuICAgICAqL1xyXG4gICAgcnVieU92ZXJoYW5nPzogc3QuRGVmYXVsdFN0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcnVieS1wb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBydWJ5UG9zaXRpb24/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY2FsZVxyXG4gICAgICovXHJcbiAgICBzY2FsZT86IHN0LlNjYWxlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLWJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIHNjcm9sbEJlaGF2aW9yPzogc3QuU2Nyb2xsQmVoYXZpb3JfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY3JvbGwtbWFyZ2luXHJcbiAgICAgKi9cclxuICAgIHNjcm9sbE1hcmdpbj86IE9uZU9yQm94PENzc0xlbmd0aD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1tYXJnaW4tYmxvY2tcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsTWFyZ2luQmxvY2s/OiBPbmVPclBhaXI8Q3NzTGVuZ3RoPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLW1hcmdpbi1ibG9jay1lbmRcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsTWFyZ2luQmxvY2tFbmQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1tYXJnaW4tYmxvY2stc3RhcnRcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsTWFyZ2luQmxvY2tTdGFydD86IENzc0xlbmd0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLW1hcmdpbi1ib3R0b21cclxuICAgICAqL1xyXG4gICAgc2Nyb2xsTWFyZ2luQm90dG9tPzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY3JvbGwtbWFyZ2luLWlubGluZVxyXG4gICAgICovXHJcbiAgICBzY3JvbGxNYXJnaW5JbmxpbmU/OiBPbmVPclBhaXI8Q3NzTGVuZ3RoPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLW1hcmdpbi1pbmxpbmUtZW5kXHJcbiAgICAgKi9cclxuICAgIHNjcm9sbE1hcmdpbklubGluZUVuZD86IENzc0xlbmd0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLW1hcmdpbi1pbmxpbmUtc3RhcnRcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsTWFyZ2luSW5saW5lU3RhcnQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1tYXJnaW4tbGVmdFxyXG4gICAgICovXHJcbiAgICBzY3JvbGxNYXJnaW5MZWZ0PzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY3JvbGwtbWFyZ2luLXJpZ2h0XHJcbiAgICAgKi9cclxuICAgIHNjcm9sbE1hcmdpblJpZ2h0PzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY3JvbGwtbWFyZ2luLXRvcFxyXG4gICAgICovXHJcbiAgICBzY3JvbGxNYXJnaW5Ub3A/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1wYWRkaW5nXHJcbiAgICAgKi9cclxuICAgIHNjcm9sbFBhZGRpbmc/OiBPbmVPckJveDxDc3NMZW5ndGg+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY3JvbGwtcGFkZGluZy1ibG9ja1xyXG4gICAgICovXHJcbiAgICBzY3JvbGxQYWRkaW5nQmxvY2s/OiBPbmVPclBhaXI8Q3NzTGVuZ3RoPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLXBhZGRpbmctYmxvY2stZW5kXHJcbiAgICAgKi9cclxuICAgIHNjcm9sbFBhZGRpbmdCbG9ja0VuZD86IENzc0xlbmd0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLXBhZGRpbmctYmxvY2stc3RhcnRcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsUGFkZGluZ0Jsb2NrU3RhcnQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1wYWRkaW5nLWJvdHRvbVxyXG4gICAgICovXHJcbiAgICBzY3JvbGxQYWRkaW5nQm90dG9tPzogQ3NzTGVuZ3RoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY3JvbGwtcGFkZGluZy1pbmxpbmVcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsUGFkZGluZ0lubGluZT86IE9uZU9yUGFpcjxDc3NMZW5ndGg+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY3JvbGwtcGFkZGluZy1pbmxpbmUtZW5kXHJcbiAgICAgKi9cclxuICAgIHNjcm9sbFBhZGRpbmdJbmxpbmVFbmQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1wYWRkaW5nLWlubGluZS1zdGFydFxyXG4gICAgICovXHJcbiAgICBzY3JvbGxQYWRkaW5nSW5saW5lU3RhcnQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1wYWRkaW5nLWxlZnRcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsUGFkZGluZ0xlZnQ/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1wYWRkaW5nLXJpZ2h0XHJcbiAgICAgKi9cclxuICAgIHNjcm9sbFBhZGRpbmdSaWdodD86IENzc0xlbmd0aDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsLXBhZGRpbmctdG9wXHJcbiAgICAgKi9cclxuICAgIHNjcm9sbFBhZGRpbmdUb3A/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1zbmFwLWFsaWduXHJcbiAgICAgKi9cclxuICAgIHNjcm9sbFNuYXBBbGlnbj86IHN0LlNjcm9sbFNuYXBBbGlnbl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1zbmFwLXN0b3BcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsU25hcFN0b3A/OiBzdC5TY3JvbGxTbmFwU3RvcF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbC1zbmFwLXR5cGVcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsU25hcFR5cGU/OiBzdC5TY3JvbGxTbmFwVHlwZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Njcm9sbGJhci1jb2xvclxyXG4gICAgICovXHJcbiAgICBzY3JvbGxiYXJDb2xvcj86IHN0LlNjcm9sbGJhckNvbG9yX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2Nyb2xsYmFyLWd1dHRlclxyXG4gICAgICovXHJcbiAgICBzY3JvbGxiYXJHdXR0ZXI/OiBzdC5TY3JvbGxiYXJHdXR0ZXJfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zY3JvbGxiYXItd2lkdGhcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsYmFyV2lkdGg/OiBzdC5TY3JvbGxiYXJXaWR0aF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3NoYXBlLWltYWdlLXRocmVzaG9sZFxyXG4gICAgICovXHJcbiAgICBzaGFwZUltYWdlVGhyZXNob2xkPzogQ3NzTnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zaGFwZS1tYXJnaW5cclxuICAgICAqL1xyXG4gICAgc2hhcGVNYXJnaW4/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3NoYXBlLW91dHNpZGVcclxuICAgICAqL1xyXG4gICAgc2hhcGVPdXRzaWRlPzogc3QuU2hhcGVPdXRzaWRlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc2hhcGUtcmVuZGVyaW5nXHJcbiAgICAgKi9cclxuICAgIHNoYXBlUmVuZGVyaW5nPzogc3QuU2hhcGVSZW5kZXJpbmdfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zdG9wLWNvbG9yXHJcbiAgICAgKi9cclxuICAgIHN0b3BDb2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zdG9wLW9wYWNpdHlcclxuICAgICAqL1xyXG4gICAgc3RvcE9wYWNpdHk/OiBDc3NOdW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3N0cm9rZVxyXG4gICAgICovXHJcbiAgICBzdHJva2U/OiBDc3NDb2xvcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc3Ryb2tlLWRhc2hhcnJheVxyXG4gICAgICovXHJcbiAgICBzdHJva2VEYXNoYXJyYXk/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zdHJva2UtZGFzaG9mZnNldFxyXG4gICAgICovXHJcbiAgICBzdHJva2VEYXNob2Zmc2V0Pzogc3QuRGVmYXVsdFN0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc3Ryb2tlLWxpbmVjYXBcclxuICAgICAqL1xyXG4gICAgc3Ryb2tlTGluZWNhcD86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3N0cm9rZS1saW5lam9pblxyXG4gICAgICovXHJcbiAgICBzdHJva2VMaW5lam9pbj86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3N0cm9rZS1taXRlcmxpbWl0XHJcbiAgICAgKi9cclxuICAgIHN0cm9rZU1pdGVybGltaXQ/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9zdHJva2Utb3BhY2l0eVxyXG4gICAgICovXHJcbiAgICBzdHJva2VPcGFjaXR5Pzogc3QuRGVmYXVsdFN0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvc3Ryb2tlLXdpZHRoXHJcbiAgICAgKi9cclxuICAgIHN0cm9rZVdpZHRoPzogc3QuRGVmYXVsdFN0eWxlVHlwZTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RhYi1zaXplXHJcbiAgICAgKi9cclxuICAgIHRhYlNpemU/OiBzdC5UYWJTaXplX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGFibGUtbGF5b3V0XHJcbiAgICAgKi9cclxuICAgIHRhYmxlTGF5b3V0Pzogc3QuVGFibGVMYXlvdXRfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWFsaWduXHJcbiAgICAgKi9cclxuICAgIHRleHRBbGlnbj86IHN0LlRleHRBbGlnbl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24tbGFzdFxyXG4gICAgICovXHJcbiAgICB0ZXh0QWxpZ25MYXN0Pzogc3QuVGV4dEFsaWduTGFzdF9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYW5jaG9yXHJcbiAgICAgKi9cclxuICAgIHRleHRBbmNob3I/OiBzdC5UZXh0QW5jaG9yX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1jb21iaW5lLXVwcmlnaHRcclxuICAgICAqL1xyXG4gICAgdGV4dENvbWJpbmVVcHJpZ2h0Pzogc3QuVGV4dENvbWJpbmVVcHJpZ2h0X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1kZWNvcmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHRleHREZWNvcmF0aW9uPzogc3QuVGV4dERlY29yYXRpb25fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tY29sb3JcclxuICAgICAqL1xyXG4gICAgdGV4dERlY29yYXRpb25Db2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tbGluZVxyXG4gICAgICovXHJcbiAgICB0ZXh0RGVjb3JhdGlvbkxpbmU/OiBzdC5UZXh0RGVjb3JhdGlvbkxpbmVfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tc2tpcC1pbmtcclxuICAgICAqL1xyXG4gICAgdGV4dERlY29yYXRpb25Ta2lwSW5rPzogc3QuVGV4dERlY29yYXRpb25Ta2lwSW5rX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1kZWNvcmF0aW9uLXN0eWxlXHJcbiAgICAgKi9cclxuICAgIHRleHREZWNvcmF0aW9uU3R5bGU/OiBzdC5UZXh0RGVjb3JhdGlvblN0eWxlX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1kZWNvcmF0aW9uLXRoaWNrbmVzc1xyXG4gICAgICovXHJcbiAgICB0ZXh0RGVjb3JhdGlvblRoaWNrbmVzcz86IHN0LlRleHREZWNvcmF0aW9uVGhpY2tuZXNzX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1lbXBoYXNpc1xyXG4gICAgICovXHJcbiAgICB0ZXh0RW1waGFzaXM/OiBzdC5UZXh0RW1waGFzaXNfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWVtcGhhc2lzLWNvbG9yXHJcbiAgICAgKi9cclxuICAgIHRleHRFbXBoYXNpc0NvbG9yPzogQ3NzQ29sb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtZW1waGFzaXMtcG9zaXRpb25cclxuICAgICAqL1xyXG4gICAgdGV4dEVtcGhhc2lzUG9zaXRpb24/OiBzdC5UZXh0RW1waGFzaXNQb3NpdGlvbl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtZW1waGFzaXMtc3R5bGVcclxuICAgICAqL1xyXG4gICAgdGV4dEVtcGhhc2lzU3R5bGU/OiBzdC5UZXh0RW1waGFzaXNTdHlsZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtZmlsbC1jb2xvclxyXG4gICAgICovXHJcbiAgICB0ZXh0RmlsbENvbG9yPzogQ3NzQ29sb3I7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtaW5kZW50XHJcbiAgICAgKi9cclxuICAgIHRleHRJbmRlbnQ/OiBzdC5UZXh0SW5kZW50X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1qdXN0aWZ5XHJcbiAgICAgKi9cclxuICAgIHRleHRKdXN0aWZ5Pzogc3QuVGV4dEp1c3RpZnlfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWthc2hpZGFcclxuICAgICAqL1xyXG4gICAgdGV4dEthc2hpZGE/OiBzdC5EZWZhdWx0U3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWthc2hpZGEtc3BhY2VcclxuICAgICAqL1xyXG4gICAgdGV4dEthc2hpZGFTcGFjZT86IHN0LkRlZmF1bHRTdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtb3JpZW50YXRpb25cclxuICAgICAqL1xyXG4gICAgdGV4dE9yaWVudGF0aW9uPzogc3QuVGV4dE9yaWVudGF0aW9uX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1vdmVyZmxvd1xyXG4gICAgICovXHJcbiAgICB0ZXh0T3ZlcmZsb3c/OiBzdC5UZXh0T3ZlcmZsb3dfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LXJlbmRlcmluZ1xyXG4gICAgICovXHJcbiAgICB0ZXh0UmVuZGVyaW5nPzogc3QuVGV4dFJlbmRlcmluZ19TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtc2hhZG93XHJcbiAgICAgKi9cclxuICAgIHRleHRTaGFkb3c/OiBzdC5UZXh0U2hhZG93X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1zaXplLWFkanVzdFxyXG4gICAgICovXHJcbiAgICB0ZXh0U2l6ZUFkanVzdD86IHN0LlRleHRTaXplQWRqdXN0X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1zdHJva2VcclxuICAgICAqL1xyXG4gICAgdGV4dFN0cm9rZTogc3QuVGV4dFN0cm9rZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtc3Ryb2tlLWNvbG9yXHJcbiAgICAgKi9cclxuICAgIHRleHRTdHJva2VDb2xvcj86IENzc0NvbG9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LXN0cm9rZS13aWR0aFxyXG4gICAgICovXHJcbiAgICB0ZXh0U3Ryb2tlV2lkdGg/OiBzdC5MaW5lV2lkdGg7XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LXRyYW5zZm9ybVxyXG4gICAgICovXHJcbiAgICB0ZXh0VHJhbnNmb3JtPzogc3QuVGV4dFRyYW5zZm9ybV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtdW5kZXJsaW5lLXBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIHRleHRVbmRlcmxpbmVQb3NpdGlvbj86IHN0LlRleHRVbmRlcmxpbmVQb3NpdGlvbl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RvcFxyXG4gICAgICovXHJcbiAgICB0b3A/OiBDc3NMZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RvdWNoLWFjdGlvblxyXG4gICAgICovXHJcbiAgICB0b3VjaEFjdGlvbj86IHN0LlRvdWNoQWN0aW9uX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdHJhbnNmb3JtXHJcbiAgICAgKi9cclxuICAgIHRyYW5zZm9ybT86IHN0LlRyYW5zZm9ybV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zZm9ybS1ib3hcclxuICAgICAqL1xyXG4gICAgdHJhbnNmb3JtQm94Pzogc3QuVHJhbnNmb3JtQm94X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdHJhbnNmb3JtLW9yaWdpblxyXG4gICAgICovXHJcbiAgICB0cmFuc2Zvcm1PcmlnaW4/OiBzdC5UcmFuc2Zvcm1PcmlnaW5fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90cmFuc2Zvcm0tc3R5bGVcclxuICAgICAqL1xyXG4gICAgdHJhbnNmb3JtU3R5bGU/OiBzdC5UcmFuc2Zvcm1TdHlsZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zaXRpb25cclxuICAgICAqL1xyXG4gICAgdHJhbnNpdGlvbj86IHN0LlRyYW5zaXRpb25fU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90cmFuc2l0aW9uLWRlbGF5XHJcbiAgICAgKi9cclxuICAgIHRyYW5zaXRpb25EZWxheT86IE9uZU9yTWFueTxDc3NUaW1lPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdHJhbnNpdGlvbi1kdXJhdGlvblxyXG4gICAgICovXHJcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24/OiBPbmVPck1hbnk8Q3NzVGltZT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zaXRpb24tcHJvcGVydHlcclxuICAgICAqL1xyXG4gICAgdHJhbnNpdGlvblByb3BlcnR5Pzogc3QuVHJhbnNpdGlvblByb3BlcnR5X1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cclxuICAgICAqL1xyXG4gICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uPzogT25lT3JNYW55PFRpbWluZ0Z1bmN0aW9uPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdHJhbnNsYXRlXHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZT86IHN0LlRyYW5zbGF0ZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3VuaWNvZGUtYmlkaVxyXG4gICAgICovXHJcbiAgICB1bmljb2RlQmlkaT86IHN0LlVuaWNvZGVCaWRpX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdXNlci1zZWxlY3RcclxuICAgICAqL1xyXG4gICAgdXNlclNlbGVjdD86IHN0LlVzZXJTZWxlY3RfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy92ZXJ0aWNhbC1hbGlnblxyXG4gICAgICovXHJcbiAgICB2ZXJ0aWNhbEFsaWduPzogc3QuVmVydGljYWxBbGlnbl9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3Zpc2liaWxpdHlcclxuICAgICAqL1xyXG4gICAgdmlzaWJpbGl0eT86IHN0LlZpc2liaWxpdHlfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy92ZWN0b3ItZWZmZWN0XHJcbiAgICAgKi9cclxuICAgIHZlY3RvckVmZmVjdD86IHN0LlZlY3RvckVmZmVjdF9TdHlsZVR5cGU7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy93aGl0ZS1zcGFjZVxyXG4gICAgICovXHJcbiAgICB3aGl0ZVNwYWNlPzogc3QuV2hpdGVTcGFjZV9TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3dpZG93c1xyXG4gICAgICovXHJcbiAgICB3aWRvd3M/OiBDc3NOdW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3dpZHRoXHJcbiAgICAgKi9cclxuICAgIHdpZHRoPzogQ3NzU2l6ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvd2lsbC1jaGFuZ2VcclxuICAgICAqL1xyXG4gICAgd2lsbENoYW5nZT86IHN0LldpbGxDaGFuZ2VfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy93b3JkLWJyZWFrXHJcbiAgICAgKi9cclxuICAgIHdvcmRCcmVhaz86IHN0LldvcmRCcmVha19TdHlsZVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAtIE1ETjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3dvcmQtc3BhY2luZ1xyXG4gICAgICovXHJcbiAgICB3b3JkU3BhY2luZz86IHN0LldvcmRTcGFjaW5nX1N0eWxlVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvd3JpdGluZy1tb2RlXHJcbiAgICAgKi9cclxuICAgIHdyaXRpbmdNb2RlPzogc3QuV3JpdGluZ01vZGVfU3R5bGVUeXBlO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIC0gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvei1pbmRleFxyXG4gICAgICovXHJcbiAgICB6SW5kZXg/OiBzdC5aSW5kZXhfU3R5bGVUeXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogLSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy96b29tXHJcbiAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICovXHJcbiAgICB6b29tPzogc3QuWm9vbV9TdHlsZVR5cGU7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBFeHRlbmRlZEJhc2VTdHlsZXNldCB0eXBlIG1hcHMgYWxsIENTUyBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIFtbSVN0eWxlc2V0XV0gaW50ZXJmYWNlIHRvXHJcbiAqIHRoZSBcImV4dGVuZGVkXCIgdmVyc2lvbnMgb2YgdGhlaXIgdHlwZXMuIFRoZXNlIGV4dGVuZGVkIHR5cGVzIGFyZSBkZWZpbmVkIGJ5IGFkZGluZyBiYXNpYyBrZXl3b3Jkc1xyXG4gKiAoZS5nLiBcInVuc2V0XCIsIFwiaW5pdGlhbFwiLCBldGMuKSBhcyB3ZWxsIGFzIFtbU3RyaW5nUHJveHldXSBhbmQgW1tJQ3VzdG9tVmFyXV0gdG8gdGhlIHR5cGUgdGhhdFxyXG4gKiBpcyBkZWZpbmVkIGluIHRoZSBJU3R5bGVzZXQgaW50ZXJmYWNlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRXh0ZW5kZWRJU3R5bGVzZXQgPSB7IFtLIGluIGtleW9mIElTdHlsZXNldF0/OiBFeHRlbmRlZFByb3A8SVN0eWxlc2V0W0tdPiB9XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYElTeW50YXhUeXBlU3R5bGVzZXRgIGludGVyZmFjZSBtYXBzIENTUyBzeW50YXggbmFtZXMgdG8gdGhlIHR5cGVzLCB3aGljaCBjYW4gYmUgdXNlZCBmb3JcclxuICogZGVmaW5pbmcgY3VzdG9tIENTUyBwcm9wZXJ0aWVzIChhLmsuYS4gdmFyaWFibGVzKSB2aWEgdGhlIEBwcm9wZXJ0eSBydWxlcy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVN5bnRheFR5cGVTdHlsZXNldFxyXG57XHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgdmFsdWUgb2YgYW55IHR5cGUgKi9cclxuICAgIFwiKlwiPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBBbGxvd3MgaGF2aW5nIENTUyB2YXJpYWJsZXMgYW5kIGNvbnN0YW50cyB0aGF0IGFjY2VwdCBhIGA8bnVtYmVyPmAgQ1NTIHZhbHVlICovXHJcbiAgICBcIjxudW1iZXI+XCI/OiBDc3NOdW1iZXI7XHJcbiAgICBcIjxudW1iZXI+K1wiPzogT25lT3JNYW55PENzc051bWJlcj47XHJcbiAgICBcIjxudW1iZXI+I1wiPzogT25lT3JNYW55PENzc051bWJlcj47XHJcblxyXG4gICAgLyoqIEFsbG93cyBoYXZpbmcgQ1NTIHZhcmlhYmxlcyBhbmQgY29uc3RhbnRzIHRoYXQgYWNjZXB0IGEgYDxsZW5ndGg+YCBDU1MgdmFsdWUgKi9cclxuICAgIFwiPGxlbmd0aD5cIj86IENzc0xlbmd0aDtcclxuICAgIFwiPGxlbmd0aD4rXCI/OiBPbmVPck1hbnk8Q3NzTGVuZ3RoPjtcclxuICAgIFwiPGxlbmd0aD4jXCI/OiBPbmVPck1hbnk8Q3NzTGVuZ3RoPjtcclxuXHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgYSBgPHBlcmNlbnQ+YCBDU1MgdmFsdWUgKi9cclxuICAgIFwiPHBlcmNlbnRhZ2U+XCI/OiBDc3NQZXJjZW50O1xyXG4gICAgXCI8cGVyY2VudGFnZT4rXCI/OiBPbmVPck1hbnk8Q3NzUGVyY2VudD47XHJcbiAgICBcIjxwZXJjZW50YWdlPiNcIj86IE9uZU9yTWFueTxDc3NQZXJjZW50PjtcclxuXHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgYSBgPGxlbmd0aC1wZXJjZW50YWdlPmAgQ1NTIHZhbHVlICovXHJcbiAgICBcIjxsZW5ndGgtcGVyY2VudGFnZT5cIj86IENzc0xlbmd0aDtcclxuICAgIFwiPGxlbmd0aC1wZXJjZW50YWdlPitcIj86IE9uZU9yTWFueTxDc3NMZW5ndGg+O1xyXG4gICAgXCI8bGVuZ3RoLXBlcmNlbnRhZ2U+I1wiPzogT25lT3JNYW55PENzc0xlbmd0aD47XHJcblxyXG4gICAgLyoqIEFsbG93cyBoYXZpbmcgQ1NTIHZhcmlhYmxlcyBhbmQgY29uc3RhbnRzIHRoYXQgYWNjZXB0IGFuIGA8YW5nbGU+YCBDU1MgdmFsdWUgKi9cclxuICAgIFwiPGFuZ2xlPlwiPzogQ3NzQW5nbGU7XHJcbiAgICBcIjxhbmdsZT4rXCI/OiBPbmVPck1hbnk8Q3NzQW5nbGU+O1xyXG4gICAgXCI8YW5nbGU+I1wiPzogT25lT3JNYW55PENzc0FuZ2xlPjtcclxuXHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgYSBgPHRpbWU+YCBDU1MgdmFsdWUgKi9cclxuICAgIFwiPHRpbWU+XCI/OiBDc3NUaW1lO1xyXG4gICAgXCI8dGltZT4rXCI/OiBPbmVPck1hbnk8Q3NzVGltZT47XHJcbiAgICBcIjx0aW1lPiNcIj86IE9uZU9yTWFueTxDc3NUaW1lPjtcclxuXHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgYSBgPHJlc29sdXRpb24+YCBDU1MgdmFsdWUgKi9cclxuICAgIFwiPHJlc29sdXRpb24+XCI/OiBDc3NSZXNvbHV0aW9uO1xyXG4gICAgXCI8cmVzb2x1dGlvbj4rXCI/OiBPbmVPck1hbnk8Q3NzUmVzb2x1dGlvbj47XHJcbiAgICBcIjxyZXNvbHV0aW9uPiNcIj86IE9uZU9yTWFueTxDc3NSZXNvbHV0aW9uPjtcclxuXHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgYSBgPGNvbG9yPmAgQ1NTIHZhbHVlICovXHJcbiAgICBcIjxjb2xvcj5cIj86IENzc0NvbG9yO1xyXG4gICAgXCI8Y29sb3I+K1wiPzogT25lT3JNYW55PENzc0NvbG9yPjtcclxuICAgIFwiPGNvbG9yPiNcIj86IE9uZU9yTWFueTxDc3NDb2xvcj47XHJcblxyXG4gICAgLyoqIEFsbG93cyBoYXZpbmcgQ1NTIHZhcmlhYmxlcyBhbmQgY29uc3RhbnRzIHRoYXQgYWNjZXB0IGFuIGA8aW1hZ2U+YCBDU1MgdmFsdWUgKi9cclxuICAgIFwiPGltYWdlPlwiPzogQ3NzSW1hZ2U7XHJcbiAgICBcIjxpbWFnZT4rXCI/OiBPbmVPck1hbnk8Q3NzSW1hZ2U+O1xyXG4gICAgXCI8aW1hZ2U+I1wiPzogT25lT3JNYW55PENzc0ltYWdlPjtcclxuXHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgYSBgPGN1c3RvbS1pZGVudD5gIHZhbHVlICovXHJcbiAgICBcIjxjdXN0b20taWRlbnQ+XCI/OiBzdHJpbmc7XHJcbiAgICBcIjxjdXN0b20taWRlbnQ+K1wiPzogT25lT3JNYW55PHN0cmluZz47XHJcbiAgICBcIjxjdXN0b20taWRlbnQ+I1wiPzogT25lT3JNYW55PHN0cmluZz47XHJcblxyXG4gICAgLyoqIEFsbG93cyBoYXZpbmcgQ1NTIHZhcmlhYmxlcyBhbmQgY29uc3RhbnRzIHRoYXQgYWNjZXB0IGEgYDx0cmFuc2Zvcm0tZnVuY3Rpb24+YCB2YWx1ZSAqL1xyXG4gICAgXCI8dHJhbnNmb3JtLWZ1bmN0aW9uPlwiPzogVHJhbnNmb3JtRnVuY3M7XHJcbiAgICBcIjx0cmFuc2Zvcm0tbGlzdD5cIj86IE9uZU9yTWFueTxUcmFuc2Zvcm1GdW5jcz47XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgSUN1c3RvbVR5cGVTdHlsZXNldGAgaW50ZXJmYWNlIG1hcHMgdGVtcGxhdGUgbmFtZXMgdG8gdGhlIHR5cGVzLCB3aGljaCBjYW4gYmUgdXNlZCBmb3JcclxuICogZGVmaW5pbmcgY3VzdG9tIENTUyBwcm9wZXJ0aWVzIChhLmsuYS4gdmFyaWFibGVzKS4gTm9ybWFsbHksIHZhcmlhYmxlcyBhcmUgZGVmaW5lZCB1c2luZyB0aGVcclxuICogbmFtZXMgb2YgdGhlIHN0eWxlIHByb3BlcnRpZXMgYW5kIHRoZWlyIHR5cGUgaXMgZGV0ZXJtaW5lZCBieSB0aGUgdHlwZSBvZiB0aGlzIHByb3BlcnR5IGluIHRoZVxyXG4gKiBbW0lTdHlsZXNldF1dIGludGVyZmFjZS4gU29tZXRpbWVzLCBob3dldmVyLCB0aGVyZSBpcyBhIG5lZWQgdG8gZGVmaW5lIHZhcmlhYmxlcyBvZiBzb21lIG90aGVyXHJcbiAqIHR5cGVzLCBmb3Igd2hpY2ggdGhlcmUgaXMgbm8gc3VpdGFibGUgc3R5bGUgcHJvcGVydHkuIFRoZSBgSUN1c3RvbVR5cGVTdHlsZXNldGAgaW50ZXJmYWNlIHByb3ZpZGVzXHJcbiAqIG1hbnkgYmFzaWMgdHlwZXMgYW5kIGl0IGNhbiBhbHNvIGJlIGV4dGVuZGVkIHVzaW5nIHRoZSBUeXBlU2NyaXB0J3MgbW9kdWxlIGF1Z21lbnRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUN1c3RvbVR5cGVTdHlsZXNldFxyXG57XHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgdmFsdWUgb2YgYW55IHR5cGUgKi9cclxuICAgIFwiYW55XCI/OiBhbnk7XHJcblxyXG4gICAgLyoqIEFsbG93cyBoYXZpbmcgQ1NTIHZhcmlhYmxlcyBhbmQgY29uc3RhbnRzIHRoYXQgYWNjZXB0IGEgYFwic3RyaW5nXCJgIHZhbHVlICovXHJcbiAgICBcIjxzdHJpbmc+XCI/OiBDc3NTdHJpbmc7XHJcblxyXG4gICAgLyoqIEFsbG93cyBoYXZpbmcgQ1NTIHZhcmlhYmxlcyBhbmQgY29uc3RhbnRzIHRoYXQgYWNjZXB0IGEgYFwiZnJlcXVlbmN5XCJgIENTUyB2YWx1ZSAqL1xyXG4gICAgXCI8ZnJlcXVlbmN5PlwiPzogQ3NzRnJlcXVlbmN5O1xyXG5cclxuICAgIC8qKiBBbGxvd3MgaGF2aW5nIENTUyB2YXJpYWJsZXMgYW5kIGNvbnN0YW50cyB0aGF0IGFjY2VwdCBhIGBcInNpemVcImAgdmFsdWUgKi9cclxuICAgIFwiPHNpemU+XCI/OiBDc3NTaXplO1xyXG5cclxuICAgIC8qKiBBbGxvd3MgaGF2aW5nIENTUyB2YXJpYWJsZXMgYW5kIGNvbnN0YW50cyB0aGF0IGFjY2VwdCBhIGBcInBvaW50XCJgIHZhbHVlICovXHJcbiAgICBcIjxwb2ludD5cIj86IENzc1BvaW50O1xyXG5cclxuICAgIC8qKiBBbGxvd3MgaGF2aW5nIENTUyB2YXJpYWJsZXMgYW5kIGNvbnN0YW50cyB0aGF0IGFjY2VwdCBhIGBcInBvc2l0aW9uXCJgIENTUyB2YWx1ZSAqL1xyXG4gICAgXCI8cG9zaXRpb24+XCI/OiBDc3NQb3NpdGlvbjtcclxuXHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgbXVsdGlwbGUgYFwibXVsdGktcG9zaXRpb25cImAgQ1NTIHZhbHVlcyAqL1xyXG4gICAgXCI8bXVsdGktcG9zaXRpb24+XCI/OiBDc3NNdWx0aVBvc2l0aW9uO1xyXG5cclxuICAgIC8qKiBBbGxvd3MgaGF2aW5nIENTUyB2YXJpYWJsZXMgYW5kIGNvbnN0YW50cyB0aGF0IGFjY2VwdCBhIGBcInJhZGl1c1wiYCBDU1MgdmFsdWUgKi9cclxuICAgIFwiPHJhZGl1cz5cIj86IENzc1JhZGl1cztcclxuXHJcbiAgICAvKiogQWxsb3dzIGhhdmluZyBDU1MgdmFyaWFibGVzIGFuZCBjb25zdGFudHMgdGhhdCBhY2NlcHQgYSBgXCJyYXRpb1wiYCBDU1MgdmFsdWUgKi9cclxuICAgIFwiPGFzcGVjdC1yYXRpbz5cIj86IENzc0FzcGVjdFJhdGlvO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgYElWYXJUZW1wbGF0ZVN0eWxlc2V0YCBpbnRlcmZhY2UgbWFwcyB0ZW1wbGF0ZSBuYW1lcyB0byB0aGUgdHlwZXMsIHdoaWNoIGNhbiBiZSB1c2VkIGZvclxyXG4gKiBkZWZpbmluZyBjdXN0b20gQ1NTIHByb3BlcnRpZXMgKGEuay5hLiB2YXJpYWJsZXMpLiBOb3JtYWxseSwgdmFyaWFibGVzIGFyZSBkZWZpbmVkIHVzaW5nIHRoZVxyXG4gKiBuYW1lcyBvZiB0aGUgc3R5bGUgcHJvcGVydGllcyBhbmQgdGhlaXIgdHlwZSBpcyBkZXRlcm1pbmVkIGJ5IHRoZSB0eXBlIG9mIHRoaXMgcHJvcGVydHkgaW4gdGhlXHJcbiAqIFtbSVN0eWxlc2V0XV0gaW50ZXJmYWNlLiBTb21ldGltZXMsIGhvd2V2ZXIsIHRoZXJlIGlzIGEgbmVlZCB0byBkZWZpbmUgdmFyaWFibGVzIG9mIHNvbWUgb3RoZXJcclxuICogdHlwZXMsIGZvciB3aGljaCB0aGVyZSBpcyBubyBzdWl0YWJsZSBzdHlsZSBwcm9wZXJ0eS4gVGhlIGBJVmFyVGVtcGxhdGVTdHlsZXNldGAgaW50ZXJmYWNlIHByb3ZpZGVzXHJcbiAqIG1hbnkgYmFzaWMgdHlwZXMgYW5kIGl0IGNhbiBhbHNvIGJlIGV4dGVuZGVkIHVzaW5nIHRoZSBUeXBlU2NyaXB0J3MgbW9kdWxlIGF1Z21lbnRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVZhclRlbXBsYXRlU3R5bGVzZXQgZXh0ZW5kcyBJU3R5bGVzZXQsIElTeW50YXhUeXBlU3R5bGVzZXQsIElDdXN0b21UeXBlU3R5bGVzZXQge31cclxuXHJcblxyXG4vKipcclxuICogVGhlIFZhclRlbXBsYXRlTmFtZSB0eXBlIGRlZmluZXMgdGhlIGtleXMgKHN0cmluZ3MpIHRoYXQgY2FuIGJlIHVzZWQgYXMgdGVtcGxhdGVzIGZvciBkZWZpbmluZ1xyXG4gKiBjdXN0b20gQ1NTIHByb3BlcnRpZXMgdXNpbmcgdGhlIFtbJHZhcl1dIGZ1bmN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVmFyVGVtcGxhdGVOYW1lID0ga2V5b2YgSVZhclRlbXBsYXRlU3R5bGVzZXQ7XHJcblxyXG4vKipcclxuICogVGhlIFZhclZhbHVlVHlwZSBnZW5lcmljIHR5cGUgZGVmaW5lcyB0aGUgdHlwZSBvZiB0aGUgdmFsdWUgdGhhdCBjYW4gYmUgYXNzaWduZWQgdG8gdGhlIGN1c3RvbVxyXG4gKiBDU1MgcHJvcGVydHkgdXNpbmcgdGhlIGdlbmVyaWMgdHlwZSBLIGFzIGl0cyB0ZW1wbGF0ZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFZhclZhbHVlPEsgZXh0ZW5kcyBWYXJUZW1wbGF0ZU5hbWU+ID0gSVZhclRlbXBsYXRlU3R5bGVzZXRbS107XHJcblxyXG4vKipcclxuICogVGhlIFZhclZhbHVlVHlwZSBnZW5lcmljIHR5cGUgZGVmaW5lcyB0aGUgdHlwZSBvZiB0aGUgdmFsdWUgdGhhdCBjYW4gYmUgYXNzaWduZWQgdG8gdGhlIGN1c3RvbVxyXG4gKiBDU1MgcHJvcGVydHkgdXNpbmcgdGhlIGdlbmVyaWMgdHlwZSBLIGFzIGl0cyB0ZW1wbGF0ZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEV4dGVuZGVkVmFyVmFsdWU8SyBleHRlbmRzIFZhclRlbXBsYXRlTmFtZT4gPSBFeHRlbmRlZFByb3A8VmFyVmFsdWU8Sz4+O1xyXG5cclxuLy8gLy8gVGhlIGZvbGxvd2luZyB3b3VsZCBiZSBtb3JlIGNvcnJlY3QgdHlwZSByZXByZXNlbnRhdGlvbjsgaG93ZXZlciwgVHlwZVNjcmlwdCBwcm9kdWNlcyBlcnJvclxyXG4vLyAvLyBcIlRTMjU5MDogRXhwcmVzc2lvbiBwcm9kdWNlcyBhIHVuaW9uIHR5cGUgdGhhdCBpcyB0b28gY29tcGxleCB0byByZXByZXNlbnRcIi5cclxuLy8gZXhwb3J0IHR5cGUgRXh0ZW5kZWRWYXJWYWx1ZTxLIGV4dGVuZHMgVmFyVGVtcGxhdGVOYW1lPiA9XHJcbi8vICAgICBLIGV4dGVuZHMga2V5b2YgSVN0eWxlc2V0ID8gRXh0ZW5kZWRQcm9wPFZhclZhbHVlPEs+PiA6IEV4dGVuZGVkPFZhclZhbHVlPEs+PjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgQ3VzdG9tVmFyX1N0eWxlVHlwZWAgdHlwZSByZXByZXNlbnRzIGEgY3VzdG9tIENTUyBwcm9wZXJ0eSBuYW1lIGFuZCB2YWx1ZSB0aGF0IGFyZSB1c2VkIHRvXHJcbiAqIGRlZmluZSBjdXN0b20gcHJvcGVydGllcyBpbiBhIFN0eWxlc2V0LiBUaGlzIG9iamVjdCBpcyB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlXHJcbiAqIGBcIi0tXCJcImAgcHJvcGVydHkgb2YgdGhlIFN0eWxlc2V0IHR5cGUuXHJcbiAqXHJcbiAqIGBDdXN0b21WYXJfU3R5bGVUeXBlYCBvYmplY3RzIHNob3VsZCBiZSBtb3N0bHkgdXNlZCB0byBvdmVycmlkZSBjdXN0b20gcHJvcGVydGllcyB0aGF0IGhhdmVcclxuICogcHJldmlvdXNseSBiZWVuIGRlZmluZWQgYXQgdGhlIHRvcC1sZXZlbCB1c2luZyB0aGUgW1skdmFyXV0gZnVuY3Rpb24uIFRoYXQgd2F5IHlvdSBjYW4gaGF2ZSBhXHJcbiAqIFwiZ2xvYmFsXCIgdmFsdWUgb2YgYSBjdXN0b20gcHJvcGVydHkgYW5kIGFzc2lnbiBhIGRpZmZlcmVudCB2YWx1ZSB0byBpdCB1bmRlciBhIGNlcnRhaW4gQ1NTXHJcbiAqIHNlbGVjdG9yLlxyXG4gKlxyXG4gKiBUaGUgdmFsdWVzIG9mIHRoZSB0eXBlIGNhbiBiZSBzcGVjaWZpZWQgYXMgZWl0aGVyIGEgdHdvLWl0ZW0gb3IgYSB0aHJlZS1pdGVtIHR1cGxlIG9yIGFzIHN0eWxlXHJcbiAqIGRlZmluaXRpb24gY2xhc3Mgb3Igc3R5bGUgZGVmaW5pdGlvbiBvYmplY3QuXHJcbiAqXHJcbiAqIFRoZSB0d28taXRlbSB0dXBsZSBpcyB1c2VkIHdpdGggYSBwcmV2aW91c2x5IGRlZmluZWQgY3VzdG9tIENTUyBwcm9wZXJ0eSByZXByZXNlbnRlZCBieSBhbiBbW0lWYXJSdWxlXV1cclxuICogb2JqZWN0OlxyXG4gKiAtIFRoZSBmaXJzdCBpdGVtIGlzIHRoZSBbW0lWYXJSdWxlXV0gb2JqZWN0LlxyXG4gKiAtIFRoZSBzZWNvbmQgaXRlbSBpcyB0aGUgdmFsdWVcclxuICpcclxuICogVGhlIHRocmVlLWl0ZW0gYXJyYXkgYWxsb3dzIGV4cGxpY2l0bHkgc3BlY2lmeWluZyB0aGUgY3VzdG9tIENTUyBwcm9wZXJ0eSBuYW1lOlxyXG4gKiAtIFRoZSBmaXJzdCBpdGVtIGlzIGEgc3RyaW5nIC0gdGhlIG5hbWUgb2YgdGhlIGN1c3RvbSBDU1MgcHJvcGVydHkuIElmIHRoZSBuYW1lIGlzIG5vdCBwcmVmaXhlZFxyXG4gKiB3aXRoIHR3byBkYXNoZXMgdGhleSB3aWxsIGJlIGFkZGVkIGF1dG9tYXRpY2FsbHkuXHJcbiAqIC0gVGhlIHNlY29uZCBpdGVtIGlzIHRoZSBuYW1lIG9mIGEgbm9uLWN1c3RvbSBDU1MgcHJvcGVydHkgd2hvc2UgdHlwZSBkZXRlcm1pbmVzIHRoZSB0eXBlIG9mIHRoZVxyXG4gKiBjdXN0b20gcHJvcGVydHkgdmFsdWUuXHJcbiAqIC0gVGhlIHRoaXJkIGl0ZW0gaXMgdGhlIHZhbHVlXHJcbiAqXHJcbiAqIElmIGEgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBvciBzdHlsZSBkZWZpbml0aW9uIG9iamVjdCBhcmUgc3BlY2lmaWVkLCB0aGVuIGFsbCBjdXN0b20gcHJvcGVydGllc1xyXG4gKiBkZWZpbmVkIGluIHRoaXMgc3R5bGUgZGVmaW5pdGlvbiB3aXRoIHRoZWlyIHZhbHVlcyBhcmUgaW5zZXJ0ZWQgaW50byB0aGUgc3R5bGVzZXQuIElmIHRoZSBzdHlsZVxyXG4gKiBkZWZpbml0aW9uIGlzIG5vdCBwcm9jZXNzZWQgeWV0LCBpdCBpcyBwcm9jZXNzZWQgcmlnaHQgYXdheS5cclxuICpcclxuICogVXNlIHRoZSBgQ3VzdG9tVmFyX1N0eWxlVHlwZWAgdHlwZSBpbiB0aGUgZm9sbG93aW5nIG1hbm5lcjpcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgLy8gZGVmaW5lIGdsb2JhbCBjdXN0b20gQ1NTIHByb3BlcnR5IGFuZCByZS1kZWZpbmUgaXRzIHZhbHVlIHVuZGVyIFwiYnJvd25cIiBjbGFzcy5cclxuICogICAgIG1haW5Db2xvciA9IHRoaXMuJHZhciggXCJjb2xvclwiLCBcImJsYWNrXCIpO1xyXG4gKiAgICAgYnJvd24gPSB0aGlzLiRjbGFzcyh7IFwiLS1cIjogWyBbdGhpcy5tYWluQ29sb3IsIFwiYnJvd25cIl0gXSB9KVxyXG4gKlxyXG4gKiAgICAgLy8gZGVmaW5lIGN1c3RvbSBDU1MgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSB1bmRlciBcImJsdWVcIiBjbGFzcy5cclxuICogICAgIGJsdWUgPSB0aGlzLiRjbGFzcyh7IFwiLS1cIjogWyBbXCJkaWZmZXJlbnQtY29sb3JcIiwgXCJjb2xvclwiLCBcImJsdWVcIl0gXSB9KVxyXG4gKlxyXG4gKiAgICAgLy8gdGFrZSBhbGwgY3VzdG9tIENTUyBwcm9wZXJ0aWVzIGZyb20gdGhlIGdpdmVuIHRoZW1lLlxyXG4gKiAgICAgeWVsbG93ID0gdGhpcy4kY2xhc3MoeyBcIi0tXCI6IFsgWWVsbG93VGhlbWUgXSB9KVxyXG4gKiB9XHJcbiAqXHJcbiAqIGNsYXNzIFllbGxvd1RoZW1lIGV4dGVuZHMgY3NzLlN0eWxlRGVmaW5pdGlvblxyXG4gKiB7XHJcbiAqICAgICBiZyA9IHRoaXMuJHZhciggXCJjb2xvclwiLCBcInllbGxvd1wiKTtcclxuICogICAgIGZnID0gdGhpcy4kdmFyKCBcImNvbG9yXCIsIFwiYnJvd25cIik7XHJcbiAqICAgICBsaW5rID0gdGhpcy4kdmFyKCBcImNvbG9yXCIsIFwib3JhbmdlXCIpO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGZvbGxvd2luZyBDU1M6XHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiA6cm9vdCB7IC0tTXlTdHlsZXNfbWFpbkNvbG9yOiBibGFjazsgfVxyXG4gKiAuYnJvd24geyAtLU15U3R5bGVzX21haW5Db2xvcjogYnJvd247IH1cclxuICogLmJsdWUgeyAtLWRpZmZlcmVudC1jb2xvcjogYmx1ZTsgfVxyXG4gKiAueWVsbG93XHJcbiAqIHtcclxuICogICAtLWJnOiB5ZWxsb3c7XHJcbiAqICAgLS1mZzogYnJvd247XHJcbiAqICAgLS1saW5rOiBvcmFuZ2U7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDdXN0b21WYXJfU3R5bGVUeXBlPEsgZXh0ZW5kcyBWYXJUZW1wbGF0ZU5hbWUgPSBhbnk+ID1cclxuICAgIFtJVmFyUnVsZTxLPiwgRXh0ZW5kZWRWYXJWYWx1ZTxLPl0gfFxyXG4gICAgW3N0cmluZywgSywgRXh0ZW5kZWRWYXJWYWx1ZTxLPl0gfFxyXG4gICAgSVN0eWxlRGVmaW5pdGlvbkNsYXNzIHxcclxuICAgIElTdHlsZURlZmluaXRpb25cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgcmVwcmVzZW50aW5nIGEgY29sbGVjdGlvbiBvZiBzdHlsZSBwcm9wZXJ0aWVzIGFuZCB0aGVpciB2YWx1ZXMuIEluIGFkZGl0aW9uIHRvIHRoZVxyXG4gKiBwcm9wZXJ0aWVzIHJlcHJlc2VudGluZyB0aGUgc3RhbmRhcmQgQ1NTIHN0eWxlcywgdGhpcyB0eXBlIGFsc28gaW5jbHVkZXMgdGhlIFwiLS1cIiBwcm9wZXJ0eSxcclxuICogd2hpY2ggaXMgYW4gYXJyYXkgb2YgW1tDdXN0b21WYXJfU3R5bGVUeXBlXV0gb2JqZWN0cyBlYWNoIHNwZWNpZnlpbmcgYSB2YWx1ZSBmb3IgYSBzaW5nbGVcclxuICogY3VzdG9tIHByb3BlcnR5LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3R5bGVzZXQgPSBFeHRlbmRlZElTdHlsZXNldCAmXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lhbCBwcm9wZXJ0eSBcIi0tXCIgc3BlY2lmaWVzIGFuIGFycmF5IHRoYXQgY29udGFpbnMgW1tDdXN0b21WYXJfU3R5bGVUeXBlXV0gb2JqZWN0cyBlYWNoXHJcbiAgICAgICAgICogcmVwcmVzZW50aW5nIGEgZGVmaW5pdGlvbiBvZiBhIGN1c3RvbSBDU1MgcHJvcGVydHkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgXCItLVwiPzogQ3VzdG9tVmFyX1N0eWxlVHlwZVtdO1xyXG4gICAgfTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBTdHJpbmdTdHlsZXNldCB0eXBlIG1hcHMgQ1NTIHByb3BlcnRpZXMgaW5jbHVkaW5nIGN1c3RvbSBwcm9wZXJ0aWVzIHRvIHRoZSBzdHJpbmcgdmFsdWVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3RyaW5nU3R5bGVzZXQgPSB7IFtLOiBzdHJpbmddOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkIH1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgQ29tYmluZWRTdHlsZXNldGAgdHlwZSBleHRlbmRzIHRoZSBTdHlsZXNldCB0eXBlIHdpdGggY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgcHJvdmlkZVxyXG4gKiBhZGRpdGlvbmFsIG1lYW5pbmcgdG8gdGhlIHN0eWxlc2V0IGFuZCBhbGxvdyBidWlsZGluZyBkZXBlbmRlbnQgc3R5bGUgcnVsZXM6XHJcbiAqIC0gVGhlIGBcIitcImAgcHJvcGVydHkgc3BlY2lmaWVzIG9uZSBvciBtb3JlIHBhcmVudCBzdHlsZSBydWxlcy4gVGhpcyBhbGxvd3Mgc3BlY2lmeWluZ1xyXG4gKiAgIHBhcmVudCBydWxlcyB1c2luZyBhIGNvbnZlbmllbnQgc3R5bGUtcHJvcGVydHktbGlrZSBub3RhdGlvbi5cclxuICogLSBQcm9wZXJ0aWVzIHdpdGggcHNldWRvIGNsYXNzIG5hbWVzIChlLmcuIGA6aG92ZXJgKSBvciBwc2V1ZG8gZWxlbWVudCBuYW1lcyAoZS5nLiBgOjphZnRlcmApLlxyXG4gKiAgIFRoZXNlIHByb3BlcnRpZXMgZGVmaW5lIGEgc3R5bGVzZXQgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSBzZWxlY3RvciBvYnRhaW5lZCBieSB1c2luZ1xyXG4gKiAgIHRoZSBvcmlnaW5hbCBzdHlsZXNldCdzIG93bmVyIGZvbGxvd2VkIGJ5IHRoZSBnaXZlbiBwc2V1ZG8gY2xhc3Mgb3IgcHNldWRvIGVsZW1lbnQuXHJcbiAqIC0gUHJvcGVydGllcyB3aXRoIG5hbWVzIG9mIHBhcmFtZXRlcml6ZWQgcHNldWRvIGNsYXNzZXMgKGUuZy4gYDpudGgtY2hpbGRgKSBvciBwYXJhbWV0ZXJpemVkXHJcbiAqICAgcHNldWRvIGVsZW1lbnRzIChlLmcuIGA6OnNsb3R0ZWRgKS4gVGhlc2UgcHJvcGVydGllcyBjb250YWluIGEgdHVwbGUsIHdoZXJlIHRoZSBmaXJzdFxyXG4gKiAgIGVsZW1lbnQgaXMgdGhlIHBhcmFtZXRlciBmb3IgdGhlIHNlbGVjdG9yIGFuZCB0aGUgc2Vjb25kIGVsZW1lbnQgaXMgdGhlIHN0eWxlc2V0LlxyXG4gKiAgIFRoZXNlIHByb3BlcnRpZXMgZGVmaW5lIGEgc3R5bGVzZXQgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSBzZWxlY3RvciBvYnRhaW5lZCBieSB1c2luZ1xyXG4gKiAgIHRoZSBvcmlnaW5hbCBzdHlsZXNldCdzIG93bmVyIGZvbGxvd2VkIGJ5IHRoZSBnaXZlbiBwc2V1ZG8gY2xhc3Mgb3IgcHNldWRvIGVsZW1lbnQuXHJcbiAqIC0gUHJvcGVydGllcyB3aXRoIHRoZSBhbXBlcnNhbmQgc3ltYm9sIChgJmApIHRoYXQgY29udGFpbiBhcnJheXMgb2YgdHdvLWVsZW1lbnQgdHVwbGVzIGVhY2hcclxuICogICBkZWZpbmluZyBhIHNlbGVjdG9yIGFuZCBhIHN0eWxlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBzZWxlY3Rvci4gU2VsZWN0b3JzIGNhbiB1c2UgdGhlXHJcbiAqICAgYW1wZXJzYW5kIHN5bWJvbCB0byByZWZlciB0byB0aGUgcGFyZW50IHN0eWxlIHNlbGVjdG9yLiBJZiB0aGUgYW1wZXJzYW5kIHN5bWJvbCBpcyBub3QgdXNlZCxcclxuICogICB0aGUgc2VsZWN0b3Igd2lsbCBiZSBzaW1wbHkgYXBwZW5kZWQgdG8gdGhlIHBhcmVudCBzZWxlY3Rvci5cclxuICpcclxuICogRnVuY3Rpb25zIHRoYXQgcmV0dXJuIHN0eWxlIHJ1bGVzIChlLmcuIFtbJGNsYXNzXV0pIGFjY2VwdCB0aGUgYENvbWJpbmVkU3R5bGVzZXRgIGFzIGEgcGFyYW1ldGVyLFxyXG4gKiBmb3IgZXhhbXBsZTpcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgY2xhc3MxID0gdGhpcy4kY2xhc3Moe30pXHJcbiAqICAgICBjbGFzczIgPSB0aGlzLiRjbGFzcyh7XHJcbiAqICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAqICAgICAgICAgXCI6aG92ZXJcIiA6IHsgYmFja2dyb3VuZENvbG9yOiBcImdyZXlcIiB9LFxyXG4gKiAgICAgICAgIFwiJlwiOiBbXHJcbiAqICAgICAgICAgICAgIFsgXCJsaSA+ICZcIiwgeyBiYWNrZ3JvdW5kQ29sb3I6IFwieWVsbG93XCIgfSBdLFxyXG4gKiAgICAgICAgICAgICBbIHRoaXMuY2xhc3MxLCB7IGJhY2tncm91bmRDb2xvcjogXCJvcmFuZ2VcIiB9IF1cclxuICogICAgICAgICBdXHJcbiAqICAgICB9KVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgdHJhbnNsYXRlIHRvIHRoZSBmb2xsb3dpbmcgQ1NTIChpbiByZWFsaXR5LCBjbGFzcyBuYW1lcyBhcmUgYXV0by1nZW5lcmF0ZWQpOlxyXG4gKlxyXG4gKiBgYGBjc3NcclxuICogLmNsYXNzMiB7IGJhY2tncm91bmRDb2xvcjogd2hpdGU7IH1cclxuICogLmNsYXNzMjpob3ZlciB7IGJhY2tncm91bmRDb2xvcjogZ3JleTsgfVxyXG4gKiBsaSA+IC5jbGFzczIgeyBiYWNrZ3JvdW5kQ29sb3I6IHllbGxvdzsgfVxyXG4gKiAuY2xhc3MyLmNsYXNzMSB7IGJhY2tncm91bmRDb2xvcjogb3JhbmdlOyB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29tYmluZWRTdHlsZXNldCA9IFN0eWxlc2V0ICZcclxuICAgIHsgXCIrXCI/OiBJU3R5bGVSdWxlIHwgSVN0eWxlUnVsZVtdIH0gJlxyXG4gICAgeyBbSyBpbiBQc2V1ZG9FbnRpdHldPzogQ29tYmluZWRTdHlsZXNldCB8IENvbWJpbmVkU3R5bGVzZXRbXSB9ICZcclxuICAgIHsgW0sgaW4ga2V5b2YgSVBhcmFtZXRlcml6ZWRQc2V1ZG9FbnRpdHldPzogW0lQYXJhbWV0ZXJpemVkUHNldWRvRW50aXR5W0tdLCBDb21iaW5lZFN0eWxlc2V0IHwgQ29tYmluZWRTdHlsZXNldFtdXVtdIH0gJlxyXG4gICAgeyBbSyBpbiBEZXBlbmRlbnRSdWxlQ29tYmluYXRvcl0/OiBbQ3NzU2VsZWN0b3IsIENvbWJpbmVkU3R5bGVzZXQgfCBDb21iaW5lZFN0eWxlc2V0W11dW10gfTtcclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBFeHRlbmRzIHRoZSBDb21iaW5lZFN0eWxlc2V0IHR5cGUgd2l0aCB0aGUgXCIrK1wiIHByb3BlcnR5LCB3aGljaFxyXG4gKiBhbGxvd3MgY29tYmluaW5nIG11bHRpcGxlIGNsYXNzIHJ1bGVzLiBOb3RlIHRoYXQgdGhlIFwiK1wiIChzaW5nbGUgcGx1cykgcHJvcGVydHkgYWxsb3dzIGRlcml2aW5nXHJcbiAqIGZyb20gYW55IGJhc2Ugc3R5bGUgcnVsZXMgKG5vdCBuZWNlc3NhcmlseSBjbGFzc2VzKSBhbmQgdGhlIHN0eWxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYmFzZSBydWxlc1xyXG4gKiBhcmUgc2ltcGx5IGNvcGllZCB0byB0aGUgbmV3IHJ1bGUuIEFkZGl0aW9uYWxseSwgZXZlbiBpZiBjbGFzcyBydWxlcyB3ZXJlIGFtb25nIHRoZSBiYXNlIHJ1bGVzLFxyXG4gKiB0aGUgbmFtZXMgb2YgdGhlIGJhc2UgY2xhc3NlcyBhcmUgbG9zdC5cclxuICpcclxuICogVGhlIFwiKytcIiAoZG91YmxlIHBsdXMpIHByb3BlcnR5IGlzIGRpZmZlcmVudCBhbmQgaXQgb25seSBhcHBsaWVzIHRvIGNsYXNzIHJ1bGVzIGFuZCBvbmx5IGFsbG93c1xyXG4gKiBkZXJpdmluZyBmcm9tIGNsYXNzIHJ1bGVzLiBUaGUgc3R5bGUgcHJvcGVydGllcyBmcm9tIHRoZSBiYXNlIGNsYXNzZXMgYXJlIG5vdCBjb3BpZWQgdG8gdGhlIG5ld1xyXG4gKiBydWxlOyBpbnN0ZWFkLCB0aGUgbmFtZSBvZiB0aGUgbmV3IGNsYXNzIGJlY29tZXMgYSBjb25jYXRlbmF0aW9uIG9mIHRoZSBuZXcgcnVsZSBuYW1lIGFuZCB0aGVcclxuICogbmFtZXMgb2YgYWxsIGJhc2UgY2xhc3Nlcy5cclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBNeVN0eWxlcyBleHRlbmRzIGNzcy5TdHlsZURlZmluaXRpb25cclxuICoge1xyXG4gKiAgICAgcmVkRkcgPSB0aGlzLiRjbGFzcyh7IGNvbG9yOiBcInJlZFwiIH0pXHJcbiAqICAgICB3aGl0ZUJHID0gdGhpcy4kY2xhc3MoeyBiYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIiB9KVxyXG4gKlxyXG4gKiAgICAgZW1waGFzaXplZCA9IHRoaXMuJGNsYXNzKHtcclxuICogICAgICAgICBcIisrXCI6IFt0aGlzLnJlZEZHLCB0aGlzLndoaXRlQkddLFxyXG4gKiAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMFxyXG4gKiAgICAgfSlcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogVGhpcyB3aWxsIHRyYW5zbGF0ZSB0byB0aGUgZm9sbG93aW5nIENTUyAoaW4gcmVhbGl0eSwgY2xhc3MgbmFtZXMgYXJlIGF1dG8tZ2VuZXJhdGVkKTpcclxuICpcclxuICogYGBgY3NzXHJcbiAqIC5yZWRGRyB7IGNvbG9yOiByZWQ7IH1cclxuICogLndoaXRlQkcgeyBiYWNrZ3JvdW5kQ29sb3I6IHdoaXRlOyB9XHJcbiAqIC5lbXBoYXNpemVkLnJlZEZHLndoaXRlQkcgeyBmb250V2VpZ2h0OiA3MDA7IH1cclxuICogYGBgXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB3aGVuIHRoZSBNeVN0eWxlcyBpcyBhY3RpdmF0ZWQgYW5kIHRoZSBlbXBoYXNpemVkIHByb3BlcnR5IGlzIGFwcGxpZWQgdG8gYW4gZWxlbWVudCxcclxuICogdGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBub3QganVzdCBcImVtcGhhc2l6ZWRcIiwgYnV0IFwiZW1waGFzaXplZCByZWRGRyB3aGl0ZUJHXCIuIFRoYXQgaXMsIHRoZVxyXG4gKiBmb2xsb3dpbmcgcmVuZGVyaW5nIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogbGV0IHN0eWxlcyA9IGNzcy5hY3RpdmF0ZShNeVN0eWxlcyk7XHJcbiAqIHJlbmRlcigpXHJcbiAqIHtcclxuICogICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmVtcGhhc2l6ZWQubmFtZX0+SW1wb3J0YW50IHN0dWZmPC9kaXY+XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIHdpbGwgZ2VuZXJhdGUgdGhlIGZvbGxvd2luZyBIVE1MOlxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxkaXYgY2xhc3NOYW1lPVwiZW1waGFzaXplZCByZWRGRyB3aGl0ZUJHXCI+SW1wb3J0YW50IHN0dWZmPC9kaXY+XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29tYmluZWRDbGFzc1N0eWxlc2V0ID0gQ29tYmluZWRTdHlsZXNldCAmXHJcbiAgICB7IFwiKytcIj86IFBhcmVudENsYXNzVHlwZSB8IFBhcmVudENsYXNzVHlwZVtdIH07XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyB0eXBlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluaGVyaXQgZnJvbSBhbiBhbHJlYWR5IGRlZmluZWQgQ1NTIGNsYXNzLiBUaGlzIHR5cGUgaXNcclxuICogdXNlZCBpbiB0aGUgYFwiKytcImAgcHJvcGVydHkgb2YgdGhlIFtbQ29tYmluZWRDbGFzc1N0eWxlc2V0XV0gdHlwZSwgd2hpY2ggYWxsb3dzIENTUyBjbGFzc2VzXHJcbiAqIHRvIGluY2x1ZGUgZGVmaW5pdGlvbnMgb2Ygb3RoZXIgQ1NTIGNsYXNzZXMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQYXJlbnRDbGFzc1R5cGUgPSBzdHJpbmcgfCBJQ2xhc3NSdWxlIHwgSUNsYXNzTmFtZVJ1bGU7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIGFuIG9iamVjdCBjb250YWluaW5nIHN0eWxlIHByb3BlcnRpZXMgZm9yIGFuIGFuaW1hdGlvbiBmcmFtZS5cclxuICogU3R5bGVzZXRzIGZvciBrZXlmcmFtZXMgYWxsb3cgY3VzdG9tIHByb3BlcnRpZXMgKHZpYSBcIi0tXCIpIGJ1dCBkb24ndCBhbGxvdyBkZXBlbmRlbnQgcnVsZXNcclxuICogKGJlY2F1c2UgZGVwZW5kZW50IHJ1bGVzIGFyZSBhY3R1YWxseSBzZXBhcmF0ZSBDU1MgcnVsZXMpLiBBbmltYXRpb24gc3R5bGVzZXQgY2FuIGV4dGVuZCBvdGhlclxyXG4gKiBzdHlsZSBydWxlczsgaG93ZXZlciwgYW55IGRlcGVuZGVudCBydWxlcyB3aWxsIGJlIGlnbm9yZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBbmltYXRpb25TdHlsZXNldCA9IFN0eWxlc2V0ICYgeyBcIitcIj86IElTdHlsZVJ1bGUgfCBJU3R5bGVSdWxlW10gfTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciB0eXBlIGRlc2NyaWJpbmcga2V5cyBvZiB0aGUgW1tJU3ludGF4VHlwZVN0eWxlc2V0XV0gaW50ZXJmYWNlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3ludGF4S2V5ID0gKGtleW9mIElTeW50YXhUeXBlU3R5bGVzZXQpICYgc3RyaW5nO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgdGhhdCBtYXBzIGEgdHVwbGUgdHlwZSB3aXRoIHN5bnRheCBrZXlzIHRvIGEgdHVwbGUgdHlwZSB3aXRoIGNvcnJlc3BvbmRpbmcgc3ludGF4IHR5cGVzLlxyXG4gKiBGb3IgZXhhbXBsZSwgaXQgd2lsbCBtYXAgdHlwZSBgW1wiPGNvbG9yPlwiLCBcIjxsZW5ndGg+XCJdYCB0byB0eXBlIGBbQ3NzQ29sb3IsIENzc0xlbmd0aF1gLlxyXG4gKiBUaGlzIHR5cGUgaXMgdXNlZCB3aGVuIGRlZmluaW5nIHBhcmFtZXRlcnMgZm9yIHRoZSBbW3BhaW50XV0gQ1NTIGZ1bmN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWFwcGVkU3ludGF4VHlwZXM8VCBleHRlbmRzIFN5bnRheEtleVtdPiA9XHJcbiAgICB7IFtpIGluIGtleW9mIFRdOiBUW2ldIGV4dGVuZHMgU3ludGF4S2V5ID8gSVN5bnRheFR5cGVTdHlsZXNldFtUW2ldXSA6IG5ldmVyIH1cclxuXHJcblxyXG5cclxuIiwi77u/aW1wb3J0IHtDc3NTZWxlY3RvciwgSUF0dHJTZWxlY3RvckZ1bmN9IGZyb20gXCIuLi9hcGkvQ29yZVR5cGVzXCI7XHJcbmltcG9ydCB7ZmRvLCB2MnN9IGZyb20gXCIuL1V0aWxzXCI7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBDU1Mgc2VsZWN0b3IuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzZWxlY3Rvci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RvcjJzID0gKHZhbDogQ3NzU2VsZWN0b3IpOiBzdHJpbmcgPT4gdjJzKCB2YWwsIHsgc2VwOiBcIlwiLCByZWN1cnNpdmU6IHRydWUgfSk7XHJcblxyXG5cclxuXHJcbi8vIENvbnZlcnRpbmcgYXR0cmlidXRlIHNlbGVjdG9yIGRlZmluaXRpb24gdG8gc3RyaW5nXHJcbmZkb1tcImF0dHItc2VsXCJdID0gKHY6IElBdHRyU2VsZWN0b3JGdW5jKSA9PiBgWyR7di5ucyA/ICh0eXBlb2Ygdi5ucyA9PT0gXCJzdHJpbmdcIiA/IHYubnMgOiB2Lm5zLnByZWZpeCkgKyBcInxcIiA6IFwiXCJ9JHt2Lm5hbWV9YCArXHJcbiAgICAodi52YWwgPT0gbnVsbCA/IFwiXVwiIDogYCR7di5vcCA/PyBcIj1cIn1cIiR7di52YWx9XCIke3YuY2YgPyBcIiBcIiArIHYuY2YgOiBcIlwifV1gKVxyXG5cclxuXHJcblxyXG4vLyBDb252ZXJ0aW5nIFwibnRoXCIgcHNldWRvIGNsYXNzZXMgdG8gc3RyaW5nXHJcbmZkb1tcIjpudGgtY2hpbGRcIl0gPSBmZG9bXCI6bnRoLWxhc3QtY2hpbGRcIl0gPSBmZG9bXCI6bnRoLW9mLXR5cGVcIl0gPSBmZG9bXCI6bnRoLWxhc3Qtb2YtdHlwZVwiXSA9IFtcclxuICAgIFtcInBcIiwge1xyXG4gICAgICAgIGFycjogW1xyXG4gICAgICAgICAgICB2ID0+IHYgKyBcIm5cIixcclxuICAgICAgICAgICAgdiA9PiAhdiA/IFwiXCIgOiB2ID4gMCA/IFwiK1wiICsgdiA6IFwiLVwiICsgLXZcclxuICAgICAgICBdLFxyXG4gICAgICAgIHNlcDogXCJcIlxyXG4gICAgfV1cclxuXVxyXG5cclxuXHJcblxyXG4vLyAvLyBDb252ZXJ0aW5nIHBzZXVkbyBlbnRpdGllcyB0aGF0IGFjY2VwdCBDc3NTZWxlY3RvciB0byBzdHJpbmdcclxuLy8gZmRvW1wiOmlzXCJdID0gZmRvW1wiOmhhc1wiXSA9IGZkb1tcIjpob3N0LWNvbnRleHRcIl0gPSBmZG9bXCI6bm90XCJdID0gZmRvW1wiOndoZXJlXCJdID0gZmRvW1wiOjpzbG90dGVkXCJdID0gW1xyXG4vLyAgICAgW1wicFwiLCBzZWxlY3RvcjJzXVxyXG4vLyAgICAgLy8gW1wicFwiLCB7c2VwOiBcIixcIiwgcmVjdXJzaXZlOiB0cnVlfV1cclxuLy8gXVxyXG5cclxuXHJcblxyXG4iLCLvu79pbXBvcnQge0V4dGVuZGVkRm9udEZhY2UsIElGb250RmFjZX0gZnJvbSBcIi4uL2FwaS9Gb250VHlwZXNcIlxyXG5pbXBvcnQge0lNZWRpYUZlYXR1cmVzZXQsIE1lZGlhUXVlcnksIE1lZGlhU3RhdGVtZW50LCBTdXBwb3J0c1F1ZXJ5LCBTdXBwb3J0c1N0YXRlbWVudH0gZnJvbSBcIi4uL2FwaS9NZWRpYVR5cGVzXCI7XHJcbmltcG9ydCB7c3Ayc30gZnJvbSBcIi4vU3R5bGVJbXBsXCI7XHJcbmltcG9ydCB7Y2FtZWxUb0Rhc2gsIHYycywgYTJzLCBXS0YsIFYyU09wdGlvbnMsIGRhc2hUb0NhbWVsLCB3a2YsIHByb3BTZXQyc30gZnJvbSBcIi4vVXRpbHNcIjtcclxuaW1wb3J0IHtFeHRlbmRlZENvdW50ZXJTdHlsZXNldCwgSUNvdW50ZXJTdHlsZXNldH0gZnJvbSBcIi4uL2FwaS9Db3VudGVyVHlwZXNcIjtcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIENTUyBAbWVkaWEgcnVsZS5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIGdpdmVuIG1lZGlhIHF1ZXJ5IG9iamVjdCB0byB0aGUgQ1NTIG1lZGlhIHF1ZXJ5IHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG1lZGlhMnMgPSAoc3RhdGVtZW50OiBNZWRpYVN0YXRlbWVudCk6IHN0cmluZyA9PlxyXG4gICAgdjJzKCBzdGF0ZW1lbnQsIHtcclxuICAgICAgICBhbnk6IG1lZGlhUXVlcnkycyxcclxuICAgICAgICBzZXA6IFwiLFwiXHJcbiAgICB9KVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBtZWRpYSBxdWVyeSBvYmplY3QgdG8gdGhlIENTUyBtZWRpYSBxdWVyeSBzdHJpbmdcclxuICovXHJcbmNvbnN0IG1lZGlhUXVlcnkycyA9IChxdWVyeTogTWVkaWFRdWVyeSk6IHN0cmluZyA9PlxyXG4gICAgcHJvcFNldDJzKCBxdWVyeSwgbWVkaWFGZWF0dXJlSW5mb3MsIHtcclxuICAgICAgICBzZXBhcmF0b3I6IFwiIGFuZCBcIixcclxuICAgICAgICBwcm9wRnVuYzogbWVkaWFGZWF0dXJlMnMsXHJcbiAgICB9KTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gbWVkaWEgZmVhdHVyZSB0byB0aGUgQ1NTIG1lZGlhIHF1ZXJ5IHN0cmluZ1xyXG4gKi9cclxuY29uc3QgbWVkaWFGZWF0dXJlMnMgPSAoZGFzaE5hbWU6IHN0cmluZywgY2FtZWxOYW1lOiBzdHJpbmcsIHZhbDogYW55LCBvcHRpb25zOiBWMlNPcHRpb25zKTogc3RyaW5nID0+XHJcbntcclxuICAgIGlmICh2YWwgPT0gbnVsbClcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuXHJcbiAgICAvLyBpZiBkZWZhdWx0VmFsdWUgaXMgZGVmaW5lZCBhbmQgdGhlIHByb3BlcnR5IHZhbHVlIGlzIGVxdWFsIHRvIGl0LCBubyB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQuXHJcbiAgICBsZXQgZGVmYXVsdFZhbHVlID0gbWVkaWFGZWF0dXJlRGVmYXVsdFZhbHVlcy5nZXQoY2FtZWxOYW1lKTtcclxuICAgIGlmIChkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWwgPT09IGRlZmF1bHRWYWx1ZSlcclxuICAgICAgICByZXR1cm4gZGFzaE5hbWU7XHJcblxyXG4gICAgbGV0IGlzUmFuZ2UgPSByYW5nZU1lZGlhRmVhdHVyZXMuaGFzKCBjYW1lbE5hbWUpO1xyXG4gICAgaWYgKGlzUmFuZ2UgJiYgQXJyYXkuaXNBcnJheSggdmFsKSlcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gYCgke1wibWluLVwiICsgZGFzaE5hbWV9OiR7djJzKCB2YWxbMF0sIG9wdGlvbnMpfSkgYW5kICgke1wibWF4LVwiICsgZGFzaE5hbWV9OiR7djJzKCB2YWxbMV0sIG9wdGlvbnMpfSlgO1xyXG5cclxuICAgICAgICAvLyB0aGlzIHN5bnRheCBpcyBub3Qgd2lkZWx5IHN1cHBvcnRlZCB5ZXRcclxuICAgICAgICAvLyByZXR1cm4gYCR7czF9IDw9ICR7ZGFzaE5hbWV9IDw9ICR7czJ9YDtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gYCgke2Rhc2hOYW1lfToke3YycyggdmFsLCBvcHRpb25zKX0pYDtcclxufVxyXG5cclxuXHJcblxyXG5jb25zdCBtZWRpYUZlYXR1cmVJbmZvczogeyBbSyBpbiBrZXlvZiBJTWVkaWFGZWF0dXJlc2V0XT86IFYyU09wdGlvbnMgfSA9XHJcbntcclxuICAgIGFzcGVjdFJhdGlvOiB7XHJcbiAgICAgICAgbnVtOiAodjogbnVtYmVyKSA9PiB2ICsgXCIvMVwiXHJcbiAgICB9LFxyXG4gICAgaGVpZ2h0OiBXS0YuTGVuZ3RoLFxyXG4gICAgbWluSGVpZ2h0OiBXS0YuTGVuZ3RoLFxyXG4gICAgbWF4SGVpZ2h0OiBXS0YuTGVuZ3RoLFxyXG4gICAgcmVzb2x1dGlvbjogV0tGLlJlc29sdXRpb24sXHJcbiAgICBtaW5SZXNvbHV0aW9uOiBXS0YuUmVzb2x1dGlvbixcclxuICAgIG1heFJlc29sdXRpb246IFdLRi5SZXNvbHV0aW9uLFxyXG4gICAgd2lkdGg6IFdLRi5MZW5ndGgsXHJcbiAgICBtaW5XaWR0aDogV0tGLkxlbmd0aCxcclxuICAgIG1heFdpZHRoOiBXS0YuTGVuZ3RoLFxyXG59O1xyXG5cclxuLy8gU2V0IG9mIG1lZGlhIGZlYXR1cmVzIHRoYXQgYWxsb3cgcmFuZ2Ugb2YgdmFsdWVzXHJcbmNvbnN0IHJhbmdlTWVkaWFGZWF0dXJlcyA9IG5ldyBTZXQ8c3RyaW5nPihbXCJhc3BlY3RSYXRpb1wiLCBcImNvbG9yXCIsIFwiY29sb3JJbmRleFwiLCBcImhlaWdodFwiLCBcIm1vbm9jaHJvbWVcIiwgXCJyZXNvbHV0aW9uXCIsIFwid2lkdGhcIl0pO1xyXG5cclxuLy8gTWFwIG9mIG1lZGlhIGZlYXR1cmVzIHRvIGRlZmF1bHQgdmFsdWVzXHJcbmNvbnN0IG1lZGlhRmVhdHVyZURlZmF1bHRWYWx1ZXMgPSBuZXcgTWFwPHN0cmluZyxhbnk+KFtcclxuICAgIFtcImNvbG9yXCIsIDBdLFxyXG4gICAgW1wiY29sb3JJbmRleFwiLCAwXSxcclxuICAgIFtcIm1vbm9jaHJvbWVcIiwgMF1cclxuXSk7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBDU1MgQHN1cHBvcnRzIHJ1bGUuXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqIENvbnZlcnRzIHRoZSBnaXZlbiBzdXBwb3J0cyBzdGF0ZW1lbnQgdG8gaXRzIHN0cmluZyByZXByZXNlbnRhdGlvbiAqL1xyXG5leHBvcnQgY29uc3Qgc3VwcG9ydHMycyA9IChzdGF0ZW1lbnQ6IFN1cHBvcnRzU3RhdGVtZW50KTogc3RyaW5nID0+XHJcbiAgICB2MnMoIHN0YXRlbWVudCwge1xyXG4gICAgICAgIGFueTogc3VwcG9ydHNRdWVyeTJzLFxyXG4gICAgICAgIHNlcDogXCIgb3IgXCJcclxuICAgIH0pO1xyXG5cclxuLyoqIENvbnZlcnRzIHRoZSBnaXZlbiBzdXBwb3J0cyBxdWVyeSB0byBpdHMgc3RyaW5nIHJlcHJlc2VudGF0aW9uICovXHJcbmNvbnN0IHN1cHBvcnRzUXVlcnkycyA9IChxdWVyeTogU3VwcG9ydHNRdWVyeSk6IHN0cmluZyA9PlxyXG4gICAgdjJzKCBxdWVyeSwge1xyXG4gICAgICAgIG9iajogKHY6IEV4Y2x1ZGU8U3VwcG9ydHNRdWVyeSxzdHJpbmc+KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBwcm9wTmFtZXMgPSBPYmplY3Qua2V5cyggdik7XHJcbiAgICAgICAgICAgIGlmIChwcm9wTmFtZXMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYCgke3Byb3BOYW1lcy5tYXAoIChwcm9wTmFtZSkgPT5cclxuICAgICAgICAgICAgICAgIGAke2NhbWVsVG9EYXNoKHByb3BOYW1lKX06JHtzcDJzKCBwcm9wTmFtZSwgcXVlcnlbcHJvcE5hbWVdKX1gKS5qb2luKCBcIikgYW5kIChcIil9KWA7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBDU1MgQGZvbnQtZmFjZSBydWxlLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZm9udCBmYWNlIG9iamVjdCB0byB0aGUgQ1NTIHN0eWxlIHN0cmluZy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBmb250RmFjZTJzID0gKGZvbnRmYWNlOiBFeHRlbmRlZEZvbnRGYWNlKTogc3RyaW5nID0+IHByb3BTZXQycyggZm9udGZhY2UsIGZvbnRGYWNlUHJvcGVydHlJbmZvcyk7XHJcblxyXG53a2ZbV0tGLkZvbnRTdHlsZV0gPSB2ID0+IHYycyggdiwge1xyXG4gICAgbnVtOiB2ID0+IGBvYmxpcXVlICR7d2tmW1dLRi5BbmdsZV0odil9YCxcclxuICAgIGFycjogdiA9PiBgb2JsaXF1ZSAke2EycyggdiwgV0tGLkFuZ2xlKX1gXHJcbn0pO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogTWFwIG9mIHByb3BlcnR5IG5hbWVzIHRvIHRoZSBWMlNPcHRpb25zIG9iamVjdHMgZGVzY3JpYmluZyBjdXN0b20gYWN0aW9ucyBuZWNlc3NhcnkgdG9cclxuICogY29udmVydCB0aGUgcHJvcGVydHkgdmFsdWUgdG8gdGhlIENTUy1jb21wbGlhbnQgc3RyaW5nLlxyXG4gKi9cclxuY29uc3QgZm9udEZhY2VQcm9wZXJ0eUluZm9zOiB7IFtLIGluIGtleW9mIElGb250RmFjZV0/OiBWMlNPcHRpb25zIH0gPVxyXG57XHJcbiAgICBhc2NlbnRPdmVycmlkZTogV0tGLlBlcmNlbnQsXHJcbiAgICBkZXNjZW50T3ZlcnJpZGU6IFdLRi5QZXJjZW50LFxyXG4gICAgZm9udFN0cmV0Y2g6IHsgYW55OiBXS0YuUGVyY2VudCB9LFxyXG4gICAgZm9udFN0eWxlOiBXS0YuRm9udFN0eWxlLFxyXG4gICAgZm9udFdlaWdodDogeyBhbnk6IFdLRi5OdW1iZXIgfSxcclxuICAgIGxpbmVHYXBPdmVycmlkZTogV0tGLlBlcmNlbnQsXHJcbiAgICBzcmM6IHtcclxuICAgICAgICBhbnk6IHtcclxuICAgICAgICAgICAgb2JqOiBbXHJcbiAgICAgICAgICAgICAgICBbXCJsb2NhbFwiLCB2ID0+IGBsb2NhbCgke3Z9KWBdLFxyXG4gICAgICAgICAgICAgICAgW1widXJsXCIsIHYgPT4gYHVybCgke3Z9KWBdLFxyXG4gICAgICAgICAgICAgICAgW1wiZm9ybWF0XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBhbnk6IHYgPT4gYGZvcm1hdChcXFwiJHt2fVxcXCIpYCxcclxuICAgICAgICAgICAgICAgICAgICBzZXA6IFwiLFwiXHJcbiAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXA6IFwiLFwiXHJcbiAgICB9LFxyXG4gICAgc2l6ZUFkanVzdDogV0tGLlBlcmNlbnQsXHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIENTUyBAY291bnRlci1zdHlsZSBydWxlLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gY291bnRlciBzdHlsZXNldCBwcm9wZXJ0eSB0byB0aGUgQ1NTIHN0eWxlIHN0cmluZy4gUHJvcGVydHkgbmFtZSBjYW4gYmUgaW5cclxuICogZWl0aGVyIGRhc2ggb3IgY2FtZWwgZm9ybS5cclxuICovXHJcbiBjb25zdCBjb3VudGVyU3R5bGVzZXRQcm9wMnMgPSAocHJvcE5hbWU6IHN0cmluZywgcHJvcFZhbDogYW55LCBpbmNsdWRlTmFtZT86IGJvb2xlYW4pOiBzdHJpbmcgPT5cclxuIHtcclxuICAgICBpZiAoIXByb3BOYW1lKVxyXG4gICAgICAgICByZXR1cm4gXCJcIjtcclxuXHJcbiAgICAgLy8gY29udmVydCB0aGUgdmFsdWUgdG8gc3RyaW5nIGJhc2VkIG9uIHRoZSBpbmZvcm1hdGlvbiBvYmplY3QgZm9yIHRoZSBwcm9wZXJ0eSAoaWYgZGVmaW5lZClcclxuICAgICBsZXQgc3RyaW5nVmFsdWUgPSB2MnMoIHByb3BWYWwsIGNvdW50ZXJTdHlsZVByb3BlcnR5SW5mb3NbZGFzaFRvQ2FtZWwocHJvcE5hbWUpXSk7XHJcblxyXG4gICAgIC8vIGlmIHRoZSByZXN1bHRpbmcgc3RyaW5nIGlzIGVtcHR5IGFuZCB0aGUgbmFtZSBzaG91bGQgYmUgaW5jbHVkZWQsIHRoZW4gd2UgcmV0dXJuXHJcbiAgICAgLy8gXCJuYW1lOjsgb3RoZXJ3aXNlIHdlIHdpbGwgcmV0dXJuIGFuIGVtcHR5IHN0cmluZy5cclxuICAgICBpZiAoIXN0cmluZ1ZhbHVlICYmIGluY2x1ZGVOYW1lKVxyXG4gICAgICAgICBzdHJpbmdWYWx1ZSA9IFwiXCI7XHJcblxyXG4gICAgIHJldHVybiBpbmNsdWRlTmFtZSA/IGAke2NhbWVsVG9EYXNoKCBwcm9wTmFtZSl9OiR7c3RyaW5nVmFsdWV9YCA6IHN0cmluZ1ZhbHVlO1xyXG4gfVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBjb3VudGVyIHN0eWxlc2V0IG9iamVjdCB0byB0aGUgQ1NTIG1lZGlhIHF1ZXJ5IHN0cmluZ1xyXG4gKi9cclxuIGV4cG9ydCBjb25zdCBjb3VudGVyU3R5bGVzZXQycyA9IChjb3VudGVyU3R5bGVzZXQ6IEV4dGVuZGVkQ291bnRlclN0eWxlc2V0KTogc3RyaW5nID0+XHJcbiB7XHJcbiAgICBpZiAoIWNvdW50ZXJTdHlsZXNldClcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuXHJcbiAgICBsZXQgcyA9IFwiXCI7XHJcblx0Zm9yKCBsZXQgbmFtZSBpbiBjb3VudGVyU3R5bGVzZXQpXHJcbiAgICAgICAgcyArPSBjb3VudGVyU3R5bGVzZXRQcm9wMnMoIG5hbWUsIGNvdW50ZXJTdHlsZXNldFtuYW1lXSwgdHJ1ZSkgKyBcIjtcIjtcclxuXHJcbiAgICByZXR1cm4gcztcclxuIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG4gLyoqXHJcbiAqIE1hcCBvZiBwcm9wZXJ0eSBuYW1lcyB0byB0aGUgVjJTT3B0aW9ucyBvYmplY3RzIGRlc2NyaWJpbmcgY3VzdG9tIGFjdGlvbnMgbmVjZXNzYXJ5IHRvXHJcbiAqIGNvbnZlcnQgdGhlIHByb3BlcnR5IHZhbHVlIHRvIHRoZSBDU1MtY29tcGxpYW50IHN0cmluZy5cclxuICovXHJcbmNvbnN0IGNvdW50ZXJTdHlsZVByb3BlcnR5SW5mb3M6IHsgW0sgaW4ga2V5b2YgSUNvdW50ZXJTdHlsZXNldF0/OiBWMlNPcHRpb25zIH0gPVxyXG57XHJcbiAgICBzeXN0ZW06IHtcclxuICAgICAgICBudW06IHYgPT4gXCJmaXhlZCBcIiArIHYsXHJcbiAgICAgICAgYXJyOiB2ID0+IFwiZXh0ZW5kcyBcIiArIHYycyh2WzBdKVxyXG4gICAgfSxcclxuICAgIG5lZ2F0aXZlOiB7XHJcbiAgICAgICAgYW55OiBXS0YuUXVvdGVkXHJcbiAgICB9LFxyXG4gICAgcHJlZml4OiBXS0YuUXVvdGVkLFxyXG4gICAgc3VmZml4OiBXS0YuUXVvdGVkLFxyXG4gICAgcmFuZ2U6IHtcclxuICAgICAgICBhcnIyOiB7IHNlcDogXCIsXCIgfVxyXG4gICAgfSxcclxuICAgIHBhZDoge1xyXG4gICAgICAgIGl0ZW06IFdLRi5RdW90ZWRcclxuICAgIH0sXHJcbiAgICBzeW1ib2xzOiB7XHJcbiAgICAgICAgaXRlbTogV0tGLlF1b3RlZFxyXG4gICAgfSxcclxuICAgIGFkZGl0aXZlU3ltYm9sczoge1xyXG4gICAgICAgIGFycjI6IHsgaXRlbTogeyBpdGVtOiBXS0YuUXVvdGVkIH0sIHNlcDogXCIsXCIgfSxcclxuICAgICAgICBhbnk6IFdLRi5RdW90ZWRcclxuICAgIH0sXHJcbn1cclxuXHJcblxyXG5cclxuIiwi77u/aW1wb3J0IHtFeHRlbmRlZCwgSUdlbmVyaWNQcm94eSwgT25lT3JNYW55fSBmcm9tIFwiLi4vYXBpL0NvcmVUeXBlc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgSU51bWVyaWNNYXRoLCBDc3NMZW5ndGgsIENzc0FuZ2xlLCBDc3NUaW1lLCBDc3NSZXNvbHV0aW9uLFxyXG4gICAgQ3NzRnJlcXVlbmN5LCBDc3NQb3NpdGlvbiwgTGVuZ3RoVW5pdHMsIFBlcmNlbnRVbml0cywgQW5nbGVVbml0cywgVGltZVVuaXRzLFxyXG4gICAgUmVzb2x1dGlvblVuaXRzLCBGcmVxdWVuY3lVbml0cywgQ3NzTnVtYmVyLCBDc3NQZXJjZW50LCBDc3NSYWRpdXMsIEJvcmRlclJhZGl1c1xyXG59IGZyb20gXCIuLi9hcGkvTnVtZXJpY1R5cGVzXCI7XHJcbmltcG9ydCB7YTJzLCBOdW1iZXJUb1N0cmluZ0Z1bmMsIHRhZzJzLCB2MnMsIHdrZiwgV0tGfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gTnVtYmVyc1xyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHNpbmdsZSBudW1lcmljIHZhbHVlIHRvIGEgQ1NTIHN0cmluZyBvcHRpb25hbGx5IGFwcGVuZGluZyB1bml0cyB0aGF0IGNhbiBiZSBkaWZmZXJlbnRcclxuICogZm9yIGludGVnZXIgYW5kIGZsb2F0aW5nIHBvaW50IG51bWJlcnMuXHJcbiAqIEBwYXJhbSBuIE51bWJlciB0byBjb252ZXJ0IHRvIHN0cmluZyByZXByZXNlbnRhdGlvbi5cclxuICogQHBhcmFtIGludFVuaXQgVW5pdHMgdG8gYXBwZW5kIGlmIHRoZSBudW1iZXIgaXMgaW50ZWdlci5cclxuICogQHBhcmFtIGZsb2F0VW5pdCBVbml0cyB0byBhcHBlbmQgaWYgdGhlIG51bWJlciBpcyBmbG9hdGluZyBwb2ludC5cclxuICovXHJcbmNvbnN0IG51bWJlclRvU3RyaW5nID0gKG46IG51bWJlciwgaW50VW5pdDogc3RyaW5nID0gXCJcIiwgZmxvYXRVaW50OiBzdHJpbmcgPSBcIlwiKTogc3RyaW5nID0+XHJcbiAgICBuICsgKE51bWJlci5pc0ludGVnZXIobikgPyAgaW50VW5pdCA6IGZsb2F0VWludCk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgTnVtZXJpY01hdGggY2xhc3MgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlXHJcbiAqIG51bWVyaWMgQ1NTIHR5cGVzLiBXaGVuIGFyZ3VtZW50cyBmb3IgdGhlc2UgZnVuY3Rpb25zIGFyZSBvZiB0aGUgbnVtYmVyIEphdmFTY3JpcHQgdHlwZSB0aGV5XHJcbiAqIGFyZSBjb252ZXJ0ZWQgdG8gc3RyaW5ncyBieSBjYWxsaW5nIGEgZnVuY3Rpb24gc3BlY2lmaWVkIGluIHRoZSBjb25zdHJ1Y3Rvci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBOdW1lcmljTWF0aDxUID0gYW55LCBVIGV4dGVuZHMgc3RyaW5nID0gYW55PiBpbXBsZW1lbnRzIElOdW1lcmljTWF0aDxULFU+XHJcbntcclxuICAgIHB1YmxpYyBuMnM6IE51bWJlclRvU3RyaW5nRnVuYztcclxuXHJcbiAgICBjb25zdHJ1Y3RvciggbjJzOiBOdW1iZXJUb1N0cmluZ0Z1bmMpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5uMnMgPSBuMnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHYycyggdmFsOiBFeHRlbmRlZDxUPik6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB2MnMoIHZhbCwgeyBudW06IHRoaXMubjJzIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtdjJzKCB2YWw6IE9uZU9yTWFueTxUPiwgc2VwYXJhdG9yOiBzdHJpbmcpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdjJzKCB2YWwsIHtcclxuICAgICAgICAgICAgYW55OiB2ID0+IHRoaXMudjJzKHYpLFxyXG4gICAgICAgICAgICBzZXA6IHNlcGFyYXRvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDcmVhdGVzIENzc0xlbmd0aCB2YWx1ZSBmcm9tIHRoZSBudW1iZXIgYW5kIHRoZSBnaXZlbiB1bml0LiAqL1xyXG4gICAgcHVibGljIHVuaXRzKCBuOiBudW1iZXIsIHVuaXQ6IFUpOiBJR2VuZXJpY1Byb3h5PFU+XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IG4gKyB1bml0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtaW4oIC4uLnBhcmFtczogRXh0ZW5kZWQ8VD5bXSk6IElHZW5lcmljUHJveHk8VT5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5tKCBcIm1pblwiLCBwYXJhbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtYXgoIC4uLnBhcmFtczogRXh0ZW5kZWQ8VD5bXSk6IElHZW5lcmljUHJveHk8VT5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5tKCBcIm1heFwiLCBwYXJhbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFtcCggbWluOiBFeHRlbmRlZDxUPiwgcHJlZjogRXh0ZW5kZWQ8VD4sIG1heDogRXh0ZW5kZWQ8VD4pOiBJR2VuZXJpY1Byb3h5PFU+XHJcbiAgICB7XHJcbiAgICAgICAgLy8gcmV0dXJuICgpID0+IG1hdGhGdW5jKCBcImNsYW1wXCIsIFttaW4sIHByZWYsIG1heF0sIHRoaXMubjJzKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5tKCBcImNsYW1wXCIsIFttaW4sIHByZWYsIG1heF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjYWxjKCBmb3JtdWxhUGFydHM6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi5wYXJhbXM6IEV4dGVuZGVkPFQ+W10pOiBJR2VuZXJpY1Byb3h5PFU+XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IGBjYWxjKCR7dGFnMnMoIGZvcm11bGFQYXJ0cywgcGFyYW1zLCAodjogRXh0ZW5kZWQ8VD4pID0+IHRoaXMudjJzKHYpKX0pYDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG0oIG5hbWU6IHN0cmluZywgcGFyYW1zOiBFeHRlbmRlZDxUPltdKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIGAke25hbWV9KCR7dGhpcy5tdjJzKCBwYXJhbXMsIFwiLFwiKX0pYDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIE51bWJlck1hdGggb2JqZWN0IGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQ1NTIG1hdGhlbWF0aWMgZnVuY3Rpb25zIG9uIHRoZSBgPG51bWJlcj5gXHJcbiAqIENTUyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE51bWJlck1hdGggPSBuZXcgTnVtZXJpY01hdGg8Q3NzTnVtYmVyLFwiXCI+KCBuID0+IG4udG9TdHJpbmcoKSk7XHJcblxyXG53a2ZbV0tGLk51bWJlcl0gPSB2ID0+IE51bWJlck1hdGgudjJzKCB2KTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBQZXJjZW50TWF0aCBvYmplY3QgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlXHJcbiAqIGA8cGVyY2VudGFnZT5gIENTUyB0eXBlIGJ5IGFwcGVuZGluZyBhIFwiJVwiIHVuaXQgc3VmZml4LiBJZiB0aGUgbnVtYmVyIGlzIGJldHdlZW4gLTEgYW5kIDEgKG5vblxyXG4gKiBpbmNsdXNpdmUpLCBtdWx0aXBsaWVzIHRoZSBudW1iZXIgYnkgMTAwLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBlcmNlbnRNYXRoID0gbmV3IE51bWVyaWNNYXRoPENzc1BlcmNlbnQsUGVyY2VudFVuaXRzPihcclxuICAgIG4gPT4gKG4gPj0gMSB8fCBuIDw9IC0xID8gbiA6IE1hdGgucm91bmQobiAqIDEwMCkpICsgXCIlXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBudW1iZXIgdG8gc3RyaW5nIHVzaW5nIHRoZSBmb2xsb3dpbmcgcnVsZXM6XHJcbiAqIC0gaWYgdGhlIG51bWJlciBpcyBiZXR3ZWVuIC0xIGFuZCAxIChub24gaW5jbHVzaXZlKSwgbXVsdGlwbGllcyB0aGUgbnVtYmVyIGJ5IDEwMCBhbmQgYXBwZW5kcyBcIiVcIlxyXG4gKiAtIG90aGVyd2lzZSwgY29udmVydHMgdGhlIG51bWJlciB0byBzdHJpbmcgd2l0aG91dCBhcHBlbmRpbmcgYW55IHVuaXRzLlxyXG4gKi9cclxuY29uc3QgdW5pdGxlc3NPclBlcmNlbnRUb1N0cmluZyA9IChuOiBudW1iZXIpOiBzdHJpbmcgPT4gbiA+PSAxIHx8IG4gPD0gLTEgPyBuLnRvU3RyaW5nKCkgOiAoTWF0aC5yb3VuZChuICogMTAwKSArIFwiJVwiKTtcclxuXHJcbndrZltXS0YuUGVyY2VudF0gPSB2ID0+IFBlcmNlbnRNYXRoLnYycyggdik7XHJcbndrZltXS0YuVW5pdGxlc3NPclBlcmNlbnRdID0gdW5pdGxlc3NPclBlcmNlbnRUb1N0cmluZztcclxud2tmW1dLRi5BbHdheXNQZXJjZW50XSA9IHYgPT4gdiArIFwiJVwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIExlbmd0aE1hdGggb2JqZWN0IGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQ1NTIG1hdGhlbWF0aWMgZnVuY3Rpb25zIG9uIHRoZSBgPGxlbmd0aD5gXHJcbiAqIENTUyB0eXBlIGJ5IGFwcGVuZGluZyBhIGxlbmd0aCB1bml0IHN1ZmZpeC5cclxuICogSW50ZWdlciBudW1iZXJzIHVzZSBcInB4XCI7IGZsb2F0aW5nIHBvaW50IG51bWJlcnMgdXNlIFwiZW1cIi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBMZW5ndGhNYXRoID0gbmV3IE51bWVyaWNNYXRoPENzc0xlbmd0aCxMZW5ndGhVbml0cz4oIG4gPT4gbnVtYmVyVG9TdHJpbmcoIG4sIFwicHhcIiwgXCJlbVwiKSk7XHJcblxyXG53a2ZbV0tGLkxlbmd0aF0gPSB2ID0+IExlbmd0aE1hdGgudjJzKCB2KTtcclxud2tmW1dLRi5NdWx0aUxlbmd0aFdpdGhTcGFjZV0gPSB2ID0+IExlbmd0aE1hdGgubXYycyggdiwgXCIgXCIpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIEFuZ2xlTWF0aCBvYmplY3QgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlIGA8YW5nbGU+YFxyXG4gKiBDU1MgdHlwZSBieSBhcHBlbmRpbmcgYW4gYW5nbGUgdW5pdCBzdWZmaXguXHJcbiAqIEludGVnZXIgbnVtYmVycyB1c2UgXCJkZWdcIjsgZmxvYXRpbmcgcG9pbnQgbnVtYmVycyB1c2UgXCJ0dXJuXCIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQW5nbGVNYXRoID0gbmV3IE51bWVyaWNNYXRoPENzc0FuZ2xlLEFuZ2xlVW5pdHM+KCBuID0+IG51bWJlclRvU3RyaW5nKCBuLCBcImRlZ1wiLCBcInR1cm5cIikpO1xyXG5cclxud2tmW1dLRi5BbmdsZV0gPSB2ID0+IEFuZ2xlTWF0aC52MnMoIHYpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIFRpbWVNYXRoIG9iamVjdCBjb250YWlucyBtZXRob2RzIHRoYXQgaW1wbGVtZW50IENTUyBtYXRoZW1hdGljIGZ1bmN0aW9ucyBvbiB0aGUgYDx0aW1lPmBcclxuICogQ1NTIHR5cGUgYnkgYXBwZW5kaW5nIGEgdGltZSB1bml0IHN1ZmZpeC5cclxuICogSW50ZWdlciBudW1iZXJzIHVzZSBcIm1zXCI7IGZsb2F0aW5nIHBvaW50IG51bWJlcnMgdXNlIFwic1wiLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFRpbWVNYXRoID0gbmV3IE51bWVyaWNNYXRoPENzc1RpbWUsVGltZVVuaXRzPiggbiA9PiBudW1iZXJUb1N0cmluZyggbiwgXCJtc1wiLCBcInNcIikpO1xyXG5cclxud2tmW1dLRi5UaW1lXSA9IHYgPT4gVGltZU1hdGgudjJzKCB2KTtcclxud2tmW1dLRi5NdWx0aVRpbWVXaXRoQ29tbWFdID0gdiA9PiBUaW1lTWF0aC5tdjJzKCB2LCBcIixcIik7XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBSZXNvbHV0aW9uTWF0aCBvYmplY3QgY29udGFpbnMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBDU1MgbWF0aGVtYXRpYyBmdW5jdGlvbnMgb24gdGhlXHJcbiAqIGA8cmVzb2x1dGlvbj5gIENTUyB0eXBlIGJ5IGFwcGVuZGluZyBhIHJlc29sdXRpb24gdW5pdCBzdWZmaXguXHJcbiAqIEludGVnZXIgbnVtYmVycyB1c2UgXCJkcGlcIjsgZmxvYXRpbmcgcG9pbnQgbnVtYmVycyB1c2UgXCJ4XCIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUmVzb2x1dGlvbk1hdGggPSBuZXcgTnVtZXJpY01hdGg8Q3NzUmVzb2x1dGlvbixSZXNvbHV0aW9uVW5pdHM+KCBuID0+IG51bWJlclRvU3RyaW5nKCBuLCBcImRwaVwiLCBcInhcIikpO1xyXG5cclxud2tmW1dLRi5SZXNvbHV0aW9uXSA9IHYgPT4gUmVzb2x1dGlvbk1hdGgudjJzKCB2KTtcclxuXHJcblxyXG4vKipcclxuICogVGhlIEZyZXF1ZW5jeU1hdGggb2JqZWN0IGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBpbXBsZW1lbnQgQ1NTIG1hdGhlbWF0aWMgZnVuY3Rpb25zIG9uIHRoZVxyXG4gKiBgPGZyZXF1ZW5jeT5gIENTUyB0eXBlIGJ5IGFwcGVuZGluZyBhIGZyZXF1ZW5jeSB1bml0IHN1ZmZpeC5cclxuICogSW50ZWdlciBudW1iZXJzIHVzZSBcIkh6XCI7IGZsb2F0aW5nIHBvaW50IG51bWJlcnMgdXNlIFwia0h6XCIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRnJlcXVlbmN5TWF0aCA9IG5ldyBOdW1lcmljTWF0aDxDc3NGcmVxdWVuY3ksIEZyZXF1ZW5jeVVuaXRzPiggbiA9PiBudW1iZXJUb1N0cmluZyggbiwgXCJIelwiLCBcImtIelwiKSk7XHJcblxyXG53a2ZbV0tGLkZyZXF1ZW5jeV0gPSB2ID0+IEZyZXF1ZW5jeU1hdGgudjJzKCB2KTtcclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gU2l6ZSwgUG9pbnQsIFBvc2l0aW9uLCBSYWRpdXNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vLyBDb252ZXJ0cyBzaW5nbGUgcG9zaXRpb24gc3R5bGUgdmFsdWUgdG8gdGhlIENTUyBzdHJpbmcuXHJcbndrZltXS0YuUG9zaXRpb25dID0gKHZhbDogRXh0ZW5kZWQ8Q3NzUG9zaXRpb24+KTogc3RyaW5nID0+IHYycyggdmFsLCB7IGFueTogV0tGLkxlbmd0aCB9KTtcclxud2tmW1dLRi5BdFBvc2l0aW9uXSA9ICh2OiBFeHRlbmRlZDxDc3NQb3NpdGlvbj4pID0+IHYgPT0gbnVsbCA/IFwiXCIgOiBcImF0IFwiICsgd2tmW1dLRi5Qb3NpdGlvbl0odik7XHJcblxyXG4vLyBDb252ZXJ0cyBtdWx0aS1wb3NpdGlvbiBzdHlsZSB2YWx1ZSB0byB0aGUgQ1NTIHN0cmluZy5cclxuIHdrZltXS0YuTXVsdGlQb3NpdGlvbl0gPSAodmFsOiBPbmVPck1hbnk8Q3NzUG9zaXRpb24+KTogc3RyaW5nID0+XHJcbiAgICB2MnMoIHZhbCwge1xyXG4gICAgICAgIGFycjI6IHsgYW55OiBXS0YuUG9zaXRpb24sIHNlcDogXCIsXCIgfSxcclxuICAgICAgICBhbnk6IFdLRi5Qb3NpdGlvblxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbi8vIENvbnZlcnRzIGNvcm5lciByYWRpdXMgc3R5bGUgdmFsdWUgdG8gdGhlIENTUyBzdHJpbmcuXHJcbndrZltXS0YuUmFkaXVzXSA9ICh2OiBFeHRlbmRlZDxDc3NSYWRpdXM+KSA9PiB2MnMoIHYsIHsgYW55OiBXS0YuTGVuZ3RoIH0pO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgYm9yZGVyIHJhZGl1cyBzdHlsZSB2YWx1ZSB0byB0aGUgQ1NTIHN0cmluZy5cclxuICovXHJcbiB3a2ZbV0tGLkJvcmRlclJhZGl1c10gPSAodmFsOiBFeHRlbmRlZDxCb3JkZXJSYWRpdXM+KTogc3RyaW5nID0+XHJcbiAgICB2MnMoIHZhbCwge1xyXG4gICAgICAgIGFycjI6IHsgYW55OiB7IGFueTogV0tGLkxlbmd0aCB9LCBzZXA6IFwiL1wiIH0sXHJcbiAgICAgICAgYW55OiBXS0YuTGVuZ3RoXHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuXHJcbiIsImltcG9ydCB7SVN0eWxlRGVmaW5pdGlvbn0gZnJvbSBcIi4uL2FwaS9SdWxlVHlwZXNcIjtcclxuaW1wb3J0IHtTY2hlZHVsZXJUeXBlLCBJU2NoZWR1bGVyfSBmcm9tIFwiLi4vYXBpL1NjaGVkdWxpbmdUeXBlc1wiO1xyXG5pbXBvcnQge1N0cmluZ1N0eWxlc2V0fSBmcm9tIFwiLi4vYXBpL1N0eWxlc2V0c1wiO1xyXG5pbXBvcnQge2FjdGl2YXRlU0QsIGRlYWN0aXZhdGVTRH0gZnJvbSBcIi4uL3J1bGVzL1J1bGVDb250YWluZXJcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJQWN0aXZhdG9yIGludGVyZmFjZSByZXByZXNlbnRzIGFuIG9iamVjdCByZXNwb25zaWJsZSBmb3IgYSBjZXJ0YWluIHR5cGUgb2YgYWN0aXZhdGlvblxyXG4gKiBtZWNoYW5pc20uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTdHlsZUFjdGl2YXRvclxyXG57XHJcblx0LyoqXHJcblx0ICogSW5zdHJ1Y3RzIHRvIGFjdGl2YXRlIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uIGluc3RhbmNlLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGVcclxuXHQgKiBhY3RpdmF0ZSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIHRoaXMgYWN0aXZhdGlvbiBtZWNoYW5pc20uXHJcblx0ICovXHJcblx0YWN0aXZhdGUoIGRlZmluaXRpb246IElTdHlsZURlZmluaXRpb24pOiB2b2lkO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbnN0cnVjdHMgdG8gZGVhY3RpdmF0ZSB0aGUgZ2l2ZW4gc3R5bGUgZGVmaW5pdGlvbiBpbnN0YW5jZS4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlXHJcblx0ICogZGVhY3RpdmF0ZSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIHRoaXMgYWN0aXZhdGlvbiBtZWNoYW5pc20uXHJcblx0ICovXHJcblx0ZGVhY3RpdmF0ZSggZGVmaW5pdGlvbjogSVN0eWxlRGVmaW5pdGlvbik6IHZvaWQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEluc3RydWN0cyB0byBzZXQgdGhlIHZhbHVlIG9mIGVpdGhlciBhIHNpbmdsZSBwcm9wZXJ0eSBvciBhIHNldCBvZiBwcm9wZXJ0aWVzIGluIHRoZSBnaXZlblxyXG4gICAgICogQ1NTIHN0eWxlIG9iamVjdC5cclxuXHQgKi9cclxuICAgIHVwZGF0ZVN0eWxlKCBydWxlT3JFbG06IENTU1N0eWxlUnVsZSB8IEVsZW1lbnRDU1NJbmxpbmVTdHlsZSwgbmFtZTogc3RyaW5nIHwgbnVsbCxcclxuICAgICAgICB2YWx1ZT86IHN0cmluZyB8IFN0cmluZ1N0eWxlc2V0IHwgbnVsbCwgaW1wb3J0YW50PzogYm9vbGVhbik6IHZvaWQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFBlcmZvcm1zIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uIGZvciBhbGwgc3R5bGUgZGVmaW5pdGlvbnMgYWNjdW11bGF0ZWQgc2luY2UgdGhlIGxhc3RcclxuXHQgKiBhY3RpdmF0aW9uL2RlYWN0aXZhdGlvbi4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIGZvcmNlRE9NVXBkYXRlIGZ1bmN0aW9uIGlzIGNhbGxlZFxyXG5cdCAqIGZvciB0aGlzIGFjdGl2YXRpb24gbWVjaGFuaXNtLlxyXG5cdCAqL1xyXG5cdGZvcmNlRE9NVXBkYXRlKCk6IHZvaWQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENhbmNlbHMgYWN0aXZhdGlvbi9kZWFjdGl2YXRpb24gZm9yIGFsbCBzdHlsZSBkZWZpbml0aW9ucyBhY2N1bXVsYXRlZCBzaW5jZSB0aGUgbGFzdFxyXG5cdCAqIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgY2FuY2VsRE9NVXBkYXRlIGZ1bmN0aW9uIGlzIGNhbGxlZFxyXG5cdCAqIGZvciB0aGlzIGFjdGl2YXRpb24gbWVjaGFuaXNtLlxyXG5cdCAqL1xyXG5cdGNhbmNlbERPTVVwZGF0ZSgpOiB2b2lkO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGVpdGhlciBhIHNpbmdsZSBwcm9wZXJ0eSBvciBhIHNldCBvZiBwcm9wZXJ0aWVzIGluIHRoZSBnaXZlblxyXG4gKiBDU1Mgc3R5bGUgb2JqZWN0LlxyXG4gKi9cclxuY29uc3QgdXBkYXRlU3R5bGVQcm9wZXJ0eSA9IChydWxlT3JFbG06IENTU1N0eWxlUnVsZSB8IEVsZW1lbnRDU1NJbmxpbmVTdHlsZSwgbmFtZTogc3RyaW5nIHwgbnVsbCxcclxuICAgIHZhbHVlPzogc3RyaW5nIHwgU3RyaW5nU3R5bGVzZXQgfCBudWxsLCBpbXBvcnRhbnQ/OiBib29sZWFuKTogdm9pZCA9PlxyXG57XHJcbiAgICBpZiAoIW5hbWUgJiYgdmFsdWUgPT0gbnVsbClcclxuICAgIHtcclxuICAgICAgICBpZiAocnVsZU9yRWxtIGluc3RhbmNlb2YgQ1NTU3R5bGVSdWxlKVxyXG4gICAgICAgICAgICBydWxlT3JFbG0uY3NzVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAocnVsZU9yRWxtIGFzIGFueSBhcyBFbGVtZW50KS5yZW1vdmVBdHRyaWJ1dGUoIFwic3R5bGVcIik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChuYW1lKVxyXG4gICAge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxyXG4gICAgICAgICAgICBydWxlT3JFbG0uc3R5bGUucmVtb3ZlUHJvcGVydHkoIG5hbWUpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcnVsZU9yRWxtLnN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSBhcyBzdHJpbmcsIGltcG9ydGFudCA/IFwiaW1wb3J0YW50XCIgOiB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIGxldCBzdHlsZXNldCA9IHZhbHVlIGFzIFN0cmluZ1N0eWxlc2V0O1xyXG4gICAgICAgIGZvciggbGV0IHByb3BOYW1lIGluIHN0eWxlc2V0KVxyXG4gICAgICAgICAgICBydWxlT3JFbG0uc3R5bGVbcHJvcE5hbWVdID0gc3R5bGVzZXRbcHJvcE5hbWVdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgU3luY2hyb25vdXNBY3RpdmF0b3IgY2xhc3MgcmVwcmVzZW50cyB0aGUgc3luY2hyb25vdXMgYWN0aXZhdGlvbiBtZWNoYW5pc20sIHdoaWNoIHdyaXRlc1xyXG4gKiBzdHlsZSBjaGFuZ2VzIHRvIHRoZSBET00gd2hlbiB0aGUgYWN0aXZhdGUgYW5kIGRlYWN0aXZhdGUgZnVuY3Rpb25zIGFyZSBjYWxsZWQuXHJcbiAqL1xyXG5jbGFzcyBTeW5jaHJvbm91c0FjdGl2YXRvciBpbXBsZW1lbnRzIElTdHlsZUFjdGl2YXRvclxyXG57XHJcblx0LyoqXHJcblx0ICogSW5zdHJ1Y3RzIHRvIGFjdGl2YXRlIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uIGluc3RhbmNlLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGVcclxuXHQgKiBhY3RpdmF0ZSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIHRoaXMgYWN0aXZhdGlvbiBtZWNoYW5pc20uXHJcblx0ICogQHBhcmFtIGRlZmluaXRpb25cclxuXHQgKi9cclxuXHRwdWJsaWMgYWN0aXZhdGUoIGRlZmluaXRpb246IElTdHlsZURlZmluaXRpb24pOiB2b2lkXHJcblx0e1xyXG5cdFx0YWN0aXZhdGVTRCggZGVmaW5pdGlvbik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBJbnN0cnVjdHMgdG8gZGVhY3RpdmF0ZSB0aGUgZ2l2ZW4gc3R5bGUgZGVmaW5pdGlvbiBpbnN0YW5jZS4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlXHJcblx0ICogZGVhY3RpdmF0ZSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIHRoaXMgYWN0aXZhdGlvbiBtZWNoYW5pc20uXHJcblx0ICogQHBhcmFtIGRlZmluaXRpb25cclxuXHQgKi9cclxuXHRwdWJsaWMgZGVhY3RpdmF0ZSggZGVmaW5pdGlvbjogSVN0eWxlRGVmaW5pdGlvbik6IHZvaWRcclxuXHR7XHJcblx0XHRkZWFjdGl2YXRlU0QoIGRlZmluaXRpb24pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogSW5zdHJ1Y3RzIHRvIHNldCB0aGUgdmFsdWUgb2YgZWl0aGVyIGEgc2luZ2xlIHByb3BlcnR5IG9yIGEgc2V0IG9mIHByb3BlcnRpZXMgaW4gdGhlIGdpdmVuXHJcbiAgICAgKiBDU1Mgc3R5bGUgb2JqZWN0LlxyXG5cdCAqL1xyXG4gICAgcHVibGljIHVwZGF0ZVN0eWxlKCBydWxlT3JFbG06IENTU1N0eWxlUnVsZSB8IEVsZW1lbnRDU1NJbmxpbmVTdHlsZSwgbmFtZTogc3RyaW5nIHwgbnVsbCxcclxuICAgICAgICB2YWx1ZT86IHN0cmluZyB8IFN0cmluZ1N0eWxlc2V0IHwgbnVsbCwgaW1wb3J0YW50PzogYm9vbGVhbik6IHZvaWRcclxuXHR7XHJcbiAgICAgICAgdXBkYXRlU3R5bGVQcm9wZXJ0eSggcnVsZU9yRWxtLCBuYW1lLCB2YWx1ZSwgaW1wb3J0YW50KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFBlcmZvcm1zIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uIGZvciBhbGwgc3R5bGUgZGVmaW5pdGlvbnMgYWNjdW11bGF0ZWQgc2luY2UgdGhlIGxhc3RcclxuXHQgKiBhY3RpdmF0aW9uL2RlYWN0aXZhdGlvbi4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIGZvcmNlRE9NVXBkYXRlIGZ1bmN0aW9uIGlzIGNhbGxlZFxyXG5cdCAqIGZvciB0aGlzIGFjdGl2YXRpb24gbWVjaGFuaXNtLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBmb3JjZURPTVVwZGF0ZSgpOiB2b2lkIHt9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENhbmNlbHMgYWN0aXZhdGlvbi9kZWFjdGl2YXRpb24gZm9yIGFsbCBzdHlsZSBkZWZpbml0aW9ucyBhY2N1bXVsYXRlZCBzaW5jZSB0aGUgbGFzdFxyXG5cdCAqIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgY2FuY2VsRE9NVXBkYXRlIGZ1bmN0aW9uIGlzIGNhbGxlZFxyXG5cdCAqIGZvciB0aGlzIGFjdGl2YXRpb24gbWVjaGFuaXNtLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjYW5jZWxET01VcGRhdGUoKTogdm9pZCB7fVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgU2NoZWR1bGluZ0FjdGl2YXRvciBjbGFzcyBrZWVwcyBhIG1hcCBvZiBTdHlsZURlZmluaXRpb24gaW5zdGFuY2VzIHRoYXQgYXJlIHNjaGVkdWxlZCBmb3JcclxuICogYWN0aXZhdGlvbiBvciBkZWFjdGl2YXRpb24uIEVhY2ggaW5zdGFuY2UgaXMgbWFwcGVkIHRvIGEgcmVmZXJuY2UgY291bnQsIHdoaWNoIGlzIGluY3JlbWVudGVkXHJcbiAqIHVwb24gdGhlIGFjdGl2YXRlIGNhbGxzIGFuZCBkZWNyZW1lbnRlZCB1cG9uIHRoZSBkZWFjdGl2YXRlIGNhbGxzLiBXaGVuIHRoZSBkb0FjdGl2YXRpb25cclxuICogbWV0aG9kIGlzIGNhbGxlZCBUaGUgc3R5bGUgZGVmaW5pdGlvbiB3aWxsIGJlIGVpdGhlciBhY3RpdmF0ZWQgb3IgZGVhY3RpdmF0ZWQgYmFzZWQgb24gd2hldGhlclxyXG4gKiB0aGUgcmVmZXJlbmNlIGNvdW50IGlzIHBvc2l0aXZlIG9yIG5lZ2F0aXZlLlxyXG4gKi9cclxuY2xhc3MgU2NoZWR1bGluZ0FjdGl2YXRvciBpbXBsZW1lbnRzIElTdHlsZUFjdGl2YXRvclxyXG57XHJcbiAgICAvLyBBcnJheSBvZiBmdW5jdGlvbnMgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2NoZWR1bGVkIHVwZGF0ZSBydW5zLlxyXG4gICAgcHJpdmF0ZSBhY3Rpb25zOiAoKCk9PnZvaWQpW10gPSBbXTtcclxuXHJcbiAgICAvLyBvcHRpb25hbCBzY2hlZHVsZXIgb2JqZWN0XHJcbiAgICBwcml2YXRlIHNjaGVkdWxlcj86IElTY2hlZHVsZXI7XHJcblxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvciggc2NoZWR1bGVyPzogSVNjaGVkdWxlcilcclxuICAgIHtcclxuICAgICAgICBpZiAoc2NoZWR1bGVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2NoZWR1bGVyLmluaXQoICgpID0+IHRoaXMuZG9ET01VcGRhdGUoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiBJbnN0cnVjdHMgdG8gYWN0aXZhdGUgdGhlIGdpdmVuIHN0eWxlIGRlZmluaXRpb24gaW5zdGFuY2UuXHJcblx0ICovXHJcblx0cHVibGljIGFjdGl2YXRlKCBkZWZpbml0aW9uOiBJU3R5bGVEZWZpbml0aW9uKTogdm9pZFxyXG5cdHtcclxuICAgICAgICBpZiAodGhpcy5pc1NjaGVkdWxpbmdOZWVkZWQpXHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVyIS5zY2hlZHVsZURPTVVwZGF0ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmFjdGlvbnMucHVzaCggKCkgPT4gYWN0aXZhdGVTRCggZGVmaW5pdGlvbikpO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiBJbnN0cnVjdHMgdG8gZGVhY3RpdmF0ZSB0aGUgZ2l2ZW4gc3R5bGUgZGVmaW5pdGlvbiBpbnN0YW5jZS5cclxuXHQgKi9cclxuXHRwdWJsaWMgZGVhY3RpdmF0ZSggZGVmaW5pdGlvbjogSVN0eWxlRGVmaW5pdGlvbik6IHZvaWRcclxuXHR7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTY2hlZHVsaW5nTmVlZGVkKVxyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlciEuc2NoZWR1bGVET01VcGRhdGUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hY3Rpb25zLnB1c2goICgpID0+IGRlYWN0aXZhdGVTRCggZGVmaW5pdGlvbikpO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiBJbnN0cnVjdHMgdG8gc2V0IHRoZSB2YWx1ZSBvZiBlaXRoZXIgYSBzaW5nbGUgcHJvcGVydHkgb3IgYSBzZXQgb2YgcHJvcGVydGllcyBpbiB0aGUgZ2l2ZW5cclxuICAgICAqIENTUyBzdHlsZSBvYmplY3QuXHJcblx0ICovXHJcbiAgICBwdWJsaWMgdXBkYXRlU3R5bGUoIHJ1bGVPckVsbTogQ1NTU3R5bGVSdWxlIHwgRWxlbWVudENTU0lubGluZVN0eWxlLCBuYW1lOiBzdHJpbmcgfCBudWxsLFxyXG4gICAgICAgIHZhbHVlPzogc3RyaW5nIHwgU3RyaW5nU3R5bGVzZXQgfCBudWxsLCBpbXBvcnRhbnQ/OiBib29sZWFuKTogdm9pZFxyXG5cdHtcclxuXHRcdGlmICh0aGlzLmlzU2NoZWR1bGluZ05lZWRlZClcclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIhLnNjaGVkdWxlRE9NVXBkYXRlKCk7XHJcblxyXG5cdFx0dGhpcy5hY3Rpb25zLnB1c2goICgpID0+IHVwZGF0ZVN0eWxlUHJvcGVydHkoIHJ1bGVPckVsbSwgbmFtZSwgdmFsdWUsIGltcG9ydGFudCkpO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiBQZXJmb3JtcyBhY3RpdmF0aW9uL2RlYWN0aXZhdGlvbiBmb3IgYWxsIHN0eWxlIGRlZmluaXRpb25zIGluIG91ciBpbnRlcm5hbCBtYXAuXHJcblx0ICovXHJcblx0cHVibGljIGZvcmNlRE9NVXBkYXRlKCk6IHZvaWRcclxuXHR7XHJcblx0XHRpZiAodGhpcy5hY3Rpb25zLmxlbmd0aCA+IDApXHJcblx0XHR7XHJcbiAgICAgICAgICAgIHRoaXMuZG9ET01VcGRhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIgJiYgdGhpcy5zY2hlZHVsZXIuY2FuY2VsRE9NVXBkYXRlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIENhbmNlbHMgYWN0aXZhdGlvbi9kZWFjdGl2YXRpb24gZm9yIGFsbCBzdHlsZSBkZWZpbml0aW9ucyBhY2N1bXVsYXRlZCBzaW5jZSB0aGUgbGFzdFxyXG5cdCAqIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjYW5jZWxET01VcGRhdGUoKTogdm9pZFxyXG5cdHtcclxuXHRcdGlmICh0aGlzLmFjdGlvbnMubGVuZ3RoID4gMClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5hY3Rpb25zID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVyICYmIHRoaXMuc2NoZWR1bGVyLmNhbmNlbERPTVVwZGF0ZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cclxuXHRwcml2YXRlIGdldCBpc1NjaGVkdWxpbmdOZWVkZWQoKTogYm9vbGVhblxyXG4gICAge1xyXG5cdFx0cmV0dXJuICEhdGhpcy5zY2hlZHVsZXIgJiYgIXRoaXMuYWN0aW9ucy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuXHQgKiBQZXJmb3JtcyBhY3RpdmF0aW9uL2RlYWN0aXZhdGlvbiBhbmQgcHJvcGVydHkgc2V0IG9wZXJhdGlvbnMgYWNjdW11bGF0ZWQgaW50ZXJuYWxseS4gVGhpc1xyXG4gICAgICogbWV0aG9kIHNob3VsZCBiZSB1c2VkIGJ5IHRoZSBkZXJpdmVkIGNsYXNzZXMgd2hlbiBzY2hlZHVsZWQgYWN0aXZhdGlvbnMgc2hvdWxkIGJlIHBlcmZvcm1lZC5cclxuXHQgKi9cclxuXHRwcml2YXRlIGRvRE9NVXBkYXRlKCk6IHZvaWRcclxuXHR7XHJcbiAgICAgICAgLy8gdXBkYXRlIHN0eWxlIHByb3BlcnRpZXNcclxuICAgICAgICBmb3IoIGxldCBhY3Rpb24gb2YgdGhpcy5hY3Rpb25zKVxyXG4gICAgXHRcdGFjdGlvbigpO1xyXG5cclxuXHRcdHRoaXMuYWN0aW9ucyA9IFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgaW1wbGVtZW50cyBzY2hlZHVsaW5nIHVzaW5nIGFuaW1hdGlvbiBmcmFtZXMuXHJcbiAqL1xyXG5jbGFzcyBBbmltYXRpb25GcmFtZVNjaGVkdWxlciBpbXBsZW1lbnRzIElTY2hlZHVsZXJcclxue1xyXG4gICAgLy8gSGFuZGxlIHJldHVybmVkIGJ5IHJlcXVlc3RBbmltYXRpb25GcmFtZSBmdW5jdGlvbi5cclxuXHRwcml2YXRlIGggPSAwO1xyXG5cclxuICAgIC8vIENhbGxiYWNrIHRvIGNhbGwgdG8gd3JpdGUgY2hhbmdlcyB0byB0aGUgRE9NLlxyXG5cdHByaXZhdGUgY2I6ICgpID0+IHZvaWQ7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHNjaGVkdWxlciBvYmplY3QgYW5kIHByb3ZpZGVzIHRoZSBjYWxsYmFjayB0aGF0IHNob3VsZCBiZSBpbnZva2VkIHdoZW4gdGhlXHJcbiAgICAgKiBzY2hlZHVsZXIgZGVjaWRlcyB0byBtYWtlIGNoYW5nZXMgdG8gdGhlIERPTS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaXQoIGRvRE9NVXBkYXRlOiAoKSA9PiB2b2lkKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY2IgPSBkb0RPTVVwZGF0ZTtcclxuICAgIH1cclxuXHJcblx0LyoqXHJcblx0ICogSXMgaW52b2tlZCB3aGVuIHRoZSBzY2hlZHVsZXIgbmVlZHMgdG8gc2NoZWR1bGUgaXRzIGNhbGxiYWNrIG9yIGV2ZW50LlxyXG5cdCAqL1xyXG4gICAgcHVibGljIHNjaGVkdWxlRE9NVXBkYXRlKCk6IHZvaWRcclxuICAgIHtcclxuXHRcdHRoaXMuaCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSggdGhpcy5vbkZyYW1lKVxyXG4gICAgfVxyXG5cclxuXHQvKipcclxuXHQgKiBJcyBpbnZva2VkIHdoZW4gdGhlIHNjaGVkdWxlciBuZWVkcyB0byBjYW5jZWxzIGl0cyBzY2hlZHVsZWQgY2FsbGJhY2sgb3IgZXZlbnQuXHJcblx0ICovXHJcbiAgICBwdWJsaWMgY2FuY2VsRE9NVXBkYXRlKCk6IHZvaWRcclxuICAgIHtcclxuXHRcdGlmICh0aGlzLmggPiAwKVxyXG5cdFx0e1xyXG5cdFx0XHRjYW5jZWxBbmltYXRpb25GcmFtZSggdGhpcy5oKTtcclxuXHRcdFx0dGhpcy5oID0gMDtcclxuXHRcdH1cclxuICAgIH1cclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIElzIGludm9rZWQgd2hlbiBhbmltYXRpb24gZnJhbWUgc2hvdWxkIGJlIGV4ZWN1dGVkLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgb25GcmFtZSA9ICgpOiB2b2lkID0+XHJcblx0e1xyXG5cdFx0dGhpcy5oID0gMDtcclxuXHRcdHRoaXMuY2IoKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGFjdGl2YXRvciBmb3IgdGhlIGdpdmVuIHNjaGVkdWxlciB0eXBlLiBJZiBzY2hlZHVsZXIgdHlwZSBpcyBub3Qgc3BlY2lmaWVkIHJldHVybnNcclxuICogdGhlIGFjdGl2YXRvciBjdXJyZW50bHkgc2V0IGFzIGRlZmF1bHQuIElmLCBmb3Igc29tZSByZWFzb24sIHRoZSBkZWZhdWx0IGFjdGl2YXRvciBpcyBub3Qgc2V0LFxyXG4gKiByZXR1cm5zIHRoZSBzeW5jaHJvbm91cyBhY3RpdmF0b3IuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0QWN0aXZhdG9yID0gKHNjaGVkdWxlclR5cGU/OiBudW1iZXIpOiBJU3R5bGVBY3RpdmF0b3IgPT5cclxuXHQoc2NoZWR1bGVyVHlwZSA9PSBudWxsID8gc19kZWZhdWx0QWN0aXZhdG9yIDogc19yZWdpc3RlcmVkQWN0aXZhdG9ycy5nZXQoIHNjaGVkdWxlclR5cGUpKSA/PyBzX3N5bmNocm9ub3VzQWN0aXZhdG9yO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgZGVmYXVsdCBzY2hlZHVsaW5nIHR5cGUgdGhhdCBpcyB1c2VkIGJ5IGFjdGl2YXRlIGFuZCBkZWFjdGl2YXRlIGZ1bmN0aW9ucyB0aGF0IGFyZVxyXG4gKiBjYWxsZWQgd2l0aG91dCBleHBsaWNpdGx5IHByb3ZpZGluZyB2YWx1ZSB0byB0aGUgc2NoZWR1bGluZyBwYXJhbWV0ZXIuIFJldHVybnMgdGhlIHR5cGUgb2YgdGhlXHJcbiAqIHByZXZpb3VzIGRlZmF1bHQgYWN0aXZhdG9yIG9yIDAgaWYgYW4gZXJyb3Igb2NjdXJzIChlLmcuIHRoZSBnaXZlbiBzY2hlZHVsZXIgdHlwZSBJRCBpcyBub3RcclxuICogcmVnaXN0ZXJlZCkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2V0RGVmYXVsdFNjaGVkdWxlciA9IChzY2hlZHVsZXJUeXBlOiBudW1iZXIpOiBudW1iZXIgPT5cclxue1xyXG4gICAgLy8gY2hlY2sgdGhhdCB0aGUgZ2l2ZW4gbnVtYmVyIGlzIGluIG91ciBtYXAgb2YgcmVnaXN0ZXJlZCBhY3RpdmF0b3JzXHJcbiAgICBsZXQgYWN0aXZhdG9yID0gc19yZWdpc3RlcmVkQWN0aXZhdG9ycy5nZXQoIHNjaGVkdWxlclR5cGUpO1xyXG5cdGlmICghYWN0aXZhdG9yKVxyXG5cdFx0cmV0dXJuIDA7XHJcblxyXG5cdGxldCBwcmV2U2NoZWR1bGVyVHlwZSA9IHNfZGVmYXVsdFNjaGVkdWxlclR5cGU7XHJcbiAgICBzX2RlZmF1bHRTY2hlZHVsZXJUeXBlID0gc2NoZWR1bGVyVHlwZTtcclxuICAgIHNfZGVmYXVsdEFjdGl2YXRvciA9IGFjdGl2YXRvcjtcclxuXHRyZXR1cm4gcHJldlNjaGVkdWxlclR5cGU7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyB0aGUgZ2l2ZW4gc2NoZWR1bGVyIG9iamVjdCBhbmQgcmV0dXJucyB0aGUgc2NoZWR1bGVyIHR5cGUgaWRlbnRpZmllciwgd2hpY2hcclxuICogc2hvdWxkIGJlIHVzZWQgd2hlbiBjYWxsaW5nIGFjdGl2YXRlIGFuZCBkZWFjdGl2YXRlIGZ1bmN0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlclNjaGVkdWxlciA9IChzY2hlZHVsZXI6IElTY2hlZHVsZXIpOiBudW1iZXIgPT5cclxue1xyXG5cdC8vIGdldCB0aGUgcmVnaXN0cmF0aW9uIElEIGZvciB0aGlzIHNjaGVkdWxlclxyXG5cdGxldCBpZCA9IHNfbmV4dEN1c3RvbVNjaGVkdWxlclR5cGUrKztcclxuXHRzX3JlZ2lzdGVyZWRBY3RpdmF0b3JzLnNldCggaWQsIG5ldyBTY2hlZHVsaW5nQWN0aXZhdG9yKCBzY2hlZHVsZXIpKTtcclxuXHRyZXR1cm4gaWQ7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEN1cnJlbnQgZGVmYXVsdCBzY2hlZHVsZXIuIFRoaXMgc2NoZWR1bGVyIHdpbGwgYmUgdXNlZCBpZiBzY2hlZHVsZXIgdHlwZSBpcyBub3QgZXhwbGljaXRseVxyXG4gKiBzcGVjaWZpZWQgaW4gY2FsbHMgc3VjaCBhcyBhY3RpdmF0ZSBvciBJU3R5bGVSdWxlLnNldFByb3AuXHJcbiAqL1xyXG5sZXQgc19kZWZhdWx0U2NoZWR1bGVyVHlwZTogbnVtYmVyID0gU2NoZWR1bGVyVHlwZS5TeW5jO1xyXG5cclxuLyoqXHJcbiAqIFN5bmNocm9ub3VzIGFjdGl2YXRvciBpbnN0YW5jZS5cclxuICovXHJcbmNvbnN0IHNfc3luY2hyb25vdXNBY3RpdmF0b3IgPSBuZXcgU3luY2hyb25vdXNBY3RpdmF0b3IoKTtcclxuXHJcbi8qKlxyXG4gKiBDdXJyZW50IGRlZmF1bHQgYWN0aXZhdG9yLiBUaGlzIGFjdGl2YXRvciB3aWxsIGJlIHVzZWQgaWYgc2NoZWR1bGVyIHR5cGUgaXMgbm90IGV4cGxpY2l0bHlcclxuICogc3BlY2lmaWVkIGluIGNhbGxzIHN1Y2ggYXMgYWN0aXZhdGUgb3IgSVN0eWxlUnVsZS5zZXRQcm9wLlxyXG4gKi9cclxubGV0IHNfZGVmYXVsdEFjdGl2YXRvcjogSVN0eWxlQWN0aXZhdG9yID0gc19zeW5jaHJvbm91c0FjdGl2YXRvcjtcclxuXHJcbi8qKlxyXG4gKiBTY2hlZHVsZXIgdHlwZSBpZGVudGlmaWVyIHRvIGJlIGFzc2lnbmVkIHRvIHRoZSBmaXJzdCBjdXN0b20gc2NoZWR1bGVyIHRvIGJlIHJlZ2lzdGVyZWQuXHJcbiAqIEFsbCBjdXN0b20gc2NoZWR1bGVyIGlkZW50aWZpZXJzIGFyZSBncmVhdGVyIG9yIGVxdWFsIHRvIHRoaXMgbnVtYmVyLlxyXG4gKi9cclxuY29uc3Qgc19maXJzdEN1c3RvbVNjaGVkdWxlclR5cGU6IG51bWJlciA9IDEwMDE7XHJcblxyXG4vKipcclxuICogU2NoZWR1bGVyIHR5cGUgaWRlbnRpZmllciB0byBiZSBhc3NpZ25lZCB0byB0aGUgbmV4dCBjdXN0b20gc2NoZWR1bGVyIHRvIGJlIHJlZ2lzdGVyZWQuXHJcbiAqL1xyXG5sZXQgc19uZXh0Q3VzdG9tU2NoZWR1bGVyVHlwZTogbnVtYmVyID0gc19maXJzdEN1c3RvbVNjaGVkdWxlclR5cGU7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBNYXAgb2YgcmVnaXN0ZXJlZCBidWlsdC1pbiBhbmQgY3VzdG9tIGFjdGl2YXRvcnMuXHJcbiAqL1xyXG5jb25zdCBzX3JlZ2lzdGVyZWRBY3RpdmF0b3JzID0gbmV3IE1hcDxudW1iZXIsSVN0eWxlQWN0aXZhdG9yPigpO1xyXG5cclxuLyoqXHJcbiAqIFJlZ2lzdGVyIGJ1aWx0LWluIGFuZCBjdXN0b20gYWN0aXZhdG9ycy5cclxuICovXHJcbnNfcmVnaXN0ZXJlZEFjdGl2YXRvcnMuc2V0KCBTY2hlZHVsZXJUeXBlLlN5bmMsIHNfc3luY2hyb25vdXNBY3RpdmF0b3IpO1xyXG5zX3JlZ2lzdGVyZWRBY3RpdmF0b3JzLnNldCggU2NoZWR1bGVyVHlwZS5BbmltYXRpb25GcmFtZSwgbmV3IFNjaGVkdWxpbmdBY3RpdmF0b3IoIG5ldyBBbmltYXRpb25GcmFtZVNjaGVkdWxlcigpKSk7XHJcbnNfcmVnaXN0ZXJlZEFjdGl2YXRvcnMuc2V0KCBTY2hlZHVsZXJUeXBlLk1hbnVhbCwgbmV3IFNjaGVkdWxpbmdBY3RpdmF0b3IoKSk7XHJcblxyXG5cclxuXHJcbiIsIu+7v2ltcG9ydCB7RXh0ZW5kZWR9IGZyb20gXCIuLi9hcGkvQ29yZVR5cGVzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBCb3JkZXJJbWFnZV9PYmplY3QsIEJvcmRlcl9TdHlsZVR5cGUsIEdyaWRUZW1wbGF0ZUFyZWFzX1N0eWxlVHlwZSxcclxuICAgIEdyaWRUZW1wbGF0ZUFyZWFEZWZpbml0aW9uLCBHcmlkVHJhY2ssIEdyaWRUZW1wbGF0ZUF4aXNfU3R5bGVUeXBlLCBNYXJrZXJfU3R5bGVUeXBlLFxyXG4gICAgQm94U2hhZG93X1N0eWxlVHlwZSwgQm94U2hhZG93X1NpbmdsZSxcclxufSBmcm9tIFwiLi4vYXBpL1N0eWxlVHlwZXNcIjtcclxuaW1wb3J0IHsgQ3VzdG9tVmFyX1N0eWxlVHlwZSwgSVN0eWxlc2V0LCBTdHJpbmdTdHlsZXNldCwgU3R5bGVzZXQsIFZhclRlbXBsYXRlTmFtZSB9IGZyb20gXCIuLi9hcGkvU3R5bGVzZXRzXCI7XHJcbmltcG9ydCB7SUlEUnVsZX0gZnJvbSBcIi4uL2FwaS9SdWxlVHlwZXNcIjtcclxuaW1wb3J0IHt2MnMsIFYyU09wdGlvbnMsIG8ycywgV0tGLCBhMnMsIHdrZiwgY2FtZWxUb0Rhc2gsIGRhc2hUb0NhbWVsLCBBbnlUb1N0cmluZ0Z1bmN9IGZyb20gXCIuL1V0aWxzXCI7XHJcbmltcG9ydCB7Z2V0VmFyc0Zyb21TRH0gZnJvbSBcIi4uL3J1bGVzL1J1bGVDb250YWluZXJcIjtcclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEZ1bmN0aW9ucyBmb3IgY29udmVydGluZyBDU1MgcHJvcGVydHkgdHlwZXMgdG8gc3RyaW5ncy5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5jb25zdCBib3JkZXJJbWFnZVRvU3RyaW5nID0gKHZhbDogQm9yZGVySW1hZ2VfT2JqZWN0KTogc3RyaW5nID0+XHJcbntcclxuICAgIC8vIGlmIHdpZHRoIGlzIHNwZWNpZmllZCwgYnV0IHNsaWNlIGlzIG5vdCwgd2UgbmVlZCB0byBzZXQgc2xpY2UgdG8gdGhlIGRlZmF1bHQgMTAwJSB2YWx1ZTtcclxuICAgIC8vIGlmIG91dHNldCBpcyBzcGVjaWZpZWQgYnV0IHdpZHRoIGlzIG5vdC4gd2UgbmVlZCB0byBzZXQgd2lkdGggdG8gdGhlIGRlZmF1bHQgMSB2YWx1ZTtcclxuICAgIGxldCB2YWxDb3B5OiBCb3JkZXJJbWFnZV9PYmplY3QgPSBPYmplY3QuYXNzaWduKCB7fSwgdmFsKTtcclxuICAgIGlmICh2YWwuc2xpY2UgPT0gbnVsbCAmJiAodmFsLndpZHRoICE9IG51bGwgfHwgdmFsLm91dHNldCAhPSBudWxsKSlcclxuICAgICAgICB2YWxDb3B5LnNsaWNlID0gXCIxMDAlXCI7XHJcbiAgICBpZiAodmFsLndpZHRoID09IG51bGwgJiYgdmFsLm91dHNldCAhPSBudWxsKVxyXG4gICAgICAgIHZhbENvcHkud2lkdGggPSAxO1xyXG5cclxuICAgIHJldHVybiBvMnMoIHZhbENvcHksIFtcclxuICAgICAgICBcInNvdXJjZVwiLFxyXG4gICAgICAgIFwic2xpY2VcIixcclxuICAgICAgICBbXCJ3aWR0aFwiLCB1bmRlZmluZWQsIFwiL1wiXSxcclxuICAgICAgICBbXCJvdXRzZXRcIiwgdW5kZWZpbmVkLCBcIi9cIl0sXHJcbiAgICAgICAgXCJyZXBlYXRcIixcclxuICAgICAgICBcIm1vZGVcIlxyXG4gICAgXSk7XHJcbn1cclxuXHJcblxyXG5cclxud2tmW1dLRi5Cb3hTaGFkb3dTaW5nbGVdID0gKHZhbDogQm94U2hhZG93X1NpbmdsZSkgPT4gdjJzKCB2YWwsIHtcclxuICAgIG9iajpbXHJcbiAgICAgICAgW1wiaW5zZXRcIiwgKHY6IGJvb2xlYW4pID0+IHYgPyBcImluc2V0XCIgOiBcIlwiXSxcclxuICAgICAgICBbXCJ4XCIsIFdLRi5MZW5ndGhdLFxyXG4gICAgICAgIFtcInlcIiwgV0tGLkxlbmd0aF0sXHJcbiAgICAgICAgW1wiYmx1clwiLCBXS0YuTGVuZ3RoXSxcclxuICAgICAgICBbXCJzcHJlYWRcIiwgV0tGLkxlbmd0aF0sXHJcbiAgICAgICAgW1wiY29sb3JcIiwgV0tGLkNvbG9yXVxyXG4gICAgXVxyXG59KTtcclxuXHJcbndrZltXS0YuQm94U2hhZG93XSA9ICh2YWw6IEJveFNoYWRvd19TdHlsZVR5cGUpID0+IHYycyggdmFsLCB7XHJcbiAgICBvYmo6IFdLRi5Cb3hTaGFkb3dTaW5nbGUsXHJcbiAgICBpdGVtOiBXS0YuQm94U2hhZG93U2luZ2xlLFxyXG4gICAgc2VwOiBcIixcIlxyXG59KTtcclxuXHJcblxyXG5cclxud2tmW1dLRi5Cb3JkZXJdID0gKHZhbDogRXh0ZW5kZWQ8Qm9yZGVyX1N0eWxlVHlwZT4pOiBzdHJpbmcgPT4gdjJzKCB2YWwsIHtcclxuICAgIG51bTogV0tGLkxlbmd0aCxcclxuICAgIGFycjogYXJyID0+IHtcclxuICAgICAgICBsZXQgbnVtYmVyc1Byb2Nlc3NlZCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIGEycyggYXJyLCBpdGVtID0+IHR5cGVvZiBpdGVtID09PSBcIm51bWJlclwiXHJcbiAgICAgICAgICAgID8gdjJzKCBpdGVtLCBudW1iZXJzUHJvY2Vzc2VkKysgPyBXS0YuQ29sb3IgOiBXS0YuTGVuZ3RoKVxyXG4gICAgICAgICAgICA6IHYycyhpdGVtKVxyXG4gICAgICAgICk7XHJcbiAgICB9LFxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IGdyaWRUZW1wbGF0ZUFyZWFzVG9TdHJpbmcgPSAodmFsOiBFeHRlbmRlZDxHcmlkVGVtcGxhdGVBcmVhc19TdHlsZVR5cGU+KTogc3RyaW5nID0+XHJcbiAgICAvLyB2YWwgY2FuIGJlIGFycmF5IG9mIHN0cmluZ3Mgb3IgR3JpZFRlbXBsYXRlQXJlYV9EZWZpbml0aW9uIHRvdXBsZXNcclxuICAgIHYycyggdmFsLCB7XHJcbiAgICAgICAgYXJyOiB2ID0+IHR5cGVvZiB2WzBdID09PSBcInN0cmluZ1wiID8gYTJzKCB2LCBXS0YuUXVvdGVkKSA6IGNyZWF0ZUdyaWRUZW1wbGF0ZUFyZWFzRnJvbURlZmluaXRpb25zKHYpXHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBhcnJheSBvZiBHcmlkVGVtcGxhdGVBcmVhX0RlZmluaXRpb24gb2JqZWN0cyB0byBhIHN0cmluZyB0aGF0IGlzIHN1aXRhYmxlIGZvclxyXG4gKiB0aGUgZ3JpZC10ZW1wbGF0ZS1hcmVhcyBmb3JtYXQuXHJcbiAqL1xyXG5jb25zdCBjcmVhdGVHcmlkVGVtcGxhdGVBcmVhc0Zyb21EZWZpbml0aW9ucyA9IChkZWZzOiBHcmlkVGVtcGxhdGVBcmVhRGVmaW5pdGlvbltdKTogc3RyaW5nID0+XHJcbntcclxuICAgIC8vIGNhbGN1bGF0ZSB0b3RhbCBzaXplIG9mIHRoZSBtYXRyaXggZnJvbSB0aGUgYXJlYXMnIHNpemVzXHJcbiAgICBsZXQgcm93Q291bnQgPSAwLCBjb2xDb3VudCA9IDA7XHJcbiAgICBmb3IoIGxldCBkZWYgb2YgZGVmcylcclxuICAgIHtcclxuICAgICAgICByb3dDb3VudCA9IE1hdGgubWF4KCByb3dDb3VudCwgZGVmWzNdKTtcclxuICAgICAgICBjb2xDb3VudCA9IE1hdGgubWF4KCBjb2xDb3VudCwgZGVmWzRdKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocm93Q291bnQgPT09IDAgfHwgY29sQ291bnQgPT09IDApXHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcblxyXG4gICAgLy8gY3JlYXRlIGFycmF5IG9mIHJvd3Mgd2hlcmUgZXZlcnkgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBjZWxsc1xyXG4gICAgbGV0IG1hdHJpeCA9IG5ldyBBcnJheTxzdHJpbmdbXT4ocm93Q291bnQpO1xyXG4gICAgZm9yKCBsZXQgaSA9IDA7IGkgPCByb3dDb3VudDsgaSsrKVxyXG4gICAgICAgIG1hdHJpeFtpXSA9IG5ldyBBcnJheTxzdHJpbmc+KGNvbENvdW50KTtcclxuXHJcbiAgICAvLyBnbyBvdmVyIGRlZmluaXRpb25zIGFuZCBmaWxsIHRoZSBhcHByb3ByaWF0ZSBwbGFjZXMgaW4gdGhlIGNlbGxzIHdpdGggYXJlYSBuYW1lc1xyXG4gICAgZm9yKCBsZXQgZGVmIG9mIGRlZnMpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IG5hbWUgPSB2MnMoIGRlZlswXSk7XHJcbiAgICAgICAgZm9yKCBsZXQgaSA9IGRlZlsxXTsgaSA8PSBkZWZbM107IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvciggbGV0IGogPSBkZWZbMl07IGogPD0gZGVmWzRdOyBqKyspXHJcbiAgICAgICAgICAgICAgICBtYXRyaXhbaS0xXVtqLTFdID0gbmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ28gb3ZlciBvdXIgbWF0cml4IGFuZCBmb3IgZXZlcnkgcm93IGNyZWF0ZSBhIHF1b3RlZCBzdHJpbmcuIFNpbmNlIG91ciBjZWxsIGFycmF5cyBtYXkgYmVcclxuICAgIC8vIHNwYXJzZSwgdXNlIGRvdCBmb3IgdGhlIHVuZGVmaW5lZCBjZWxsc1xyXG4gICAgbGV0IHMgPSBcIlwiO1xyXG4gICAgZm9yKCBsZXQgaSA9IDA7IGkgPCByb3dDb3VudDsgaSsrKVxyXG4gICAge1xyXG4gICAgICAgIGxldCByb3dOYW1lczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBmb3IoIGxldCBqID0gMDsgaiA8IHJvd0NvdW50OyBqKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgbmFtZSA9IG1hdHJpeFtpXVtqXTtcclxuICAgICAgICAgICAgcm93TmFtZXMucHVzaCggbmFtZSA/IG5hbWUgOiBcIi5cIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHMgKz0gYFwiJHtyb3dOYW1lcy5qb2luKFwiIFwiKX1cIlxcbmA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHM7XHJcbn1cclxuXHJcblxyXG5cclxud2tmW1dLRi5HcmlkVHJhY2tdID0gKHY6IEdyaWRUcmFjaykgPT4gdjJzKCB2LCB7XHJcbiAgICBudW06IFdLRi5MZW5ndGgsXHJcbiAgICBhcnI6IHYgPT4gYFske2Eycyh2KX1dYFxyXG59KTtcclxuXHJcblxyXG5cclxud2tmW1dLRi5HcmlkQXhpc10gPSAodjogRXh0ZW5kZWQ8R3JpZFRlbXBsYXRlQXhpc19TdHlsZVR5cGU+KSA9PiB2MnMoIHYsIHtcclxuICAgIG51bTogV0tGLkxlbmd0aCxcclxuICAgIGl0ZW06IFdLRi5HcmlkVHJhY2tcclxufSk7XHJcblxyXG5cclxuXHJcbndrZltXS0YuTWFya2VyXSA9ICh2YWw6IEV4dGVuZGVkPE1hcmtlcl9TdHlsZVR5cGU+KTogc3RyaW5nID0+XHJcbntcclxuICAgIHJldHVybiB2MnMoIHZhbCwge1xyXG4gICAgICAgIG9iajogdiA9PiBgdXJsKCMkeyh2IGFzIElJRFJ1bGUpLm5hbWV9KWBcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBGdW5jdGlvbnMgZm9yIGhhbmRsaW5nIFN0eWxlc2V0cy5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIGdpdmVuIHN0eWxlIHByb3BlcnR5IHRvIHRoZSBDU1Mgc3R5bGUgc3RyaW5nLiBQcm9wZXJ0eSBuYW1lIGNhbiBiZSBpbiBlaXRoZXJcclxuICogZGFzaCBvciBjYW1lbCBmb3JtLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNwMnMgPSAocHJvcE5hbWU6IHN0cmluZywgcHJvcFZhbDogYW55KTogc3RyaW5nID0+XHJcbntcclxuICAgIGlmICghcHJvcE5hbWUpXHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcblxyXG4gICAgLy8gaGFuZGxlIHNwZWNpYWwgcHJvcGVydGllcyBcIiFcIiBhbmQgXCJbXVwiXHJcbiAgICBsZXQgaW1wRmxhZyA9IGZhbHNlO1xyXG4gICAgaWYgKHR5cGVvZiBwcm9wVmFsID09PSBcIm9iamVjdFwiKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChcIiFcIiBpbiBwcm9wVmFsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gaWYgdGhlIHByb3BlcnR5IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIHRoZSBcIiFcIiBwcm9wZXJ0eSwgdGhlbiB0aGUgYWN0dWFsIHZhbHVlIGlzXHJcbiAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5IGFuZCB3ZSBhbHNvIG5lZWQgdG8gc2V0IHRoZSBcIiFpbXBvcnRhbnRcIiBmbGFnLlxyXG4gICAgICAgICAgICBwcm9wVmFsID0gcHJvcFZhbFtcIiFcIl07XHJcbiAgICAgICAgICAgIGltcEZsYWcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChcIltdXCIgaW4gcHJvcFZhbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBwcm9wZXJ0eSB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgXCJbXVwiIHByb3BlcnR5LCB0aGVuIHdlIHRha2UgdGhlIGxhc3RcclxuICAgICAgICAgICAgLy8gdmFsdWUgZnJvbSB0aGlzIHByb3BlcnR5J3MgYXJyYXkuXHJcbiAgICAgICAgICAgIGxldCBhcnIgPSBwcm9wVmFsW1wiW11cIl0gYXMgYW55W107XHJcbiAgICAgICAgICAgIGlmICghYXJyIHx8IGFyci5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlY3Vyc2Ugd2l0aCB0aGUgbGFzdCB2YWx1ZSBmcm9tIHRoZSBhcnJheVxyXG4gICAgICAgICAgICByZXR1cm4gc3AycyggcHJvcE5hbWUsIGFyclthcnIubGVuZ3RoLTFdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdHJ5IHRvIGZpbmQgaW5mb3JtYXRpb24gb2JqZWN0IGZvciB0aGUgcHJvcGVydHkgLSBlaXRoZXIgZGVmaW5lZCBpbiBzdHlsZVByb3BlcnR5SW5mb3Mgb3JcclxuICAgIC8vIG1hdGNoZXMgYSBrZXkgaW4gcGFydGlhbFN0eWxlUHJvcGVydHlJbmZvc1xyXG4gICAgbGV0IGNhbWVsUHJvcE5hbWUgPSBkYXNoVG9DYW1lbChwcm9wTmFtZSk7XHJcbiAgICBsZXQgb3B0aW9uczogVjJTT3B0aW9ucyA9IHN0eWxlUHJvcGVydHlJbmZvc1tjYW1lbFByb3BOYW1lXTtcclxuICAgIGlmICghb3B0aW9ucylcclxuICAgIHtcclxuICAgICAgICBmb3IoIGxldCB0dXBsZSBvZiBwYXJ0aWFsU3R5bGVQcm9wZXJ0eVByb2Nlc3NlZEluZm9zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHR1cGxlWzBdLnRlc3QoY2FtZWxQcm9wTmFtZSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0dXBsZVsxXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnZlcnQgdGhlIHZhbHVlIHRvIHN0cmluZyBiYXNlZCBvbiB0aGUgaW5mb3JtYXRpb24gb2JqZWN0IGZvciB0aGUgcHJvcGVydHkgKGlmIGRlZmluZWQpXHJcbiAgICBsZXQgc3RyaW5nVmFsdWUgPSB2MnMoIHByb3BWYWwsIG9wdGlvbnMpO1xyXG4gICAgaWYgKCFzdHJpbmdWYWx1ZSlcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuXHJcbiAgICBpZiAoaW1wRmxhZylcclxuICAgICAgICBzdHJpbmdWYWx1ZSArPSBcIiAhaW1wb3J0YW50XCI7XHJcblxyXG4gICAgcmV0dXJuIHN0cmluZ1ZhbHVlO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gc3R5bGVzZXQgdG8gaXRzIHN0cmluZyByZXByZXNlbnRhdGlvbiAqL1xyXG5leHBvcnQgY29uc3QgczJzID0gKHN0eWxlc2V0OiBTdHlsZXNldCk6IHN0cmluZyA9PlxyXG57XHJcbiAgICBpZiAoIXN0eWxlc2V0KVxyXG4gICAgICAgIHJldHVybiBcInt9XCI7XHJcblxyXG4gICAgbGV0IHMgPSBcIntcIjtcclxuXHJcbiAgICAvLyBlbnVtZXJhdGUgYWxsIHN0eWxlc2V0IHByb3BlcnRpZXMgcmV0cmlldmluZyBhbHNvIHZlbmRvci1wcmVmaXhlZCB2YXJpYW50c1xyXG5cdGZvckFsbFByb3BzSW5TdHlsc2V0KFxyXG4gICAgICAgIHN0eWxlc2V0LFxyXG4gICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsLCBpc0N1c3RvbTogYm9vbGVhbiwgaXNQcmVmaXhlZDogYm9vbGVhbik6IHZvaWQgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHMgKz0gaXNDdXN0b21cclxuICAgICAgICAgICAgICAgID8gYCR7bmFtZX06JHt2YWx1ZX07YFxyXG4gICAgICAgICAgICAgICAgOiBgJHtpc1ByZWZpeGVkID8gXCItXCIgOiBcIlwifSR7Y2FtZWxUb0Rhc2gobmFtZSl9OiR7dmFsdWV9O2A7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcyArIFwifVwiO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gU3R5bGVzZXQgb2JqZWN0IGludG8gYSBTdHJpbmdTdHlsZXNldCBvYmplY3QsIHdoZXJlIGVhY2ggU3R5bGVzZXQncyBwcm9wZXJ0eVxyXG4gKiBpcyBjb252ZXJ0ZWQgdG8gaXRzIHN0cmluZyB2YWx1ZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBzMnNzID0gKHN0eWxlc2V0OiBTdHlsZXNldCk6IFN0cmluZ1N0eWxlc2V0ID0+XHJcbntcclxuICAgIC8vIGVudW1lcmF0ZSBhbGwgc3R5bGVzZXQgcHJvcGVydGllcyB3aXRob3V0IHJldHJpZXZpbmcgdmVuZG9yLXByZWZpeGVkIHZhcmlhbnRzXHJcbiAgICBsZXQgcmVzOiBTdHJpbmdTdHlsZXNldCA9IHt9O1xyXG4gICAgZm9yQWxsUHJvcHNJblN0eWxzZXQoIHN0eWxlc2V0LCAobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCA9PiB7cmVzW25hbWVdID0gdmFsdWV9KTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSB0dXBsZSB0aGF0IGNvbnRhaW5zIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdmVuZG9yIHByZWZpeGluZyBvbiBhIHByb3BlcnR5LlxyXG4gKiAtIHByb3BlcnR5IG5hbWUgKHRoYXQgbWF5IG9yIG1heSBub3QgYmUgcHJlZml4ZWQpLlxyXG4gKiAtIHByb3BlcnR5IHZhbHVlICh0aGF0IG1heSBvciBtYXkgbm90IGhhdmUgcHJlZml4ZWQgaXRlbXMpXHJcbiAqL1xyXG50eXBlIFByb3BQcmVmaXhWYXJpYW50ID0gW3N0cmluZywgc3RyaW5nXTtcclxuXHJcblxyXG4vKiogVHVwbGUgdGhhdCBjb250YWlucyBuYW1lLCB0ZW1wbGF0ZSBhbmQgb3B0aW9uYWwgdmFsdWUgb2YgYSBjdXN0b20gQ1NTIHByb3BlcnR5IFZhclJ1bGUgKi9cclxudHlwZSBWYXJOVFYgPSBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZz9dO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogRXh0cmFjdHMgbmFtZSwgdGVtcGxhdGUgYW5kIHN0cmluZyB0dXBsZXMgZnJvbSB0aGUgZ2l2ZW4gY3VzdG9tIENTUyBwcm9wZXJ0eSBkZWZpbml0aW9uLlxyXG4gKiBAcGFyYW0gY3VzdG9tVmFyc1xyXG4gKi9cclxuY29uc3QgZ2V0VmFyc05UVnMgPSAoY3VzdG9tVmFyczogQ3VzdG9tVmFyX1N0eWxlVHlwZSk6IFZhck5UVltdID0+XHJcbntcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGN1c3RvbVZhcnMpKVxyXG4gICAge1xyXG4gICAgICAgIGxldCB2YXJOYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgbGV0IHRlbXBsYXRlOiBzdHJpbmc7XHJcbiAgICAgICAgbGV0IHZhbHVlOiBhbnk7XHJcbiAgICAgICAgaWYgKGN1c3RvbVZhcnMubGVuZ3RoID09PSAyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyTmFtZSA9IGN1c3RvbVZhcnNbMF0ubmFtZTtcclxuICAgICAgICAgICAgdGVtcGxhdGUgPSBjdXN0b21WYXJzWzBdLnRlbXBsYXRlO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGN1c3RvbVZhcnNbMV1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyTmFtZSA9IGN1c3RvbVZhcnNbMF07XHJcbiAgICAgICAgICAgIHRlbXBsYXRlID0gY3VzdG9tVmFyc1sxXTtcclxuICAgICAgICAgICAgdmFsdWUgPSBjdXN0b21WYXJzWzJdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF2YXJOYW1lIHx8ICF0ZW1wbGF0ZSlcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG5cclxuICAgICAgICBpZiAoIXZhck5hbWUuc3RhcnRzV2l0aChcIi0tXCIpKVxyXG4gICAgICAgICAgICB2YXJOYW1lID0gXCItLVwiICsgdmFyTmFtZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtbdmFyTmFtZSwgdGVtcGxhdGUsIHNwMnMoIHRlbXBsYXRlLCB2YWx1ZSldXTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgICBsZXQgdmFyUnVsZXMgPSBnZXRWYXJzRnJvbVNEKGN1c3RvbVZhcnMpO1xyXG4gICAgICAgIHJldHVybiB2YXJSdWxlcy5tYXAoIHZhclJ1bGUgPT4gW3ZhclJ1bGUuY3NzTmFtZSwgdmFyUnVsZS50ZW1wbGF0ZSxcclxuICAgICAgICAgICAgc3AycyggdmFyUnVsZS50ZW1wbGF0ZSwgdmFyUnVsZS5nZXRWYWx1ZSgpKV0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDYWxsYmFjayBzaWduYXR1cmUgZm9yIGVudW1lcmF0aW5nIFN0eWxlc2V0IHByb3BlcnRpZXMgY29udmVydGVkIHRvIHN0cmluZ3NcclxuICovXHJcbnR5cGUgU3R5bGVzZXRQcm9wRW51bUNhbGxiYWNrID0gKG5hbWU6IHN0cmluZywgdmFsOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsLFxyXG4gICAgaXNDdXN0b206IGJvb2xlYW4sIGlzUHJlZml4ZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBGb3IgZWFjaCBwcm9wZXJ0eSAtIHJlZ3VsYXIgYW5kIGN1c3RvbSAtIGluIHRoZSBnaXZlbiBzdHlsZXNldCBpbnZva2VzIHRoZSBhcHByb3ByaWF0ZVxyXG4gKiBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIHByb3BlcnR5IG5hbWUgYW5kIHRoZSB2YWx1ZSBjb252ZXJ0ZWQgdG8gc3RyaW5nLlxyXG4gKiBAcGFyYW0gc3R5bGVzZXRcclxuICogQHBhcmFtIGNhbGxiYWNrXHJcbiAqIEBwYXJhbSBnZXRQcmVmaXhlZFZhcmlhbnRzIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHdlIG5lZWQgdG8gcmV0cmlldmUgcHJvcGVydHkgdmFyaWFudHMgd2l0aFxyXG4gKiB2ZW5kb3IgcHJlZml4ZXNcclxuICovXHJcbmNvbnN0IGZvckFsbFByb3BzSW5TdHlsc2V0ID0gKHN0eWxlc2V0OiBTdHlsZXNldCwgY2FsbGJhY2s6IFN0eWxlc2V0UHJvcEVudW1DYWxsYmFjaykgPT5cclxue1xyXG5cdGZvciggbGV0IHByb3BOYW1lIGluIHN0eWxlc2V0KVxyXG5cdHtcclxuICAgICAgICAvLyBzcGVjaWFsIGhhbmRsaW5nIG9mIHRoZSBcIi0tXCIgcHJvcGVydHksIHdoaWNoIGlzIGFuIGFycmF5IHdoZXJlIGVhY2ggaXRlbSBpc1xyXG4gICAgICAgIC8vIGEgdHdvLWl0ZW0gb3IgdGhyZWUtaXRlbSBhcnJheVxyXG5cdFx0aWYgKHByb3BOYW1lID09PSBcIi0tXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgY3VzdG9tVmFycyA9IHN0eWxlc2V0W3Byb3BOYW1lXSBhcyBDdXN0b21WYXJfU3R5bGVUeXBlW107XHJcbiAgICAgICAgICAgIGZvciggbGV0IGN1c3RvbVZhciBvZiBjdXN0b21WYXJzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWN1c3RvbVZhcilcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbiBlYWNoIHR1cGxlLCB0aGUgZmlyc3QgZWxlbWVudCBpcyB2YXIgbmFtZSwgdGhlIHNlY29uZCBpcyB0ZW1wbGF0ZSBwcm9wZXJ0eSBhbmRcclxuICAgICAgICAgICAgICAgIC8vIHRoZSB0aGlyZCBpcyB0aGUgdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgbnR2czogVmFyTlRWW10gPSBnZXRWYXJzTlRWcyggY3VzdG9tVmFyKTtcclxuICAgICAgICAgICAgICAgIGZvciggbGV0IG50diBvZiBudHZzKVxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCBudHZbMF0sIG50dlsyXSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBwcm9wVmFsID0gc3R5bGVzZXRbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICBpZiAocHJvcFZhbCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgd2hldGhlciB0aGUgcHJvcGVydHkgY29udGFpbnMgYW4gYXJyYXkgb2YgdmFsdWVzIGJlaGluZCB0aGUgb2JqZWN0IHdpdGhcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBcIltdXCIgcHJvcGVydHkuIElmIG5vdCwgY29udmVydCB0aGUgc2luZ2xlIHZhbHVlIHRvIGFuIGFycmF5LCBzbyB0aGF0IHdlIGNhblxyXG4gICAgICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIGl0LlxyXG4gICAgICAgICAgICAgICAgbGV0IHByb3BBcnJheSA9IHByb3BWYWxbXCJbXVwiXSBhcyBhbnlbXTtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvcEFycmF5KVxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BBcnJheSA9IFtwcm9wVmFsXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoIGxldCBwcm9wVmFsIG9mIHByb3BBcnJheSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJvcGVydHkgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcFN0cmluZyA9IHNwMnMoIHByb3BOYW1lLCBwcm9wVmFsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByb3BTdHJpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBnZXQgdmVuZG9yLXByZWZpeGVkIHZhcmlhbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhcmlhbnRzID0gZ2V0UHJlZml4VmFyaWFudHMoIHByb3BOYW1lIGFzIGtleW9mIElTdHlsZXNldCwgcHJvcFN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhcmlhbnRzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCBsZXQgdmFyaWFudCBvZiB2YXJpYW50cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCB2YXJpYW50WzBdLCB2YXJpYW50WzFdLCBmYWxzZSwgdmFyaWFudFswXSAhPT0gcHJvcE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW52b2tlIHRoZSBjYWxsYmFjayBmb3IgdGhlIG9yaWdpbmFsbHkgZm91bmQgcHJvcCBuYW1lIGFuZCB3aXRoIChwZXJoYXBzIHVwZGF0ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayggcHJvcE5hbWUsIHByb3BTdHJpbmcsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblx0fVxyXG59XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBSZWdpc3RyeSBvZiBDU1MgcHJvcGVydGllcyB0aGF0IHNwZWNpZmllcyBob3cgdGhlaXIgdmFsdWVzIHNob3VsZCBiZSBjb252ZXJ0ZWQgdG8gc3RyaW5ncy5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5leHBvcnQgY29uc3Qgc19yZWdpc3RlclNQID0gKG5hbWU6IHN0cmluZywgdG9TdHJpbmdGdW5jOiBBbnlUb1N0cmluZ0Z1bmMpID0+XHJcbiAgICBuYW1lIGluIHN0eWxlUHJvcGVydHlJbmZvcyA/IGZhbHNlIDogKHN0eWxlUHJvcGVydHlJbmZvc1tuYW1lXSA9IHRvU3RyaW5nRnVuYywgdHJ1ZSk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBNYXAgb2YgcHJvcGVydHkgbmFtZXMgdG8gdGhlIFYyU09wdGlvbnMgb2JqZWN0cyBkZXNjcmliaW5nIGN1c3RvbSBhY3Rpb25zIG5lY2Vzc2FyeSB0b1xyXG4gKiBjb252ZXJ0IHRoZSBwcm9wZXJ0eSB2YWx1ZSB0byB0aGUgQ1NTLWNvbXBsaWFudCBzdHJpbmcuXHJcbiAqL1xyXG5jb25zdCBzdHlsZVByb3BlcnR5SW5mb3M6IHsgW0sgaW4gVmFyVGVtcGxhdGVOYW1lXT86IFYyU09wdGlvbnMgfSA9XHJcbntcclxuICAgIGFuaW1hdGlvbjoge1xyXG4gICAgICAgIGFueTogeyBvYmo6IFtcclxuICAgICAgICAgICAgW1wiZHVyYXRpb25cIiwgV0tGLlRpbWVdLFxyXG4gICAgICAgICAgICBcImZ1bmNcIixcclxuICAgICAgICAgICAgW1wiZGVsYXlcIiwgV0tGLlRpbWVdLFxyXG4gICAgICAgICAgICBbXCJjb3VudFwiLCBXS0YuTnVtYmVyXSxcclxuICAgICAgICAgICAgXCJkaXJlY3Rpb25cIixcclxuICAgICAgICAgICAgXCJtb2RlXCIsXHJcbiAgICAgICAgICAgIFwic3RhdGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCJcclxuICAgICAgICBdfSxcclxuICAgICAgICBzZXA6IFwiLFwiLFxyXG4gICAgfSxcclxuICAgIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiBXS0YuT25lT3JNYW55V2l0aENvbW1hLFxyXG4gICAgYW5pbWF0aW9uRmlsbE1vZGU6IFdLRi5PbmVPck1hbnlXaXRoQ29tbWEsXHJcbiAgICBhbmltYXRpb25OYW1lOiBXS0YuT25lT3JNYW55V2l0aENvbW1hLFxyXG4gICAgYW5pbWF0aW9uUGxheVN0YXRlOiBXS0YuT25lT3JNYW55V2l0aENvbW1hLFxyXG5cclxuICAgIGJhY2tncm91bmQ6IHtcclxuICAgICAgICBudW06IFdLRi5Db2xvcixcclxuICAgICAgICBhbnk6IHtcclxuICAgICAgICAgICAgbnVtOiBXS0YuQ29sb3IsXHJcbiAgICAgICAgICAgIG9iajogW1xyXG4gICAgICAgICAgICAgICAgW1wiY29sb3JcIiwgV0tGLkNvbG9yXSxcclxuICAgICAgICAgICAgICAgIFwiaW1hZ2VcIixcclxuICAgICAgICAgICAgICAgIFtcInBvc2l0aW9uXCIsIFdLRi5Qb3NpdGlvbl0sXHJcbiAgICAgICAgICAgICAgICBbXCJzaXplXCIsIFdLRi5NdWx0aUxlbmd0aFdpdGhTcGFjZSwgXCIvXCJdLFxyXG4gICAgICAgICAgICAgICAgXCJyZXBlYXRcIixcclxuICAgICAgICAgICAgICAgIFwiYXR0YWNobWVudFwiLFxyXG4gICAgICAgICAgICAgICAgXCJvcmlnaW5cIixcclxuICAgICAgICAgICAgICAgIFwiY2xpcFwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlcDogXCIsXCIsXHJcbiAgICB9LFxyXG4gICAgYmFja2dyb3VuZEF0dGFjaG1lbnQ6IFdLRi5PbmVPck1hbnlXaXRoQ29tbWEsXHJcbiAgICBiYWNrZ3JvdW5kQmxlbmRNb2RlOiBXS0YuT25lT3JNYW55V2l0aENvbW1hLFxyXG4gICAgYmFja2dyb3VuZENsaXA6IFdLRi5PbmVPck1hbnlXaXRoQ29tbWEsXHJcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IFdLRi5PbmVPck1hbnlXaXRoQ29tbWEsXHJcbiAgICBiYWNrZ3JvdW5kT3JpZ2luOiBXS0YuT25lT3JNYW55V2l0aENvbW1hLFxyXG4gICAgYmFja2dyb3VuZFJlcGVhdDogV0tGLk9uZU9yTWFueVdpdGhDb21tYSxcclxuICAgIGJhY2tncm91bmRTaXplOiB7XHJcbiAgICAgICAgbnVtOiBXS0YuTGVuZ3RoLFxyXG4gICAgICAgIGl0ZW06IHsgYW55OiBXS0YuTGVuZ3RoIH0sXHJcbiAgICAgICAgc2VwOiBcIixcIlxyXG4gICAgfSxcclxuICAgIGJhc2VsaW5lU2hpZnQ6IFdLRi5MZW5ndGgsXHJcbiAgICBibG9ja1NpemU6IFdLRi5MZW5ndGgsXHJcbiAgICBib3JkZXJJbWFnZToge1xyXG4gICAgICAgIG9iajogYm9yZGVySW1hZ2VUb1N0cmluZyxcclxuICAgIH0sXHJcbiAgICBib3JkZXJSYWRpdXM6IFdLRi5Cb3JkZXJSYWRpdXMsXHJcbiAgICBib3JkZXJTcGFjaW5nOiBXS0YuTXVsdGlMZW5ndGhXaXRoU3BhY2UsXHJcbiAgICBib3R0b206IFdLRi5MZW5ndGgsXHJcbiAgICBib3hTaGFkb3c6IFdLRi5Cb3hTaGFkb3csXHJcblxyXG4gICAgY2xpcDogIHtcclxuICAgICAgICBhcnI6IHYgPT4gYHJlY3QoJHt3a2ZbV0tGLk11bHRpTGVuZ3RoV2l0aFNwYWNlXSh2KX1gXHJcbiAgICB9LFxyXG4gICAgY29sdW1uR2FwOiBXS0YuTGVuZ3RoLFxyXG4gICAgY29sdW1uUnVsZTogV0tGLkJvcmRlcixcclxuICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICBzdHI6IFdLRi5RdW90ZWQsXHJcbiAgICAgICAgaXRlbTogV0tGLlF1b3RlZFxyXG4gICAgfSxcclxuICAgIGN1cnNvcjogV0tGLk9uZU9yTWFueVdpdGhDb21tYSxcclxuXHJcbiAgICBmaWxsOiBXS0YuQ29sb3IsXHJcbiAgICBmaWxsT3BhY2l0eTogV0tGLlBlcmNlbnQsXHJcbiAgICBmbGV4OiB7XHJcbiAgICAgICAgbnVtOiBXS0YuTGVuZ3RoLFxyXG4gICAgICAgIGFycjoge1xyXG4gICAgICAgICAgICAzOiBbV0tGLk51bWJlciwgV0tGLk51bWJlciwgV0tGLkxlbmd0aF1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmxleEJhc2lzOiBXS0YuTGVuZ3RoLFxyXG4gICAgZm9udDoge1xyXG4gICAgICAgIGl0ZW06IFdLRi5MZW5ndGgsXHJcbiAgICAgICAgb2JqOiBbXHJcbiAgICAgICAgICAgIFtcInN0eWxlXCIsIFdLRi5Gb250U3R5bGVdLFxyXG4gICAgICAgICAgICBcInZhcmlhbnRcIixcclxuICAgICAgICAgICAgXCJ3ZWlnaHRcIixcclxuICAgICAgICAgICAgXCJzdHJldGNoXCIsXHJcbiAgICAgICAgICAgIFtcInNpemVcIiwgV0tGLkxlbmd0aF0sXHJcbiAgICAgICAgICAgIFtcImxpbmVIZWlnaHRcIiwgdW5kZWZpbmVkLCBcIi9cIl0sXHJcbiAgICAgICAgICAgIFwiZmFtaWx5XCJcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgZm9udFNpemU6IFdLRi5MZW5ndGgsXHJcbiAgICBmb250U3RyZXRjaDogV0tGLlBlcmNlbnQsXHJcbiAgICBmb250U3R5bGU6IFdLRi5Gb250U3R5bGUsXHJcblxyXG4gICAgZ2FwOiBXS0YuTXVsdGlMZW5ndGhXaXRoU3BhY2UsXHJcbiAgICBncmlkQ29sdW1uR2FwOiBXS0YuTGVuZ3RoLFxyXG4gICAgZ3JpZEdhcDogV0tGLk11bHRpTGVuZ3RoV2l0aFNwYWNlLFxyXG4gICAgZ3JpZFJvd0dhcDogV0tGLkxlbmd0aCxcclxuICAgIGdyaWRBcmVhOiBXS0YuT25lT3JNYW55V2l0aFNsYXNoLFxyXG4gICAgZ3JpZEF1dG9Db2x1bW5zOiBXS0YuR3JpZEF4aXMsXHJcbiAgICBncmlkQXV0b1Jvd3M6IFdLRi5HcmlkQXhpcyxcclxuICAgIGdyaWRDb2x1bW46IFdLRi5PbmVPck1hbnlXaXRoU2xhc2gsXHJcbiAgICBncmlkUm93OiBXS0YuT25lT3JNYW55V2l0aFNsYXNoLFxyXG4gICAgZ3JpZFRlbXBsYXRlQXJlYXM6IGdyaWRUZW1wbGF0ZUFyZWFzVG9TdHJpbmcsXHJcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBXS0YuR3JpZEF4aXMsXHJcbiAgICBncmlkVGVtcGxhdGVSb3dzOiBXS0YuR3JpZEF4aXMsXHJcblxyXG4gICAgaGVpZ2h0OiBXS0YuTGVuZ3RoLFxyXG5cclxuICAgIGlubGluZVNpemU6IFdLRi5MZW5ndGgsXHJcblxyXG4gICAgbGVmdDogV0tGLkxlbmd0aCxcclxuICAgIGxldHRlclNwYWNpbmc6IFdLRi5MZW5ndGgsXHJcblxyXG4gICAgbWFya2VyRW5kOiBXS0YuTWFya2VyLFxyXG4gICAgbWFya2VyTWlkOiBXS0YuTWFya2VyLFxyXG4gICAgbWFya2VyU3RhcnQ6IFdLRi5NYXJrZXIsXHJcbiAgICBtYXNrQm9yZGVyOiB7XHJcbiAgICAgICAgb2JqOiBib3JkZXJJbWFnZVRvU3RyaW5nLFxyXG4gICAgfSxcclxuICAgIG1hc2tDbGlwOiBXS0YuT25lT3JNYW55V2l0aENvbW1hLFxyXG4gICAgbWFza0NvbXBvc2l0ZTogV0tGLk9uZU9yTWFueVdpdGhDb21tYSxcclxuICAgIG1hc2tJbWFnZTogV0tGLk9uZU9yTWFueVdpdGhDb21tYSxcclxuICAgIG1hc2tNb2RlOiBXS0YuT25lT3JNYW55V2l0aENvbW1hLFxyXG4gICAgbWFza09yaWdpbjogV0tGLk9uZU9yTWFueVdpdGhDb21tYSxcclxuICAgIG1hc2tSZXBlYXQ6IFdLRi5PbmVPck1hbnlXaXRoQ29tbWEsXHJcbiAgICBtYXNrU2l6ZToge1xyXG4gICAgICAgIG51bTogV0tGLkxlbmd0aCxcclxuICAgICAgICBpdGVtOiB7IGFueTogV0tGLkxlbmd0aCB9LFxyXG4gICAgICAgIHNlcDogXCIsXCJcclxuICAgIH0sXHJcblxyXG4gICAgb2Zmc2V0OiB7XHJcbiAgICAgICAgb2JqOiBbXHJcbiAgICAgICAgICAgIFtcInBvc2l0aW9uXCIsIFdLRi5Qb3NpdGlvbl0sXHJcbiAgICAgICAgICAgIFwicGF0aFwiLFxyXG4gICAgICAgICAgICBbXCJkaXN0YW5jZVwiLCBXS0YuTGVuZ3RoXSxcclxuICAgICAgICAgICAgW1wicm90YXRlXCIsIHsgYW55OiBXS0YuQW5nbGUgfV0sXHJcbiAgICAgICAgICAgIFtcImFuY2hvclwiLCBXS0YuUG9zaXRpb24sIFwiL1wiXSxcclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgb2Zmc2V0QW5jaG9yOiBXS0YuUG9zaXRpb24sXHJcbiAgICBvZmZzZXREaXN0YW5jZTogV0tGLkxlbmd0aCxcclxuICAgIG9mZnNldFJvdGF0ZToge1xyXG4gICAgICAgIGFueTogV0tGLkFuZ2xlXHJcbiAgICB9LFxyXG4gICAgb3V0bGluZTogV0tGLkJvcmRlcixcclxuICAgIG91dGxpbmVPZmZzZXQ6IFdLRi5MZW5ndGgsXHJcblxyXG4gICAgcGVyc3BlY3RpdmU6IFdLRi5MZW5ndGgsXHJcbiAgICBwZXJzcGVjdGl2ZU9yaWdpbjogV0tGLk11bHRpTGVuZ3RoV2l0aFNwYWNlLFxyXG5cclxuICAgIHF1b3Rlczoge1xyXG4gICAgICAgIGl0ZW06IHtcclxuICAgICAgICAgICAgc3RyOiBXS0YuUXVvdGVkLFxyXG4gICAgICAgICAgICBpdGVtOiBXS0YuUXVvdGVkLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgcmlnaHQ6IFdLRi5MZW5ndGgsXHJcbiAgICByb3RhdGU6IHtcclxuICAgICAgICBudW06IFdLRi5BbmdsZSxcclxuICAgICAgICBhcnI6IHtcclxuICAgICAgICAgICAgMjogW1dLRi5EZWZhdWx0LCBXS0YuQW5nbGVdLFxyXG4gICAgICAgICAgICBhbnk6IFtXS0YuRGVmYXVsdCwgV0tGLkRlZmF1bHQsIFdLRi5EZWZhdWx0LCBXS0YuQW5nbGVdLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICByb3dHYXA6IFdLRi5MZW5ndGgsXHJcblxyXG4gICAgc3Ryb2tlOiBXS0YuQ29sb3IsXHJcblxyXG4gICAgdGV4dENvbWJpbmVVcHJpZ2h0OiB7XHJcbiAgICAgICAgbnVtOiB2ID0+IGBkaWdpdHMgJHt2fWBcclxuICAgIH0sXHJcbiAgICB0ZXh0RGVjb3JhdGlvbjoge1xyXG4gICAgICAgIG51bTogV0tGLkNvbG9yLFxyXG4gICAgICAgIG9iajogW1xyXG4gICAgICAgICAgICBcImxpbmVcIixcclxuICAgICAgICAgICAgXCJzdHlsZVwiLFxyXG4gICAgICAgICAgICBbXCJjb2xvclwiLCBXS0YuQ29sb3JdLFxyXG4gICAgICAgICAgICBbXCJ0aGlja25lc3NcIiwgV0tGLkxlbmd0aF0sXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHRleHREZWNvcmF0aW9uVGhpY2tuZXNzOiBXS0YuTGVuZ3RoLFxyXG4gICAgdGV4dEVtcGhhc2lzOiBXS0YuQ29sb3IsXHJcbiAgICB0ZXh0SW5kZW50OiBXS0YuTXVsdGlMZW5ndGhXaXRoU3BhY2UsXHJcbiAgICB0ZXh0U2hhZG93OiBXS0YuQm94U2hhZG93LFxyXG4gICAgdGV4dFNpemVBZGp1c3Q6IFdLRi5QZXJjZW50LFxyXG4gICAgdG9wOiBXS0YuTGVuZ3RoLFxyXG4gICAgdHJhbnNmb3JtT3JpZ2luOiBXS0YuTXVsdGlMZW5ndGhXaXRoU3BhY2UsXHJcbiAgICB0cmFuc2l0aW9uOiB7XHJcbiAgICAgICAgYW55OiB7IG9iajogW1xyXG4gICAgICAgICAgICBbXCJwcm9wZXJ0eVwiLCBjYW1lbFRvRGFzaF0sXHJcbiAgICAgICAgICAgIFtcImR1cmF0aW9uXCIsIFdLRi5UaW1lXSxcclxuICAgICAgICAgICAgXCJmdW5jXCIsXHJcbiAgICAgICAgICAgIFtcImRlbGF5XCIsIFdLRi5UaW1lXVxyXG4gICAgICAgIF19LFxyXG4gICAgICAgIHNlcDogXCIsXCIsXHJcbiAgICB9LFxyXG4gICAgdHJhbnNsYXRlOiBXS0YuTXVsdGlMZW5ndGhXaXRoU3BhY2UsXHJcblxyXG4gICAgdmVydGljYWxBbGlnbjogV0tGLkxlbmd0aCxcclxuXHJcbiAgICB3aWxsQ2hhbmdlOiB7XHJcbiAgICAgICAgc3RyOiBjYW1lbFRvRGFzaFxyXG4gICAgfSxcclxuICAgIHdvcmRTcGFjaW5nOiBXS0YuTGVuZ3RoLFxyXG5cclxuICAgIHpvb206IFdLRi5QZXJjZW50LFxyXG5cclxuICAgIC8vIHByb3BlcnRpZXMgZm9yIENTUyBzeW50YXggdmFsdWVzXHJcbiAgICBcIjxudW1iZXI+I1wiOiBXS0YuT25lT3JNYW55V2l0aENvbW1hLFxyXG5cclxuICAgIFwiPGxlbmd0aD5cIjogV0tGLkxlbmd0aCxcclxuICAgIFwiPGxlbmd0aD4rXCI6IFdLRi5NdWx0aUxlbmd0aFdpdGhTcGFjZSxcclxuICAgIFwiPGxlbmd0aD4jXCI6IHsgYW55OiBXS0YuTGVuZ3RoLCBzZXA6IFwiLFwifSxcclxuXHJcbiAgICBcIjxwZXJjZW50YWdlPlwiOiBXS0YuUGVyY2VudCxcclxuICAgIFwiPHBlcmNlbnRhZ2U+K1wiOiB7IGFueTogV0tGLlBlcmNlbnQgfSxcclxuICAgIFwiPHBlcmNlbnRhZ2U+I1wiOiB7IGFueTogV0tGLlBlcmNlbnQsIHNlcDogXCIsXCJ9LFxyXG5cclxuICAgIFwiPGxlbmd0aC1wZXJjZW50YWdlPlwiOiBXS0YuTGVuZ3RoLFxyXG4gICAgXCI8bGVuZ3RoLXBlcmNlbnRhZ2U+K1wiOiBXS0YuTXVsdGlMZW5ndGhXaXRoU3BhY2UsXHJcbiAgICBcIjxsZW5ndGgtcGVyY2VudGFnZT4jXCI6IHsgYW55OiBXS0YuTGVuZ3RoLCBzZXA6IFwiLFwifSxcclxuXHJcbiAgICBcIjxhbmdsZT5cIjogV0tGLkFuZ2xlLFxyXG4gICAgXCI8YW5nbGU+K1wiOiB7IGFueTogV0tGLkFuZ2xlIH0sXHJcbiAgICBcIjxhbmdsZT4jXCI6IHsgYW55OiBXS0YuQW5nbGUsIHNlcDogXCIsXCJ9LFxyXG5cclxuICAgIFwiPHRpbWU+XCI6IFdLRi5UaW1lLFxyXG4gICAgXCI8dGltZT4rXCI6IHsgYW55OiBXS0YuVGltZSB9LFxyXG4gICAgXCI8dGltZT4jXCI6IFdLRi5NdWx0aVRpbWVXaXRoQ29tbWEsXHJcblxyXG4gICAgXCI8cmVzb2x1dGlvbj5cIjogV0tGLlJlc29sdXRpb24sXHJcbiAgICBcIjxyZXNvbHV0aW9uPitcIjogeyBhbnk6IFdLRi5SZXNvbHV0aW9uIH0sXHJcbiAgICBcIjxyZXNvbHV0aW9uPiNcIjogeyBhbnk6IFdLRi5SZXNvbHV0aW9uLCBzZXA6IFwiLFwifSxcclxuXHJcbiAgICBcIjxjb2xvcj5cIjogV0tGLkNvbG9yLFxyXG4gICAgXCI8Y29sb3I+K1wiOiBXS0YuQ29sb3JzLFxyXG4gICAgXCI8Y29sb3I+I1wiOiB7IGFueTogV0tGLkNvbG9yLCBzZXA6IFwiLFwifSxcclxuXHJcbiAgICBcIjxpbWFnZT4jXCI6IFdLRi5PbmVPck1hbnlXaXRoQ29tbWEsXHJcblxyXG4gICAgXCI8Y3VzdG9tLWlkZW50PiNcIjogV0tGLk9uZU9yTWFueVdpdGhDb21tYSxcclxuXHJcbiAgICAvLyBzcGVjaWFsIHByb3BlcnRpZXMgZm9yIElWYXJSdWxlIHR5cGVzXHJcbiAgICBcIjxzdHJpbmc+XCI6IFdLRi5RdW90ZWQsXHJcbiAgICBcIjxmcmVxdWVuY3k+XCI6IFdLRi5GcmVxdWVuY3ksXHJcbiAgICBcIjxzaXplPlwiOiBXS0YuTGVuZ3RoLFxyXG4gICAgXCI8cG9pbnQ+XCI6IFdLRi5NdWx0aUxlbmd0aFdpdGhTcGFjZSxcclxuICAgIFwiPHBvc2l0aW9uPlwiOiBXS0YuUG9zaXRpb24sXHJcbiAgICBcIjxtdWx0aS1wb3NpdGlvbj5cIjogV0tGLk11bHRpUG9zaXRpb24sXHJcbiAgICBcIjxyYWRpdXM+XCI6IFdLRi5SYWRpdXMsXHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBNYXAgb2YgcGFydGlhbCBwcm9wZXJ0eSBuYW1lcyB0byB0aGUgVjJTT3B0aW9ucyBvYmplY3RzIGRlc2NyaWJpbmcgY3VzdG9tIGFjdGlvbnMgbmVjZXNzYXJ5IHRvXHJcbiAqIGNvbnZlcnQgdGhlIHByb3BlcnR5IHZhbHVlIHRvIHRoZSBDU1MtY29tcGxpYW50IHN0cmluZy4gVGhpcyBhbGxvd3MgcHJvcGVydGllcyB0aGF0IGhhdmUgc29tZVxyXG4gKiBjb21tb24gcGF0dGVybiBhbmQgY29tbW9uIHN0cmluZyBzZXJpYWxpemF0aW9uIHRvIG5vdCBiZSBsaXN0ZWQgaW5kaXZpZHVhbGx5IGluIHRoZVxyXG4gKiBzdHlsZVByb3BlcnR5SW5mb3Mgb2JqZWN0IHNzYXZpbmcgc29tZSBzcGFjZS4gVGhlIGtleXMgaW4gdGhpcyBvYmplY3QgYXJlIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXHJcbiAqL1xyXG5jb25zdCBwYXJ0aWFsU3R5bGVQcm9wZXJ0eUluZm9zOiB7IFtQOiBzdHJpbmddOiBWMlNPcHRpb25zIH0gPVxyXG57XHJcbiAgICAvLyBtb3N0IHN0eWxlIHByb3BlcnRpZXMgdGhhdCBoYXZlIFwiY29sb3JcIiBhdCB0aGUgZW5kIGhhdmUgYSBzaW5nbGUgY29sb3IgdmFsdWU7IGhvd2V2ZXIsIHNvbWVcclxuICAgIC8vIGFsbG93IG11bHRpcGxlIGNvbG9yczsgdGhlcmVmb3JlIHdlIHNwZWNpZnkgdGhlIG9wdGlvbiBhcyBXS0YuQ29sb3JzIChwbHVyYWwpLlxyXG4gICAgXCJbQ3xjXW9sb3IkXCI6IFdLRi5Db2xvcnMsXHJcblxyXG4gICAgLy8gbW9zdCBzdHlsZSBwcm9wZXJ0aWVzIHRoYXQgaGF2ZSBcIndpZHRoXCIgYXQgdGhlIGVuZCBoYXZlIGEgc2luZ2xlIGxlbmd0aCB2YWx1ZTsgaG93ZXZlciwgc29tZVxyXG4gICAgLy8gYWxsb3cgbXVsdGlwbGUgbGVuZ3RoIHNlcGFyYXRlZCBieSBzcGFjZXMuXHJcbiAgICBcIltXfHddaWR0aCRcIjogV0tGLk11bHRpTGVuZ3RoV2l0aFNwYWNlLFxyXG5cclxuICAgIFwiW018bV1hcmdpblwiOiBXS0YuTXVsdGlMZW5ndGhXaXRoU3BhY2UsXHJcbiAgICBcIltQfHBdYWRkaW5nXCI6IFdLRi5NdWx0aUxlbmd0aFdpdGhTcGFjZSxcclxuICAgIFwiUmFkaXVzJFwiOiBXS0YuUmFkaXVzLFxyXG4gICAgXCJQb3NpdGlvblwiOiBXS0YuTXVsdGlQb3NpdGlvbixcclxuICAgIFwiYm9yZGVyKD8hSW1hZ2UpXCI6IFdLRi5Cb3JkZXIsICAvLyBcImJvcmRlclwiIG5vdCBmb2xsb3dlZCBieSBcIkltYWdlXCJcclxuICAgIFwiXmluc2V0XCI6IFdLRi5NdWx0aUxlbmd0aFdpdGhTcGFjZSxcclxuICAgIFwiXm1heFwiOiBXS0YuTGVuZ3RoLFxyXG4gICAgXCJebWluXCI6IFdLRi5MZW5ndGgsXHJcbiAgICBcIkRlbGF5JFwiOiBXS0YuTXVsdGlUaW1lV2l0aENvbW1hLFxyXG4gICAgXCJEdXJhdGlvbiRcIjogV0tGLk11bHRpVGltZVdpdGhDb21tYSxcclxuICAgIFwiVGltaW5nRnVuY3Rpb24kXCI6IFdLRi5PbmVPck1hbnlXaXRoQ29tbWEsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBcnJheSBvZiB0d28gZWxlbWVudCB0dXBsZXMgd2hpY2ggbWFwcyBwcm9jZXNzZWQgUmVnRXggZnJvbSBgcGFydGlhbFN0eWxlUHJvcGVydHlJbmZvc2Agb2JqZWN0XHJcbiAqIGluIHRoZSBmaXJzdCBlbGVtZW50IGFuZCB0aGUgY29ycmVzcG9uZGluZyBgVjJTT3B0aW9uc2AgaW4gdGhlIHNlY29uZC4gVGhpcyBpcyBuZWVkZWQgdG8gb25seVxyXG4gKiBjcmVhdGUgUmVnRXggb2JqZWN0cyBvbmNlIGZvciBlYWNoIGtleSBpbiBgcGFydGlhbFN0eWxlUHJvcGVydHlJbmZvc2Agb2JqZWN0O1xyXG4gKi9cclxuY29uc3QgcGFydGlhbFN0eWxlUHJvcGVydHlQcm9jZXNzZWRJbmZvczogW1JlZ0V4cCwgVjJTT3B0aW9uc11bXSA9IFtdO1xyXG5cclxuLy8gZmlsbCBgcGFydGlhbFN0eWxlUHJvcGVydHlQcm9jZXNzZWRJbmZvc2AgYmFzZWQgb24gYHBhcnRpYWxTdHlsZVByb3BlcnR5SW5mb3NgXHJcbmZvciggbGV0IGtleSBpbiBwYXJ0aWFsU3R5bGVQcm9wZXJ0eUluZm9zKVxyXG4gICAgcGFydGlhbFN0eWxlUHJvcGVydHlQcm9jZXNzZWRJbmZvcy5wdXNoKFtuZXcgUmVnRXhwKGtleSksIHBhcnRpYWxTdHlsZVByb3BlcnR5SW5mb3Nba2V5XV0pO1xyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBWZW5kb3IgcHJlZml4IHN1cHBvcnRcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5jb25zdCBlbnVtIFZlbmRvclByZWZpeFxyXG57XHJcbiAgICB3ZWJraXQgPSAxLFxyXG4gICAgbW96ID0gMixcclxuICAgIG1zID0gMyxcclxufVxyXG5cclxuLy8gVmVuZG9yIHByZWZpeGVzIHdpdGggaW5kZXhlcyBmcm9tIHRoZSBWZW5kb3JQcmVmaXggZW51bWVyYXRpb24uIFRoZSBmaXJzdCBvbmUgaXMgb25seSBoZXJlIHRvXHJcbi8vIGFsbG93IHRoZSBmaXJzdCBlbnVtZXJhdGlvbiB2YWx1ZSB0byBiZSAxIGFuZCBub3QgemVyby5cclxuY29uc3QgdmVuZG9yUHJlZml4U3RyaW5ncyA9IFtcIlwiLCBcIndlYmtpdFwiLCBcIm1velwiLCBcIm1zXCJdO1xyXG5cclxuXHJcbi8vIE1vZGUgaW5kaWNhdGluZyB0byB3aGF0IGVudGl0eSB0aGUgcHJlZml4IHNob3VsZCBiZSBhZGRlZCBpZiBhIGNlcnRhaW4gdmFsdWUgaXMgZm91bmQgaW4gdGhlXHJcbi8vIHByb3BlcnR5LlxyXG5jb25zdCBlbnVtIFZhbHVlUHJlZml4TW9kZVxyXG57XHJcbiAgICAvLyBCb3RoIHRoZSB2YWx1ZSBhbmQgdGhlIHByb3BlcnR5IG5hbWUgYXJlIHByZWZpeGVkLlxyXG4gICAgQm90aCA9IDAsXHJcblxyXG4gICAgLy8gT25seSB0aGUgdmFsdWUgaXMgcHJlZml4ZWRcclxuICAgIFZhbHVlT25seSA9IDEsXHJcblxyXG4gICAgLy8gT25seSB0aGUgcHJvcGVydHkgbmFtZSBpcyBwcmVmaXhlZFxyXG4gICAgUHJvcGVydHlPbmx5ID0gMixcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVHlwZSBkZWZpbmluZyBhIHZhbHVlIHdoaWNoIHNob3VsZCBiZSBwcmVmaXhlZCBvciB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgcHJvcGVydHkgc2hvdWxkIGJlXHJcbiAqIHByZWZpeGVkLlxyXG4gKi9cclxudHlwZSBWYWx1ZVByZWZpeEluZm8gPVxyXG4gICAge1xyXG4gICAgICAgIC8vIFZhbHVlIHdoaWNoIHNob3VsZCBiZSBwcmVmaXhlZCBvciB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIHByZWZpeGVkLlxyXG4gICAgICAgIHZhbDogc3RyaW5nO1xyXG5cclxuICAgICAgICAvLyBGbGFnIGluZGljYXRpbmcgd2hldGhlciB2YWx1ZSBvciBwcm9wZXJ0eSBvciBib3RoIHNob3VsZCBiZSBwcmVmaXhlZC4gRGVmYXVsdCBpcyBCb3RoLlxyXG4gICAgICAgIG1vZGU/OiBWYWx1ZVByZWZpeE1vZGU7XHJcblxyXG4gICAgICAgIC8vIEFsdGVybmF0aXZlIG5hbWUgZm9yIHRoZSB2YWx1ZSAoc29tZXRpbWVzIGEgdmFsdWUgaXMgbm90IGp1c3QgcHJlZml4ZWQsIGJ1dCBnZXRzXHJcbiAgICAgICAgLy8gd2hvbGx5IGRpZmZlcmVudCBuYW1lKS5cclxuICAgICAgICBhbHQ/OiBzdHJpbmc7XHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgZGVmaW5pbmcgYSBwcm9wZXJ0eSB3aGljaCBzaG91bGQgYmUgcHJlZml4ZWQgb3Igd2hvc2UgdmFsdWVzIHNob3VsZCBiZSBwcmVmaXhlZC5cclxuICogICAtIHN0cmluZyAtIHNwZWNpZmllcyB0aGUgbmV3IG5hbWUgb2YgdGhlIHByb3BlcnR5XHJcbiAqICAgLSBudW1iZXIgLSBzcGVjaWZpZXMgdGhlIHNpbmdsZSBzdXBwb3J0ZWQgdmVuZG9yIHByZWZpeFxyXG4gKi9cclxudHlwZSBQcm9wUHJlZml4SW5mbyA9IHN0cmluZyB8IG51bWJlciB8XHJcbiAgICB7XHJcbiAgICAgICAgLy8gUHJlZml4IGluZGV4XHJcbiAgICAgICAgcDogVmVuZG9yUHJlZml4O1xyXG5cclxuICAgICAgICAvLyBBbHRlcm5hdGl2ZSBuYW1lIGZvciB0aGUgcHJvcGVydHkgKHNvbWV0aW1lcyBhIHByb3BlcnR5IGlzIG5vdCBqdXN0IHByZWZpeGVkLCBidXQgZ2V0c1xyXG4gICAgICAgIC8vIHdob2xseSBkaWZmZXJlbnQgbmFtZSkuXHJcbiAgICAgICAgYWx0Pzogc3RyaW5nO1xyXG5cclxuICAgICAgICAvLyBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgcHJvcGVydHkgaXMgYWx3YXlzIHByZWZpeGVkIG9yIG9ubHkgaWYgaXRcclxuICAgICAgICAvLyBjb250YWlucyBzcGVjaWFsIHZhbHVlcyBzcGVjaWZpZWQgYnkgdGhlIGB2YWxzYCBwcm9wZXJ0eS5cclxuICAgICAgICB2YWxzT25seT86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8vIEFycmF5IG9mIG9iamVjdHMgcHJvdmlkaW5nIGluZm9tYXRpb24gYWJvdXQgdmFsdWVzIHdoaWNoIHNob3VsZCBiZSBwcmVmaXhlZCBvclxyXG4gICAgICAgIC8vIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgcHJlZml4ZWQuXHJcbiAgICAgICAgdmFscz86IFZhbHVlUHJlZml4SW5mb1tdO1xyXG4gICAgfTtcclxuXHJcblxyXG5cclxuY29uc3QgZ2V0UHJlZml4VmFyaWFudHMgPSAobmFtZToga2V5b2YgSVN0eWxlc2V0LCB2YWx1ZTogc3RyaW5nKTogUHJvcFByZWZpeFZhcmlhbnRbXSB8IG51bGwgPT5cclxue1xyXG4gICAgbGV0IGluZm8gPSBwcm9wUHJlZml4SW5mb3NbbmFtZV07XHJcbiAgICBpZiAoIWluZm8pXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbmZvID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgIHJldHVybiBbW2luZm8sIHZhbHVlXV07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbmZvID09PSBcIm51bWJlclwiKVxyXG4gICAgICAgIHJldHVybiBbW2Rhc2hUb0NhbWVsKGAke3ZlbmRvclByZWZpeFN0cmluZ3NbaW5mb119LSR7bmFtZX1gKSwgdmFsdWVdXTtcclxuXHJcbiAgICBsZXQgdmFyaWFudHM6IFByb3BQcmVmaXhWYXJpYW50W10gPSBbXTtcclxuICAgIGZvciggbGV0IGl0ZW0gb2YgaW5mbylcclxuICAgIHtcclxuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgIHZhcmlhbnRzLnB1c2goIFtpdGVtLCB2YWx1ZV0pO1xyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSBcIm51bWJlclwiKVxyXG4gICAgICAgICAgICB2YXJpYW50cy5wdXNoKCBbZGFzaFRvQ2FtZWwoYCR7dmVuZG9yUHJlZml4U3RyaW5nc1tpdGVtXX0tJHtuYW1lfWApLCB2YWx1ZV0pO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBwcmVmaXhTdHJpbmcgPSB2ZW5kb3JQcmVmaXhTdHJpbmdzW2l0ZW0ucF07XHJcblxyXG4gICAgICAgICAgICAvLyBkZXRlcm1pbmUgd2hldGhlciB0aGUgcHJvcGVydHkgbmFtZSBzaG91bGQgYmUgcHJlZml4ZWQuIE5vdGUgdGhhdCBldmVuIGlmIHdlIGRlY2lkZVxyXG4gICAgICAgICAgICAvLyBoZXJlIHRoYXQgaXQgc2hvdWxkIG5vdCBiZSBwcmVmaXhlZCwgaXQgY2FuIGNoYW5nZSB3aGVuIHdlIGdvIG92ZXIgcHJvcGVydHkgdmFsdWVzLlxyXG4gICAgICAgICAgICBsZXQgc2hvdWxkUHJlZml4UHJvcGVydHkgPSAhaXRlbS52YWxzT25seTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIHByb3BlcnR5IHZhbHVlcyBhcmUgZGVmaW5lZCwgdHJ5IHRvIHJlcGxhY2UgdGhlbSB3aXRoIHByZWZpeGVkIHZlcnNpb25zLiBOb3RlIHRoYXRcclxuICAgICAgICAgICAgLy8gdGhpcyBjYW4gYWxzbyBzZXQgdGhlIGZsYWcgaW5kaWNhdGluZyB0aGF0IHRoZSBwcm9wZXJ0eSBuYW1lIHNob3VsZCBiZSBwcmVmaXhlZCB0b28uXHJcbiAgICAgICAgICAgIGxldCBuZXdQcm9wVmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgaXRlbS52YWxzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IoIGxldCB2YWx1ZUluZm8gb2YgaXRlbS52YWxzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZVRvU2VhcmNoID0gdmFsdWVJbmZvLnZhbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuaW5kZXhPZiggdmFsdWVUb1NlYXJjaCkgPCAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlSW5mby5tb2RlICE9PSBWYWx1ZVByZWZpeE1vZGUuUHJvcGVydHlPbmx5KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvcFZhbHVlID0gdmFsdWUuc3BsaXQodmFsdWVUb1NlYXJjaCkuam9pbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSW5mby5hbHQgPyB2YWx1ZUluZm8uYWx0IDogYC0ke3ByZWZpeFN0cmluZ30tJHt2YWx1ZVRvU2VhcmNofWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ld1Byb3BWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUluZm8ubW9kZSAhPT0gVmFsdWVQcmVmaXhNb2RlLlZhbHVlT25seSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUHJlZml4UHJvcGVydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgbmV3UHJvcE5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkUHJlZml4UHJvcGVydHkpXHJcbiAgICAgICAgICAgICAgICBuZXdQcm9wTmFtZSA9IGl0ZW0uYWx0ID8gaXRlbS5hbHQgOiBkYXNoVG9DYW1lbChgJHtwcmVmaXhTdHJpbmd9LSR7bmFtZX1gKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZXdQcm9wTmFtZSB8fCBuZXdQcm9wVmFsdWUpXHJcbiAgICAgICAgICAgICAgICB2YXJpYW50cy5wdXNoKCBbbmV3UHJvcE5hbWUgfHwgbmFtZSwgbmV3UHJvcFZhbHVlIHx8IHZhbHVlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YXJpYW50cy5sZW5ndGggPiAwID8gdmFyaWFudHMgOiBudWxsO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIFByZWZpeCBpbmZvcm1hdGlvbiBmb3Igc2l6ZS1saWtlIHByb3BlcnRpZXMgdGhhdCBhY2NlcHQgXCJzdHJldGNoXCIgdmFsdWVcclxuY29uc3Qgc2l6ZVByZWZpeEluZm9zOiBQcm9wUHJlZml4SW5mb1tdID0gW1xyXG4gICAge3A6IFZlbmRvclByZWZpeC53ZWJraXQsIHZhbHNPbmx5OiB0cnVlLCB2YWxzOiBbe3ZhbDogXCJzdHJldGNoXCIsIG1vZGU6IFZhbHVlUHJlZml4TW9kZS5WYWx1ZU9ubHksIGFsdDogXCItd2Via2l0LWZpbGwtYXZhaWxhYmxlXCJ9XX0sXHJcbl07XHJcblxyXG4vLyBQcmVmaXggaW5mb3JtYXRpb24gZm9yIHByb3BlcnRpZXMgdGhhdCBhY2NlcHQgXCJjcm9zcy1mYWRlXCIgYW5kIFwiaW1hZ2Utc2V0XCIgZnVuY3Rpb25zICh0aGF0IGlzLCBpbWFnZXMpXHJcbmNvbnN0IGltYWdlRnVuY3NQcmVmaXhJbmZvOiBQcm9wUHJlZml4SW5mbyA9IHtcclxuICAgIHA6IFZlbmRvclByZWZpeC53ZWJraXQsIHZhbHNPbmx5OiB0cnVlLCB2YWxzOiBbXHJcbiAgICAgICAge3ZhbDogXCJjcm9zcy1mYWRlXCIsIG1vZGU6IFZhbHVlUHJlZml4TW9kZS5WYWx1ZU9ubHkgfSxcclxuICAgICAgICB7dmFsOiBcImltYWdlLXNldFwiLCBtb2RlOiBWYWx1ZVByZWZpeE1vZGUuVmFsdWVPbmx5IH1cclxuICAgIF1cclxufTtcclxuXHJcbmNvbnN0IGltYWdlRnVuY3NQcmVmaXhJbmZvczogUHJvcFByZWZpeEluZm9bXSA9IFtpbWFnZUZ1bmNzUHJlZml4SW5mb107XHJcblxyXG5cclxuY29uc3QgcHJvcFByZWZpeEluZm9zOiB7IFtLIGluIGtleW9mIElTdHlsZXNldF0/OiBzdHJpbmcgfCBudW1iZXIgfCBQcm9wUHJlZml4SW5mb1tdIH0gPVxyXG57XHJcbiAgICBhcHBlYXJhbmNlOiBbIFZlbmRvclByZWZpeC53ZWJraXQsIFZlbmRvclByZWZpeC5tb3ogXSxcclxuICAgIGJhY2tncm91bmRDbGlwOiBbXHJcbiAgICAgICAge3A6IFZlbmRvclByZWZpeC53ZWJraXQsIHZhbHNPbmx5OiB0cnVlLCB2YWxzOiBbe3ZhbDogXCJ0ZXh0XCIsIG1vZGU6IFZhbHVlUHJlZml4TW9kZS5Qcm9wZXJ0eU9ubHl9XX1cclxuICAgIF0sXHJcbiAgICBibG9ja1NpemU6IHNpemVQcmVmaXhJbmZvcyxcclxuICAgIGJveERlY29yYXRpb25CcmVhazogVmVuZG9yUHJlZml4LndlYmtpdCxcclxuICAgIGJhY2tncm91bmQ6IGltYWdlRnVuY3NQcmVmaXhJbmZvcyxcclxuICAgIGJhY2tncm91bmRJbWFnZTogaW1hZ2VGdW5jc1ByZWZpeEluZm9zLFxyXG4gICAgYm9yZGVySW1hZ2U6IGltYWdlRnVuY3NQcmVmaXhJbmZvcyxcclxuICAgIGJvcmRlckltYWdlU291cmNlOiBpbWFnZUZ1bmNzUHJlZml4SW5mb3MsXHJcbiAgICBjbGlwUGF0aDogVmVuZG9yUHJlZml4LndlYmtpdCxcclxuICAgIGNvbG9yQWRqdXN0OiBcIndlYmtpdFByaW50Q29sb3JBZGp1c3RcIixcclxuICAgIGNvbnRlbnQ6IGltYWdlRnVuY3NQcmVmaXhJbmZvcyxcclxuICAgIGhlaWdodDogc2l6ZVByZWZpeEluZm9zLFxyXG4gICAgaHlwaGVuczogWyBWZW5kb3JQcmVmaXgud2Via2l0LCBWZW5kb3JQcmVmaXgubW96LCBWZW5kb3JQcmVmaXgubXMgXSxcclxuICAgIGluaXRpYWxMZXR0ZXI6IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICBpbmxpbmVTaXplOiBzaXplUHJlZml4SW5mb3MsXHJcbiAgICBsaW5lQ2xhbXA6IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICBtYXNrOiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgbWFza0JvcmRlcjogW1wid2Via2l0TWFza0JveEltYWdlXCIsIGltYWdlRnVuY3NQcmVmaXhJbmZvXSxcclxuICAgIG1hc2tCb3JkZXJPdXRzZXQ6IFwid2Via2l0TWFza0JveEltYWdlT3V0c2V0XCIsXHJcbiAgICBtYXNrQm9yZGVyUmVwZWF0OiBcIndlYmtpdE1hc2tCb3hJbWFnZVJlcGVhdFwiLFxyXG4gICAgbWFza0JvcmRlclNsaWNlOiBcIndlYmtpdE1hc2tCb3hJbWFnZVNsaWNlXCIsXHJcbiAgICBtYXNrQm9yZGVyU291cmNlOiBcIndlYmtpdE1hc2tCb3hJbWFnZVNvdXJjZVwiLFxyXG4gICAgbWFza0JvcmRlcldpZHRoOiBcIndlYmtpdE1hc2tCb3hJbWFnZVdpZHRoXCIsXHJcbiAgICBtYXNrQ2xpcDogVmVuZG9yUHJlZml4LndlYmtpdCxcclxuICAgIG1hc2tDb21wb3NpdGU6IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICBtYXNrSW1hZ2U6IFtWZW5kb3JQcmVmaXgud2Via2l0LCBpbWFnZUZ1bmNzUHJlZml4SW5mb10sXHJcbiAgICBtYXNrTW9kZTogVmVuZG9yUHJlZml4LndlYmtpdCxcclxuICAgIG1hc2tPcmlnaW46IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICBtYXNrUG9zaXRpb246IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICBtYXNrUmVwZWF0OiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgbWFza1NpemU6IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICBtYXNrVHlwZTogVmVuZG9yUHJlZml4LndlYmtpdCxcclxuICAgIG1heEJsb2NrU2l6ZTogc2l6ZVByZWZpeEluZm9zLFxyXG4gICAgbWF4SGVpZ2h0OiBzaXplUHJlZml4SW5mb3MsXHJcbiAgICBtYXhJbmxpbmVTaXplOiBzaXplUHJlZml4SW5mb3MsXHJcbiAgICBtYXhXaWR0aDogc2l6ZVByZWZpeEluZm9zLFxyXG4gICAgbWluQmxvY2tTaXplOiBzaXplUHJlZml4SW5mb3MsXHJcbiAgICBtaW5IZWlnaHQ6IHNpemVQcmVmaXhJbmZvcyxcclxuICAgIG1pbklubGluZVNpemU6IHNpemVQcmVmaXhJbmZvcyxcclxuICAgIG1pbldpZHRoOiBzaXplUHJlZml4SW5mb3MsXHJcbiAgICBzaGFwZU91dHNpZGU6IGltYWdlRnVuY3NQcmVmaXhJbmZvcyxcclxuICAgIHNjcm9sbGJhckNvbG9yOiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgc2Nyb2xsYmFyV2lkdGg6IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICB0ZXh0RW1waGFzaXM6IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICB0ZXh0RW1waGFzaXNDb2xvcjogVmVuZG9yUHJlZml4LndlYmtpdCxcclxuICAgIHRleHRFbXBoYXNpc1Bvc2l0aW9uOiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgdGV4dEVtcGhhc2lzU3R5bGU6IFZlbmRvclByZWZpeC53ZWJraXQsXHJcbiAgICB0ZXh0RmlsbENvbG9yOiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgdGV4dE9yaWVudGF0aW9uOiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgdGV4dFNpemVBZGp1c3Q6IFsgVmVuZG9yUHJlZml4LndlYmtpdCwgVmVuZG9yUHJlZml4Lm1veiwgVmVuZG9yUHJlZml4Lm1zIF0sXHJcbiAgICB0ZXh0U3Ryb2tlOiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgdGV4dFN0cm9rZUNvbG9yOiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgdGV4dFN0cm9rZVdpZHRoOiBWZW5kb3JQcmVmaXgud2Via2l0LFxyXG4gICAgdXNlclNlbGVjdDogW1xyXG4gICAgICAgIHtwOiBWZW5kb3JQcmVmaXgud2Via2l0LCB2YWxzOiBbe3ZhbDogXCJub25lXCIsIG1vZGU6IFZhbHVlUHJlZml4TW9kZS5Qcm9wZXJ0eU9ubHl9XX1cclxuICAgIF0sXHJcbiAgICB3aWR0aDogc2l6ZVByZWZpeEluZm9zLFxyXG59XHJcblxyXG5cclxuXHJcbiIsIu+7vy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBDYXNlIGNvbnZlcnNpb25zIGZvciBwcm9wZXJ0eSBuYW1lcy5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5pbXBvcnQgeyBJQ3NzRnVuY09iamVjdCwgTnRoRXhwcmVzc2lvbiB9IGZyb20gXCIuLi9hcGkvQ29yZVR5cGVzXCI7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgZGFzaGUtY2FzZSB0byBjYW1lbENhc2UsIGUuZy4gZm9udC1zaXplIHRvIGZvbnRTaXplLlxyXG4gKiBAcGFyYW0gZGFzaFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGRhc2hUb0NhbWVsID0gKGRhc2g6IHN0cmluZyk6IHN0cmluZyA9PlxyXG5cdCFkYXNoID8gZGFzaCA6IGRhc2gucmVwbGFjZSggLy0oW2EtekEtWl0pL2csICh4LCAkMSkgPT4gJDEudG9VcHBlckNhc2UoKSk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBjYW1lbENhc2UgdG8gZGFzaC1jYXNlLCBlLmcuIGZvbnRTaXplIHRvIGZvbnQtc2l6ZS5cclxuICogQHBhcmFtIGNhbWVsXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2FtZWxUb0Rhc2ggPSAoY2FtZWw6IHN0cmluZyk6IHN0cmluZyA9PlxyXG4gICAgY2FtZWwucmVwbGFjZSggLyhbYS16QS1aXSkoPz1bQS1aXSkvZywgJyQxLScpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vL1xyXG4vLyBDb252ZXJzaW9uIG9mIHZhbHVlcyB0byBzdHJpbmdzLlxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBTeW1ib2wgdW5kZXIgd2hpY2ggYSBmdW5jdGlvbiBpcyBkZWZpbmVkIHRoYXQgY29udmVydHMgYW4gb2JqZWN0IHRvIGEgc3RyaW5nLiBXZSBuZWVkIGEgc3BlY2lhbFxyXG4gKiBzeW1ib2wgYmVjYXVzZSB0aGUgc3RhbmRhcmQgbWV0aG9kIHRvU3RyaW5nIGV4aXN0cyBvbiBldmVyeSBvYmplY3QgYW5kIHdlIG9ubHkgd2FudCBzb21lIHRvXHJcbiAqIGV4cGxpY2l0bHkgcHJvdmlkZSB0aGlzIHN1cHBvcnQuXHJcbiAqL1xyXG4gZXhwb3J0IGNvbnN0IHN5bVYyUzogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgpO1xyXG5cclxuXHJcblxyXG4vKiogVHlwZSBvZiBmdW5jdGlvbnMgdGhhdCBjb252ZXJ0IGEgdmFsdWUgb2YgYXJiaXRyYXJ5IHR5cGUgdG8gYSBzdHJpbmcgKi9cclxuZXhwb3J0IHR5cGUgQW55VG9TdHJpbmdGdW5jID0gKHZhbDogYW55KSA9PiBzdHJpbmc7XHJcblxyXG4vKiogVHlwZSBvZiBmdW5jdGlvbnMgdGhhdCBjb252ZXJ0IGEgbnVtYmVyIHRvIGEgc3RyaW5nICovXHJcbmV4cG9ydCB0eXBlIE51bWJlclRvU3RyaW5nRnVuYyA9IChuOiBudW1iZXIpID0+IHN0cmluZztcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIE51bWVyaWMgaWRlbnRpZmllcnMgY29ycmVzcG9uZGluZyB0byBXZWxsIEtub3duIEZ1bmN0aW9ucyB1c2VkIHRvIGNvbnZlcnQgc3R5bGUgcHJvcGVydHkgdmFsdWVzXHJcbiAqIHRvIHN0cmluZ3MuIFRoaXMgaXMgdXNlZCB0byByZWR1Y2UgdGhlIHNpemUgb2YgdGhlIG9iamVjdCB1c2VkIGZvciBtYXBwaW5nIHN0eWxlIHByb3BlcnRpZXMgdG9cclxuICogY29udmVyc2lvbiBmdW5jdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW51bSBXS0Zcclxue1xyXG4gICAgRGVmYXVsdCA9IDAsXHJcbiAgICBOdW1iZXIsXHJcbiAgICBQZXJjZW50LFxyXG4gICAgTGVuZ3RoLFxyXG4gICAgQW5nbGUsXHJcbiAgICBUaW1lLFxyXG4gICAgUmVzb2x1dGlvbixcclxuICAgIEZyZXF1ZW5jeSxcclxuICAgIFBvc2l0aW9uLFxyXG4gICAgQXRQb3NpdGlvbixcclxuICAgIEFzcGVjdFJhdGlvLFxyXG4gICAgQ29sb3IsXHJcbiAgICBNdWx0aVBvc2l0aW9uLFxyXG4gICAgTXVsdGlMZW5ndGhXaXRoU3BhY2UsXHJcbiAgICBNdWx0aVRpbWVXaXRoQ29tbWEsXHJcbiAgICBPbmVPck1hbnlXaXRoQ29tbWEsXHJcbiAgICBPbmVPck1hbnlXaXRoU2xhc2gsXHJcbiAgICBVbml0bGVzc09yUGVyY2VudCxcclxuICAgIFJhZGl1cyxcclxuICAgIEJvcmRlcixcclxuICAgIEJvcmRlclJhZGl1cyxcclxuICAgIEdyaWRBeGlzLFxyXG4gICAgR3JpZFRyYWNrLFxyXG4gICAgUXVvdGVkLFxyXG4gICAgRm9udFN0eWxlLFxyXG4gICAgQm94U2hhZG93U2luZ2xlLFxyXG4gICAgQm94U2hhZG93LFxyXG4gICAgQWx3YXlzUGVyY2VudCxcclxuICAgIENvbG9yU2VwYXJhdGlvbixcclxuICAgIE1hcmtlcixcclxuICAgIENvbG9ycyxcclxuXHJcbiAgICAvLyBpbmRpY2F0ZXMgdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXkgbmVlZGVkIHRvIGtlZXAgY29udmVyc2lvbiBmdW5jdGlvbnMuIFRoaXMgaXMgdXNlZCB3aGVuXHJcbiAgICAvLyB3ZSBjcmVhdGUgdGhpcyBhcnJheSBiZWxvdy4gQW55IG5ldyBlbnVtZXJhdGlvbiBtZW1iZXJzIG11c3QgYmUgYWRkZWQgYmVmb3JlIHRoaXMuXHJcbiAgICBMYXN0XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBcnJheSBvZiB3ZWxsIGtub3duIGNvbnZlcnNpb24gZnVuY3Rpb25zLiBJbmRleGVzIGFyZSB0aGUgaWRlbnRpZmllciBvZiB3ZWxsIGtub3duIGZ1bmN0aW9uc1xyXG4gKiBmcm9tIHRoZSBXZWxsS25vd25GdW5jIGVudW1lcmF0aW9uXHJcbiAqL1xyXG5leHBvcnQgbGV0IHdrZjogQW55VG9TdHJpbmdGdW5jW10gPSBuZXcgQXJyYXkoIFdLRi5MYXN0KTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBQMlNPcHRpb24gdHlwZSBkZWZpbmVzIGEgbmFtZSBvZiBhIHByb3BlcnR5IG9mIGFuIG9iamVjdCBhbG9uZyB3aXRoIHRoZSBvcHRpb25zIG9mIGhvd1xyXG4gKiB0aGlzIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhIHN0cmluZy4gVGhlIHR5cGUgaXMgZWl0aGVyIGEgcHJvcGVydHkgbmFtZSBvciBhIHR1cGxlXHJcbiAqIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGlzIHRoZSBwcm9wZXJ0eSBuYW1lIGFuZCB0aGUgc2Vjb25kIGVsZW1lbnQgaXMgdGhlIFYyU09wdGlvbnMgdmFsdWUuXHJcbiAqIElmIHRoZSB0dXBsZSBoYXMgYSB0aGlyZCBzdHJpbmcgZWxlbWVudCBpdCBpcyBwbGFjZWQgYmVmb3JlIHRoZSBjb252ZXJ0ZWQgcHJvcGVydHkgdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQMlNPcHRpb24gPSBzdHJpbmcgfCBbc3RyaW5nLCBWMlNPcHRpb25zPywgc3RyaW5nP107XHJcblxyXG4vKipcclxuICogVGhlIFAyU09wdGlvbnMgdHlwZSBkZWZpbmVzIG5hbWVzIG9mIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFsb25nIHdpdGggdGhlIG9wdGlvbnMgb2YgaG93XHJcbiAqIGVhY2ggcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGEgc3RyaW5nLiBUaGUgdHlwZSBpcyBhbiBhcnJheSBvZiBlaXRoZXIgcHJvcGVydHkgbmFtZXMgb3IgdHVwbGVzXHJcbiAqIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGlzIHRoZSBwcm9wZXJ0eSBuYW1lIGFuZCB0aGUgc2Vjb25kIGVsZW1lbnQgaXMgdGhlIFYyU09wdGlvbnMgdmFsdWUuXHJcbiAqIElmIHRoZSB0dXBsZSBoYXMgYSB0aGlyZCBzdHJpbmcgZWxlbWVudCBpdCBpcyBwbGFjZWQgYmVmb3JlIHRoZSBjb252ZXJ0ZWQgcHJvcGVydHkgdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQMlNPcHRpb25zID0gUDJTT3B0aW9uW107XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIG9wdGlvbnMgdG8gcHJvY2VzcyB0dXBsZXMuIFByb3BlcnR5IG5hbWVzIGFyZSBhY3R1YWxseSBpbnRlZ2VyIG51bWJlcnMsIHdoY2loIGFyZVxyXG4gKiBjb21wYXJlZCB0byB0aGUgdHVwbGVzJyBsZW5ndGhzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVDJTT3B0aW9ucyA9IHsgW046IG51bWJlcl06IFYyU09wdGlvbnNbXSwgYW55PzogVjJTT3B0aW9uc1tdIH07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgVjJTT3B0aW9ucyB0eXBlIGRlZmluZXMgb3B0aW9ucyBvbiBob3cgdG8gY29udmVydCB2YWx1ZXMgb2YgZGlmZmVybnRcclxuICogdHlwZXMgdG8gc3RyaW5ncy4gQSB2YWx1ZSBpcyBjb252ZXJ0ZWQgYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgcnVsZXM6XHJcbiAqIC0gSWYgdGhlIG9wdGlvbiBpcyBhIG51bWJlciBpdCBpcyB0cmVhdGVkIGFzIGFuIElEIG9mIGEgcmVnaXN0ZXJlZCBjb252ZXJzaW9uIGZ1bmN0aW9uLlxyXG4gKiAtIElmIHRoZSBvcHRpb24gaXMgYSBmdW5jdGlvbiwgaXQgaXMgaW52b2tlZCB0byBjb252ZXJ0IHRoZSB2YWx1ZS5cclxuICogLSBJZiB0aGUgb3B0aW9uIGlzIGFuIG9iamVjdCwgdGhlbiBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgdGhlIHZhbHVlLCBvbmUgb2YgdGhlIGZyb21YeHhcclxuICogICBtZXRob2RzIGRlZmluZXMgaG93IHRoZSB2YWx1ZSBpcyBjb252ZXJ0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBWMlNPcHRpb25zID0gV0tGIHwgQW55VG9TdHJpbmdGdW5jIHxcclxue1xyXG4gICAgLy8gU3RyaW5nIHZhbHVlIHRvIHVzZSBvciBmdW5jdGlvbiB0byBjYWxsIGlmIHZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkXHJcbiAgICBuaWw/OiBzdHJpbmcgfCAoKHZhbD86IG51bGwpID0+IHN0cmluZyk7XHJcblxyXG4gICAgLy8gRmZ1bmN0aW9uIHRvIGNhbGwgaWYgdmFsdWUgaXMgYSBib29sZWFuXHJcbiAgICBib29sPzogKHZhbDogYm9vbGVhbikgPT4gc3RyaW5nO1xyXG5cclxuICAgIC8vIE9wdGlvbnMgdG8gdXNlIGlmIHZhbHVlIGlzIGEgc3RyaW5nLiBUaGlzIGFsbG93cyB0cmFuc2Zvcm1pbmcgb25lIHN0cmluZyB0byBhbm90aGVyLlxyXG4gICAgc3RyPzogV0tGIHwgKCh2YWw6IHN0cmluZykgPT4gc3RyaW5nKTtcclxuXHJcbiAgICAvLyBPcHRpb25zIHRvIHVzZSBpZiB2YWx1ZSBpcyBhIG51bWJlclxyXG4gICAgbnVtPzogV0tGIHwgTnVtYmVyVG9TdHJpbmdGdW5jO1xyXG5cclxuICAgIC8vIE9wdGlvbnMgdG8gdXNlIGlmIHZhbHVlIGlzIGFuIGFycmF5XHJcbiAgICBhcnI/OiBXS0YgfCBWMlNPcHRpb25zW10gfCBUMlNPcHRpb25zIHwgKCh2YWw6IGFueVtdKSA9PiBzdHJpbmcpO1xyXG5cclxuICAgIC8vIE9wdGlvbnMgdG8gdXNlIGlmIHZhbHVlIGlzIGFuIGFycmF5IGFuZCB0aGUgZmlyc3QgZWxlbWVudCBvZiBpdCBpcyBhbHNvIGFuIGFycmF5XHJcbiAgICBhcnIyPzogV0tGIHwgVjJTT3B0aW9ucyB8ICgodmFsOiBhbnlbXSkgPT4gc3RyaW5nKTtcclxuXHJcbiAgICAvLyBPcHRpb25zIHRvIHVzZSBpZiB2YWx1ZSBpcyBhbiBvYmplY3RcclxuICAgIG9iaj86IFYyU09wdGlvbnMgfCBQMlNPcHRpb25zO1xyXG5cclxuICAgIC8vIE9wdGlvbnMgdG8gdXNlIGlmIHR5cGUtc3BlY2lmaWMgZnVuY3Rpb24gaXMgbm90IGRlZmluZWQgZXhjZXB0IGZvciBudWxsIGFuZCBzdHJpbmcgdmFsdWVzLlxyXG4gICAgLy8gVGhpcyBpcyBhbHNvIHVzZWQgZm9yIGFycmF5IGVsZW1lbnRzIGlmIGFyckl0ZW1GdW5jIGlzIG5vdCBkZWZpbmVkLlxyXG4gICAgYW55PzogVjJTT3B0aW9ucztcclxuXHJcbiAgICAvLyBPcHRpb25zIHRvIHVzZSB0byBjb252ZXJ0IGVhY2ggYXJyYXkgaXRlbSAtIHVzZWQgb25seSBpZiBgYXJyYCBpcyBub3QgZGVmaW5lZFxyXG4gICAgaXRlbT86IFYyU09wdGlvbnM7XHJcblxyXG4gICAgLy8gU2VwYXJhdG9yIGZvciBhcnJheSBpdGVtcyB1c2VkIHdpdGggdGhlIGl0ZW0gb3Igb2JqIHByb3BlcnRpZXMuIElmIG5vdCBzcGVjaWZpZWQsIGFcclxuICAgIC8vIHNpbmdsZSBzcGFjZSB3aWxsIGJlIHVzZWQuXHJcbiAgICBzZXA/OiBzdHJpbmc7XHJcblxyXG4gICAgLy8gRmxhZyBpbmRpY2F0aW5nIHRoYXQgdGhpcyBvcHRpb24gb2JqZWN0IHNob3VsZCBiZSBwYXNzZWQgcmVjdXJzaXZlbHkgaW50byBhcnJheXMgd2l0aGluXHJcbiAgICAvLyBhcnJheXMuXHJcbiAgICByZWN1cnNpdmU/OiBib29sZWFuO1xyXG59O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgYSB2YWx1ZSBvZiBhbiBhcmJpdHJhcnkgdHlwZSB0byBhIHNpbmdsZSBzdHJpbmcuIFRoZSBvcHRpb25zIHBhcmFtZXRlclxyXG4gKiBjYW4gZGVmaW5lIGhvdyBzcGVjaWZpYyB0eXBlcyBhcmUgY29udmVydGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHYycyA9ICh2YWw6IGFueSwgb3B0aW9ucz86IFYyU09wdGlvbnMpOiBzdHJpbmcgPT5cclxue1xyXG4gICAgLy8gaWYgb3B0aW9ucyBpcyBub3Qgc3BlY2lmaWVkLCBkbyBzdGFuZGFyZCBwcm9jZXNzaW5nXHJcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsKVxyXG4gICAge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsKSlcclxuICAgICAgICAgICAgcmV0dXJuIGEycyggdmFsKTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgICAgIHJldHVybiB2MnModmFsKCkpO1xyXG4gICAgICAgIGVsc2UgaWYgKHZhbCA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsW3N5bVYyU10gPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICAgICAgcmV0dXJuIHZhbFtzeW1WMlNdKCk7XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbC5mbiA9PT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgcmV0dXJuIGZkbzJzKCB2YWwpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHZhbC50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRvIGRpZmZlcmVudCB0aGluZ3MgZm9yIGRpZmZlcmVudCB0eXBlcyBvZiBvcHRpb25zXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gXCJudW1iZXJcIilcclxuICAgICAgICByZXR1cm4gd2tmW29wdGlvbnNdID8gd2tmW29wdGlvbnNdKHZhbCkgOiBcIlwiO1xyXG4gICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIHJldHVybiBvcHRpb25zKCB2YWwpO1xyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIC8vIHByb2Nlc3Npbmcgd2l0aCBvcHRpb25zLiBGb3IgYWxsIHR5cGVzIGV4Y2VwdCBudWxsIGFuZCBzdHJpbmcsIGlmIHRoZSB0eXBlLXNwZWNpZmljXHJcbiAgICAgICAgLy8gcHJvcGVydHkgaXMgbm90IGRlZmluZWQsIHVzZSBvcHRpb25zLmFueSBpZiBkZWZpbmVkLlxyXG4gICAgICAgIGxldCBuZXdPcHRpb25zOiBWMlNPcHRpb25zIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBpZiAodmFsID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm5pbCA/IHR5cGVvZiBvcHRpb25zLm5pbCA9PT0gXCJzdHJpbmdcIiA/IG9wdGlvbnMubmlsIDogb3B0aW9ucy5uaWwoIHZhbCkgOiBcIlwiO1xyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgIG5ld09wdGlvbnMgPSBvcHRpb25zLm51bSA/PyBvcHRpb25zLmFueTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgICAgIHJldHVybiB2MnMoIHZhbCgpKTtcclxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoIHZhbC5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuYXJyID09PSBcIm9iamVjdFwiKSAvLyB0aGlzIGNhbiBhbHNvIGJlIGFuIGFycmF5XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdDJzKCB2YWwsIG9wdGlvbnMuYXJyLCBvcHRpb25zLnNlcClcclxuICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5hcnIyICYmIEFycmF5LmlzQXJyYXkodmFsWzBdKSlcclxuICAgICAgICAgICAgICAgIG5ld09wdGlvbnMgPSBvcHRpb25zLmFycjI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuYXJyKVxyXG4gICAgICAgICAgICAgICAgbmV3T3B0aW9ucyA9IG9wdGlvbnMuYXJyO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYTJzKCB2YWwsIG9wdGlvbnMuaXRlbSA/PyBvcHRpb25zLmFueSA/PyAob3B0aW9ucy5yZWN1cnNpdmUgPyBvcHRpb25zIDogdW5kZWZpbmVkKSwgb3B0aW9ucy5zZXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWxbc3ltVjJTXSA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbFtzeW1WMlNdKCk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWwuZm4gPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmRvMnMoIHZhbCk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMub2JqIHx8IG9wdGlvbnMuYW55KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLm9iaikpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8ycyggdmFsLCBvcHRpb25zLm9iaiwgb3B0aW9ucy5zZXApO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld09wdGlvbnMgPSBvcHRpb25zLm9iaiA/PyBvcHRpb25zLmFueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgIG5ld09wdGlvbnMgPSBvcHRpb25zLnN0ciA/PyBvcHRpb25zLmFueTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcImJvb2xlYW5cIilcclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuYm9vbCA/IG9wdGlvbnMuYm9vbCggdmFsKSA6IHZhbC50b1N0cmluZygpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcblxyXG4gICAgICAgIHJldHVybiB2MnMoIHZhbCwgbmV3T3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxud2tmW1dLRi5EZWZhdWx0XSA9IHYycztcclxud2tmW1dLRi5PbmVPck1hbnlXaXRoQ29tbWFdID0gdiA9PiB2MnMoIHYsIHsgc2VwOiBcIixcIiB9KTtcclxud2tmW1dLRi5PbmVPck1hbnlXaXRoU2xhc2hdID0gdiA9PiB2MnMoIHYsIHsgc2VwOiBcIi9cIiB9KTtcclxud2tmW1dLRi5RdW90ZWRdID0gdiA9PiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIiA/IGBcIiR7dn1cImAgOiB2MnModik7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gYXJyYXkgdG8gYSBzaW5nbGUgc3RyaW5nIGJ5IGNvbnZlcnRpbmcgZXZlcnkgaXRlbSB1c2luZyB0aGUgZ2l2ZW4gb3Rpb25zXHJcbiAqIGFuZCBqb2luaW5nIHRoZSByZXN1bHRzIHdpdGggdGhlIGdpdmVuIGRlbGltaXRlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBhMnMgPSAodmFsOiBhbnlbXSwgb3B0aW9ucz86IFYyU09wdGlvbnMsIHNlcGFyYXRvcjogc3RyaW5nID0gXCIgXCIpOiBzdHJpbmcgPT5cclxuICAgICF2YWwgfHwgdmFsLmxlbmd0aCA9PT0gMFxyXG4gICAgICAgID8gXCJcIlxyXG4gICAgICAgIDogdmFsLm1hcCggdiA9PiB2MnMoIHYsIG9wdGlvbnMpKS5maWx0ZXIoIHYgPT4gISF2KS5qb2luKCBzZXBhcmF0b3IpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIGdpdmVuIGFycmF5IHRvIGEgc2luZ2xlIHN0cmluZyBieSBjb252ZXJ0aW5nIGV2ZXJ5IGl0ZW0gdXNpbmcgdGhlIGdpdmVuIG90aW9uc1xyXG4gKiBhbmQgam9pbmluZyB0aGUgcmVzdWx0cyB3aXRoIHRoZSBnaXZlbiBkZWxpbWl0ZXIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdDJzID0gKHZhbDogYW55W10sIG9wdGlvbnM6IFYyU09wdGlvbnNbXSB8IFQyU09wdGlvbnMsIHNlcGFyYXRvcjogc3RyaW5nID0gXCIgXCIpOiBzdHJpbmcgPT5cclxue1xyXG4gICAgbGV0IHYyc09wdGlvbnMgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMpID8gb3B0aW9ucyA6IChvcHRpb25zW3ZhbC5sZW5ndGhdID8/IG9wdGlvbnMuYW55KTtcclxuICAgIGlmICghdjJzT3B0aW9ucylcclxuICAgICAgICByZXR1cm4gYTJzKCB2YWwsIHVuZGVmaW5lZCwgc2VwYXJhdG9yKTtcclxuXHJcbiAgICBsZXQgYnVmOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgZm9yKCBsZXQgaSA9IDA7IGkgPCB2MnNPcHRpb25zLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGJ1Zi5wdXNoKCB2MnMoIHZhbFtpXSwgdjJzT3B0aW9uc1tpXSkpO1xyXG5cclxuICAgIHJldHVybiBidWYuZmlsdGVyKCB2ID0+ICEhdikuam9pbihzZXBhcmF0b3IpO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QgdG8gc3RyaW5nIGJ5IGNvbnZlcnRpbmcgZWFjaCBwcm9wZXJ0eSBmcm9tIHRoZSBvcHRpb25zXHJcbiAqIGFycmF5IGFuZCBqb2luaW5nIHRoZW0gdXNpbmcgdGhlIGdpdmVuIHNlcGFyYXRvci5cclxuICogQHBhcmFtIHZhbCBPYmplY3QgdG8gY29udmVydCB0byBzdHJpbmdcclxuICogQHBhcmFtIG9wdGlvbnMgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgb3IgdHVwbGVzIHdpdGggcHJvcGVydHkgbmFtZXMsIG9wdGlvbnMgYW5kIHByZWZpeGVzLlxyXG4gKiBAcGFyYW0gc2VwYXJhdG9yIFNlcGFyYXRvciBjaGFyYWN0ZXIuXHJcbiAqIEBwYXJhbSBkZWZhdWx0T3B0aW9ucyAtIFYyU09wdGlvbnMgZm9yIHRob3NlIHByb3BlcnRpZXMgaW4gdGhlIFwicGFyYW1zXCIgYXJyYXkgdGhhdCBkb24ndFxyXG4gKiBkZWZpbmUgdGhlaXIgb3duLiBUaGlzIHNob3VsZCBiZSB1c2VkIGluIHRoZSBjYXNlIHdoZW4gYWxsIGZ1bmN0aW9uIHBhcmFtZXRlcnMgYXJlIG9mIHRoZVxyXG4gKiBzYW1lIHR5cGVcclxuICogQHBhcmFtIGRlZmF1bHRQcmVmaXggLSBwcmVmaXggdG8gdXNlIGZvciB0aG9zZSBwcm9wZXJ0aWVzIGluIHRoZSBcInBhcmFtc1wiIGFycmF5IHRoYXQgZG9uJ3RcclxuICogZGVmaW5lIHRoZWlyIG93biBwcmVmaXhcclxuICovXHJcbmV4cG9ydCBjb25zdCBvMnMgPSAodmFsOiB7W3A6c3RyaW5nXTogYW55fSwgb3B0aW9uczogUDJTT3B0aW9ucywgc2VwYXJhdG9yPzogc3RyaW5nLFxyXG4gICAgZGVmYXVsdE9wdGlvbnM/OiBWMlNPcHRpb25zLCBkZWZhdWx0UHJlZml4Pzogc3RyaW5nKTogc3RyaW5nID0+XHJcbntcclxuICAgIGlmICh2YWwgPT0gbnVsbClcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuXHJcbiAgICBsZXQgcGFyYW1zOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgZm9yKCBsZXQgbmFtZU9yVHVwbGUgb2Ygb3B0aW9ucylcclxuICAgIHtcclxuICAgICAgICAvLyBnZXQgdGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IGluIHRoZSB2YWx1ZSB0byBiZSBjb252ZXJ0ZWQgYW5kIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlO1xyXG4gICAgICAgIC8vIGlmIHRoZSBwcm9wZXJ0aWVzIHZhbHVlIGlzIG5vdCBkZWZpbmVkLCBza2lwIGl0LlxyXG4gICAgICAgIGxldCBwcm9wTmFtZSA9IHR5cGVvZiBuYW1lT3JUdXBsZSA9PT0gXCJzdHJpbmdcIiA/IG5hbWVPclR1cGxlIDogbmFtZU9yVHVwbGVbMF07XHJcbiAgICAgICAgbGV0IHByb3BWYWwgPSB2YWxbcHJvcE5hbWVdO1xyXG4gICAgICAgIGlmIChwcm9wVmFsID09IG51bGwpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAvLyBjaGVjayB3aGV0aGVyIHdlIGhhdmUgYSBwcmVmaXhcclxuICAgICAgICBsZXQgcHJlZml4ID0gdHlwZW9mIG5hbWVPclR1cGxlID09PSBcInN0cmluZ1wiID8gZGVmYXVsdFByZWZpeCA6IG5hbWVPclR1cGxlWzJdO1xyXG4gICAgICAgIGlmIChwcmVmaXgpXHJcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoKCBwcmVmaXgpO1xyXG5cclxuICAgICAgICBwYXJhbXMucHVzaCggdjJzKCBwcm9wVmFsLCB0eXBlb2YgbmFtZU9yVHVwbGUgPT09IFwic3RyaW5nXCIgPyBkZWZhdWx0T3B0aW9ucyA6IG5hbWVPclR1cGxlWzFdKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhcmFtcy5maWx0ZXIoIHYgPT4gISF2KS5qb2luKCBzZXBhcmF0b3IgPz8gXCIgXCIpO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIFR5cGUgcmVwcmVzZW50aW5nIGFuIGFycmF5IG9mIHZhbHVlcyBvciB0d28taXRlbSB0dXBsZXMgd2hlcmUgdGhlIGl0ZW0gaXMgYSB2YWx1ZSBhbmQgdGhlXHJcbi8vIHNlY29uZCBpdGVtIGlzIHRoZSBWMlNPcHRpb25zIG9iamVjdCBkZXRlcm1pbmluZyBob3cgdGhpcyB2YWx1ZSBzaG91bGQgYmUgc2VyaWFsaXplZC5cclxuZXhwb3J0IHR5cGUgUGFyYW1MaXN0V2l0aE9wdGlvbnMgPSAoYW55IHwgW2FueSwgVjJTT3B0aW9ucz9dKVtdO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIGdpdmVuIGFycmF5IG9mIHZhbHVlcyB0byBhIHNpbmdsZSBzdHJpbmcgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgb3B0aW9ucyBhbmRcclxuICogdXNpbmcgdGhlIGdpdmVuIHNlcGFyYXRvci4gRm9yIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXksIHRoZSB2MnMgZnVuY3Rpb24gaXMgY2FsbGVkIHRvIGNvbnZlcnRcclxuICogaXQgdG8gc3RyaW5nLlxyXG4gKiBAcGFyYW0gdmFsdWVzXHJcbiAqIEBwYXJhbSBzZXBhcmF0b3JcclxuICovXHJcbmV4cG9ydCBjb25zdCBtdjJzID0gKHZhbHVlczogUGFyYW1MaXN0V2l0aE9wdGlvbnMsIHNlcGFyYXRvcjogc3RyaW5nID0gXCIgXCIpOiBzdHJpbmcgPT5cclxue1xyXG4gICAgaWYgKHZhbHVlcyA9PSBudWxsIHx8IHZhbHVlcy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcblxyXG4gICAgbGV0IGFycjogc3RyaW5nW10gPSBbXTtcclxuICAgIGZvciggbGV0IGl0ZW0gb2YgdmFsdWVzKVxyXG4gICAge1xyXG4gICAgICAgIGxldCB2YWw6IGFueTtcclxuICAgICAgICBsZXQgb3B0aW9uczogVjJTT3B0aW9ucyB8IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhbCA9IGl0ZW1bMF07XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSBpdGVtWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHZhbCA9IGl0ZW07XHJcblxyXG4gICAgICAgIGlmICh2YWwgfHwgKG9wdGlvbnMgJiYgKG9wdGlvbnMgYXMgYW55KS5uaWwpKVxyXG4gICAgICAgICAgICBhcnIucHVzaCggdjJzKCB2YWwsIG9wdGlvbnMpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyLmZpbHRlciggdiA9PiAhIXYpLmpvaW4oIHNlcGFyYXRvcik7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZXMgYXMgcGFyYW1ldGVycyB0byB0aGUgZ2l2ZW4gQ1NTIGZ1bmN0aW9uIGludm9jYXRpb24uXHJcbiAqIEBwYXJhbSBuYW1lXHJcbiAqIEBwYXJhbSB2YWx1ZXNcclxuICogQHBhcmFtIHNlcGFyYXRvclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGYycyA9IChuYW1lOiBzdHJpbmcsIHZhbHVlczogUGFyYW1MaXN0V2l0aE9wdGlvbnMsIHNlcGFyYXRvciA9IFwiLFwiKSA9PlxyXG4gICAgYCR7bmFtZX0oJHttdjJzKCB2YWx1ZXMsIHNlcGFyYXRvcil9KWA7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgdGFnMnMgaXMgYSB0YWcgZnVuY3Rpb24gaGVscGVyIHRoYXQgY29udmVydHMgdGhlIHRlbXBsYXRlIHN0cmluZyB3aXRoXHJcbiAqIHBhcmFtZXRlcnMgdG8gYSBzdHJpbmcgdXNpbmcgdGhlIGdpdmVuIG9wdGlvbnMgb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHRhZzJzID0gKHBhcnRzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgcGFyYW1zOiBhbnlbXSwgb3B0aW9ucz86IFYyU09wdGlvbnMpOiBzdHJpbmcgPT5cclxue1xyXG4gICAgLy8gbnVtYmVyIG9mIHBhcmFtZXRlcnMgaXMgYWx3YXlzIDEgbGVzcyB0aGFuIHRoZSBudW1iZXIgb2Ygc3RyaW5nIHBhcnRzXHJcbiAgICBsZXQgcGFyYW1zTGVuID0gcGFyYW1zLmxlbmd0aDtcclxuICAgIGlmIChwYXJhbXNMZW4gPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHBhcnRzWzBdO1xyXG5cclxuICAgIGxldCBzID0gXCJcIjtcclxuICAgIGZvciggbGV0IGkgPSAwOyBpIDwgcGFyYW1zTGVuOyBpKyspXHJcbiAgICAgICAgcyArPSBwYXJ0c1tpXSArIHYycyggcGFyYW1zW2ldLCBvcHRpb25zKTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIGxhc3QgcGFydFxyXG4gICAgcmV0dXJuIHMgKyBwYXJ0c1twYXJhbXNMZW5dO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBPYmplY3QgdGhhdCBzcGVjaWZ5aW5nIHN0cmluZyBzZXJpYWxpemF0aW9uIG9wdGlvbnMgZm9yIHByb3BlcnRpZXMgaW4gYSBwcm9wZXJ0eSBzZXQuIEVhY2hcclxuICogcHJvcGVydHkgb2YgYSBwcm9wZXJ0eSBzZXQgd2lsbCBiZSBzZXJpYWxpemVkIGFjY29yZGluZyB0byB0aGUgVjJTT3B0aW9ucyBwYXJhbWV0ZXIgaW4gdGhpc1xyXG4gKiBvYmplY3Q7IGlmIHRoZSBwcm9wZXJ0eSBkb2VzIG5vdCBhcHBlYXIgaW4gdGhpcyBvYmplY3QsIHRoZSB2MnMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgZm9yIGl0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUHJvcFNldEluZm9zID0geyBbSzogc3RyaW5nXTogVjJTT3B0aW9ucyB9O1xyXG5cclxuLyoqXHJcbiAqIE9iamVjdCB0aGF0IHNwZWNpZmllcyBvcHRpb25zIGZvciBzdHJpbmcgc2VyaWFsaXphdGlvbiBvZiBhIHByb3BlcnR5IHNldC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFByb3BTZXQyU09wdGlvbnMgPSB7XHJcbiAgICBwcmVmaXg/OiBzdHJpbmc7XHJcbiAgICBzdWZmaXg/OiBzdHJpbmc7XHJcbiAgICBzZXBhcmF0b3I/OiBzdHJpbmc7XHJcbiAgICBwcm9wRnVuYz86IChkYXNoTmFtZTogc3RyaW5nLCBjYW1lbE5hbWU6IHN0cmluZywgdmFsOiBhbnksIG9wdGlvbnM6IFYyU09wdGlvbnMpID0+IHN0cmluZztcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBwcm9wZXJ0eSBzZXQgb2JqZWN0IHRvIHRoZSBDU1Mgc3R5bGUgc3RyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHByb3BTZXQycyA9ICh2YWw6IGFueSwgaW5mb3M6IFByb3BTZXRJbmZvcywgb3B0aW9ucz86IFByb3BTZXQyU09wdGlvbnMpOiBzdHJpbmcgPT5cclxuICAgIHYycyggdmFsLCB7XHJcbiAgICAgICAgb2JqOiB2ID0+IHtcclxuICAgICAgICAgICAgbGV0IHByb3BOYW1lcyA9IE9iamVjdC5rZXlzKCB2KTtcclxuICAgICAgICAgICAgaWYgKHByb3BOYW1lcy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGxldCBmdW5jID0gb3B0aW9ucz8ucHJvcEZ1bmMgPz8gcHJvcEluUHJvcFNldDJzO1xyXG4gICAgICAgICAgICBsZXQgYXJyID0gcHJvcE5hbWVzLm1hcCggKHByb3BOYW1lKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGFzaFByb3BOYW1lID0gY2FtZWxUb0Rhc2gocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNhbWVsUHJvcE5hbWUgPSBkYXNoVG9DYW1lbChwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyggZGFzaFByb3BOYW1lLCBjYW1lbFByb3BOYW1lLCB2W3Byb3BOYW1lXSwgaW5mb3NbY2FtZWxQcm9wTmFtZV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zPy5wcmVmaXggPz8gXCJcIikgKyBgJHthcnIuam9pbiggb3B0aW9ucz8uc2VwYXJhdG9yID8/IFwiO1wiKX1gICsgKG9wdGlvbnM/LnN1ZmZpeCA/PyBcIlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbi8vIGNvbnZlcnQgdGhlIHZhbHVlIHRvIHN0cmluZyBiYXNlZCBvbiB0aGUgaW5mb3JtYXRpb24gb2JqZWN0IGZvciB0aGUgcHJvcGVydHkgKGlmIGRlZmluZWQpXHJcbmNvbnN0IHByb3BJblByb3BTZXQycyA9IChkYXNoTmFtZTogc3RyaW5nLCBjYW1lbE5hbWU6IHN0cmluZywgdmFsOiBhbnksIG9wdGlvbnM6IFYyU09wdGlvbnMpOiBzdHJpbmcgPT5cclxuICAgIGAke2Rhc2hOYW1lfTokeyB2MnMoIHZhbCwgb3B0aW9ucyl9YDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgdGhhdCBkZWZpbmVzIGhvdyB0byBzZXJpYWxpemUgYSB2YWx1ZSBmb3IgYW4gZW50cnkgaW4gdGhlIGZ1bmN0aW9uIGRlZmluaXRpb25zIG9iamVjdC5cclxuICogVGhlIHZhbHVlIGNhbiBiZSBvZiBvbmUgb2YgdGhlIGZvbGxvd2luZyB0eXBlcyB3aXRoIGVhY2ggY29ycmVzcG9uZGluZyB0byBhIGNlcnRhaW4gd2F5IG9mXHJcbiAqIHN0cmluZyBzZXJpYWxpemF0aW9uOlxyXG4gKiAgIC0gZnVuY3Rpb24gLSB0aGUgZnVuY3Rpb24gaXMgaW52b2tlZC5cclxuICogICAtIG51bWJlciAtIGFsbCBvYmplY3QgcHJvcGVydGllcyBleGNlcHQgXCJmblwiIGFyZSBjb252ZXJ0ZWQgdXNpbmcgdGhlIGNvcnJlc3BvbmRpbmcgZnVuY3Rpb25cclxuICogICAgIGZyb20gdGhlIFdLRiBlbnVtZXJhdGlvbi4gU2luY2UgdGhlIGVudW1lcmF0aW5nIG9yZGVyIG9mIHRoZSBwcm9wZXJ0aWVzIGlzIGluZGV0ZXJtaW5hdGUsXHJcbiAqICAgICB0aGlzIG9wdGlvbiBpcyBvbmx5IGdvb2QgZm9yIGZ1bmN0aW9ucyB3aXRoIGEgc2luZ2xlIHBhcmFtZXRlci5cclxuICogICAtIGFycmF5IG9mIFAyU09wdGlvbiB0eXBlcyAtIG8ycyBpcyBpdm9rZWRcclxuICogICAtIG9iamVjdCAtIG1heSBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICogICAgIC0gb3B0aW9uYWwgXCJmblwiIC0gcmVwbGFjZXMgZnVuY3Rpb24gbmFtZS5cclxuICogICAgIC0gb3B0aW9uYWwgXCJwXCIgLSBhcnJheSBvZiBQMlNPcHRpb24gdHlwZXMsIGZvciB3aGljaCBvMnMgaXMgaW52b2tlZC5cclxuICogICAgIC0gb3B0aW9uYWwgXCJmXCIgLSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGxpc3Qgb2YgcGFyYW1ldGVycy5cclxuICogICAgIC0gZWl0aGVyIFwicFwiIG9yIFwiZlwiIG11c3QgYmUgcHJlc2VudCBhbmQgXCJwXCIgaGFzIHByZWNlZGVuY2UuXHJcbiAqICAgICAtIG9wdGlvbmFsIFwic2VwXCIgZm9yIHNlcGFyYXRvciAoZGVmYXVsdCBpcyBcIixcIikuXHJcbiAqICAgICAtIG9wdGlvbmFsIFwiZG9cIiAtIGRlZmluZXMgVjJTT3B0aW9ucyBmb3IgdGhvc2UgcHJvcGVydGllcyBpbiB0aGUgXCJwYXJhbXNcIiBhcnJheSB0aGF0IGRvbid0XHJcbiAqICAgICAgIGRlZmluZSB0aGVpciBvd24uIFRoaXMgc2hvdWxkIGJlIHVzZWQgaW4gdGhlIGNhc2Ugd2hlbiBhbGwgZnVuY3Rpb24gcGFyYW1ldGVycyBhcmUgb2YgdGhlXHJcbiAqICAgICAgIHNhbWUgdHlwZVxyXG4gKiAgICAgLSBvcHRpb25hbCBcImRwXCIgLSBkZWZhdWx0IHByZWZpeCB0byB1c2UgZm9yIHRob3NlIHByb3BlcnRpZXMgaW4gdGhlIFwicGFyYW1zXCIgYXJyYXkgdGhhdFxyXG4gKiAgICAgICBkb24ndCBkZWZpbmUgdGhlaXIgb3duIHByZWZpeFxyXG4gKi9cclxudHlwZSBGZG9PcHRpb25zID0gQW55VG9TdHJpbmdGdW5jIHwgbnVtYmVyIHwgUDJTT3B0aW9ucyB8XHJcbiAgICB7XHJcbiAgICAgICAgZm4/OiBzdHJpbmcgfCBBbnlUb1N0cmluZ0Z1bmMsXHJcbiAgICAgICAgcD86IFAyU09wdGlvbnMsXHJcbiAgICAgICAgZj86IEFueVRvU3RyaW5nRnVuYyxcclxuICAgICAgICBzPzogc3RyaW5nLFxyXG4gICAgICAgIGRvPzogVjJTT3B0aW9ucyxcclxuICAgICAgICBkcD86IHN0cmluZ1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4vLyBUaGlzIG9iamVjdCBpcyBmaWxsZWQgaW4gaW4gdGhlIFh4eEFQSSBmaWxlcyB3aGVyZSB0aGUgZnVuY3Rpb25zIGNvcnJlc3BvbmRpbmcgdG8gQ1NTIGZ1bmN0aW9uc1xyXG4vLyBhcmUgZGVmaW5lZC5cclxuZXhwb3J0IGNvbnN0IGZkbzogeyBbZm46IHN0cmluZ106IEZkb09wdGlvbnMgfSA9IHt9O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZnVuY3Rpb24gZGVmaW5pdGlvbiBvYmplY3QgdG8gc3RyaW5nLiBDb252ZXJzaW9uIGlzIHBlcmZvcm1lZCBhY2NvcmRpbmdcclxuICogdG8gdGhlIHR5cGUgZm91bmQgaW4gdGhlIFwiZmRvXCIgb2JqZWN0IGZvciB0aGUgcHJvcGVydHkgbmFtZSBlcXVhbCB0byB0aGUgXCJmblwiIHByb3BlcnR5IG9mXHJcbiAqIHRoZSBnaXZlbiB2YWx1ZS4gSWYgbm8gc3VjaCBwcm9wZXJ0eSBleGlzdCBpbiB0aGUgXCJmZG9cIiBvYmplY3QsIGFsbCBvYmplY3QncyBwcm9wZXJ0aWVzIGV4Y2VwdFxyXG4gKiBcImZuXCIgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gc3RyaW5ncyB1c2luZyB2MnMgYW5kIGNvbmNhdGVuYXRlZCB3aXRoIGNvbW1hLlxyXG4gKlxyXG4gKiBAcGFyYW0gdmFsIEZ1bmN0aW9uIGRlZmluaXRpb24gb2JqZWN0IHRoYXQgaGFzIHRoZSBcImZuXCIgcHJvcGVydHkgZGVmaW5pbmcgdGhlIGZ1bmN0aW9uIG5hbWUuXHJcbiAqIEByZXR1cm5zIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBDU1MgZnVuY3Rpb24gaW52b2NhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBmZG8ycyA9ICh2YWw6IElDc3NGdW5jT2JqZWN0KTogc3RyaW5nID0+XHJcbntcclxuICAgIGxldCBvcHRpb25zID0gZmRvW3ZhbC5mbl07XHJcbiAgICBpZiAoIW9wdGlvbnMpXHJcbiAgICAgICAgcmV0dXJuIGdvT3ZlclByb3BzKHZhbCk7XHJcbiAgICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJudW1iZXJcIilcclxuICAgICAgICByZXR1cm4gZ29PdmVyUHJvcHMoIHZhbCwgb3B0aW9ucyk7XHJcbiAgICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIHJldHVybiBvcHRpb25zKCB2YWwpO1xyXG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSlcclxuICAgICAgICByZXR1cm4gYCR7dmFsLmZufSgke28ycyggdmFsLCBvcHRpb25zLCBcIixcIil9KWA7XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcclxuICAgICAgICBmbiA9ICFmbiA/IHZhbC5mbiA6IHR5cGVvZiBmbiA9PT0gXCJzdHJpbmdcIiA/IGZuIDogZm4odmFsKTtcclxuICAgICAgICByZXR1cm4gb3B0aW9ucy5wXHJcbiAgICAgICAgICAgID8gYCR7Zm59KCR7bzJzKCB2YWwsIG9wdGlvbnMucCwgb3B0aW9ucy5zID8/IFwiLFwiLCBvcHRpb25zLmRvLCBvcHRpb25zLmRwKX0pYFxyXG4gICAgICAgICAgICA6IG9wdGlvbnMuZlxyXG4gICAgICAgICAgICAgICAgPyBgJHtmbn0oJHtvcHRpb25zLmYodmFsKX0pYFxyXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBnb2VzIG92ZXIgdGhlIHByb3BzIG9mIHRoZSBnaXZlbiBvYmplY3QgZXhjZXB0IHRoZSBcImZuXCIgcHJvcGVydHksXHJcbiAqIHNlcmlhbGl6ZXMgYWxsIHRoZSBwcm9wcyB1c2luZyB0aGUgZ2l2ZW4gb3B0aW9ucyBhbmQgY29uY2F0ZW5hdGVzIHRoZW0gd2l0aCB0aGUgZ2l2ZW5cclxuICogc2VwYXJhdG9yIChjb21tYSBieSBkZWZhdWx0KS5cclxuICogQHBhcmFtIHZhbFxyXG4gKiBAcGFyYW0gb3B0aW9uc1xyXG4gKiBAcGFyYW0gc2VwXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5jb25zdCBnb092ZXJQcm9wcyA9ICh2YWw6IElDc3NGdW5jT2JqZWN0LCBvcHRpb25zPzogVjJTT3B0aW9ucywgc2VwPzogc3RyaW5nKTogc3RyaW5nID0+XHJcbntcclxuICAgIGxldCBidWY6IHN0cmluZ1tdID0gW107XHJcbiAgICBmb3IoIGxldCBwIGluIHZhbClcclxuICAgIHtcclxuICAgICAgICBpZiAocCAhPT0gXCJmblwiKVxyXG4gICAgICAgICAgICBidWYucHVzaCggdjJzKCB2YWxbcF0sIG9wdGlvbnMpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYCR7dmFsLmZufSgke2J1Zi5maWx0ZXIodj0+ISF2KS5qb2luKCBzZXAgPz8gXCIsXCIpfSlgO1xyXG59XHJcblxyXG5cclxuXHJcbiIsImltcG9ydCB7SUFuaW1hdGlvblJ1bGUsIEFuaW1hdGlvbkZyYW1lLCBBbmltYXRpb25XYXlwb2ludCwgSUFuaW1hdGlvbkZyYW1lUnVsZSwgSVN0eWxlRGVmaW5pdGlvbn0gZnJvbSBcIi4uL2FwaS9SdWxlVHlwZXNcIlxyXG5pbXBvcnQge0FuaW1hdGlvblN0eWxlc2V0fSBmcm9tIFwiLi4vYXBpL1N0eWxlc2V0c1wiO1xyXG5pbXBvcnQge1J1bGUsIElNaW1jc3NSdWxlQmFnfSBmcm9tIFwiLi9SdWxlXCJcclxuaW1wb3J0IHtTdHlsZVJ1bGV9IGZyb20gXCIuL1N0eWxlUnVsZXNcIjtcclxuaW1wb3J0IHt2MnMsIFdLRn0gZnJvbSBcIi4uL2ltcGwvVXRpbHNcIjtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBBbmltYXRpb25SdWxlIGNsYXNzIGRlc2NyaWJlcyBhIEBrZXlmcmFtZXMgQ1NTIHJ1bGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uUnVsZSBleHRlbmRzIFJ1bGUgaW1wbGVtZW50cyBJQW5pbWF0aW9uUnVsZVxyXG57XHJcblx0cHVibGljIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbiwgZnJhbWVzPzogQW5pbWF0aW9uRnJhbWVbXSxcclxuICAgICAgICBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJQW5pbWF0aW9uUnVsZSlcclxuXHR7XHJcblx0XHRzdXBlcihzZCk7XHJcblxyXG5cdFx0aWYgKGZyYW1lcylcclxuXHRcdFx0dGhpcy5mcmFtZVJ1bGVzID0gZnJhbWVzLm1hcCggZnJhbWUgPT4gbmV3IEFuaW1hdGlvbkZyYW1lUnVsZSggc2QsIGZyYW1lWzBdLCBmcmFtZVsxXSkpO1xyXG5cclxuXHRcdHRoaXMubmFtZU92ZXJyaWRlID0gbmFtZU92ZXJyaWRlO1xyXG5cdH1cclxuXHJcblxyXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgdG8gY29udmVydCBhbiBvYmplY3QgdG8gYSBzdHJpbmcuIEFuaW1hdGlvbiBydWxlIHJldHVybnMgaXRzIG5hbWUuXHJcbiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMubmFtZTsgfVxyXG5cclxuXHJcblx0Ly8gUHJvY2Vzc2VzIHRoZSBnaXZlbiBydWxlLlxyXG5cdHB1YmxpYyBwcm9jZXNzKCBydWxlTmFtZTogc3RyaW5nIHwgbnVsbClcclxuXHR7XHJcblx0XHRzdXBlci5wcm9jZXNzKCBydWxlTmFtZSk7XHJcblxyXG5cdFx0dGhpcy5uYW1lID0gdGhpcy5yYy5nZXRTY29wZWROYW1lKCBydWxlTmFtZSwgdGhpcy5uYW1lT3ZlcnJpZGUpO1xyXG5cclxuXHRcdGZvciggbGV0IGtleWZyYW1lUnVsZSBvZiB0aGlzLmZyYW1lUnVsZXMpXHJcblx0XHRcdGtleWZyYW1lUnVsZS5wcm9jZXNzKCBudWxsKTtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0Ly8gSW5zZXJ0cyB0aGlzIHJ1bGUgaW50byB0aGUgZ2l2ZW4gcGFyZW50IHJ1bGUgb3Igc3R5bGVzaGVldC5cclxuXHRwdWJsaWMgaW5zZXJ0KCBydWxlQmFnOiBJTWltY3NzUnVsZUJhZyk6IHZvaWRcclxuXHR7XHJcblx0XHRpZiAoIXRoaXMuZnJhbWVSdWxlcylcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdGxldCBtaW1jc3NSdWxlID0gcnVsZUJhZy5hZGRLZXlmcmFtZXMoIHRoaXMubmFtZSk7XHJcbiAgICAgICAgaWYgKG1pbWNzc1J1bGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNzc1J1bGUgPSBtaW1jc3NSdWxlPy5jc3NSdWxlIGFzIENTU0tleWZyYW1lc1J1bGU7XHJcbiAgICAgICAgICAgIGZvciggbGV0IGZyYW1lUnVsZSBvZiB0aGlzLmZyYW1lUnVsZXMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIGFsdGhvdWdoIHRoZSBjc3NSdWxlIGluIHRoZSBmcmFtZSBpcyB0eXBlZCBhcyBDU1NTdHlsZVJ1bGUsIHdlIGtub3cgdGhhdCBpblxyXG4gICAgICAgICAgICAgICAgLy8gcHJhY3RpY2UsIGl0IGlzIG9mIHRoZSBDU1NLZXlmcmFtZVJ1bGUgdHlwZS5cclxuICAgICAgICAgICAgICAgIGZyYW1lUnVsZS5jc3NSdWxlID0gbWltY3NzUnVsZS5hZGRGcmFtZSggZnJhbWVSdWxlLnRvQ3NzKCkpPy5jc3NSdWxlIGFzIENTU1N0eWxlUnVsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG5cclxuXHJcblx0LyoqIFNPTSBrZXlmcmFtZXMgcnVsZSAqL1xyXG5cdHB1YmxpYyBjc3NSdWxlOiBDU1NLZXlmcmFtZXNSdWxlO1xyXG5cclxuXHQvKipcclxuXHQgKiBSdWxlJ3MgbmFtZSAtIHRoaXMgaXMgYSB1bmlxdWUgbmFtZSB0aGF0IGlzIGFzc2lnbmVkIGJ5IHRoZSBNaW1jc3MgaW5mcmFzdHVjdHVyZS4gVGhpcyBuYW1lXHJcblx0ICogZG9lc24ndCBoYXZlIHRoZSBwcmVmaXggdGhhdCBpcyB1c2VkIHdoZW4gcmVmZXJyaW5nIHRvIGNsYXNzZXMgKC4pLCBJRHMgKCMpIGFuZCBjdXN0b20gQ1NTXHJcblx0ICogcHJvcGVydGllcyAoLS0pLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcblxyXG5cdC8qKiBMaXN0IG9mIHN0eWxlIHJ1bGVzIHJlcHJlc2VudGluZyBhbmltYXRpb24gZnJhbWVzICovXHJcblx0cHVibGljIGZyYW1lUnVsZXM6IEFuaW1hdGlvbkZyYW1lUnVsZVtdO1xyXG5cclxuXHQvLyBOYW1lIG9yIG5hbWVkIG9iamVjdCB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBhIG5hbWUgZm9yIHRoaXMgcnVsZS4gSWYgdGhpcyBwcm9wZXJ0eVxyXG5cdC8vIGlzIG5vdCBkZWZpbmVkLCB0aGUgbmFtZSB3aWxsIGJlIHVuaXF1ZWx5IGdlbmVyYXRlZC5cclxuXHRwcml2YXRlIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElBbmltYXRpb25SdWxlO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgQW5pbWF0aW9uRnJhbWVSdWxlIGNsYXNzIHJlcHJlc2VudHMgYSBzaW5nbGUga2V5ZnJhbWUgY2xhdXNlIGluIHRoZSBhbmltYXRpb24gcnVsZS5cclxuICovXHJcbmNsYXNzIEFuaW1hdGlvbkZyYW1lUnVsZSBleHRlbmRzIFN0eWxlUnVsZSBpbXBsZW1lbnRzIElBbmltYXRpb25GcmFtZVJ1bGVcclxue1xyXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvciggc2Q6IElTdHlsZURlZmluaXRpb24sIHdheXBvaW50OiBBbmltYXRpb25XYXlwb2ludCxcclxuICAgICAgICBzdHlsZXNldD86IEFuaW1hdGlvblN0eWxlc2V0IHwgQW5pbWF0aW9uU3R5bGVzZXRbXSlcclxuXHR7XHJcblx0XHRzdXBlciggc2QsIHN0eWxlc2V0KTtcclxuXHRcdHRoaXMud2F5cG9pbnQgPSB3YXlwb2ludDtcclxuXHR9XHJcblxyXG5cdC8vIFJldHVybnMgdGhlIHNlbGVjdG9yIHBhcnQgb2YgdGhlIHN0eWxlIHJ1bGUuXHJcblx0cHVibGljIGdldFNlbCgpOiBzdHJpbmdcclxuXHR7XHJcblx0XHRyZXR1cm4gdjJzKCB0aGlzLndheXBvaW50LCB7IGFueTogV0tGLlBlcmNlbnQsIHNlcDogXCIsXCIgfSk7XHJcblx0fVxyXG5cclxuXHQvKiogSWRlbnRpZmllciBvZiB0aGUgd2F5cG9pbnQgKi9cclxuXHRwdWJsaWMgd2F5cG9pbnQ6IEFuaW1hdGlvbldheXBvaW50O1xyXG5cclxuXHQvKipcclxuICAgICAqIFNPTSBrZXlmcmFtZSBydWxlLiBBbHRob3VnaCB0aGUgY3NzUnVsZSBpbiB0aGUgZnJhbWUgaXMgdHlwZWQgYXMgQ1NTU3R5bGVSdWxlLCB3ZSBrbm93IHRoYXRcclxuICAgICAqIGluIHByYWN0aWNlLCBpdCBpcyBvZiB0aGUgQ1NTS2V5ZnJhbWVSdWxlIHR5cGUuXHJcbiAgICAgKi9cclxuXHRwdWJsaWMgZ2V0IGNzc0tleWZyYW1lUnVsZSgpOiBDU1NLZXlmcmFtZVJ1bGUgeyByZXR1cm4gdGhpcy5jc3NSdWxlIGFzIGFueSBhcyBDU1NLZXlmcmFtZVJ1bGU7IH07XHJcbn1cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IHtFeHRlbmRlZENvdW50ZXJTdHlsZXNldH0gZnJvbSBcIi4uL2FwaS9Db3VudGVyVHlwZXNcIjtcclxuaW1wb3J0IHtJQ291bnRlclJ1bGUsIElDb3VudGVyU3R5bGVSdWxlLCBJU3R5bGVEZWZpbml0aW9ufSBmcm9tIFwiLi4vYXBpL1J1bGVUeXBlc1wiXHJcbmltcG9ydCB7Y291bnRlclN0eWxlc2V0MnN9IGZyb20gXCIuLi9pbXBsL01pc2NJbXBsXCI7XHJcbmltcG9ydCB7SU1pbWNzc1J1bGVCYWcsIFJ1bGUsIFJ1bGVMaWtlfSBmcm9tIFwiLi9SdWxlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgQ291bnRlclJ1bGUgY2xhc3MgZGVzY3JpYmVzIGEgbmFtZWQgY291bnRlciBkZWZpbml0aW9uLiBVc2UgdGhpcyBydWxlIHRvIGNyZWF0ZVxyXG4gKiBjb3VudGVyIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBpbiBjb3VudGVyLWluY3JlbWVudCwgY291bnRlci1yZXNldCBhbmQgY291bnRlci1zZXQgc3R5bGVcclxuICogcHJvcGVydGllcy4gTm8gQ1NTIHJ1bGUgaXMgY3JlYXRlZCBmb3IgY291bnRlcnMgLSB0aGV5IGFyZSBuZWVkZWQgb25seSB0byBwcm92aWRlIHR5cGUtc2FmZVxyXG4gKiBjb3VudGVyIGRlZmluaXRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvdW50ZXJSdWxlIGV4dGVuZHMgUnVsZUxpa2UgaW1wbGVtZW50cyBJQ291bnRlclJ1bGVcclxue1xyXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvciggc2Q6IElTdHlsZURlZmluaXRpb24sIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElDb3VudGVyUnVsZSlcclxuXHR7XHJcbiAgICAgICAgc3VwZXIoc2QpO1xyXG5cdFx0dGhpcy5uYW1lT3ZlcnJpZGUgPSBuYW1lT3ZlcnJpZGU7XHJcblx0fVxyXG5cclxuXHJcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiB0aGUgb2JqZWN0IGlzIHNwZWNpZmllZCBhcyBhIHZhbHVlIG9mIGEgc3R5bGUgcHJvcGVydHkuXHJcbiAgICAvLyBXZSByZXR1cm4gdGhlIGNvdW50ZXIgbmFtZS5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5uYW1lOyB9XHJcblxyXG5cclxuXHQvLyBQcm9jZXNzZXMgdGhlIGdpdmVuIHJ1bGUuXHJcblx0cHVibGljIHByb2Nlc3MoIHJ1bGVOYW1lOiBzdHJpbmcgfCBudWxsKTogdm9pZFxyXG5cdHtcclxuXHRcdHRoaXMubmFtZSA9IHRoaXMucmMuZ2V0U2NvcGVkTmFtZSggcnVsZU5hbWUsIHRoaXMubmFtZU92ZXJyaWRlKTtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0LyoqXHJcblx0ICogUnVsZSdzIG5hbWUgLSB0aGlzIGlzIGEgdW5pcXVlIG5hbWUgdGhhdCBpcyBhc3NpZ25lZCBieSB0aGUgTWltY3NzIGluZnJhc3R1Y3R1cmUuIFRoaXMgbmFtZVxyXG5cdCAqIGRvZXNuJ3QgaGF2ZSB0aGUgcHJlZml4IHRoYXQgaXMgdXNlZCB3aGVuIHJlZmVycmluZyB0byBjbGFzc2VzICguKSwgSURzICgjKSBhbmQgY3VzdG9tIENTU1xyXG5cdCAqIHByb3BlcnRpZXMgKC0tKS5cclxuXHQgKi9cclxuXHRwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBOYW1lIG9mIHRoZSBjb3VudGVyICovXHJcblx0cHVibGljIGdldCBjb3VudGVyTmFtZSgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5uYW1lOyB9XHJcblxyXG5cdC8vIE5hbWUgb3IgbmFtZWQgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIGEgbmFtZSBmb3IgdGhpcyBydWxlLiBJZiB0aGlzIHByb3BlcnR5XHJcblx0Ly8gaXMgbm90IGRlZmluZWQsIHRoZSBuYW1lIHdpbGwgYmUgdW5pcXVlbHkgZ2VuZXJhdGVkLlxyXG5cdHByaXZhdGUgbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSUNvdW50ZXJSdWxlO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgQ291bnRlclN0eWxlUnVsZSBjbGFzcyBkZXNjcmliZXMgdGhlIENTUyBAbm91bnRlci1zdHlsZSBhdC1ydWxlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvdW50ZXJTdHlsZVJ1bGUgZXh0ZW5kcyBSdWxlIGltcGxlbWVudHMgSUNvdW50ZXJTdHlsZVJ1bGVcclxue1xyXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvciggc2Q6IElTdHlsZURlZmluaXRpb24sIGNvdW50ZXJTdHlsZXNldD86IEV4dGVuZGVkQ291bnRlclN0eWxlc2V0LFxyXG4gICAgICAgIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElDb3VudGVyU3R5bGVSdWxlKVxyXG5cdHtcclxuICAgICAgICBzdXBlcihzZCk7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyU3R5bGVzZXQgPSBjb3VudGVyU3R5bGVzZXQgPz8ge307XHJcblx0XHR0aGlzLm5hbWVPdmVycmlkZSA9IG5hbWVPdmVycmlkZTtcclxuXHR9XHJcblxyXG5cclxuXHJcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiB0aGUgb2JqZWN0IGlzIHNwZWNpZmllZCBhcyBhIHZhbHVlIGluIGEgc3R5bGUgcHJvcGVydHkgb3IgaW5cclxuICAgIC8vIGFub3RoZXIgY291bnRlciBzdHlsZSBydWxlLiBXZSByZXR1cm4gdGhlIGNvdW50ZXIgc3R5bGUgbmFtZS5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5uYW1lOyB9XHJcblxyXG5cclxuXHJcbiAgICAvLyBQcm9jZXNzZXMgdGhlIGdpdmVuIHJ1bGUuXHJcblx0cHVibGljIHByb2Nlc3MoIHJ1bGVOYW1lOiBzdHJpbmcgfCBudWxsKTogdm9pZFxyXG5cdHtcclxuXHRcdHRoaXMubmFtZSA9IHRoaXMucmMuZ2V0U2NvcGVkTmFtZSggcnVsZU5hbWUsIHRoaXMubmFtZU92ZXJyaWRlKTtcclxuXHR9XHJcblxyXG5cdC8vIEluc2VydHMgdGhpcyBydWxlIGludG8gdGhlIGdpdmVuIHBhcmVudCBydWxlIG9yIHN0eWxlc2hlZXQuXHJcblx0cHVibGljIGluc2VydCggcnVsZUJhZzogSU1pbWNzc1J1bGVCYWcpOiB2b2lkXHJcblx0e1xyXG5cdFx0bGV0IHJ1bGVUZXh0ID0gYEBjb3VudGVyLXN0eWxlICR7dGhpcy5uYW1lfSB7JHtjb3VudGVyU3R5bGVzZXQycyggdGhpcy5jb3VudGVyU3R5bGVzZXQpfX1gO1xyXG5cdFx0dGhpcy5jc3NSdWxlID0gcnVsZUJhZy5hZGQoIHJ1bGVUZXh0KT8uY3NzUnVsZSBhcyBDU1NDb3VudGVyU3R5bGVSdWxlO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvKiogU09NIGNvdW50ZXItc3R5bGUgcnVsZSAqL1xyXG5cdHB1YmxpYyBjc3NSdWxlOiBDU1NDb3VudGVyU3R5bGVSdWxlO1xyXG5cclxuICAgIC8qKlxyXG5cdCAqIFJ1bGUncyBuYW1lIC0gdGhpcyBpcyBhIHVuaXF1ZSBuYW1lIHRoYXQgaXMgYXNzaWduZWQgYnkgdGhlIE1pbWNzcyBpbmZyYXN0dWN0dXJlLiBUaGlzIG5hbWVcclxuXHQgKiBkb2Vzbid0IGhhdmUgdGhlIHByZWZpeCB0aGF0IGlzIHVzZWQgd2hlbiByZWZlcnJpbmcgdG8gY2xhc3NlcyAoLiksIElEcyAoIykgYW5kIGN1c3RvbSBDU1NcclxuXHQgKiBwcm9wZXJ0aWVzICgtLSkuXHJcblx0ICovXHJcblx0cHVibGljIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICAvLyBPYmplY3QgZGVmaW5pbmcgdGhlIGNvdW50ZXIgc3R5bGUgcnVsZSBmZWF0dXJlcy5cclxuICAgIHByaXZhdGUgY291bnRlclN0eWxlc2V0OiBFeHRlbmRlZENvdW50ZXJTdHlsZXNldDtcclxuXHJcbiAgICAvLyBOYW1lIG9yIG5hbWVkIG9iamVjdCB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBhIG5hbWUgZm9yIHRoaXMgcnVsZS4gSWYgdGhpcyBwcm9wZXJ0eVxyXG5cdC8vIGlzIG5vdCBkZWZpbmVkLCB0aGUgbmFtZSB3aWxsIGJlIHVuaXF1ZWx5IGdlbmVyYXRlZC5cclxuXHRwcml2YXRlIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElDb3VudGVyU3R5bGVSdWxlO1xyXG59XHJcblxyXG5cclxuXHJcbiIsImltcG9ydCB7SUdyaWRMaW5lUnVsZSwgSUdyaWRBcmVhUnVsZSwgSVN0eWxlRGVmaW5pdGlvbn0gZnJvbSBcIi4uL2FwaS9SdWxlVHlwZXNcIlxyXG5pbXBvcnQge1J1bGVMaWtlfSBmcm9tIFwiLi9SdWxlXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgR3JpZExpbmVSdWxlIGNsYXNzIGRlc2NyaWJlcyBhIG5hbWVkIGdyaWQgbGluZSBkZWZpbml0aW9uLiBObyBDU1MgcnVsZSBpcyBjcmVhdGVkIGZvciBncmlkXHJcbiAqIGxpbmVzIC0gdGhleSBhcmUgbmVlZGVkIG9ubHkgdG8gcHJvdmlkZSB0eXBlLXNhZmUgZ3JpZCBsaW5lIGRlZmluaXRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdyaWRMaW5lUnVsZSBleHRlbmRzIFJ1bGVMaWtlIGltcGxlbWVudHMgSUdyaWRMaW5lUnVsZVxyXG57XHJcbiAgICAvLyBpZiB0aGUgbmFtZU92ZXJyaWRlIGlzIGFuIGFyZWEgcnVsZSBvYmplY3QsIHRoZSBpc1N0YXJ0RW5kT3JOb25lIGZsYWcgaXMgYWx3YXlzIGRlZmluZWRcclxuICAgIC8vIGJlY2F1c2UgdGhpcyBjb25zdHJ1Y3RvciBjYW4gb25seSBiZSBpbnZva2VkIGZvciB0aGUgc3RhcnQgYW5kIGVuZCBsaW5lcyBvZiB0aGUgR3JpZEFyZWFSdWxlXHJcbiAgICAvLyBvYmplY3QuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJR3JpZExpbmVSdWxlIHwgSUdyaWRBcmVhUnVsZSxcclxuICAgICAgICBpc1N0YXJ0RW5kT3JOb25lPzogYm9vbGVhbilcclxuXHR7XHJcbiAgICAgICAgc3VwZXIoc2QpO1xyXG4gICAgICAgIHRoaXMubmFtZU92ZXJyaWRlID0gbmFtZU92ZXJyaWRlO1xyXG4gICAgICAgIHRoaXMuaXNTdGFydEVuZE9yTm9uZSA9IGlzU3RhcnRFbmRPck5vbmU7XHJcblx0fVxyXG5cclxuXHJcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiB0aGUgb2JqZWN0IGlzIHNwZWNpZmllZCBhcyBhIHZhbHVlIG9mIGEgc3R5bGUgcHJvcGVydHkuXHJcbiAgICAvLyBXZSByZXR1cm4gdGhlIGxpbmUgbmFtZS5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5uYW1lOyB9XHJcblxyXG5cclxuXHQvLyBQcm9jZXNzZXMgdGhlIGdpdmVuIHJ1bGUuXHJcblx0cHVibGljIHByb2Nlc3MoIHJ1bGVOYW1lOiBzdHJpbmcgfCBudWxsKTogdm9pZFxyXG5cdHtcclxuICAgICAgICBzdXBlci5wcm9jZXNzKCBydWxlTmFtZSk7XHJcblxyXG4gICAgICAgIGxldCBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgbGV0IGFyZWFOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IGlzU3RhcnRFbmRPck5vbmU6IGJvb2xlYW4gfCB1bmRlZmluZWQgPSB0aGlzLmlzU3RhcnRFbmRPck5vbmU7XHJcbiAgICAgICAgbGV0IG5hbWVPdmVycmlkZSA9IHRoaXMubmFtZU92ZXJyaWRlO1xyXG4gICAgICAgIGlmIChuYW1lT3ZlcnJpZGUgaW5zdGFuY2VvZiBHcmlkTGluZVJ1bGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lID0gbmFtZU92ZXJyaWRlLm5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTdGFydEVuZE9yTm9uZSA9IG5hbWVPdmVycmlkZS5pc1N0YXJ0RW5kT3JOb25lO1xyXG4gICAgICAgICAgICBhcmVhTmFtZSA9IG5hbWVPdmVycmlkZS5hcmVhTmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobmFtZU92ZXJyaWRlIGluc3RhbmNlb2YgR3JpZEFyZWFSdWxlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZSA9IG5hbWVPdmVycmlkZS5uYW1lICsgKGlzU3RhcnRFbmRPck5vbmUgPT09IHRydWUgPyBcIi1zdGFydFwiIDogaXNTdGFydEVuZE9yTm9uZSA9PT0gZmFsc2UgPyBcIi1lbmRcIiA6IFwiXCIpO1xyXG4gICAgICAgICAgICBhcmVhTmFtZSA9IG5hbWVPdmVycmlkZS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5yYy5nZXRTY29wZWROYW1lKCBydWxlTmFtZSwgbmFtZU92ZXJyaWRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSBvYnRhaW5lZCBuYW1lIGRvZXNuJ3QgaGF2ZSBcIi1zdGFydFwiIG9yIFwiLWVuZFwiIGJ1dCB0aGUgaXNTdGFydEVuZE9yTm9uZSBmbGFnIGlzXHJcbiAgICAgICAgICAgIC8vIGRlZmluZWQgKHRoYXQgaXMsIGl0IGlzIGVpdGhlciBzdGFydCBvciBlbmQgbGluZSksIHdlIG5lZWQgdG8gYXBwZW5kIHRoZSBzdWZmaXguIElmIHRoZVxyXG4gICAgICAgICAgICAvLyBvYnRhaW5lZCBuYW1lIGFscmVhZHkgaGFzIFwiLXN0YXJ0XCIgb3IgXCItZW5kXCIgYW5kIHRoZSBpc1N0YXJ0RW5kT3JOb25lIGZsYWcgaXMgbm90XHJcbiAgICAgICAgICAgIC8vIGRlZmluZWQsIHdlIHNldCB0aGlzIGZsYWcgdG8gZWl0aGVyIHRydWUgb3IgZmFsc2UgZGVwZW5kaW5nIG9uIHRoZSBzdWZmaXguIE5vdGUgdGhhdCBpZlxyXG4gICAgICAgICAgICAvLyB0aGUgbmFtZU92ZXJyaWRlIGlzIGFuIGFyZWEgcnVsZSBvYmplY3QsIHRoZSBpc1N0YXJ0RW5kT3JOb25lIGZsYWcgaXMgYWx3YXlzIGRlZmluZWQuXHJcbiAgICAgICAgICAgIGxldCBuYW1lSGFzU3RhcnQgPSBuYW1lLmVuZHNXaXRoKFwiLXN0YXJ0XCIpO1xyXG4gICAgICAgICAgICBsZXQgbmFtZUhhc0VuZCA9IG5hbWUuZW5kc1dpdGgoXCItZW5kXCIpO1xyXG4gICAgICAgICAgICBpZiAobmFtZUhhc1N0YXJ0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzU3RhcnRFbmRPck5vbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYXJlYU5hbWUgPSBuYW1lLnN1YnN0ciggMCwgbmFtZS5sZW5ndGggLSA2IC8qIFwiLXN0YXJ0XCIubGVuZ3RoICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChuYW1lSGFzRW5kKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpc1N0YXJ0RW5kT3JOb25lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhcmVhTmFtZSA9IG5hbWUuc3Vic3RyKCAwLCBuYW1lLmxlbmd0aCAtIDQgLyogXCItZW5kXCIubGVuZ3RoICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1N0YXJ0RW5kT3JOb25lID09PSB0cnVlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhcmVhTmFtZSA9IG5hbWU7XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwiLXN0YXJ0XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNTdGFydEVuZE9yTm9uZSA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFyZWFOYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICAgIG5hbWUgKz0gXCItZW5kXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5hcmVhTmFtZSA9IGFyZWFOYW1lO1xyXG4gICAgICAgIHRoaXMuaXNTdGFydEVuZE9yTm9uZSA9IGlzU3RhcnRFbmRPck5vbmU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSdWxlJ3MgbmFtZSAtIHRoaXMgaXMgYSB1bmlxdWUgbmFtZSB0aGF0IGlzIGFzc2lnbmVkIGJ5IHRoZSBNaW1jc3MgaW5mcmFzdHVjdHVyZS4gVGhpcyBuYW1lXHJcblx0ICogZG9lc24ndCBoYXZlIHRoZSBwcmVmaXggdGhhdCBpcyB1c2VkIHdoZW4gcmVmZXJyaW5nIHRvIGNsYXNzZXMgKC4pLCBJRHMgKCMpIGFuZCBjdXN0b20gQ1NTXHJcblx0ICogcHJvcGVydGllcyAoLS0pLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcblxyXG5cdC8qKlxyXG4gICAgICogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGxpbmUgaXMgYSBzdGFydCBvciBlbmQgbGluZSBvZiBhIGdyaWQgYXJlYS4gVGhlIHZhbHVlIGlzIHRydWVcclxuICAgICAqIGlmIHRoaXMgaXMgdGhlIHN0YXJ0IGxpbmU7IGZhbHNlIGlmIHRoaXMgaXMgdGhlIGVuZCBsaW5lOyBhbmQgdW5kZWZpbmVkIGlmIHRoZSBsaW5lIGlzXHJcbiAgICAgKiBub3QgcmVsYXRlZCB0byBhbnkgYXJlYS5cclxuICAgICAqL1xyXG5cdHB1YmxpYyBpc1N0YXJ0RW5kT3JOb25lOiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTmFtZSBvZiB0aGUgZ3JpZCBhcmVhIG9mIHdoaWNoIHRoZSBsaW5lIGlzIGVpdGhlciBhIHN0YXJ0IG9yIGFuIGVuZCBsaW5lLiBJdCBpcyBkZWZpbmVkXHJcbiAgICAgKiBvbmx5IGlmIHRoZSBsaW5lIG5hbWUgZW5kcyB3aXRoIFwiLXN0YXJ0XCIgb3IgXCItZW5kXCIuXHJcbiAgICAgKi9cclxuXHRwdWJsaWMgYXJlYU5hbWU/OiBzdHJpbmc7XHJcblxyXG4gICAgLy8gTmFtZSBvciBuYW1lZCBvYmplY3QgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBjcmVhdGUgYSBuYW1lIGZvciB0aGlzIHJ1bGUuIElmIHRoaXMgcHJvcGVydHlcclxuXHQvLyBpcyBub3QgZGVmaW5lZCwgdGhlIG5hbWUgd2lsbCBiZSB1bmlxdWVseSBnZW5lcmF0ZWQuXHJcblx0cHJpdmF0ZSBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJR3JpZExpbmVSdWxlIHwgSUdyaWRBcmVhUnVsZTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIEdyaWRBcmVhUnVsZSBjbGFzcyBkZXNjcmliZXMgYSBuYW1lZCBncmlkIGFyZWEgZGVmaW5pdGlvbi4gTm8gQ1NTIHJ1bGUgaXMgY3JlYXRlZCBmb3IgZ3JpZFxyXG4gKiBhcmVhcyAtIHRoZXkgYXJlIG5lZWRlZCBvbmx5IHRvIHByb3ZpZGUgdHlwZS1zYWZlIGdyaWQgYXJlYSBkZWZpbml0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBHcmlkQXJlYVJ1bGUgZXh0ZW5kcyBSdWxlTGlrZSBpbXBsZW1lbnRzIElHcmlkQXJlYVJ1bGVcclxue1xyXG4gICAgLy8gaWYgdGhlIG5hbWVPdmVycmlkZSBpcyBhbiBhcmVhIHJ1bGUgb2JqZWN0LCB0aGUgaXNTdGFydEVuZE9yTm9uZSBmbGFnIGlzIGFsd2F5cyBkZWZpbmVkXHJcbiAgICAvLyBiZWNhdXNlIHRoaXMgY29uc3RydWN0b3IgY2FuIG9ubHkgYmUgaW52b2tlZCBmb3IgdGhlIHN0YXJ0IGFuZCBlbmQgbGluZXMgb2YgdGhlIEdyaWRBcmVhUnVsZVxyXG4gICAgLy8gb2JqZWN0LlxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbiwgbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSUdyaWRBcmVhUnVsZSlcclxuXHR7XHJcbiAgICAgICAgc3VwZXIoc2QpO1xyXG4gICAgICAgIHRoaXMubmFtZU92ZXJyaWRlID0gbmFtZU92ZXJyaWRlO1xyXG5cclxuICAgICAgICAvLyBjcmVhdGUgbGluZSBydWxlc1xyXG4gICAgICAgIHRoaXMuc3RhcnRMaW5lID0gbmV3IEdyaWRMaW5lUnVsZSggc2QsIHRoaXMsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuZW5kTGluZSA9IG5ldyBHcmlkTGluZVJ1bGUoIHNkLCB0aGlzLCBmYWxzZSk7XHJcblx0fVxyXG5cclxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIHRoZSBvYmplY3QgaXMgc3BlY2lmaWVkIGFzIGEgdmFsdWUgb2YgYSBzdHlsZSBwcm9wZXJ0eS5cclxuICAgIC8vIFdlIHJldHVybiB0aGUgYXJlYSBuYW1lLlxyXG4gICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLm5hbWU7IH1cclxuXHJcblx0Ly8gUHJvY2Vzc2VzIHRoZSBnaXZlbiBydWxlLlxyXG5cdHB1YmxpYyBwcm9jZXNzKCBydWxlTmFtZTogc3RyaW5nIHwgbnVsbCk6IHZvaWRcclxuXHR7XHJcbiAgICAgICAgc3VwZXIucHJvY2VzcyggcnVsZU5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLnJjLmdldFNjb3BlZE5hbWUoIHJ1bGVOYW1lLCB0aGlzLm5hbWVPdmVycmlkZSk7XHJcblxyXG4gICAgICAgIC8vIHByb2Nlc3MgbGluZSBydWxlc1xyXG4gICAgICAgIHRoaXMuc3RhcnRMaW5lLnByb2Nlc3MoIG51bGwpO1xyXG4gICAgICAgIHRoaXMuZW5kTGluZS5wcm9jZXNzKCBudWxsKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJ1bGUncyBuYW1lIC0gdGhpcyBpcyBhIHVuaXF1ZSBuYW1lIHRoYXQgaXMgYXNzaWduZWQgYnkgdGhlIE1pbWNzcyBpbmZyYXN0dWN0dXJlLiBUaGlzIG5hbWVcclxuXHQgKiBkb2Vzbid0IGhhdmUgdGhlIHByZWZpeCB0aGF0IGlzIHVzZWQgd2hlbiByZWZlcnJpbmcgdG8gY2xhc3NlcyAoLiksIElEcyAoIykgYW5kIGN1c3RvbSBDU1NcclxuXHQgKiBwcm9wZXJ0aWVzICgtLSkuXHJcblx0ICovXHJcblx0cHVibGljIG5hbWU6IHN0cmluZztcclxuXHJcblx0LyoqIFN0YXJ0IGxpbmUgb2YgdGhlIGFyZWEuICovXHJcblx0cHVibGljIHN0YXJ0TGluZTogR3JpZExpbmVSdWxlO1xyXG5cclxuICAgIC8qKiBFbmQgbGluZSBvZiB0aGUgYXJlYSBhcmVhLiAqL1xyXG5cdHB1YmxpYyBlbmRMaW5lOiBHcmlkTGluZVJ1bGU7XHJcblxyXG4gICAgLy8gTmFtZSBvciBuYW1lZCBvYmplY3QgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBjcmVhdGUgYSBuYW1lIGZvciB0aGlzIHJ1bGUuIElmIHRoaXMgcHJvcGVydHlcclxuXHQvLyBpcyBub3QgZGVmaW5lZCwgdGhlIG5hbWUgd2lsbCBiZSB1bmlxdWVseSBnZW5lcmF0ZWQuXHJcblx0cHJpdmF0ZSBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJR3JpZEFyZWFSdWxlO1xyXG59XHJcblxyXG5cclxuXHJcbiIsImltcG9ydCB7SVN0eWxlRGVmaW5pdGlvbkNsYXNzLCBJU3R5bGVEZWZpbml0aW9uLCBJR3JvdXBSdWxlLCBJTWVkaWFSdWxlLCBJU3VwcG9ydHNSdWxlfSBmcm9tIFwiLi4vYXBpL1J1bGVUeXBlc1wiXHJcbmltcG9ydCB7TWVkaWFTdGF0ZW1lbnQsIFN1cHBvcnRzU3RhdGVtZW50fSBmcm9tIFwiLi4vYXBpL01lZGlhVHlwZXNcIjtcclxuaW1wb3J0IHtwcm9jZXNzU0R9IGZyb20gXCIuL1J1bGVDb250YWluZXJcIlxyXG5pbXBvcnQge0lSdWxlQ29udGFpbmVyLCBSdWxlLCBzeW1SQywgSU1pbWNzc1J1bGVCYWd9IGZyb20gXCIuL1J1bGVcIlxyXG5pbXBvcnQge21lZGlhMnMsIHN1cHBvcnRzMnN9IGZyb20gXCIuLi9pbXBsL01pc2NJbXBsXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgR3JvdXBSdWxlIGNsYXNzIHNlcnZlcyBhcyBhIGJhc2UgY2xhc3MgZm9yIGFsbCBncm91cGluZyBDU1MgcnVsZXMuXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR3JvdXBSdWxlPFQgZXh0ZW5kcyBJU3R5bGVEZWZpbml0aW9uLCBSIGV4dGVuZHMgQ1NTR3JvdXBpbmdSdWxlID0gYW55PlxyXG4gICAgZXh0ZW5kcyBSdWxlIGltcGxlbWVudHMgSUdyb3VwUnVsZTxUPlxyXG57XHJcblx0cHVibGljIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbiwgcm46IHN0cmluZywgaW5zdE9yQ2xhc3M6IFQgfCBJU3R5bGVEZWZpbml0aW9uQ2xhc3M8VD4pXHJcblx0e1xyXG5cdFx0c3VwZXIoc2QpO1xyXG4gICAgICAgIHRoaXMucm4gPSBybjtcclxuXHRcdHRoaXMuaW5zdE9yQ2xhc3MgPSBpbnN0T3JDbGFzcztcclxuXHR9XHJcblxyXG5cclxuXHJcblx0Ly8gUHJvY2Vzc2VzIHRoZSBnaXZlbiBydWxlLlxyXG5cdHB1YmxpYyBwcm9jZXNzKCBydWxlTmFtZTogc3RyaW5nIHwgbnVsbClcclxuXHR7XHJcblx0XHRzdXBlci5wcm9jZXNzKCBydWxlTmFtZSk7XHJcblxyXG4gICAgICAgIC8vIGNvbnRhaW5lciB0byB3aGljaCBvdXIgZ3JvdXBpbmcgcnVsZSBiZWxvbmdzIGJlY29tZXMgdGhlIHBhcmVudCBjb250YWluZXIgZm9yIHRoZVxyXG4gICAgICAgIC8vIHN0eWxlIGRlZmluaXRpb24gaW5zdGFuY2VcclxuXHRcdHRoaXMuZ3NkID0gcHJvY2Vzc1NEKCB0aGlzLmluc3RPckNsYXNzLCB0aGlzLnNkKSBhcyBUO1xyXG5cdFx0dGhpcy5ncmMgPSB0aGlzLmdzZFtzeW1SQ107XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8vIEluc2VydHMgdGhpcyBydWxlIGludG8gdGhlIGdpdmVuIHBhcmVudCBydWxlIG9yIHN0eWxlc2hlZXQuXHJcblx0cHVibGljIGluc2VydCggcnVsZUJhZzogSU1pbWNzc1J1bGVCYWcpOiB2b2lkXHJcblx0e1xyXG5cdFx0bGV0IG1pbWNzc1J1bGUgPSBydWxlQmFnLmFkZEdyb3VwKCBgQCR7dGhpcy5ybn0gJHt0aGlzLmNvbmRpdGlvbn1gKTtcclxuICAgICAgICBpZiAobWltY3NzUnVsZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY3NzUnVsZSA9IG1pbWNzc1J1bGU/LmNzc1J1bGUgYXMgUjtcclxuXHJcbiAgICAgICAgICAgIC8vIGluc2VydCBzdWItcnVsZXNcclxuXHRcdFx0dGhpcy5ncmMuaW5zZXJ0KCBtaW1jc3NSdWxlKTtcclxuICAgICAgICB9XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8vIENvbmRpdGlvbiBvZiB0aGlzIGdyb3VwaW5nIHJ1bGUuXHJcblx0cHVibGljIGdldCBjb25kaXRpb24oKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb25kKVxyXG4gICAgICAgICAgICB0aGlzLl9jb25kID0gdGhpcy5nZXRDb25kKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25kID8/IFwiXCI7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblx0Ly8gUmV0dXJucyB0aGUgY29uZGl0aW9uIHN0cmluZyBvZiB0aGlzIGdyb3VwaW5nIHJ1bGUuXHJcblx0cHJvdGVjdGVkIGFic3RyYWN0IGdldENvbmQoKTogc3RyaW5nIHwgbnVsbDtcclxuXHJcblxyXG5cclxuXHQvLyBDbGVycyB0aGUgQ1NTIHJ1bGUgb2JqZWN0LlxyXG5cdHB1YmxpYyBjbGVhcigpOiB2b2lkXHJcblx0e1xyXG5cdFx0c3VwZXIuY2xlYXIoKTtcclxuXHJcblx0XHQvLyBjbGVhciBzdWItcnVsZXNcclxuXHRcdHRoaXMuZ3JjLmNsZWFyKCk7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8qKiBJbnN0YW5jZSBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyBkZWZpbmluZyB0aGUgcnVsZXMgdW5kZXIgdGhpcyBncm91cGluZyBydWxlICovXHJcblx0cHVibGljIGdzZDogVDtcclxuXHJcblx0LyoqIFNPTSBzdXBwb3J0cyBydWxlICovXHJcblx0cHVibGljIGNzc1J1bGU6IFIgfCBudWxsO1xyXG5cclxuXHQvKiogTmFtZSBvZiB0aGUgYXQtcnVsZSAoZS5nLiBcInN1cHBvcnRzXCIpLiAqL1xyXG5cdHByaXZhdGUgcm46IHN0cmluZztcclxuXHJcblx0LyoqIFN0eWxlIGRlZmluaXRpb24gY2xhc3MgdGhhdCBkZWZpbmVzIHJ1bGVzIHVuZGVyIHRoaXMgZ3JvdXBpbmcgcnVsZS4gKi9cclxuXHRwcml2YXRlIGluc3RPckNsYXNzOiBUIHwgSVN0eWxlRGVmaW5pdGlvbkNsYXNzPFQ+O1xyXG5cclxuXHQvKipcclxuICAgICAqIEdyb3VwIFJ1bGUgQ29udGFpbmVyIC0gdGhpcyBjb250YWluZXIgY29udGFpbnMgcnVsZXMgZm9yIHRoZSBncm91cCBkZWZpbml0aW9uIGluc3RhbmNlLlxyXG4gICAgICovXHJcblx0cHJpdmF0ZSBncmM6IElSdWxlQ29udGFpbmVyO1xyXG5cclxuXHQvKiogQ29uZGl0aW9uIG9mIHRoaXMgZ3JvdXBpbmcgcnVsZS4gKi9cclxuXHRwcml2YXRlIF9jb25kOiBzdHJpbmcgfCBudWxsO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgU3VwcG9ydFJ1bGUgY2xhc3MgZGVzY3JpYmVzIGEgQ1NTIEBzdXBwb3J0cyBydWxlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN1cHBvcnRzUnVsZTxUIGV4dGVuZHMgSVN0eWxlRGVmaW5pdGlvbj4gZXh0ZW5kcyBHcm91cFJ1bGU8VCxDU1NTdXBwb3J0c1J1bGU+IGltcGxlbWVudHMgSVN1cHBvcnRzUnVsZTxUPlxyXG57XHJcblx0cHVibGljIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbiwgc3RhdGVtZW50OiBTdXBwb3J0c1N0YXRlbWVudCwgaW5zdE9yQ2xhc3M6IFQgfCBJU3R5bGVEZWZpbml0aW9uQ2xhc3M8VD4pXHJcblx0e1xyXG5cdFx0c3VwZXIoIHNkLCBcInN1cHBvcnRzXCIsIGluc3RPckNsYXNzKTtcclxuXHRcdHRoaXMuc3RtdCA9IHN0YXRlbWVudDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0LyoqIEZsYWcgaW5kaWNhdGVkIHdoZXRoZXIgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhpcyBydWxlJ3MgcXVlcnkgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNTdXBwb3J0ZWQoKTogYm9vbGVhblxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cgJiYgQ1NTLnN1cHBvcnRzKCB0aGlzLmNvbmRpdGlvbik7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblx0Ly8gUmV0dXJucyB0aGUgY29uZGl0aW9uIHN0cmluZyBvZiB0aGlzIGdyb3VwaW5nIHJ1bGUuXHJcblx0cHJvdGVjdGVkIGdldENvbmQoKTogc3RyaW5nIHwgbnVsbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBzdXBwb3J0czJzKCB0aGlzLnN0bXQpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cdC8vIHN1cHBvcnQgc3RhdGVtZW50IGZvciB0aGlzIHJ1bGUuXHJcblx0cHJpdmF0ZSBzdG10OiBTdXBwb3J0c1N0YXRlbWVudDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIE1lZGlhUnVsZSBjbGFzcyBkZXNjcmliZXMgYSBDU1MgQG1lZGlhIHJ1bGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWFSdWxlPFQgZXh0ZW5kcyBJU3R5bGVEZWZpbml0aW9uPiBleHRlbmRzIEdyb3VwUnVsZTxULENTU01lZGlhUnVsZT4gaW1wbGVtZW50cyBJTWVkaWFSdWxlPFQ+XHJcbntcclxuXHRwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCBzdGF0ZW1lbnQ6IE1lZGlhU3RhdGVtZW50LCBpbnN0T3JDbGFzczogVCB8IElTdHlsZURlZmluaXRpb25DbGFzczxUPilcclxuXHR7XHJcblx0XHRzdXBlciggc2QsIFwibWVkaWFcIiwgaW5zdE9yQ2xhc3MpO1xyXG5cdFx0dGhpcy5zdG10ID0gc3RhdGVtZW50O1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvLyBSZXR1cm5zIHRoZSBjb25kaXRpb24gc3RyaW5nIG9mIHRoaXMgZ3JvdXBpbmcgcnVsZS5cclxuXHRwcm90ZWN0ZWQgZ2V0Q29uZCgpOiBzdHJpbmcgfCBudWxsXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG1lZGlhMnMoIHRoaXMuc3RtdCk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYE1lZGlhUXVlcnlMaXN0YCBvYmplY3QgdGhhdCBhbGxvd3MgcHJvZ3JhbW1hdGljIGNoZWNraW5nIHdoZXRoZXIgdGhlIGRvY3VtZW50IG1hdGNoZXNcclxuICAgICAqIHRoZSBtZWRpYSBzdGF0ZW1lbnQgYW5kIGFsc28gYWxsb3dzIGxpc3RlbmluZyB0byBpdHMgYGNoYW5nZWAgZXZlbnQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgcXVlcnlMaXN0KCk6IE1lZGlhUXVlcnlMaXN0IHwgdW5kZWZpbmVkXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdyAmJiBtYXRjaE1lZGlhKCB0aGlzLmNvbmRpdGlvbik7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblx0Ly8gbWVkaWEgc3RhdGVtZW50IGZvciB0aGlzIHJ1bGUuXHJcblx0cHJpdmF0ZSBzdG10OiBNZWRpYVN0YXRlbWVudDtcclxufVxyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQge0lGb250RmFjZVJ1bGUsIElJbXBvcnRSdWxlLCBJTmFtZXNwYWNlUnVsZSwgSUNsYXNzTmFtZVJ1bGUsIElDbGFzc1J1bGUsIElTdHlsZURlZmluaXRpb259IGZyb20gXCIuLi9hcGkvUnVsZVR5cGVzXCI7XHJcbmltcG9ydCB7RXh0ZW5kZWRGb250RmFjZX0gZnJvbSBcIi4uL2FwaS9Gb250VHlwZXNcIlxyXG5pbXBvcnQge01lZGlhU3RhdGVtZW50LCBTdXBwb3J0c1N0YXRlbWVudH0gZnJvbSBcIi4uL2FwaS9NZWRpYVR5cGVzXCI7XHJcbmltcG9ydCB7Zm9udEZhY2Uyc30gZnJvbSBcIi4uL2ltcGwvTWlzY0ltcGxcIlxyXG5pbXBvcnQge1J1bGUsIFJ1bGVMaWtlLCBJTWltY3NzUnVsZUJhZ30gZnJvbSBcIi4vUnVsZVwiO1xyXG5pbXBvcnQge21lZGlhMnMsIHN1cHBvcnRzMnN9IGZyb20gXCIuLi9pbXBsL01pc2NJbXBsXCI7XHJcbmltcG9ydCB7c3ltVjJTfSBmcm9tIFwiLi4vaW1wbC9VdGlsc1wiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIE1pc2NSdWxlIGNsYXNzIHNlcnZlcyBhcyBhIGJhc2UgY2xhc3MgZm9yIHNpbXBsZSBydWxlcy5cclxuICovXHJcbmFic3RyYWN0IGNsYXNzIE1pc2NSdWxlPFQgZXh0ZW5kcyBDU1NSdWxlPiBleHRlbmRzIFJ1bGVcclxue1xyXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvciggc2Q6IElTdHlsZURlZmluaXRpb24pXHJcblx0e1xyXG5cdFx0c3VwZXIoc2QpO1xyXG5cdH1cclxuXHJcblx0Ly8gSW5zZXJ0cyB0aGlzIHJ1bGUgaW50byB0aGUgZ2l2ZW4gcGFyZW50IHJ1bGUgb3Igc3R5bGVzaGVldC5cclxuXHRwdWJsaWMgaW5zZXJ0KCBydWxlQmFnOiBJTWltY3NzUnVsZUJhZyk6IHZvaWRcclxuXHR7XHJcblx0XHR0aGlzLmNzc1J1bGUgPSBydWxlQmFnLmFkZCggdGhpcy50b0NzcygpKT8uY3NzUnVsZSBhcyBUO1xyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJucyBDU1Mgc3RyaW5nIGZvciB0aGlzIHJ1bGUuXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgdG9Dc3MoKTogc3RyaW5nO1xyXG5cclxuXHQvKiogU09NIGZvbnQtZmFjZSBydWxlICovXHJcblx0cHVibGljIGNzc1J1bGU6IFQ7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJbXBvcnRSdWxlIGNsYXNzIGRlc2NyaWJlcyBhIENTUyBAaW1wb3J0IHJ1bGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW1wb3J0UnVsZSBleHRlbmRzIE1pc2NSdWxlPENTU0ltcG9ydFJ1bGU+IGltcGxlbWVudHMgSUltcG9ydFJ1bGVcclxue1xyXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvciggc2Q6IElTdHlsZURlZmluaXRpb24sIHVybDogc3RyaW5nLCBtZWRpYVN0YXRlbWVudD86IE1lZGlhU3RhdGVtZW50LFxyXG4gICAgICAgIHN1cHBvcnRzU3RhdGVtZW50Pzogc3RyaW5nIHwgU3VwcG9ydHNTdGF0ZW1lbnQpXHJcblx0e1xyXG5cdFx0c3VwZXIoc2QpO1xyXG5cclxuXHRcdHRoaXMudXJsID0gdXJsO1xyXG5cdFx0dGhpcy5tZWRpYVN0YXRlbWVudCA9IG1lZGlhU3RhdGVtZW50O1xyXG5cdFx0dGhpcy5zdXBwb3J0c1N0YXRlbWVudCA9IHN1cHBvcnRzU3RhdGVtZW50O1xyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJucyBDU1Mgc3RyaW5nIGZvciB0aGlzIHJ1bGUuXHJcbiAgICBwcm90ZWN0ZWQgdG9Dc3MoKTogc3RyaW5nXHJcbiAgICB7XHJcblx0XHRsZXQgdXJsOiBzdHJpbmc7XHJcblx0XHRpZiAodGhpcy51cmwuc3RhcnRzV2l0aChcInVybFwiKSB8fCB0aGlzLnVybC5zdGFydHNXaXRoKFwiXFxcIlwiKSB8fCB0aGlzLnVybC5zdGFydHNXaXRoKFwiJ1wiKSlcclxuXHRcdFx0dXJsID0gdGhpcy51cmw7XHJcblx0XHRlbHNlXHJcblx0XHRcdHVybCA9IGB1cmwoJHt0aGlzLnVybH0pYDtcclxuXHJcblx0XHRsZXQgc3VwcG9ydHNRdWVyeVN0cmluZyA9ICF0aGlzLnN1cHBvcnRzU3RhdGVtZW50ID8gXCJcIiA6IHN1cHBvcnRzMnMoIHRoaXMuc3VwcG9ydHNTdGF0ZW1lbnQpO1xyXG5cdFx0aWYgKHN1cHBvcnRzUXVlcnlTdHJpbmcgJiYgIXN1cHBvcnRzUXVlcnlTdHJpbmcuc3RhcnRzV2l0aCggXCJzdXBwb3J0c1wiKSlcclxuXHRcdCAgICBzdXBwb3J0c1F1ZXJ5U3RyaW5nID0gYHN1cHBvcnRzKCAke3N1cHBvcnRzUXVlcnlTdHJpbmd9IClgO1xyXG5cclxuXHRcdGxldCBtZWRpYVF1ZXJ5U3RyaW5nID0gIXRoaXMubWVkaWFTdGF0ZW1lbnQgPyBcIlwiIDogbWVkaWEycyggdGhpcy5tZWRpYVN0YXRlbWVudCk7XHJcblx0XHRyZXR1cm4gYEBpbXBvcnQgJHt1cmx9ICR7c3VwcG9ydHNRdWVyeVN0cmluZ30gJHttZWRpYVF1ZXJ5U3RyaW5nfWA7XHJcbiAgICB9XHJcblxyXG5cdC8vIFVSTCB0byBpbXBvcnQgZnJvbS5cclxuXHRwdWJsaWMgdXJsOiBzdHJpbmc7XHJcblxyXG5cdC8vIE9wdGlvbmFsIG1lZGlhIHF1ZXJ5IGZvciB0aGlzIHJ1bGUuXHJcblx0cHVibGljIG1lZGlhU3RhdGVtZW50PzogTWVkaWFTdGF0ZW1lbnQ7XHJcblxyXG5cdC8vIE9wdGlvbmFsIHN1cHBvcnRzIHF1ZXJ5IGZvciB0aGlzIHJ1bGUuXHJcblx0cHVibGljIHN1cHBvcnRzU3RhdGVtZW50Pzogc3RyaW5nIHwgU3VwcG9ydHNTdGF0ZW1lbnQ7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBOYW1lc3BhY2VSdWxlIGNsYXNzIGRlc2NyaWJlcyBhIENTUyBAbmFtZXNwYWNlIHJ1bGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmFtZXNwYWNlUnVsZSBleHRlbmRzIE1pc2NSdWxlPENTU05hbWVzcGFjZVJ1bGU+IGltcGxlbWVudHMgSU5hbWVzcGFjZVJ1bGVcclxue1xyXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvciggc2Q6IElTdHlsZURlZmluaXRpb24sIG5hbWVzcGFjZTogc3RyaW5nLCBwcmVmaXg/OiBzdHJpbmcpXHJcblx0e1xyXG5cdFx0c3VwZXIoc2QpO1xyXG5cclxuXHRcdHRoaXMubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xyXG5cdFx0dGhpcy5wcmVmaXggPSBwcmVmaXg7XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm5zIENTUyBzdHJpbmcgZm9yIHRoaXMgcnVsZS5cclxuICAgIHByb3RlY3RlZCB0b0NzcygpOiBzdHJpbmdcclxuICAgIHtcclxuXHRcdGxldCB1cmwgPSB0aGlzLm5hbWVzcGFjZS5zdGFydHNXaXRoKCBcInVybChcIikgPyB0aGlzLm5hbWVzcGFjZSA6IGB1cmwoJHt0aGlzLm5hbWVzcGFjZX0pYDtcclxuXHRcdHJldHVybiBgQG5hbWVzcGFjZSAke3RoaXMucHJlZml4ID8gdGhpcy5wcmVmaXggOiBcIlwifSAke3VybH1gO1xyXG4gICAgfVxyXG5cclxuXHQvKiogTmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIHJ1bGUgKi9cclxuXHRwdWJsaWMgbmFtZXNwYWNlOiBzdHJpbmc7XHJcblxyXG5cdC8qKiBPcHRpb25hbCBwcmVmaXggZm9yIHRoZSBydWxlICovXHJcblx0cHVibGljIHByZWZpeDogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG5cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIEZvbnRGYWNlUnVsZSBjbGFzcyBkZXNjcmliZXMgYSBAZm9udC1mYWNlIENTUyBydWxlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZvbnRGYWNlUnVsZSBleHRlbmRzIE1pc2NSdWxlPENTU0ZvbnRGYWNlUnVsZT4gaW1wbGVtZW50cyBJRm9udEZhY2VSdWxlXHJcbntcclxuXHRwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCBmb250ZmFjZTogRXh0ZW5kZWRGb250RmFjZSlcclxuXHR7XHJcblx0XHRzdXBlcihzZCk7XHJcblxyXG5cdFx0dGhpcy5mb250ZmFjZSA9IGZvbnRmYWNlO1xyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJucyBDU1Mgc3RyaW5nIGZvciB0aGlzIHJ1bGUuXHJcbiAgICBwcm90ZWN0ZWQgdG9Dc3MoKTogc3RyaW5nXHJcbiAgICB7XHJcblx0XHRyZXR1cm4gYEBmb250LWZhY2UgeyR7Zm9udEZhY2UycyggdGhpcy5mb250ZmFjZSl9fWA7XHJcbiAgICB9XHJcblxyXG5cdC8vIE9iamVjdCBkZWZpbmluZyBmb250LWZhY2UgcHJvcGVydGllcy5cclxuXHRwdWJsaWMgZm9udGZhY2U6IEV4dGVuZGVkRm9udEZhY2U7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBQYWdlUnVsZSBjbGFzcyByZXByZXNlbnRzIHRoZSBDU1MgQHBhZ2UgcnVsZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGFzc05hbWVSdWxlIGV4dGVuZHMgUnVsZUxpa2UgaW1wbGVtZW50cyBJQ2xhc3NOYW1lUnVsZVxyXG57XHJcblx0cHVibGljIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbiwgY2xhc3NlczogKElDbGFzc1J1bGUgfCBJQ2xhc3NOYW1lUnVsZSB8IHN0cmluZylbXSlcclxuXHR7XHJcblx0XHRzdXBlcihzZCk7XHJcblx0XHR0aGlzLmNsYXNzZXMgPSBjbGFzc2VzO1xyXG5cdH1cclxuXHJcblx0Ly8gUHJlZml4IGZvciBDU1MgY2xhc3Nlcy5cclxuXHRwdWJsaWMgcHJlZml4OiBcIi5cIjtcclxuXHJcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiB0aGUgb2JqZWN0IGlzIHNwZWNpZmllZCBhcyBhIHZhbHVlIG9mIGEgc3R5bGUgcHJvcGVydHkuXHJcbiAgICAvLyBXZSByZXR1cm4gdGhlIENTUyBjbGFzcyBuYW1lLlxyXG4gICAgW3N5bVYyU10oKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuY3NzTmFtZTsgfVxyXG5cclxuXHQvKiogQ1NTIHJ1bGUgc2VsZWN0b3Igc3RyaW5nICovXHJcblx0cHVibGljIGdldCBzZWxlY3RvclRleHQoKTogc3RyaW5nXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuY3NzTmFtZTtcclxuXHR9XHJcblxyXG5cdC8vIFByb2Nlc3NlcyB0aGUgZ2l2ZW4gcnVsZS5cclxuXHRwdWJsaWMgcHJvY2VzcyggcnVsZU5hbWU6IHN0cmluZyB8IG51bGwpOiB2b2lkXHJcblx0e1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY2xhc3Nlcy5tYXAoIHYgPT4gdHlwZW9mIHYgPT09IFwic3RyaW5nXCIgPyB2IDogdi5uYW1lKS5qb2luKFwiIFwiKTtcclxuICAgICAgICB0aGlzLmNzc05hbWUgPSBcIi5cIiArIHRoaXMubmFtZS5yZXBsYWNlKCAvIC9nLCBcIi5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW1wbGVtZW50YXRpb24gb2YgdGhlIHRvU3RyaW5nIG1ldGhvZCByZXR1cm5zIHRoZSBjb21iaW5lZCBuYW1lIG9mIHRoZSBjbGFzc2VzICh3aXRob3V0XHJcbiAgICAvLyB0aGUgQ1NTIHByZWZpeGVzKS5cclxuXHRwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMubmFtZTtcclxuXHR9XHJcblxyXG4gICAgLyoqIEFsbCBjbGFzcyBuYW1lcyBjb25jYXRlbmF0ZWQgd2l0aCBzcGFjZSAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICAvKiogQWxsIGNsYXNzIENTUyBuYW1lcyAod2l0aCBkb3RzKSBjb25jYXRlbmF0ZWQgdG9nZXRoZXIgKi9cclxuICAgIHB1YmxpYyBjc3NOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgcHJpdmF0ZSBjbGFzc2VzOiAoSUNsYXNzUnVsZSB8IElDbGFzc05hbWVSdWxlIHwgc3RyaW5nKVtdO1xyXG59XHJcblxyXG5cclxuXHJcbiIsImltcG9ydCB7SVJ1bGUsIElOYW1lZEVudGl0eSwgSVN0eWxlRGVmaW5pdGlvbn0gZnJvbSBcIi4uL2FwaS9SdWxlVHlwZXNcIlxyXG5cclxuXHJcblxyXG4vKipcclxuICogU3ltYm9sIG9uIHRoZSBzdHlsZSBkZWZpbml0aW9uIGluc3RhbmNlIHBvaW50aW5nIHRvIHRoZSBSdWxlQ29udGFpbmVyIG9iamVjdCB0aGF0IGlzXHJcbiAqIHJlc3BvbnNpYmxlIGZvciBwcm9jZXNzaW5nIHJ1bGVzLlxyXG4gKi9cclxuIGV4cG9ydCBjb25zdCBzeW1SQyA9IFN5bWJvbChcInJjXCIpO1xyXG5cclxuXHJcblxyXG4gLyoqXHJcbiAqIFRoZSBJUnVsZUNvbnRhaW5lciBpbnRlcmZhY2UgcmVwcmVzZW50cyBhbiBvYmplY3QgdGhhdCBhY2NvbXBhbmllcyBhbmQgaXMgYXNzb2NpYXRlZCB3aXRoXHJcbiAqIGEgc3R5bGUgZGVmaW5pdGlvbiBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElSdWxlQ29udGFpbmVyXHJcbntcclxuXHQvKiogR2VuZXJhdGVzIGEgbmFtZSwgd2hpY2ggd2lsbCBiZSB1bmlxdWUgaW4gdGhpcyBzdHlsZXNoZWV0ICovXHJcblx0Z2V0U2NvcGVkTmFtZSggcnVsZU5hbWU6IHN0cmluZyB8IG51bGwsIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElOYW1lZEVudGl0eSk6IHN0cmluZztcclxuXHJcblx0LyoqIEluc2VydHMgYWxsIHJ1bGVzIGRlZmluZWQgaW4gdGhpcyBjb250YWluZXIgdG8gZWl0aGVyIHRoZSBzdHlsZSBzaGVldCBvciBncm91cGluZyBydWxlLiAqL1xyXG5cdGluc2VydCggcnVsZUJhZzogSU1pbWNzc1J1bGVCYWcpOiB2b2lkO1xyXG5cclxuXHQvKiogQ2xlYXJzIGFsbCBDU1MgcnVsZSBvYmplY3RzIGRlZmluZWQgaW4gdGhpcyBjb250YWluZXIuICovXHJcblx0Y2xlYXIoKTogdm9pZDtcclxuXHJcbiAgICAvKiogU2V0cyB0aGUgZ2l2ZW4gdmFsdWUgZm9yIHRoZSBjdXN0b20gQ1NTIHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZS4gKi9cclxuXHRzZXRWYXJWYWx1ZSggbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgbnVsbCwgaW1wb3J0YW50PzogYm9vbGVhbiwgc2NoZWR1bGVyVHlwZT86IG51bWJlcik6IHZvaWQ7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBSdWxlTGlrZSBhYnN0cmFjdCBjbGFzcyBpcyBhIGJhc2UgZm9yIGFsbCBcInJ1bGVzXCIgZGVmaW5lZCBpbiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzc2VzIC1cclxuICogd2hldGhlciB0aGV5IGNvcnJlc3BvbmQgdG8gcmVhbCBDU1MgcnVsZXMgKGFuZCB0aHVzIGRlcml2ZSBmcm9tIHRoZSBSdWxlIGNsYXNzKSBvciBub3QgKHN1Y2ggYXNcclxuICogY291bnRlcnMsIGdyaWQgbGluZXMgYW5kIGdyaWQgYXJlYXMpLlxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJ1bGVMaWtlXHJcbntcclxuICAgIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbilcclxuICAgIHtcclxuICAgICAgICB0aGlzLnNkID0gc2Q7XHJcbiAgICAgICAgdGhpcy5yYyA9IHNkW3N5bVJDXSBhcyBJUnVsZUNvbnRhaW5lcjtcclxuICAgIH1cclxuXHJcblx0LyoqXHJcbiAgICAgKiBQcm9jZXNzZXMgdGhlIHJ1bGUgYXNzaWduZWQgdG8gdGhlIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIG5hbWUuIFByb3BlcnR5IG5hbWUgY2FuIGJlIG51bGxcclxuICAgICAqIGZvciBydWxlcyBub3QgYXNzaWduZWQgdG8gYSBwcm9wZXJ0eTsgZS5nLiBkZXBlbmRlbnQgcnVsZXMgZGVmaW5lZCBpbiB0aGUgQ29tYmluZWRTdHlsZXNldC5cclxuICAgICAqL1xyXG5cdHB1YmxpYyBwcm9jZXNzKCBwcm9wTmFtZTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge31cclxuXHJcblxyXG5cclxuXHQvKiogU3R5bGUgRGVmaW5pdGlvbiBvYmplY3QgdG8gd2hpY2ggdGhpcyBydWxlIGJlbG9uZ3MuICovXHJcblx0cHVibGljIHNkOiBJU3R5bGVEZWZpbml0aW9uO1xyXG5cclxuXHQvKiogUnVsZSBDb250YWluZXIgY29ycmVzcG9uZGluZyB0byB0aGUgc3R5bGUgZGVmaW5pdGlvbiBvYmplY3QgdG8gd2hpY2ggdGhpcyBydWxlIGJlbG9uZ3MuICovXHJcblx0cHVibGljIHJjOiBJUnVsZUNvbnRhaW5lcjtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIFJ1bGUgY2xhc3MgaXMgdXNlZCBhcyBhIGJhc2UgY2xhc3MgZm9yIGFsbCBydWxlcy5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSdWxlIGV4dGVuZHMgUnVsZUxpa2UgaW1wbGVtZW50cyBJUnVsZVxyXG57XHJcblx0Ly8gSW5zZXJ0cyB0aGlzIHJ1bGUgaW50byB0aGUgZ2l2ZW4gcGFyZW50IHJ1bGUgb3Igc3R5bGVzaGVldC4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlXHJcblx0Ly8gc3R5bGUgZGVmaW5pdGlvbiBjbGFzcywgdG8gd2hpY2ggdGhpcyBydWxlIGJlbG9uZ3MsIGlzIGFjdGl2YXRlZC5cclxuXHRwdWJsaWMgYWJzdHJhY3QgaW5zZXJ0KCBydWxlQmFnOiBJTWltY3NzUnVsZUJhZyk6IHZvaWQ7XHJcblxyXG5cdC8vIENsZXJzIHRoZSBDU1MgcnVsZSBvYmplY3QuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzLCB0byB3aGljaFxyXG5cdC8vIHRoaXMgcnVsZSBiZWxvbmdzLCBpcyBkZWFjdGl2YXRlZC5cclxuXHRwdWJsaWMgY2xlYXIoKTogdm9pZCB7IHRoaXMuY3NzUnVsZSA9IG51bGw7IH1cclxuXHJcblxyXG5cclxuXHQvLyBDU1NSdWxlLWRlcml2ZWQgb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGFjdHVhbGwgQ1NTIHJ1bGUgaW5zZXJ0ZWQgaW50b1xyXG5cdC8vIHRoZSBzdHlsZXMgc2hlZXQgb3IgdGhlIHBhcmVudCBydWxlLlxyXG5cdHB1YmxpYyBjc3NSdWxlOiBDU1NSdWxlIHwgbnVsbDtcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gQ2xpZW50LSBhbmQgc2VydmVyLXNpZGUgcmVuZGVyaW5nIGludGVyZmFjZXNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgY29udGV4dCBpbiB3aGljaCBzdHlsZSBkZWZpbml0aW9ucyBhcmUgYWN0aXZhdGVkLiBEaWZmZXJlbnQgaW1wbGVtZW50YXRpb25zXHJcbiAqIGV4aXN0cyBmb3IgY2xpZW50LXNpZGUgYW5kIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFjdGl2YXRpb25Db250ZXh0XHJcbntcclxuICAgIGdldFRoZW1lUGxhY2Vob2xkZXIoKTogSU1pbWNzc1N0eWxlRWxlbWVudDtcclxuICAgIGNyZWF0ZVN0eWxlRWxtKCBpZDogc3RyaW5nLCBpbnNlcnRCZWZvcmU/OiBJTWltY3NzU3R5bGVFbGVtZW50KTogSU1pbWNzc1N0eWxlRWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IHRvIHdoaWNoIHJ1bGVzIGNhbiBiZSBhZGRlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1pbWNzc1J1bGVCYWdcclxue1xyXG4gICAgYWRkKCBydWxlVGV4dDogc3RyaW5nKTogSU1pbWNzc1J1bGUgfCBudWxsO1xyXG4gICAgYWRkR3JvdXAoIHNlbGVjdG9yOiBzdHJpbmcpOiBJTWltY3NzR3JvdXBpbmdSdWxlIHwgbnVsbDtcclxuICAgIGFkZEtleWZyYW1lcyggbmFtZTogc3RyaW5nKTogSU1pbWNzc0tleWZyYW1lc1J1bGUgfCBudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHN0eWxlIGVsZW1lbnQgdG8gd2hpY2ggcnVsZXMgY2FuIGJlIGFkZGVkLiBEaWZmZXJlbnQgaW1wbGVtZW50YXRpb25zXHJcbiAqIGV4aXN0cyBmb3IgY2xpZW50LXNpZGUgYW5kIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1pbWNzc1N0eWxlRWxlbWVudCBleHRlbmRzIElNaW1jc3NSdWxlQmFnXHJcbntcclxuICAgIHJlYWRvbmx5IGRvbUVsbTogSFRNTFN0eWxlRWxlbWVudCB8IG51bGw7XHJcbiAgICByZW1vdmUoKTogdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBiYXNlIGludGVyZmFjZSBmb3IgQ1NTIHJ1bGUuIERpZmZlcmVudCBpbXBsZW1lbnRhdGlvbnMgZXhpc3RzIGZvciBjbGllbnQtc2lkZVxyXG4gKiBhbmQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTWltY3NzUnVsZVxyXG57XHJcbiAgICByZWFkb25seSBjc3NSdWxlOiBDU1NSdWxlIHwgbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBncm91cGluZyBydWxlIHRvIHdoaWNoIHJ1bGVzIGNhbiBiZSBhZGRlZC4gRGlmZmVyZW50IGltcGxlbWVudGF0aW9uc1xyXG4gKiBleGlzdHMgZm9yIGNsaWVudC1zaWRlIGFuZCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElNaW1jc3NHcm91cGluZ1J1bGUgZXh0ZW5kcyBJTWltY3NzUnVsZSwgSU1pbWNzc1J1bGVCYWdcclxue1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGtleWZyYW1lcyBydWxlIHRvIHdoaWNoIGZyYW1lcyBjYW4gYmUgYWRkZWQuIERpZmZlcmVudCBpbXBsZW1lbnRhdGlvbnNcclxuICogZXhpc3RzIGZvciBjbGllbnQtc2lkZSBhbmQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTWltY3NzS2V5ZnJhbWVzUnVsZSBleHRlbmRzIElNaW1jc3NSdWxlXHJcbntcclxuICAgIGFkZEZyYW1lKCBmcmFtZVRleHQ6IHN0cmluZyk6IElNaW1jc3NSdWxlIHwgbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIGNvbnRleHQgaW4gd2hpY2ggc3R5bGUgZGVmaW5pdGlvbnMgYXJlIGFjdGl2YXRlZC4gRGlmZmVyZW50IGltcGxlbWVudGF0aW9uc1xyXG4gKiBleGlzdHMgZm9yIGNsaWVudC1zaWRlIGFuZCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTZXJ2ZXJBY3RpdmF0aW9uQ29udGV4dCBleHRlbmRzIElBY3RpdmF0aW9uQ29udGV4dFxyXG57XHJcbiAgICBzZXJpYWxpemUoKTogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuXHJcbiIsImltcG9ydCB7SU5hbWVkRW50aXR5LCBJU3R5bGVEZWZpbml0aW9uLCBJU3R5bGVEZWZpbml0aW9uQ2xhc3MsIElWYXJSdWxlLCBOYW1lR2VuZXJhdGlvbk1ldGhvZH0gZnJvbSBcIi4uL2FwaS9SdWxlVHlwZXNcIlxyXG5pbXBvcnQge1N0eWxlRGVmaW5pdGlvbiwgVGhlbWVEZWZpbml0aW9ufSBmcm9tIFwiLi4vYXBpL1J1bGVBUElcIlxyXG5pbXBvcnQge1xyXG4gICAgUnVsZSwgUnVsZUxpa2UsIElSdWxlQ29udGFpbmVyLCBJQWN0aXZhdGlvbkNvbnRleHQsIElNaW1jc3NHcm91cGluZ1J1bGUsIElNaW1jc3NLZXlmcmFtZXNSdWxlLFxyXG4gICAgSU1pbWNzc1J1bGUsIElNaW1jc3NTdHlsZUVsZW1lbnQsIElNaW1jc3NSdWxlQmFnLCBJU2VydmVyQWN0aXZhdGlvbkNvbnRleHQsIHN5bVJDXHJcbn0gZnJvbSBcIi4vUnVsZVwiXHJcbmltcG9ydCB7VmFyUnVsZX0gZnJvbSBcIi4vVmFyUnVsZVwiXHJcbmltcG9ydCB7SW1wb3J0UnVsZSwgTmFtZXNwYWNlUnVsZX0gZnJvbSBcIi4vTWlzY1J1bGVzXCJcclxuaW1wb3J0IHtnZXRBY3RpdmF0b3IsIHNldERlZmF1bHRTY2hlZHVsZXJ9IGZyb20gXCIuLi9pbXBsL1NjaGVkdWxpbmdJbXBsXCI7XHJcbmltcG9ydCB7U2NoZWR1bGVyVHlwZX0gZnJvbSBcIi4uL2FwaS9TY2hlZHVsaW5nVHlwZXNcIlxyXG5cclxuXHJcblxyXG4vKiogU3ltYm9sIG9uIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIHBvaW50aW5nIHRvIHRoZSBzaW5nbGV0b24gaW5zdGFuY2UuICovXHJcbmNvbnN0IHN5bUluc3RhbmNlID0gU3ltYm9sKFwic2RcIik7XHJcblxyXG4vKipcclxuICogU3ltYm9sIG9uIHRoZSBzdHlsZSBkZWZpbml0aW9uIGluc3RhbmNlIHBvaW50aW5nIHRvIHRoZSBTdHlsZURlZmluaXRpb24gY2xhc3MgZm9yIHdoaWNoXHJcbiAqIHRoaXMgaW5zdGFuY2Ugd2FzIGNyZWF0ZWQuXHJcbiAqL1xyXG5jb25zdCBzeW1DbGFzcyA9IFN5bWJvbChcInNkY1wiKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEZsYWcgaW5kaWNhdGluZyB0aGF0IGEgcnVsZSBjb250YWluZXIgaXMgY3JlYXRlZCBub3QgZGlyZWN0bHkgKGFzIGZvciBzdHlsZWQgY29tcG9uZW50cylcclxuICogYnV0IGZyb20gdGhlIHByb2Nlc3NDbGFzcyBmdW5jdGlvbi4gVGhpcyB2YXJpYWJsZSBpcyBzZXQgdG8gdHJ1ZSBiZWZvcmUgaW5zdGFudGlhdGluZyB0aGVcclxuICogc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyAoYW5kIHRodXMgdGhlIFJ1bGVDb250YWluZXIgb2JqZWN0KSBhbmQgaXMgc2V0IGJhY2sgdG8gZmFsc2UgYWZ0ZXJcclxuICogaXQgaXMgdXNlZCBpbiB0aGUgUnVsZUNvbnRhaW5lciBjb25zdHJ1Y3Rvci5cclxuICovXHJcbmxldCBzX3Byb2Nlc3NpbmdTdHlsZURlZmluaXRpb25DbGFzcyA9IGZhbHNlO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIFJ1bGVDb250YWluZXIgY2xhc3MgaXMgYSBzaGFkb3cgc3RydWN0dXJlIHRoYXQgYWNjb21wYW5pZXMgZXZlcnkgcHJvY2Vzc2VkIHN0eWxlIGRlZmluaXRpb25cclxuICogb2JqZWN0LiBTaW5jZSBTdHlsZURlZmluaXRpb24gY2xhc3MgaXMgYW4gZXhwb3J0ZWQgY2xhc3MgdmlzaWJsZSB0byBkZXZlbG9wZXJzLCB3ZSBkb24ndCB3YW50XHJcbiAqIHRvIGhhdmUgYSBsb3Qgb2YgZnVuY3Rpb25hbGl0eSBpbiBpdC4gVGhlIFJ1bGVDb250YWluZXIgb2JqZWN0IGlzIGxpbmtlZCB0byB0aGUgU3R5bGVEZWZpbml0aW9uXHJcbiAqIG9iamVjdCB2aWEgdGhlIFtzeW1Db250YWluZXJdIHN5bWJvbC4gSXQgY29udGFpbnMgYWxsIHRoZSBmdW5jdGlvbmFsaXR5IGZvciBwYXJzaW5nIHJ1bGVcclxuICogZGVmaW5pdGlvbnMsIG5hbWUgYXNzaWdubWVudCBhbmQgYWN0aXZhdGlvbi9kZWFjdGl2YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUnVsZUNvbnRhaW5lciBpbXBsZW1lbnRzIElSdWxlQ29udGFpbmVyLCBQcm94eUhhbmRsZXI8U3R5bGVEZWZpbml0aW9uPlxyXG57XHJcblx0Y29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uKVxyXG5cdHtcclxuXHRcdHRoaXMuc2QgPSBzZDtcclxuXHJcbiAgICAgICAgdGhpcy5zZGMgPSBzZC5jb25zdHJ1Y3RvciBhcyBJU3R5bGVEZWZpbml0aW9uQ2xhc3M7XHJcbiAgICAgICAgdGhpcy5wc2QgPSBzZC4kcGFyZW50O1xyXG5cdFx0dGhpcy5lYyA9IHRoaXMuc2RjW3N5bUVtYmVkZGluZ0NvbnRhaW5lcl07XHJcblxyXG4gICAgICAgIC8vIGdldCBwYXJlbnQgYW5kIHRvcCBsZXZlbCBjb250YWluZXJzXHJcbiAgICAgICAgaWYgKHRoaXMucHNkKVxyXG4gICAgICAgICAgICB0aGlzLnBjID0gdGhpcy5wc2Rbc3ltUkNdO1xyXG5cclxuICAgICAgICAvLyBzZXQgdGhlIG5hbWUgZm9yIG91ciBjb250YWluZXIuIEZvciBvcHRpbWl6ZWQgbmFtZSBnZW5lcmF0aW9uIG1vZGUsIGdlbmVyYXRlIHVuaXF1ZVxyXG4gICAgICAgIC8vIG5hbWUuIE90aGVyd2lzZSwgaWYgdGhlIGNvbnRhaW5lciBpcyBjcmVhdGVkIGZvciBhIGNsYXNzIGZyb20gdGhlXHJcbiAgICAgICAgLy8gcHJvY2Vzc0NsYXNzIGZ1bmN0aW9uLCB0aGVuIHRoZSBmbGFnIHNfcHJvY2Vzc2luZ1N0eWxlRGVmaW5pdGlvbkNsYXNzIGlzIGRlZmluZWRcclxuICAgICAgICAvLyBhbmQgdGhlIG5hbWUgaXMgZ2VuZXJhdGVkIGRlcGVuZGluZyBvbiB0aGUgY3VycmVudCBnZW5lcmF0aW9uIG1ldGhvZC4gSWYgdGhpcyBmbGFnIGlzXHJcbiAgICAgICAgLy8gZmFsc2UsIHRoYXQgbWVhbnMgdGhhdCB0aGUgY29udGFpbmVyIGlzIGNyZWF0ZWQgZnJvbSBhIGRpcmVjdCBcIm5ld1wiIGNhbGwgb24gdGhlIHN0eWxlXHJcbiAgICAgICAgLy8gZGVmaW5pdGlvbiBjbGFzcyBhbmQgdGhlIG5hbWUgaXMgZ2VuZXJhdGVkIHVuaXF1ZWx5LlxyXG4gICAgICAgIGlmIChzX25hbWVHZW5lcmF0b25NZXRob2QgPT09IE5hbWVHZW5lcmF0aW9uTWV0aG9kLk9wdGltaXplZClcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gZ2VuZXJhdGVVbmlxdWVOYW1lKCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGNsYXNzTmFtZSA9IHRoaXMuc2RjLm5hbWU7XHJcbiAgICAgICAgICAgIGxldCBuYW1lID0gY2xhc3NOYW1lID8gXCJcIiA6IGdlbmVyYXRlVW5pcXVlTmFtZSgpO1xyXG4gICAgICAgICAgICBpZiAoc19wcm9jZXNzaW5nU3R5bGVEZWZpbml0aW9uQ2xhc3MpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNfcHJvY2Vzc2luZ1N0eWxlRGVmaW5pdGlvbkNsYXNzID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgbmFtZSA9ICFjbGFzc05hbWVcclxuICAgICAgICAgICAgICAgICAgICA/IGdlbmVyYXRlVW5pcXVlTmFtZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzX25hbWVHZW5lcmF0b25NZXRob2QgPT09IE5hbWVHZW5lcmF0aW9uTWV0aG9kLlVuaXF1ZVNjb3BlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGdlbmVyYXRlVW5pcXVlTmFtZSggY2xhc3NOYW1lICsgXCJfXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IGdlbmVyYXRlVW5pcXVlTmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICBuYW1lICs9IFwiX1wiICsgY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBvdXIgY29udGFpbmVyIGhhcyBwYXJlbnQgY29udGFpbmVyLCBwcmVmaXggb3VyIG5hbWUgd2l0aCB0aGUgdXBwZXIgb25lXHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMucGMgPyBgJHt0aGlzLnBjLm5hbWV9XyR7bmFtZX1gIDogbmFtZTtcclxuICAgICAgICB9XHJcblx0fVxyXG5cclxuXHJcblxyXG4gICAgLy8gUHJveHlIYW5kbGVyIG1ldGhvZCwgd2hpY2ggdmlydHVhbGl6ZXMgYWxsIFJ1bGVMaWtlIHByb3BlcnRpZXNcclxuICAgIHNldCggdDogU3R5bGVEZWZpbml0aW9uLCBwOiBQcm9wZXJ0eUtleSwgdjogYW55LCByOiBhbnkpOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwICE9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2ICE9PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICB0W3BdID0gdjtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyB3ZSBvbmx5IHZpcnR1YWxpemUgcnVsZS1saWtlIG9iamVjdHMuIFdlIGRvbid0IHZpcnR1YWxpemUgYXJyYXlzIGJlY2F1c2UgdGhlcmVcclxuICAgICAgICAgICAgLy8gaXMgbm8gdHJhcCBmb3IgaXNBcnJheSgpIG1ldGhvZCwgd2hpY2ggd2UgdXNlIGxhdGVyIGluIHRoZSBwcm9jZXNzUHJvcGVydHkoKVxyXG4gICAgICAgICAgICAvLyBtZXRob2QuIFdlIGFsc28gZG9uJ3QgdmlydHVhbGl6ZSBwcmltaXRpdmUgdHlwZXMgYmVjYXVzZSB0aGVyZSBpcyBubyB0cmFwIGZvclxyXG4gICAgICAgICAgICAvLyB0eXBlb2Ygb3BlcmF0aW9uIChuZWVkZWQgd2hlbiBjb252ZXJ0aW5nIHZhbHVlcyB0byBzdHJpbmdzKS4gV2UgYWxzbyBkb24ndFxyXG4gICAgICAgICAgICAvLyB2aXJ0dWFsaXplIHN0eWxlIGRlZmluaXRpb24gaW5zdGFuY2VzIChyZXN1bHRzIG9mICR1c2UoKSBtZXRob2QgaW52b2NhdGlvbnMpLlxyXG4gICAgICAgICAgICBsZXQgaXNSdWxlTGlrZSA9IHYgaW5zdGFuY2VvZiBSdWxlTGlrZTtcclxuICAgICAgICAgICAgaWYgKHAgaW4gdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUnVsZUxpa2UpXHJcbiAgICAgICAgICAgICAgICAgICAgdi5wcm9jZXNzKCBwKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gdjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1J1bGVMaWtlKVxyXG4gICAgICAgICAgICAgICAgICAgIHZpcnR1YWxpemUoIHQsIHApO1xyXG5cclxuICAgICAgICAgICAgICAgIHRbcF0gPSB2O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzUHJvcGVydHkoIHAsIHRbcF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHQvLyBQcm9jZXNzZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHN0eWxlIGRlZmluaXRpb24gaW5zdGFuY2UuIFRoaXMgY3JlYXRlcyBuYW1lcyBmb3IgY2xhc3NlcyxcclxuXHQvLyBJRHMsIGFuaW1hdGlvbnMgYW5kIGN1c3RvbSB2YXJpYWJsZXMuXHJcblx0cHJpdmF0ZSBwcm9jZXNzUHJvcGVydHkoIHByb3BOYW1lOiBzdHJpbmcgfCBudWxsLCBwcm9wVmFsOiBhbnkpOiB2b2lkXHJcblx0e1xyXG5cdFx0aWYgKHByb3BWYWwgaW5zdGFuY2VvZiBTdHlsZURlZmluaXRpb24pXHJcbiAgICAgICAgICAgIHRoaXMucmVmcy5wdXNoKCBwcm9wVmFsKTtcclxuICAgICAgICAvLyBlbHNlIGlmIChwcm9wVmFsIGluc3RhbmNlb2YgQXJyYXkpXHJcbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIGxvb3Agb3ZlciBhcnJheSBlbGVtZW50cyBhbmQgcmVjdXJzaXZlbHkgcHJvY2VzcyB0aGVtLiBJbmRleCBiZWNvbWVzIHBhcnQgb2YgdGhlXHJcbiAgICAgICAgICAgIC8vIHJ1bGUgbmFtZS5cclxuICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICBmb3IoIGxldCBpdGVtIG9mIHByb3BWYWwpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NQcm9wZXJ0eSggYCR7cHJvcE5hbWV9XyR7aSsrfWAsIGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAocHJvcFZhbCBpbnN0YW5jZW9mIFJ1bGVMaWtlKVxyXG4gICAgICAgICAgICAgICAgcHJvcFZhbC5wcm9jZXNzKCBwcm9wTmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvcFZhbCBpbnN0YW5jZW9mIFZhclJ1bGUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhcnMucHVzaCggcHJvcFZhbCk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BWYWwgaW5zdGFuY2VvZiBJbXBvcnRSdWxlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbXBvcnRzLnB1c2goIHByb3BWYWwpO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wVmFsIGluc3RhbmNlb2YgTmFtZXNwYWNlUnVsZSlcclxuICAgICAgICAgICAgICAgIHRoaXMubmFtZXNwYWNlcy5wdXNoKCBwcm9wVmFsKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAocHJvcFZhbCBpbnN0YW5jZW9mIFJ1bGUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bGVzLnB1c2goIHByb3BWYWwpO1xyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG5cclxuXHJcblx0Ly8gU2V0cyB0aGUgZ2l2ZW4gdmFsdWUgZm9yIHRoZSBjdXN0b20gQ1NTIHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cclxuXHRwdWJsaWMgc2V0VmFyVmFsdWUoIG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgaW1wb3J0YW50PzogYm9vbGVhbiwgc2NoZWR1bGVyVHlwZT86IG51bWJlcik6IHZvaWRcclxuXHR7XHJcblx0XHRpZiAodGhpcy52YXJSb290UnVsZSlcclxuICAgICAgICBnZXRBY3RpdmF0b3Ioc2NoZWR1bGVyVHlwZSkudXBkYXRlU3R5bGUoIHRoaXMudmFyUm9vdFJ1bGUsIG5hbWUsIHZhbHVlLCBpbXBvcnRhbnQpO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiBHZW5lcmF0ZXMgYSBnbG9iYWxseSB1bmlxdWUgQ1NTIG5hbWUgZm9yIHRoZSBnaXZlbiBydWxlIG5hbWUgdW5sZXNzIHRoaXMgcnVsZSBuYW1lIGFscmVhZHlcclxuXHQgKiBleGlzdHMgZWl0aGVyIGluIGEgYmFzZSBjbGFzcyBvciBpbiB0aGUgY2hhaW4gb2YgcGFyZW50IGdyb3VwaW5nIHJ1bGVzLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXRTY29wZWROYW1lKCBydWxlTmFtZTogc3RyaW5nLCBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJTmFtZWRFbnRpdHkpOiBzdHJpbmdcclxuXHR7XHJcbiAgICAgICAgaWYgKG5hbWVPdmVycmlkZSlcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBuYW1lT3ZlcnJpZGUgPT09IFwic3RyaW5nXCIgPyBuYW1lT3ZlcnJpZGUgOiBuYW1lT3ZlcnJpZGUubmFtZTtcclxuXHRcdGVsc2UgaWYgKCFydWxlTmFtZSlcclxuXHRcdFx0cmV0dXJuIGdlbmVyYXRlVW5pcXVlTmFtZSgpO1xyXG5cdFx0ZWxzZSBpZiAocnVsZU5hbWUgaW4gdGhpcy5zZCAmJiBcIm5hbWVcIiBpbiB0aGlzLnNkW3J1bGVOYW1lXSlcclxuICAgICAgICAgICAgLy8gdGhpcyBoYW5kbGVzIGNhc2VzIHdoZW4gYSBcIm5hbWVkXCIgcnVsZSBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc3R5bGUgZGVmaW5pdGlvbjtcclxuICAgICAgICAgICAgLy8gZm9yIGV4YW1wbGUgd2hlbiBhIGRlcml2ZWQgY2xhc3Mgb3ZlcnJpZGVzIHRoZSB2YWx1ZSBvZiBhIGJhc2UgY2xhc3NcclxuXHRcdFx0cmV0dXJuIHRoaXMuc2RbcnVsZU5hbWVdLm5hbWU7XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdC8vIGZpbmQgb3V0IGlmIHRoZXJlIGlzIGEgcnVsZSB3aXRoIHRoaXMgbmFtZSBkZWZpbmVkIGluIGEgc3R5bGVzaGVldCBpbnN0YW5jZSBjcmVhdGVkXHJcbiAgICAgICAgICAgIC8vIGZvciBhIGNsYXNzIGZyb20gdGhlIHByb3RvdHlwZSBjaGFpbiBvZiB0aGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcy4gT3RoZXJ3aXNlLCBpZlxyXG4gICAgICAgICAgICAvLyB0aGVyZSBpcyBhIHBhcmVudCBjb250YWluZXIsIHJlY3Vyc2UgdG8gaXQ7IG90aGVyd2lzZSwgZ2VuZXJhdGUgdGhlIG5hbWUuXHJcblx0XHRcdGxldCBleGlzdGluZ05hbWUgPSBmaW5kTmFtZUZvclJ1bGVJblByb3RvdHlwZUNoYWluKCB0aGlzLnNkYywgcnVsZU5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdOYW1lKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nTmFtZTtcclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5wYylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBjLmdldFNjb3BlZE5hbWUoIHJ1bGVOYW1lKTtcclxuICAgICAgICAgICAgZWxzZVxyXG5cdFx0XHQgICAgcmV0dXJuIGdlbmVyYXRlTmFtZSggdGhpcy5uYW1lLCBydWxlTmFtZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblxyXG4gICAgLyoqIEluc2VydHMgYWxsIHJ1bGVzIGRlZmluZWQgaW4gdGhpcyBjb250YWluZXIgdG8gZWl0aGVyIHRoZSBzdHlsZSBzaGVldCBvciBncm91cGluZyBydWxlLiAqL1xyXG5cdHB1YmxpYyBpbnNlcnQoIHJ1bGVCYWc6IElNaW1jc3NSdWxlQmFnKTogdm9pZFxyXG5cdHtcclxuXHRcdC8vIGluc2VydCBAaW1wb3J0IGFuZCBAbmFtZXNwYWNlIHJ1bGVzIGFzIHRoZXkgbXVzdCBiZSBiZWZvcmUgb3RoZXIgcnVsZXMuIElmIHRoZSBwYXJlbnQgaXMgYSBncm91cGluZ1xyXG5cdFx0Ly8gcnVsZSwgZG9uJ3QgaW5zZXJ0IEBpbXBvcnQgYW5kIEBuYW1lc3BhY2UgcnVsZXMgYXQgYWxsXHJcblx0XHRpZiAoIXRoaXMucHNkKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLmltcG9ydHMuZm9yRWFjaCggcnVsZSA9PiBydWxlLmluc2VydCggcnVsZUJhZykpO1xyXG5cdFx0XHR0aGlzLm5hbWVzcGFjZXMuZm9yRWFjaCggcnVsZSA9PiBydWxlLmluc2VydCggcnVsZUJhZykpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFjdGl2YXRlIHJlZmVyZW5jZWQgc3R5bGUgZGVmaW5pdGlvbnNcclxuXHRcdGZvciggbGV0IHJlZiBvZiB0aGlzLnJlZnMpXHJcblx0XHRcdHJlZltzeW1SQ10uYWN0aXZhdGUoIHRoaXMuZWxtKTtcclxuXHJcblx0XHQvLyBpbnNlcnQgb3VyIGN1c3RvbSB2YXJpYWJsZXMgaW50byB0aGUgXCI6cm9vdFwiIHJ1bGVcclxuXHRcdGlmICh0aGlzLnZhcnMubGVuZ3RoID4gMClcclxuXHRcdFx0dGhpcy52YXJSb290UnVsZSA9IHJ1bGVCYWcuYWRkKCBnZXRSb290Q3NzRm9yVmFycyggdGhpcy52YXJzKSk/LmNzc1J1bGUgYXMgQ1NTU3R5bGVSdWxlO1xyXG5cclxuXHRcdC8vIGluc2VydCBhbGwgb3RoZXIgcnVsZXNcclxuXHRcdHRoaXMucnVsZXMuZm9yRWFjaCggcnVsZSA9PiBydWxlLmluc2VydCggcnVsZUJhZykpO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvKiogQ2xlYXJzIGFsbCBDU1MgcnVsZSBvYmplY3RzIGRlZmluZWQgaW4gdGhpcyBjb250YWluZXIuICovXHJcblx0cHVibGljIGNsZWFyKCk6IHZvaWRcclxuXHR7XHJcbiAgICAgICAgLy8gaW1wb3J0IGFuZCBuYW1lc3BhY2UgcnVsZXMgY2FuIG9ubHkgZXhpc3QgaW4gdGhlIHRvcC1sZXZlbCBzdHlsZSBkZWZpbml0aW9uIGNsYXNzXHJcblx0XHRpZiAoIXRoaXMucHNkKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLmltcG9ydHMuZm9yRWFjaCggcnVsZSA9PiBydWxlLmNsZWFyKCkpO1xyXG5cdFx0XHR0aGlzLm5hbWVzcGFjZXMuZm9yRWFjaCggcnVsZSA9PiBydWxlLmNsZWFyKCkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudmFyUm9vdFJ1bGUgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0dGhpcy5ydWxlcy5mb3JFYWNoKCBydWxlID0+IHJ1bGUuY2xlYXIoKSk7XHJcblxyXG5cdFx0Ly8gZGVhY3RpdmF0ZSBpbXBvcnRlZCBzdHlsZXNoZWV0c1xyXG5cdFx0Zm9yKCBsZXQgcmVmIG9mIHRoaXMucmVmcylcclxuXHRcdFx0cmVmW3N5bVJDXS5kZWFjdGl2YXRlKCk7XHJcblx0fVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnNlcnRzIHRoaXMgc3R5bGVzaGVldCBpbnRvIERPTS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5zZXJ0QmVmb3JlIE9wdGlvbmFsIEhUTUwgZWxlbWVudCBiZWZvcmUgd2hpY2ggdGhlIG5ldyAnPHN0eWxlPicgZWxlbWVudCBzaG91bGQgYmVcclxuICAgICAqIGluc2VydGVkLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgbmV3IGVsZW1lbnQgd2lsbCBiZSBpbnNlcnRlZCBhcyB0aGUgbGFzdCBlbGVtZW50IHVuZGVyIHRoZVxyXG4gICAgICogJzxoZWFkPicgZWxlbWVudC5cclxuICAgICAqL1xyXG5cdHB1YmxpYyBhY3RpdmF0ZSggaW5zZXJ0QmVmb3JlPzogSU1pbWNzc1N0eWxlRWxlbWVudCk6IHZvaWRcclxuXHR7XHJcbiAgICAgICAgLy8gYWN0aXZhdGlvbiBjb250ZXh0IG1heSBub3QgZXhpc3QgaWYgdGhlIGNvZGUgaXMgZXhlY3V0aW5nIG9uIGEgc2VydmVyIGFuZCBTU1IgaGFzXHJcbiAgICAgICAgLy8gbm90IGJlZW4gc3RhcnRlZFxyXG5cdFx0aWYgKCFzX2FjdGl2YXRpb25Db250ZXh0IHx8ICsrdGhpcy5yZWZDb3VudCA+IDEpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8vICNpZiBERUJVR1xyXG4gICAgICAgIGxldCB0aW1lTGFiZWwgPSBgQWN0aXZhdGluZyBzdHlsZSBkZWZpbml0aW9uICcke3RoaXMubmFtZX0nYDtcclxuICAgICAgICBjb25zb2xlLnRpbWUoIHRpbWVMYWJlbCk7XHJcbiAgICAgICAgLy8vICNlbmRpZlxyXG5cclxuICAgICAgICAvLyBvbmx5IHRoZSB0b3AtbGV2ZWwgbm90LWVtYmVkZGVkIHN0eWxlIGRlZmluaXRpb25zIGNyZWF0ZSB0aGUgYDxzdHlsZT5gIGVsZW1lbnRcclxuICAgICAgICBpZiAoIXRoaXMucGMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5lYylcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxtID0gdGhpcy5lYy5lbG07XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlbWVzIGFyZSBpbnNlcnRlZCBiZWZvcmUgdGhlIHNwZWNpYWwgcGxhY2Vob2xkZXIgZWxlbWVudCwgd2hpY2ggaXMgY3JlYXRlZFxyXG4gICAgICAgICAgICAgICAgLy8gYXQgdGhlIHRvcCBvZiB0aGUgJzxoZWFkPicgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2QgaW5zdGFuY2VvZiBUaGVtZURlZmluaXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0QmVmb3JlID0gc19hY3RpdmF0aW9uQ29udGV4dD8uZ2V0VGhlbWVQbGFjZWhvbGRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZWxtID0gc19hY3RpdmF0aW9uQ29udGV4dD8uY3JlYXRlU3R5bGVFbG0oIHRoaXMubmFtZSwgaW5zZXJ0QmVmb3JlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuZWxtID0gdGhpcy5wYy5lbG07XHJcblxyXG4gICAgICAgIC8vIGlmIHRoaXMgaXMgYSB0aGVtZSBjbGFzcyBhY3RpdmF0aW9uLCBjaGVjayB3aGV0aGVyIHRoZSBpbnN0YW5jZSBpcyBzZXQgYXMgdGhlIGN1cnJlbnRcclxuICAgICAgICAvLyBvbmUgZm9yIGl0cyB0aGVtZSBiYXNlIGNsYXNzLiBJZiBubywgdGhlbiBkZWFjdGl2YXRlIHRoZSB0aGVtZSBpbnN0YW5jZSBjdXJyZW50bHkgc2V0XHJcbiAgICAgICAgLy8gYXMgYWN0aXZlLiBJbiBhbnkgY2FzZSwgc2V0IG91ciBuZXcgaW5zdGFuY2UgYXMgdGhlIGN1cnJlbnRseSBhY3RpdmUgb25lLiBXZSBpZ25vcmVcclxuICAgICAgICAvLyB0aGVtZSBkZWNsYXJhdGlvbiBjbGFzc2VzIC0gdGhvc2UgdGhhdCBkaXJlY3RseSBkZXJpdmUgZnJvbSBUaGVtZURlZmluaXRpb25cclxuICAgICAgICBpZiAoaXNUaGVtZUltcGxlbWVudGF0aW9uKHRoaXMuc2QpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHRoZW1lQ2xhc3MgPSB0aGlzLnNkYyBhcyB1bmtub3duIGFzIElTdHlsZURlZmluaXRpb25DbGFzczxUaGVtZURlZmluaXRpb24+O1xyXG4gICAgICAgICAgICBpZiAodGhlbWVDbGFzcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJJbnN0YW5jZSA9IGdldEN1cnJlbnRUaGVtZSggdGhlbWVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3Vyckluc3RhbmNlICYmIGN1cnJJbnN0YW5jZSAhPT0gdGhpcy5zZClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyckNvbnRhaW5lciA9IGN1cnJJbnN0YW5jZVtzeW1SQ10gYXMgUnVsZUNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyQ29udGFpbmVyLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50VGhlbWUoIHRoaXMuc2QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmluc2VydCggdGhpcy5lbG0hKTtcclxuXHJcbiAgICAgICAgLy8vICNpZiBERUJVR1xyXG4gICAgICAgIGNvbnNvbGUudGltZUVuZCggdGltZUxhYmVsKTtcclxuICAgICAgICAvLy8gI2VuZGlmXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblx0LyoqIFJlbW92ZXMgdGhpcyBzdHlsZXNoZWV0IGZyb20gRE9NLiAqL1xyXG5cdHB1YmxpYyBkZWFjdGl2YXRlKCk6IHZvaWRcclxuXHR7XHJcbiAgICAgICAgLy8gZ3VhcmQgZnJvbSBleHRyYSBkZWFjdGl2YXRlIGNhbGxzXHJcblx0XHRpZiAodGhpcy5yZWZDb3VudCA9PT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vLyAjaWYgREVCVUdcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGBFeHRyYSBjYWxsIHRvIGRlYWN0aXZhdGUoKSBmb3Igc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyAnJHt0aGlzLm5hbWV9J2ApO1xyXG4gICAgICAgICAgICAvLy8gI2VuZGlmXHJcblxyXG5cdFx0XHRyZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdGlmICgtLXRoaXMucmVmQ291bnQgPiAwKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIC8vLyAjaWYgREVCVUdcclxuICAgICAgICBsZXQgdGltZUxhYmVsID0gYERlYWN0aXZhdGluZyBzdHlsZSBkZWZpbml0aW9uICcke3RoaXMubmFtZX0nYDtcclxuICAgICAgICBjb25zb2xlLnRpbWUoIHRpbWVMYWJlbCk7XHJcbiAgICAgICAgLy8vICNlbmRpZlxyXG5cclxuICAgICAgICB0aGlzLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIC8vIG9ubHkgdGhlIHRvcC1sZXZlbCBub3QtZW1iZWRkZWQgc3R5bGUgZGVmaWl0aW9ucyBjcmVhdGUgdGhlIGA8c3R5bGU+YCBlbGVtZW50XHJcbiAgICAgICAgaWYgKCF0aGlzLnBzZCAmJiAhdGhpcy5lYylcclxuICAgICAgICAgICAgdGhpcy5lbG0hLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmVsbSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhpcyBpcyBhIHRoZW1lIGNsYXNzIGRlYWN0aXZhdGlvbiwgY2hlY2sgd2hldGhlciB0aGUgaW5zdGFuY2UgaXMgc2V0IGFzIHRoZSBjdXJyZW50XHJcbiAgICAgICAgLy8gb25lIGZvciBpdHMgdGhlbWUgYmFzZSBjbGFzcy4gSWYgeWVzLCByZW1vdmUgaXQgYXMgdGhlIGN1cnJlbnRseSBhY3RpdmUgb25lLlxyXG4gICAgICAgIGlmIChpc1RoZW1lSW1wbGVtZW50YXRpb24odGhpcy5zZCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgdGhlbWVDbGFzcyA9IHRoaXMuc2RjIGFzIHVua25vd24gYXMgSVN0eWxlRGVmaW5pdGlvbkNsYXNzPFRoZW1lRGVmaW5pdGlvbj47XHJcbiAgICAgICAgICAgIGlmICh0aGVtZUNsYXNzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3Vyckluc3RhbmNlID0gZ2V0Q3VycmVudFRoZW1lKCB0aGVtZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJySW5zdGFuY2UgPT09IHRoaXMuc2QpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ3VycmVudFRoZW1lKCB0aGVtZUNsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vICNpZiBERUJVR1xyXG4gICAgICAgIGNvbnNvbGUudGltZUVuZCggdGltZUxhYmVsKTtcclxuICAgICAgICAvLy8gI2VuZGlmXHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8qKlxyXG4gICAgICogU3R5bGUgRGVmaW5pdGlvbiAtIGluc3RhbmNlIG9mIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIHRoYXQgdGhpcyBjb250YWluZXIgaXNcclxuICAgICAqIGF0dGFjaGVkIHRvLlxyXG4gICAgICovXHJcblx0cHVibGljIHNkOiBJU3R5bGVEZWZpbml0aW9uO1xyXG5cclxuXHQvKiogU3R5bGUgRGVmaW5pdGlvbiBDbGFzcyB0byB3aG9zZSBpbnN0YW5jZSB0aGlzIGNvbnRhaW5lciBpcyBhdHRhY2hlZC4gKi9cclxuXHRwdWJsaWMgc2RjOiBJU3R5bGVEZWZpbml0aW9uQ2xhc3NcclxuXHJcblx0LyoqXHJcbiAgICAgKiBOYW1lIG9mIHRoaXMgY29udGFpbmVyLCB3aGljaCwgZGVwZW5kaW5nIG9uIHRoZSBtb2RlLCBpcyBlaXRoZXIgdGFrZW4gZnJvbSB0aGUgY2xhc3NcclxuICAgICAqIGRlZmluaXRpb24gbmFtZSBvciBnZW5lcmF0ZWQgdW5pcXVlbHkuXHJcbiAgICAgKi9cclxuXHRwdWJsaWMgbmFtZTogc3RyaW5nXHJcblxyXG5cdC8qKiBFbWJlZGRpbmcgQ29udGFpbmVyIHRoYXQgaXMgZW1iZWRkaW5nIG91ciBpbnN0YW5jZSAodGhhdCBpcywgdGhlIGluc3RhbmNlIGNvcnJlc3BvbmRpbmdcclxuICAgICAqIHRvIG91ciBjb250YWluZXIpLiBJZiBkZWZpbmVkLCB0aGlzIGNvbnRhaW5lcidzIGA8c3R5bGU+YCBlbGVtZW50IGlzIHVzZWQgdG8gaW5zZXJ0IENTU1xyXG4gICAgICogcnVsZXMgaW50byBpbnN0ZWFkIG9mIHRvcExldmVsQ29udGFpbmVyLlxyXG4gICAgICovXHJcblx0cHVibGljIGVjPzogRW1iZWRkaW5nQ29udGFpbmVyO1xyXG5cclxuXHQvKipcclxuICAgICAqIFBhcmVudCBTdHlsZSBEZWZpbml0aW9uIC0gaW5zdGFuY2Ugb2YgdGhlIHBhcmVudCBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIGluIHRoZSBjaGFpbiBvZlxyXG4gICAgICogZ3JvdXBpbmcgcnVsZXMgdGhhdCBsZWFkIHRvIHRoaXMgcnVsZSBjb250YWluZXIuIEZvciB0b3AtbGV2ZWwgc3R5bGUgZGVmaW5pdGlvbnMsIHRoaXMgaXNcclxuICAgICAqIHVuZGVmaW5lZC5cclxuICAgICAqL1xyXG5cdHByaXZhdGUgcHNkPzogSVN0eWxlRGVmaW5pdGlvbjtcclxuXHJcblx0LyoqIFBhcmVudCBDb250YWluZXIgLSBydWxlIGNvbnRhaW5lciB0aGF0IGJlbG9uZ3MgdG8gdGhlIHBhcmVudCBzdHlsZSBkZWZpbnRpb24uIElmIG91clxyXG4gICAgICogY29udGFpbmVyIGlzIHRvcC1sZXZlbCwgdGhpcyBwcm9wZXJ0eSBpcyB1bmRlZmluZWQuXHJcbiAgICAgKi9cclxuXHRwcml2YXRlIHBjPzogUnVsZUNvbnRhaW5lcjtcclxuXHJcblx0Ly8gTGlzdCBvZiByZWZlcmVuY2VzIHRvIG90aGVyIHN0eWxlIGRlZmluaXRpb25zIGNyZWFlZCB2aWEgdGhlICR1c2UgZnVuY3Rpb24uXHJcblx0cHJpdmF0ZSByZWZzOiBTdHlsZURlZmluaXRpb25bXSA9IFtdO1xyXG5cclxuXHQvLyBMaXN0IG9mIEBpbXBvcnQgcnVsZXNcclxuXHRwcml2YXRlIGltcG9ydHM6IEltcG9ydFJ1bGVbXSA9IFtdO1xyXG5cclxuXHQvLyBMaXN0IG9mIEBuYW1lc3BhY2UgcnVsZXNcclxuXHRwcml2YXRlIG5hbWVzcGFjZXM6IE5hbWVzcGFjZVJ1bGVbXSA9IFtdO1xyXG5cclxuXHQvLyBMaXN0IG9mIGN1c3RvbSB2YXJpYWJsZSBydWxlcy5cclxuXHRwcml2YXRlIHZhcnM6IFZhclJ1bGVbXSA9IFtdO1xyXG4gICAgcHVibGljIGdldFZhcnMoKTogVmFyUnVsZVtdIHsgcmV0dXJuIHRoaXMudmFyczsgfVxyXG5cclxuXHQvLyBMaXN0IG9mIHJ1bGVzIHRoYXQgYXJlIG5vdCBpbXBvcnRzLCBuYW1lc3BhY2VzLCBjdXN0b20gdmFycywgcmVmZXJlbmNlcyBvciBncm91cGluZyBydWxlcy5cclxuXHRwcml2YXRlIHJ1bGVzOiBSdWxlW10gPSBbXTtcclxuXHJcblx0Ly8gXCI6cm9vdFwiIHJ1bGUgd2hlcmUgYWxsIGN1c3RvbSBDU1MgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoaXMgY29udGFpbmVyIGFyZSBkZWZpbmVkLlxyXG5cdHByaXZhdGUgdmFyUm9vdFJ1bGU6IENTU1N0eWxlUnVsZSB8IHVuZGVmaW5lZDtcclxuXHJcblx0Ly8gUmVmZXJlbmNlIGNvdW50IG9mIGFjdGl2YXRpb24gcmVxdWVzdHMuXHJcblx0cHJpdmF0ZSByZWZDb3VudDogbnVtYmVyID0gMDtcclxuXHJcblx0Ly8gT2JqZWN0IHJlcHJlc2VudGluZyBlaXRoZXIgRE9NIHN0eWxlIGVsZW1lbnQgZm9yIGNsaWVudCBhY3RpdmF0aW9uIGNvbnRleHQgb3Igc2VyaWFsaXphdGlvblxyXG4gICAgLy8gaW1wbGVtZW50YXRpb24uXHJcblx0cHVibGljIGVsbT86IElNaW1jc3NTdHlsZUVsZW1lbnQ7XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgZ2V0Um9vdENzc0ZvclZhcnMgPSAodmFyczogVmFyUnVsZVtdKTogc3RyaW5nID0+XHJcbiAgICBgOnJvb3QgeyR7dmFycy5tYXAoIHZhck9iaiA9PiB2YXJPYmoudG9Dc3MoKSkuZmlsdGVyKCB2ID0+ICEhdikuam9pbihcIjtcIil9fWA7XHJcblxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gTmFtZSBnZW5lcmF0aW9uXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIFNldHMgdGhlIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRvIHVzZSBvcHRpbWl6ZWQgKHNob3J0KSBydWxlIG5hbWVzLiBJZiB5ZXMsIHRoZSBuYW1lc1xyXG4gKiB3aWxsIGJlIGNyZWF0ZWQgYnkgYXBwZW5kaW5nIGEgdW5pcXVlIG51bWJlciB0byB0aGUgZ2l2ZW4gcHJlZml4LiBJZiB0aGUgcHJlZml4IGlzIG5vdFxyXG4gKiBzcGVjaWZpZWQsIHRoZSBzdGFuZGFyZCBwcmVmaXggXCJuXCIgd2lsbCBiZSB1c2VkLlxyXG4gKiBAcGFyYW0gZW5hYmxlXHJcbiAqIEBwYXJhbSBwcmVmaXhcclxuICovXHJcbmV4cG9ydCBjb25zdCBjb25maWdOYW1lcyA9IChtZXRob2Q6IE5hbWVHZW5lcmF0aW9uTWV0aG9kLCBwcmVmaXg/OiBzdHJpbmcpOiB2b2lkID0+XHJcbntcclxuXHRzX25hbWVHZW5lcmF0b25NZXRob2QgPSBtZXRob2Q7XHJcblx0c191bmlxdWVTdHlsZU5hbWVzUHJlZml4ID0gcHJlZml4ID8gcHJlZml4IDogXCJuXCI7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRvIHVzZSBvcHRpbWl6ZWQgbmFtZXMgZm9yIHN0eWxlIGVsZW1lbnRzIChjbGFzc2VzLCAgYW5pbWF0aW9ucywgZXRjLilcclxuICogQnkgZGVmYXVsdCB0aGlzIGZsYWcgaXMgdHJ1ZSBpbiB0aGUgUmVsZWFzZSBidWlsZCBvZiB0aGUgbGlicmFyeSBhbmQgZmFsc2UgaW4gdGhlIERlYnVnIGJ1aWxkLlxyXG4gKi9cclxubGV0IHNfbmFtZUdlbmVyYXRvbk1ldGhvZCA9IE5hbWVHZW5lcmF0aW9uTWV0aG9kLk9wdGltaXplZDtcclxuXHJcbi8vLyAjaWYgREVCVUdcclxuc19uYW1lR2VuZXJhdG9uTWV0aG9kID0gTmFtZUdlbmVyYXRpb25NZXRob2QuU2NvcGVkO1xyXG4vLy8gI2VuZGlmXHJcblxyXG4vKipcclxuICogUHJlZml4IHRvIHVzZSB3aGVuIGdlbmVyYXRpbmcgdW5pcXVlIHN0eWxlIG5hbWVzLiBJZiB1bmRlZmluZWQsIGEgc3RhbmRhcmQgcHJlZml4IFwiblwiIHdpbGwgYmUgdXNlZC5cclxuICovXHJcbmxldCBzX3VuaXF1ZVN0eWxlTmFtZXNQcmVmaXggPSBcIm5cIjtcclxuXHJcbi8qKiBOZXh0IG51bWJlciB0byB1c2Ugd2hlbiBnZW5lcmF0aW5nIHVuaXF1ZSBpZGVudGlmaWVycy4gKi9cclxubGV0IHNfbmV4dFVuaXF1ZUlEID0gMTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBuYW1lIHRvIHVzZSBmb3IgdGhlIGdpdmVuIHJ1bGUgZnJvbSB0aGUgZ2l2ZW4gc3R5bGUgc2hlZXQuXHJcbiAqL1xyXG5jb25zdCBnZW5lcmF0ZU5hbWUgPSAoc2hlZXROYW1lOiBzdHJpbmcsIHJ1bGVOYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT5cclxue1xyXG5cdHN3aXRjaCggc19uYW1lR2VuZXJhdG9uTWV0aG9kKVxyXG4gICAge1xyXG5cdFx0Y2FzZSBOYW1lR2VuZXJhdGlvbk1ldGhvZC5VbmlxdWVTY29wZWQ6IHJldHVybiBgJHtzaGVldE5hbWV9XyR7cnVsZU5hbWV9XyR7c19uZXh0VW5pcXVlSUQrK31gO1xyXG5cdFx0Y2FzZSBOYW1lR2VuZXJhdGlvbk1ldGhvZC5PcHRpbWl6ZWQ6IHJldHVybiBnZW5lcmF0ZVVuaXF1ZU5hbWUoKTtcclxuICAgICAgICBjYXNlIE5hbWVHZW5lcmF0aW9uTWV0aG9kLlNjb3BlZDogcmV0dXJuIGAke3NoZWV0TmFtZX1fJHtydWxlTmFtZX1gO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSB1bmlxdWUgbmFtZSwgd2hpY2ggY2FuIGJlIHVzZWQgZWl0aGVyIGZvciBzdHlsZSBlbGVtZW50J3MgSUQgb3Igb3IgY2xhc3MsXHJcbiAqIGlkZW50aWZpZXIgb3IgYW5pbWF0aW9uIG5hbWUuIE5hbWVzIGFyZSBnZW5lcmF0ZWQgdXNpbmcgYSBzaW1wbGUgaW5jcmVtZW50aW5nIG51bWJlci5cclxuICovXHJcbmNvbnN0IGdlbmVyYXRlVW5pcXVlTmFtZSA9IChwcmVmaXg/OiBzdHJpbmcpOiBzdHJpbmcgPT5cclxuXHQocHJlZml4ID8gcHJlZml4IDogc191bmlxdWVTdHlsZU5hbWVzUHJlZml4KSArIHNfbmV4dFVuaXF1ZUlEKys7XHJcblxyXG5cclxuXHJcbi8vIExvb2tzIHVwIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpbiB0aGUgcHJvdG90eXBlIGNoYWluIG9mIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uXHJcbi8vIGNsYXNzLiBJZiBmb3VuZCBhbmQgaWYgdGhlIHByb3BlcnR5IGlzIGEgcnVsZSwgdGhlbiByZXR1cm5zIHRoZSBuYW1lIGFzc2lnbmVkIGZvciBpdC5cclxuY29uc3QgZmluZE5hbWVGb3JSdWxlSW5Qcm90b3R5cGVDaGFpbiA9IChkZWZpbml0aW9uQ2xhc3M6IElTdHlsZURlZmluaXRpb25DbGFzcywgcnVsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwgPT5cclxue1xyXG5cdGlmICghZGVmaW5pdGlvbkNsYXNzKVxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdC8vIGxvb3Agb3ZlciBwcm90b3R5cGVzXHJcbiAgICBmb3IoIGxldCBiYXNlQ2xhc3MgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoIGRlZmluaXRpb25DbGFzcyk7XHJcbiAgICAgICAgICAgIGJhc2VDbGFzcyAhPT0gU3R5bGVEZWZpbml0aW9uICYmIGJhc2VDbGFzcyAhPT0gVGhlbWVEZWZpbml0aW9uO1xyXG4gICAgICAgICAgICAgICAgYmFzZUNsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKCBiYXNlQ2xhc3MpKVxyXG5cdHtcclxuXHRcdC8vIGNoZWNrIGlmIHRoZSBiYXNlIGNsYXNzIGFscmVhZHkgaGFzIGFuIGFzc29jaWF0ZWQgaW5zdGFuY2U7IGlmIHllcywgY2hlY2sgd2hldGhlclxyXG5cdFx0Ly8gaXQgaGFzIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gcnVsZSBuYW1lLiBJZiB5ZXMsIHRoZW4gdXNlIHRoaXMgcnVsZSdzIGFscmVhZHlcclxuICAgICAgICAvLyBnZW5lcmF0ZWQgbmFtZSAoaWYgZXhpc3RzKS5cclxuXHRcdGlmIChiYXNlQ2xhc3MuaGFzT3duUHJvcGVydHkoc3ltSW5zdGFuY2UpKVxyXG5cdFx0e1xyXG4gICAgICAgICAgICBsZXQgYmFzZUluc3QgPSBiYXNlQ2xhc3Nbc3ltSW5zdGFuY2VdO1xyXG5cdFx0XHRpZiAoYmFzZUluc3QgJiYgIGJhc2VJbnN0W3J1bGVOYW1lXSAhPSBudWxsICYmIFwibmFtZVwiIGluIGJhc2VJbnN0W3J1bGVOYW1lXSlcclxuXHRcdFx0XHRyZXR1cm4gYmFzZUluc3RbcnVsZU5hbWVdLm5hbWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbnVsbDtcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gUHJvY2Vzc2luZyBmdW5jdGlvbnNcclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogUHJvY2Vzc2VzIHRoZSBnaXZlbiBzdHlsZXNoZWV0IGRlZmluaXRpb24gY2xhc3Mgb3IgaW5zdGFuY2UgYW5kIGFzc2lnbnMgbmFtZXMgdG8gaXRzIHJ1bGVzLlxyXG4gKiBJZiB0aGUgcGFyYW1ldGVyIGlzIGEgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcyB3ZSBjaGVjayB3aGV0aGVyIHRoZXJlIGlzIGFuIGluc3RhbmNlIGFscmVhZHlcclxuICogY3JlYXRlZCBmb3IgaXQgYXMgYSBjbGFzcyB3aWxsIGhhdmUgb25seSBhIHNpbmdsZSBhc3NvY2lhdGVkIGluc3RhbmUgbm8gbWF0dGVyIGhvdyBtYW55IHRpbWVzXHJcbiAqIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLlxyXG4gKlxyXG4gKiBJZiB0aGUgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCAoYW4gaW5zdGFuY2Ugb2YgdGhlIFN0eWxlRGVmaW5pdGlvbiBjbGFzcykgdGhlbiB3ZSBjaGVjayB3aGV0aGVyXHJcbiAqIGl0IGhhcyBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkLiBJZiB5ZXMsIHdlIGp1c3QgcmV0dXJuIGl0IGJhY2s7IGlmIG5vLCB3ZSBhc3NpZ24gbmV3IHVuaXF1ZSBuYW1lc1xyXG4gKiB0byBpdHMgcnVsZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcHJvY2Vzc1NEID0gKGluc3RPckNsYXNzOiBJU3R5bGVEZWZpbml0aW9uIHwgSVN0eWxlRGVmaW5pdGlvbkNsYXNzLFxyXG5cdCAgICBwYXJlbnQ/OiBJU3R5bGVEZWZpbml0aW9uKTogSVN0eWxlRGVmaW5pdGlvbiA9PlxyXG5cdC8vIGluc3RPckNsYXNzIGhhcyB0eXBlIFwib2JqZWN0XCIgaWYgaXQgaXMgYW4gaW5zdGFuY2UgYW5kIFwiZnVuY3Rpb25cIiBpZiBpdCBpcyBhIGNsYXNzXHJcblx0dHlwZW9mIGluc3RPckNsYXNzID09PSBcIm9iamVjdFwiID8gaW5zdE9yQ2xhc3MgOiBwcm9jZXNzQ2xhc3MoIGluc3RPckNsYXNzLCBwYXJlbnQpO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUHJvY2Vzc2VzIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIGJ5IGNyZWF0aW5nIGl0cyBpbnN0YW5jZSBhbmQgYXNzb2NpYXRpbmcgYVxyXG4gKiBydWxlIGNvbnRhaW5lciBvYmplY3Qgd2l0aCBpdC4gVGhlIGNsYXNzIHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBpbnN0YW5jZSB1c2luZyBhXHJcbiAqIFN5bWJvbCBwcm9wZXJ0eS4gVGhlIHBhcmVudCBwYXJhbWV0ZXIgaXMgYSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBzdHlsZSBkZWZpaXRpb25cclxuICogb2JqZWN0IG9yIG51bGwgaWYgdGhlIGdpdmVuIGNsYXNzIGlzIGl0c2VsZiBhIHRvcC1sZXZlbCBjbGFzcyAodGhhdCBpcywgaXMgbm90IGEgY2xhc3NcclxuICogdGhhdCBkZWZpbmVzIHJ1bGVzIHdpdGhpbiBuZXN0ZWQgZ3JvdXBpbmcgcnVsZXMpLlxyXG4gKi9cclxuY29uc3QgcHJvY2Vzc0NsYXNzID0gKHNkYzogSVN0eWxlRGVmaW5pdGlvbkNsYXNzLCBwYXJlbnQ/OiBJU3R5bGVEZWZpbml0aW9uKTogSVN0eWxlRGVmaW5pdGlvbiA9PlxyXG57XHJcbiAgICAvLyBjaGVjayB3aGV0aGVyIHRoaXMgZGVmaW5pdGlvbiBjbGFzcyBpcyBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCBhbiBpbnN0YW5jZS4gTm90ZSB0aGF0IHdlXHJcbiAgICAvLyB1c2UgaGFzT3duUHJvcGVydHkoKSBiZWNhdXNlIG90aGVyd2lzZSwgdGhpcyBjb3VsZCByZXR1cm4gaW5zdGFuY2UgZm9yIHRoZSBiYXNlIHN0eWxlXHJcbiAgICAvLyBkZWZpbml0aW9uIGNsYXNzLlxyXG5cdGlmIChzZGMuaGFzT3duUHJvcGVydHkoc3ltSW5zdGFuY2UpKVxyXG4gICAgICAgIHJldHVybiBzZGNbc3ltSW5zdGFuY2VdIGFzIElTdHlsZURlZmluaXRpb247XHJcblxyXG4gICAgLy8gcmVjdXJzaXZlbHkgcHJvY2VzcyBhbGwgYmFzZSBjbGFzc2VzIHNvIHRoYXQgcnVsZSBuYW1lcyBhcmUgZ2VuZXJhdGVkLiBXZSBkb24ndCBhY3RpdmF0ZSBzdHlsZXNcclxuICAgIC8vIGZvciB0aGVzZSBjbGFzc2VzIGJlY2F1c2UgZGVyaXZlZCBjbGFzc2VzIHdpbGwgaGF2ZSBhbGwgdGhlIHJ1bGVzIGZyb20gYWxsIHRoZSBiYXNlIGNsYXNzZXNcclxuICAgIC8vIGFzIHRoZWlyIG93biBhbmQgc28gdGhlc2UgcnVsZXMgd2lsbCBiZSBhY3RpdmF0ZWQgYXMgcGFydCBvZiB0aGUgZGVyaXZlZCBjbGFzcy5cclxuICAgIGxldCBiYXNlQ2xhc3MgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoIHNkYyk7XHJcbiAgICBpZiAoYmFzZUNsYXNzICE9PSBTdHlsZURlZmluaXRpb24gJiYgYmFzZUNsYXNzICE9PSBUaGVtZURlZmluaXRpb24pXHJcbiAgICAgICAgcHJvY2Vzc0NsYXNzKCBiYXNlQ2xhc3MsIHBhcmVudCk7XHJcblxyXG4gICAgdHJ5XHJcbiAgICB7XHJcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBpbnN0YW5jZSBvZiB0aGUgZGVmaW5pdGlvbiBjbGFzc1xyXG4gICAgICAgIHNfcHJvY2Vzc2luZ1N0eWxlRGVmaW5pdGlvbkNsYXNzID0gdHJ1ZTtcclxuICAgICAgICBsZXQgc2QgPSBuZXcgc2RjKCBwYXJlbnQpO1xyXG5cclxuICAgICAgICAvLyBhc3NvY2lhdGUgdGhlIGRlZmluaXRpb24gY2xhc3Mgd2l0aCB0aGUgY3JlYXRlZCBkZWZpbml0aW9uIGluc3RhbmNlXHJcbiAgICAgICAgc2RjW3N5bUluc3RhbmNlXSA9IHNkO1xyXG4gICAgICAgIHNkW3N5bUNsYXNzXSA9IHNkYztcclxuICAgICAgICByZXR1cm4gc2Q7XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5XHJcbiAgICB7XHJcbiAgICAgICAgc19wcm9jZXNzaW5nU3R5bGVEZWZpbml0aW9uQ2xhc3MgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUHJvY2Vzc2VzIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uIGluc3RhbmNlIGFuZCBhc3NpZ25zIG5hbWVzIHRvIGl0cyBydWxlcy4gSWYgdGhlXHJcbiAqIGluc3RhbmNlIGhhcyBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkLCB3ZSBkbyBub3RoaW5nOyBvdGhlcndpc2UsIHdlIGFzc2lnbiBuZXcgdW5pcXVlIG5hbWVzXHJcbiAqIHRvIGl0cyBydWxlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRWYXJzRnJvbVNEID0gKGluc3RPckNsYXNzOiBJU3R5bGVEZWZpbml0aW9uIHwgSVN0eWxlRGVmaW5pdGlvbkNsYXNzKTogSVZhclJ1bGVbXSA9PlxyXG4gICAgKHByb2Nlc3NTRCggaW5zdE9yQ2xhc3MpW3N5bVJDXSBhcyBSdWxlQ29udGFpbmVyKS5nZXRWYXJzKCk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBBY3RpdmF0ZXMgdGhlIGdpdmVuIHN0eWxlIGRlZmluaXRpb24gYW5kIGluc2VydHMgYWxsIGl0cyBydWxlcyBpbnRvIERPTS4gSWYgdGhlIGlucHV0IG9iamVjdCBpc1xyXG4gKiBub3QgYSBzdHlsZSBkZWZpbml0aW9uIGJ1dCBhIHN0eWxlIGRlZmluaXRpb24gY2xhc3MsIG9idGFpbiBzdHlsZSBkZWZpbml0aW9uIGJ5IGNhbGxpbmcgdGhlICR1c2VcclxuICogZnVuY3Rpb24uIE5vdGUgdGhhdCBlYWNoIHN0eWxlIGRlZmluaXRpb24gb2JqZWN0IG1haW50YWlucyBhIHJlZmVyZW5jZSBjb3VudGVyIG9mIGhvdyBtYW55IHRpbWVzXHJcbiAqIGl0IHdhcyBhY3RpdmF0ZWQgYW5kIGRlYWN0aXZhdGVkLiBUaGUgcnVsZXMgYXJlIGluc2VydGVkIHRvIERPTSBvbmx5IHdoZW4gdGhpcyByZWZlcmVuY2UgY291bnRlclxyXG4gKiBnb2VzIGZyb20gMCB0byAxLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGFjdGl2YXRlU0QgPSAoaW5zdGFuY2U6IElTdHlsZURlZmluaXRpb24pOiB2b2lkID0+XHJcbntcclxuXHRsZXQgcnVsZUNvbnRhaW5lciA9IGluc3RhbmNlW3N5bVJDXTtcclxuXHRpZiAoIXJ1bGVDb250YWluZXIpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgIC8vIGlmIHRoaXMgY29udGFpbmVyIGhhcyBhbiBlbWJlZGRpbmcgY29udGFpbmVyLCBhY3RpdmF0ZSB0aGUgZW1iZWRkaW5nIGNvbnRhaW5lcjsgb3RoZXJ3aXNlLFxyXG4gICAgLy8gYWN0aXZhdGUgdGhlIHJ1bGUgY29udGFpbmVyIGl0c2VsZi5cclxuICAgIChydWxlQ29udGFpbmVyLmVjID8/IHJ1bGVDb250YWluZXIpLmFjdGl2YXRlKCk7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIERlYWN0aXZhdGVzIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uIGJ5IHJlbW92aW5nIGl0cyBydWxlcyBmcm9tIERPTS4gTm90ZSB0aGF0IGVhY2ggc3R5bGVcclxuICogZGVmaW5pdGlvbiBvYmplY3QgbWFpbnRhaW5zIGEgcmVmZXJlbmNlIGNvdW50ZXIgb2YgaG93IG1hbnkgdGltZXMgaXQgd2FzIGFjdGl2YXRlZCBhbmRcclxuICogZGVhY3RpdmF0ZWQuIFRoZSBydWxlcyBhcmUgcmVtb3ZlZCBmcm9tIERPTSBvbmx5IHdoZW4gdGhpcyByZWZlcmVuY2UgY291bnRlciBnb2VzIGZyb20gMSB0byAwLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGRlYWN0aXZhdGVTRCA9IChpbnN0YW5jZTogSVN0eWxlRGVmaW5pdGlvbik6IHZvaWQgPT5cclxue1xyXG5cdGxldCBydWxlQ29udGFpbmVyID0gaW5zdGFuY2Vbc3ltUkNdO1xyXG5cdGlmICghcnVsZUNvbnRhaW5lcilcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgLy8gaWYgdGhpcyBjb250YWluZXIgaGFzIGFuIGVtYmVkZGluZyBjb250YWluZXIsIGRlYWN0aXZhdGUgdGhlIGVtYmVkZGluZyBjb250YWluZXI7IG90aGVyd2lzZSxcclxuICAgIC8vIGRlYWN0aXZhdGUgdGhlIHJ1bGUgY29udGFpbmVyIGl0c2VsZi5cclxuICAgIChydWxlQ29udGFpbmVyLmVjID8/IHJ1bGVDb250YWluZXIpLmRlYWN0aXZhdGUoKTtcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gRW1iZWRkaW5nXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqIFN5bWJvbCB1c2VkIGluIHN0eWxlIGRlZmluaXRpb24gY2xhc3NlcyB0byBwb2ludCB0byBhbiBlbWJlZGRpbmcgY29udGFpbmVyICovXHJcbmxldCBzeW1FbWJlZGRpbmdDb250YWluZXIgPSBTeW1ib2woXCJlY1wiKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBFbWJlZGRpbmdDb250YWluZXIgY2xhc3MgY29udGFpbnMgbXVsdGlwbGUgc3R5bGUgZGVmaW5pdGlvbiBjbGFzc2VzLCB3aGljaCBhcmUgYWN0aXZhdGVkIGFuZFxyXG4gKiBkZWFjdGl2YXRlZCB0b2dldGhlciB1bmRlciBhIHNpbmdsZSBgPHN0eWxlPmAgbm9kZS4gU3R5bGUgZGVmaW5pdGlvbiBjbGFzc2VzIGFyZSBhZGRlZCB0byB0aGVcclxuICogZW1iZWRkaW5nIGNvbnRhaW5lciBieSBiZWluZyBkZWNvcmF0ZWQgd2l0aCB0aGUgYEBlbWJlZGRlZGAgZGVjb3JhdG9yLlxyXG4gKi9cclxuY2xhc3MgRW1iZWRkaW5nQ29udGFpbmVyXHJcbntcclxuICAgIC8qKiBJRCB0byB1c2UgZm9yIHRoZSBgPHN0eWxlPmAgZWxlbWVudCAqL1xyXG4gICAgcHJpdmF0ZSBpZDogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTnVtYmVyIG9mIGFjdGl2YXRlZCBzdHlsZSBkZWZpbml0aW9ucyBiZWxvbmdpbmcgdG8gdGhpcyBjb250YWluZXIuIFRoaXMgbnVtYmVyIGlzXHJcbiAgICAgKiBpbmNyZW1lbnRlZCB1cG9uIGFjdGl2YXRpb24gYW5kIGRlY3JlbWVudGVkIHVwb24gZGVhY3RpdmF0aW9uIG9mIHN0eWxlIGRlZmluaXRpb25zLiBXaGVuXHJcbiAgICAgKiB0aGlzIG51bWJlciBnb2VzIGZyb20gMCB0byAxLCB0aGUgYDxzdHlsZT5gIGVsZW1lbnQgaXMgY3JlYXRlZCBhbmQgYWxsIHJ1bGVzIGZyb20gYWxsXHJcbiAgICAgKiBzdHlsZSBkZWZpbml0aW9ucyBhcmUgaW5zZXJ0ZWQgaW50byBpdC4gV2hlbiB0aGlzIG51bWJlciBnb2VzIGZyb20gMSB0byAwLCB0aGUgYDxzdHlsZT5gXHJcbiAgICAgKiBlbGVtZW50IGlzIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVmQ291bnQ6IG51bWJlcjtcclxuXHJcbiAgICAvKiogQ29sbGVjdGlvbiBvZiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzZXMgXCJlbWJlZGRlZFwiIGluIHRoaXMgY29udGFpbmVyICovXHJcbiAgICBwcml2YXRlIHNkY3M6IFNldDxJU3R5bGVEZWZpbml0aW9uQ2xhc3M+O1xyXG5cclxuXHQvLyBET00gc3R5bGUgZWxlbW50XHJcblx0cHVibGljIGVsbT86IElNaW1jc3NTdHlsZUVsZW1lbnQ7XHJcblxyXG5cclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoIGlkOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMucmVmQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuc2RjcyA9IG5ldyBTZXQ8SVN0eWxlRGVmaW5pdGlvbkNsYXNzPigpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBnaXZlbiBzdHlsZSBkZWZpbml0aW9uIGNsYXNzIHRvIHRoZSBsaXN0IG9mIGVtYmVkZGVkIGNsYXNzZXMuIElmIHRoZSBjb250YWluZXIgaXNcclxuICAgICAqIGN1cnJlbnRseSBhY3RpdmF0ZWQsIHRoZSBjbGFzcyB3aWxsIGJlIGFjdGl2YXRlZCB0b28uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGQoIGNsczogSVN0eWxlRGVmaW5pdGlvbkNsYXNzKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIC8vIGFkZCB0aGUgY2xhc3MgdG8gb3VyIGNvbnRhaW5lclxyXG4gICAgICAgIHRoaXMuc2Rjcy5hZGQoIGNscyk7XHJcblxyXG4gICAgICAgIC8vIHNldCB0aGUgc3ltYm9sIG9uIG91ciBjbGFzcyB0byBwb2ludCB0byB0aGUgY29udGFpbmVyXHJcbiAgICAgICAgY2xzW3N5bUVtYmVkZGluZ0NvbnRhaW5lcl0gPSB0aGlzO1xyXG5cclxuICAgICAgICAvLyBpZiB0aGUgZW1iZWRkaW5nIGNvbnRhaW5lciBpcyBjdXJyZW50bHkgYWN0aXZhdGVkLCB3ZSBuZWVkIHRvIGFjdGl2YXRlIHRoZSBhZGRlZFxyXG4gICAgICAgIC8vIHN0eWxlIGRlZmluaXRpb24gY2xhc3MgdXNpbmcgdGhlIGN1cnJlbnRseSBkZWZhdWx0IGFjdGl2YXRvclxyXG4gICAgICAgIGlmICh0aGlzLnJlZkNvdW50ID4gMClcclxuICAgICAgICAgICAgZ2V0QWN0aXZhdG9yKCkuYWN0aXZhdGUoIHByb2Nlc3NDbGFzcyggY2xzKSEpO1xyXG4gICAgfVxyXG5cclxuXHQvKipcclxuICAgICAqIEluc2VydHMgYWxsIHN0eWxlc2hlZXRzIGluIHRoaXMgY29udGFpbmVyIGludG8gRE9NLlxyXG4gICAgICovXHJcblx0cHVibGljIGFjdGl2YXRlKCk6IHZvaWRcclxuXHR7XHJcbiAgICAgICAgLy8gb25seSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBhY3RpdmF0aW9uIGNhbGwsIGNyZWF0ZSB0aGUgc3R5bGUgZWxlbWVudCBhbmQgaW5zZXJ0IGFsbFxyXG4gICAgICAgIC8vIHJ1bGVzIGZyb20gYWxsIHRoZSBzdHlsZSBkZWZpbml0aW9uIGNsYXNzZXMuXHJcblx0XHRpZiAoKyt0aGlzLnJlZkNvdW50ID09PSAxKVxyXG5cdFx0e1xyXG4gICAgICAgICAgICB0aGlzLmVsbSA9IHNfYWN0aXZhdGlvbkNvbnRleHQ/LmNyZWF0ZVN0eWxlRWxtKCB0aGlzLmlkKTtcclxuXHJcbiAgICAgICAgICAgIGZvciggbGV0IGNscyBvZiB0aGlzLnNkY3MpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIGRlZmluaXRpb24gY2xhc3MgbWF5IGJlIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIGFuIGluc3RhbmNlOyBpZiBub3QgLVxyXG4gICAgICAgICAgICAgICAgLy8gcHJvY2VzcyBpdCBub3cuXHJcbiAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBjbHMuaGFzT3duUHJvcGVydHkoc3ltSW5zdGFuY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBjbHNbc3ltSW5zdGFuY2VdXHJcbiAgICAgICAgICAgICAgICAgICAgOiBwcm9jZXNzQ2xhc3MoY2xzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAoaW5zdGFuY2Vbc3ltUkNdIGFzIFJ1bGVDb250YWluZXIpLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG4gICAgICogUmVtb3ZlcyBhbGwgc3R5bGVzaGVldHMgaW4gdGhpcyBjb250YWluZXIgaW50byBET00uXHJcbiAgICAgKi9cclxuXHRwdWJsaWMgZGVhY3RpdmF0ZSgpOiB2b2lkXHJcblx0e1xyXG4gICAgICAgIC8vIG9ubHkgaWYgdGhpcyBpcyB0aGUgbGFzdCBkZWFjdGl2YXRpb24gY2FsbCwgcmVtb3ZlIHRoZSBzdHlsZSBlbGVtZW50IGFuZCByZW1vdmUgYWxsXHJcbiAgICAgICAgLy8gcnVsZXMgZnJvbSBhbGwgdGhlIHN0eWxlIGRlZmluaXRpb24gY2xhc3Nlcy5cclxuXHRcdGlmICgtLXRoaXMucmVmQ291bnQgPT09IDApXHJcblx0XHR7XHJcbiAgICAgICAgICAgIHRoaXMuZWxtPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy5lbG0gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICBmb3IoIGxldCBjbHMgb2YgdGhpcy5zZGNzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWZpbml0aW9uIGNsYXNzIG11c3QgYmUgYWxyZWFkeSBhc3NvY2lhdGVkIHdpdGggYW4gaW5zdGFuY2VcclxuICAgICAgICAgICAgICAgIGlmICghY2xzLmhhc093blByb3BlcnR5KHN5bUluc3RhbmNlKSlcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAoY2xzW3N5bUluc3RhbmNlXVtzeW1SQ10gYXMgUnVsZUNvbnRhaW5lcikuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBNYXAgb2YgY2F0ZWdvcnkgbmFtZXMgdG8gZW1iZWRkaW5nIGNvbnRhaW5lciBvYmplY3RzIGNvbnRhaW5pbmcgc3R5bGUgZGVmaW5pdGlvbnMgZm9yIHRoZSBnaXZlblxyXG4gKiBjYXRlZ29yeS5cclxuICovXHJcbmxldCBzX2VtYmVkZGluZ0NvbnRhaW5lcnMgPSBuZXcgTWFwPHN0cmluZyxFbWJlZGRpbmdDb250YWluZXI+KCk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZWNvcmF0b3IgZnVuY3Rpb24gZm9yIHN0eWxlIGRlZmluaXRpb24gY2xhc3NlcyB0aGF0IHdpbGwgYmUgZW1iZWRkZWQgaW50byBhbiBlbWJlZGRpbmdcclxuICogY29udGFpbmVyIGZvciB0aGUgZ2l2ZW4gY2F0ZWdvcnkuIEFsbCBzdHlsZSBkZWZpbml0aW9ucyBmb3IgYSBnaXZlbiBjYXRlZ29yeSB3aWxsIGJlIGFjdGl2YXRlZFxyXG4gKiBhbmQgZGVhY3RpdmF0ZWQgdG9nZXRoZXIgYW5kIHRoZWlyIHJ1bGVzIHdpbGwgYmUgaW5zZXJ0ZWQgaW50byBhIHNpbmdsZSBgPHN0eWxlPmAgZWxlbWVudC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBlbWJlZGRlZERlY29yYXRvciA9IChjYXRlZ29yeTogc3RyaW5nLCB0YXJnZXQ6IElTdHlsZURlZmluaXRpb25DbGFzcyk6IGFueSA9PlxyXG57XHJcbiAgICAvLyBjaGVjayB3aGV0aGVyIHdlIGFscmVhZHkgaGF2ZSBjb250YWluZXIgZm9yIHRoaXMgY2F0ZWdvcnk7IGlmIG5vdCwgYWRkIGl0XHJcbiAgICBsZXQgZWMgPSBzX2VtYmVkZGluZ0NvbnRhaW5lcnMuZ2V0KCBjYXRlZ29yeSk7XHJcbiAgICBpZiAoIWVjKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGdlbmVyYXRlIHVuaXF1ZSBJRCBmb3Igb3VyIGNvbnRhaW5lciwgd2hpY2ggd2lsbCBiZSB0aGUgSUQgb2YgdGhlIGA8c3R5bGU+YCBlbGVtZW50XHJcbiAgICAgICAgbGV0IGlkID0gYCR7Y2F0ZWdvcnl9XyR7c19uZXh0VW5pcXVlSUQrK31gO1xyXG4gICAgICAgIGVjID0gbmV3IEVtYmVkZGluZ0NvbnRhaW5lciggaWQpO1xyXG4gICAgICAgIHNfZW1iZWRkaW5nQ29udGFpbmVycy5zZXQoIGNhdGVnb3J5LCBlYyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWRkIG91ciBjbGFzcyB0byB0aGUgY29udGFpbmVyXHJcbiAgICBlYy5hZGQoIHRhcmdldCk7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFJ1bGUgdmlydHVhbGl6YXRpb24uXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHRvIGEgcnVsZSBpZiBpdCBpcyBkZWZpbmVkIGFuZCB1c2VkIGluIHRoZSBzYW1lIHN0eWxlXHJcbiAqIGRlZmluaXRpb24gY2xhc3MgYnV0IHRoZW4gaXMgb3ZlcnJpZGRlbiBpbiBhIGRlcml2ZWQgc3R5bGUgZGVmaW5pdGlvbiBjbGFzcy4gVGhlIHByb2JsZW1cclxuICogdGhpcyBzb2x2ZXMgaXMgdGhpczogd2hlbiBhIHJ1bGUgaXMgZGVmaW5lZCBpbiBhIGJhc2UgY2xhc3MgYW5kIHRoZW4gb3ZlcnJpZGRlbiBpbiBhIGRlcml2ZWRcclxuICogY2xhc3MsIHdoZW4gYW4gaW5zdGFuY2Ugb2YgdGhlIGRlcml2ZWQgY2xhc3MgaXMgY3JlYXRlZCwgdGhlIHJ1bGVzIHRoYXQgYXJlIGNyZWF0ZWQgaW4gdGhlXHJcbiAqIGJhc2UgYW5kIGRlcml2ZWQgY2xhc3NlcyBzZWUgZGlmZmVyZW50IHZhbHVlcyBvZiB0aGUgcnVsZS4gU2luY2Ugb3VyIHJ1bGVzIGFyZSBkZWZpbmVkIGFzXHJcbiAqIHBhcnQgb2YgdGhlIGNvbnN0cnVjdG9yLCB0aGUgYmFzZSBjbGFzcyBjb25zdHJ1Y3RvcidzIGNvZGUgb25seSBzZWVzIHRoZSB2YWx1ZSBhc3NpZ25lZCBpbiB0aGF0XHJcbiAqIGNvZGUuIElmIGFub3RoZXIgcnVsZSBpbiB0aGUgYmFzZSBjbGFzcyB1c2VzIHRoaXMgZmlyc3QgcnVsZSwgdGhpcyB2YWx1ZSBpcyByZW1lbWJlcmVkLlxyXG4gKlxyXG4gKiBUaGUgYHZpcnR1YWxpemVgIGZ1bmN0aW9uIGNyZWF0ZXMgYSBQcm94eSBvYmplY3QgZm9yIHRoZSBydWxlIHdpdGggdGhlIGhhbmRsZXIgdGhhdCBrZWVwcyB0aGVcclxuICogbW9zdCByZWNlbnQgdmFsdWUgc2V0LiBUaHVzIHdoZW4gYSBydWxlIGluIHRoZSBiYXNlIGNsYXNzJ3MgY29uc3RydWN0b3IgdXNlcyBhIHZpcnR1YWxpemVkXHJcbiAqIHJ1bGUsIHRoZSBmaXJzdCBydWxlIHdpbGwgc2VlIHRoZSBvdmVycmlkZGVuIHZhbHVlIG9mIHRoZSBydWxlIHdoZW4gYWNjZXNzZWQgaW4gdGhlXHJcbiAqIHBvc3QtY29uc3RydWN0b3IgY29kZS5cclxuICovXHJcbmNvbnN0IHZpcnR1YWxpemUgPSAodGFyZ2V0OiBhbnksIG5hbWU6IHN0cmluZyk6IHZvaWQgPT5cclxue1xyXG4gICAgLy8gd2UgbWF5IGRpcmVjdGx5IGNyZWF0ZSB0aGUgaGFuZGxlciBhbmQgdGhlIHByb3h5IGJlY2F1c2UgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWRcclxuICAgIC8vIGZvciBldmVyeSBTdHlsZURlZmluaXRpb24gaW5zdGFuY2UgKGFzIG9wcG9zZWQgdG8gb25jZSBwZXIgY2xhc3MpLlxyXG4gICAgbGV0IGhhbmRsZXIgPSBuZXcgVmlydEhhbmRsZXIoKTtcclxuICAgIGhhbmRsZXIueCA9IG5ldyBQcm94eSgge30sIGhhbmRsZXIpO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGFyZ2V0LCBuYW1lLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuXHJcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBwcm94eSBvYmplY3RcclxuICAgICAgICBnZXQoKTogYW55IHsgcmV0dXJuIGhhbmRsZXIueDsgfSxcclxuXHJcbiAgICAgICAgLy8gc2V0IHRoZSBuZXcgdmFsdWUgdG8gdGhlIGhhbmRsZXIgc28gdGhhdCBpdCB3aWxsIHVzZSBpdCBmcm9tIG5vdyBvbi5cclxuICAgICAgICBzZXQodik6IHZvaWQgeyBoYW5kbGVyLnQgPSB2OyB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXIgZm9yIHRoZSBwcm94eSBjcmVhdGVkIGJ5IHRoZSBgdmlydHVhbGl6ZWAgZnVuY3Rpb24uIEl0IGtlZXBzIHRoZSBjdXJyZW50IHZhbHVlIG9mIGFcclxuICogcnVsZSBzbyB0aGF0IHRoZSBtb3N0IHJlY2VudCB2YWx1ZSBpcyB1c2VkIHdoZW5ldmVyIHRoZSBwcm94eSBpcyBhY2Nlc3NlZC5cclxuICovXHJcbmNsYXNzIFZpcnRIYW5kbGVyIGltcGxlbWVudHMgUHJveHlIYW5kbGVyPGFueT5cclxue1xyXG4gICAgLy8gUHJveHkgb2JqZWN0LCB3aGljaCB3b3JrcyB3aXRoIHRoaXMgaGFuZGxlclxyXG4gICAgcHVibGljIHg6IGFueTtcclxuXHJcbiAgICAvLyB0aGUgbGF0ZXN0IHRhcmdldCBvYmplY3QgdG8gdXNlIGZvciBhbGwgcHJveHkgaGFuZGxlciBvcGVyYXRpb25zXHJcbiAgICBwdWJsaWMgdDogYW55O1xyXG5cclxuICAgIC8vIGludGVyZXN0aW5nIHRoaW5ncyBoYXBwZW4gaW4gdGhlIGdldCBtZXRob2RcclxuICAgIGdldCggdDogYW55LCBwOiBQcm9wZXJ0eUtleSwgcjogYW55KTogYW55XHJcbiAgICB7XHJcbiAgICAgICAgLy8gaWYgb3VyIHZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkIGFuZCB0aGUgcmVxdWVzdGVkIHByb3BlcnR5IGlzIGEgd2VsbC1rbm93biBzeW1ib2xcclxuICAgICAgICAvLyB0b1ByaW1pdGl2ZSB3ZSByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLiBUaGlzIHdpbGwgaGVscFxyXG4gICAgICAgIC8vIGlmIG91ciBwcm94eSBlaXRoZXIgcGFydGljaXBhdGUgaW4gYW4gYXJpdGhtZXRpYyBleHByZXNzaW9uIG9yIGlzIGNvbWJpbmVkIHdpdGggYVxyXG4gICAgICAgIC8vIHN0cmluZy5cclxuICAgICAgICBpZiAodGhpcy50ID09IG51bGwgJiYgcCA9PT0gU3ltYm9sLnRvUHJpbWl0aXZlKVxyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy50O1xyXG5cclxuICAgICAgICAvLyBnZXQgdGhlIHZhbHVlIG9mIHRoZSByZXF1ZXN0IHByb3BlcnR5OyBpZiB0aGUgdmFsdWUgaXMgbnVsbCBvciB1bmRlZmluZWQsIGFuIGV4Y2VwdGlvblxyXG4gICAgICAgIC8vIHdpbGwgYmUgdGhyb3duIC0gd2hpY2ggaXMgZXhwZWN0ZWQuXHJcbiAgICAgICAgbGV0IHB2ID0gUmVmbGVjdC5nZXQoIHRoaXMudCwgcCwgcik7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoZSByZXF1ZXN0ZWQgcHJvcGVydHkgaXMgYSBmdW5jdGlvbiwgYmluZCB0aGUgb3JpZ2luYWwgbWV0aG9kIHRvIHRoZSB0YXJnZXQgb2JqZWN0XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBwdiA9PT0gXCJmdW5jdGlvblwiID8gcHYuYmluZCggdGhpcy50KSA6IHB2O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHRoZSByZXN0IG9mIHRoZSBtZXRob2RzIG1vc3RseSBkZWxlZ2F0ZSB0aGUgY2FsbHMgdG8gdGhlIGxhdGVzdCB0YXJnZXQgaW5zdGVhZCBvZiB0aGVcclxuICAgIC8vIG9yaWdpbmFsIHRhcmdldC4gSW4gc29tZSBjYXNlcywgd2UgY2hlY2sgd2hldGhlciB0aGUgdGFyZ2V0IGlzIG51bGwgb3IgdW5kZWZpbmVkIHNvIHRoYXRcclxuICAgIC8vIHdlIGRvbid0IHRocm93IGV4Y2VwdGlvbnMgd2hlcmUgd2UgY2FuIGF2b2lkIGl0LlxyXG5cclxuICAgIGdldFByb3RvdHlwZU9mKCB0OiBhbnkpOiBvYmplY3QgfCBudWxsXHJcbiAgICAgICAgeyByZXR1cm4gdGhpcy50ID09IG51bGwgPyBudWxsIDogUmVmbGVjdC5nZXRQcm90b3R5cGVPZiggdGhpcy50KTsgfVxyXG4gICAgLy8gc2V0UHJvdG90eXBlT2YodDogYW55LCB2OiBhbnkpOiBib29sZWFuXHJcbiAgICAvLyAgICAgeyByZXR1cm4gUmVmbGVjdC5zZXRQcm90b3R5cGVPZiggdGhpcy50LCB2KTsgfVxyXG4gICAgLy8gaXNFeHRlbnNpYmxlKHQ6IGFueSk6IGJvb2xlYW5cclxuICAgIC8vICAgICB7IHJldHVybiB0aGlzLnQgPT0gbnVsbCA/IGZhbHNlIDogUmVmbGVjdC5pc0V4dGVuc2libGUoIHRoaXMudCk7IH1cclxuICAgIC8vIHByZXZlbnRFeHRlbnNpb25zKHQ6IGFueSk6IGJvb2xlYW5cclxuICAgIC8vICAgICB7IHJldHVybiB0aGlzLnQgPT0gbnVsbCA/IGZhbHNlIDogUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyggdGhpcy50KTsgfVxyXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQ6IGFueSwgcDogUHJvcGVydHlLZXkpOiBQcm9wZXJ0eURlc2NyaXB0b3IgfCB1bmRlZmluZWRcclxuICAgICAgICB7IHJldHVybiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciggdGhpcy50LCBwKTsgfVxyXG4gICAgaGFzKHQ6IGFueSwgcDogUHJvcGVydHlLZXkpOiBib29sZWFuXHJcbiAgICAgICAgeyByZXR1cm4gdGhpcy50ID09IG51bGwgPyBmYWxzZSA6IFJlZmxlY3QuaGFzKCB0aGlzLnQsIHApOyB9XHJcbiAgICBzZXQoIHQ6IGFueSwgcDogUHJvcGVydHlLZXksIHY6IGFueSwgcjogYW55KTogYm9vbGVhblxyXG4gICAgICAgIHsgcmV0dXJuIFJlZmxlY3Quc2V0KCB0aGlzLnQsIHAsIHYsIHIpOyB9XHJcbiAgICBkZWxldGVQcm9wZXJ0eSh0OiBhbnksIHA6IFByb3BlcnR5S2V5KTogYm9vbGVhblxyXG4gICAgICAgIHsgcmV0dXJuIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkoIHRoaXMudCwgcCk7IH1cclxuICAgIGRlZmluZVByb3BlcnR5KHQ6IGFueSwgcDogUHJvcGVydHlLZXksIGF0dHJzOiBQcm9wZXJ0eURlc2NyaXB0b3IpOiBib29sZWFuXHJcbiAgICAgICAgeyByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcy50LCBwLCBhdHRycyk7IH1cclxuICAgIG93bktleXModDogYW55KTogQXJyYXlMaWtlPHN0cmluZyB8IHN5bWJvbD5cclxuICAgICAgICB7IHJldHVybiBSZWZsZWN0Lm93bktleXMoIHRoaXMudCk7IH1cclxuICAgIC8vIGFwcGx5KHQ6IGFueSwgdGhpc0FyZzogYW55LCBhcmdzPzogYW55KTogYW55XHJcbiAgICAvLyAgICAgeyByZXR1cm4gdGhpcy50LmFwcGx5KCB0aGlzQXJnLCBhcmdzKTsgfVxyXG4gICAgLy8gY29uc3RydWN0KHQ6IGFueSwgYXJnczogYW55LCBuZXdUYXJnZXQ/OiBhbnkpOiBvYmplY3RcclxuICAgIC8vICAgICB7IHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdCggdGhpcy50LCBhcmdzLCBuZXdUYXJnZXQpOyB9XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIFRoZW1pbmcgc3VwcG9ydC5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogTWFwIG9mIHRoZW0gZGVmaW5pdGlvbiBjbGFzc2VzIHRvIHRoZSBpbnN0YW5jZXMgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZSBmb3IgdGhlc2UgY2xhc3Nlcy5cclxuICovXHJcbmxldCBzX3RoZW1lSW5zdGFuY2VNYXAgPSBuZXcgTWFwPElTdHlsZURlZmluaXRpb25DbGFzczxUaGVtZURlZmluaXRpb24+LFRoZW1lRGVmaW5pdGlvbj4oKTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIERldGVybWluZXMgd2hldGhlciB0aGlzIHN0eWxlIGRlZmluaXRpb24gY2xhc3MgaXMgYW4gaW1wbGVtZW50YXRpbiBvZiBhIHRoZW1lIC0gdGhhdCBpcywgaXQgaXNcclxuICogYW4gaW5zdGFuY2Ugb2YgVGhlbWVEZWNsYXJhdGlvbiBjbGFzcyBidXQgZG9lc24ndCBkZXJpdmUgZGlyZWN0bHkgZnJvbSBUaGVtZURlY2xhcmF0aW9uLiBJdCBjYW5cclxuICogc2VydmUgYXMgdHlwZSBndWFyZC5cclxuICpcclxuICogQHBhcmFtIHNkIFN0eWxlIGRlZmluaXRpb24gaW5zdGFuY2VcclxuICogQHJldHVybnMgYm9vbGVhblxyXG4gKi9cclxuY29uc3QgaXNUaGVtZUltcGxlbWVudGF0aW9uID0gKHNkOiBJU3R5bGVEZWZpbml0aW9uKTogc2QgaXMgVGhlbWVEZWZpbml0aW9uID0+XHJcbiAgICBzZCBpbnN0YW5jZW9mIFRoZW1lRGVmaW5pdGlvbiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc2Rbc3ltQ2xhc3NdKSAhPT0gVGhlbWVEZWZpbml0aW9uO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgdGhlbWUgYmFzZSBjbGFzcyBmb3IgdGhlIGdpdmVuIHRoZW1lIGNsYXNzLlxyXG4gKiBAcGFyYW0gdGhlbWVDbGFzcyBUaGVtZURlZmluaXRpb24tZGVyaXZlZCBjbGFzc1xyXG4gKiBAcmV0dXJucyBUaGVtZSBiYXNlIGNsYXNzLlxyXG4gKi9cclxuY29uc3QgZ2V0VGhlbWVCYXNlQ2xhc3MgPSAodGhlbWVDbGFzczogSVN0eWxlRGVmaW5pdGlvbkNsYXNzPFRoZW1lRGVmaW5pdGlvbj4pOiBJU3R5bGVEZWZpbml0aW9uQ2xhc3M8VGhlbWVEZWZpbml0aW9uPiB8IHVuZGVmaW5lZCA9PlxyXG57XHJcbiAgICAvLyBtYWtlIHN1cmUgd2UgYXJlIG5vdCBwYXNzZWQgdGhlIFRoZW1lRGVmaW5pdGlvbiBjbGFzcyBpdHNlbGZcclxuICAgIGlmICh0aGVtZUNsYXNzID09PSBUaGVtZURlZmluaXRpb24pXHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcbiAgICAvLyBsb29wIG92ZXIgcHJvdG90eXBlcyB1bnRpbCB3ZSBmaW5kIHRoZSBjbGFzcywgd2hpY2ggZGVyaXZlcyBkaXJlY3RseSBmcm9tIFRoZW1lRGVmaW5pdGlvbi5cclxuICAgIC8vIFRoaXMgaXMgdGhlIHRoZW1lIGJhc2UgY2xhc3NcclxuICAgIGxldCB0aGVtZUJhc2VDbGFzcyA9IHRoZW1lQ2xhc3M7XHJcbiAgICBmb3IoIGxldCBjbHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoIHRoZW1lQ2xhc3MpOyBjbHMgIT09IFRoZW1lRGVmaW5pdGlvbjsgY2xzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKCBjbHMpKVxyXG4gICAgICAgIHRoZW1lQmFzZUNsYXNzID0gY2xzO1xyXG5cclxuICAgIHJldHVybiB0aGVtZUJhc2VDbGFzcztcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgdGhlbWUgZGVmaW5pdGlvbiBvYmplY3QsIHdoaWNoIGlzIGN1cnJlbnRseSBhY3RpdmF0ZWQgZm9yIHRoZSBnaXZlbiB0aGVtZS5cclxuICogQHBhcmFtIHRoZW1lQ2xhc3MgVGhlbWUgZGVmaW5pdGlvbiBjbGFzc1xyXG4gKiBAcmV0dXJucyBUaGVtZSBpbnN0YW5jZSwgd2hpY2ggaXMgY3VycmVudGx5IGFjdGl2YXRlZCBmb3IgdGhlIGdpdmVuIHRoZW1lIGNsYXNzIG9yIG51bGxcclxuICogaWYgbm8gaXN0YW5jZSBpcyBjdXJyZW50bHkgYWN0aXZhdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRUaGVtZSA9ICh0aGVtZUNsYXNzOiBJU3R5bGVEZWZpbml0aW9uQ2xhc3M8VGhlbWVEZWZpbml0aW9uPik6IFRoZW1lRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCA9PlxyXG57XHJcbiAgICBsZXQgdGhlbWVCYXNlQ2xhc3MgPSBnZXRUaGVtZUJhc2VDbGFzcyh0aGVtZUNsYXNzKVxyXG4gICAgcmV0dXJuIHRoZW1lQmFzZUNsYXNzICYmIHNfdGhlbWVJbnN0YW5jZU1hcC5nZXQoIHRoZW1lQmFzZUNsYXNzKTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgdGhlbWUgZGVmaW5pdGlvbiBvYmplY3QgYXMgdGhlIGluc3RhbmNlIHRoYXQgaXMgY3VycmVudGx5IGFjdGl2YXRlZCBmb3IgdGhlXHJcbiAqIGNvcnJlc3BvbmRpbmcgYmFzZSB0aGVtZSBjbGFzcy5cclxuICogQHBhcmFtIHRoZW1lIHRoZW1lIGluc3RhbmNlIHRvIHNldCBhcyBjdXJyZW50IGZvciB0aGUgY29ycmVzcG9uZGluZyBiYXNlIHRoZW1lIGNsYXNzXHJcbiAqL1xyXG5jb25zdCBzZXRDdXJyZW50VGhlbWUgPSAodGhlbWU6IFRoZW1lRGVmaW5pdGlvbik6IHZvaWQgPT5cclxue1xyXG4gICAgbGV0IHRoZW1lQmFzZUNsYXNzID0gZ2V0VGhlbWVCYXNlQ2xhc3MoIHRoZW1lLmNvbnN0cnVjdG9yIGFzIElTdHlsZURlZmluaXRpb25DbGFzczxUaGVtZURlZmluaXRpb24+KTtcclxuICAgIHRoZW1lQmFzZUNsYXNzICYmIHNfdGhlbWVJbnN0YW5jZU1hcC5zZXQoIHRoZW1lQmFzZUNsYXNzLCB0aGVtZSk7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYSB0aGVtZSBkZWZpbml0aW9uIG9iamVjdCBzZXQgYXMgdGhlIGluc3RhbmNlIHRoYXQgaXMgY3VycmVudGx5IGFjdGl2YXRlZCBmb3IgdGhlXHJcbiAqIGNvcnJlc3BvbmRpbmcgYmFzZSB0aGVtZSBjbGFzcy5cclxuICogQHBhcmFtIHRoZW1lQ2xhc3MgVGhlbWUgZGVmaW5pdGlvbiBjbGFzc1xyXG4gKi9cclxuY29uc3QgcmVtb3ZlQ3VycmVudFRoZW1lID0gKHRoZW1lQ2xhc3M6IElTdHlsZURlZmluaXRpb25DbGFzczxUaGVtZURlZmluaXRpb24+KTogdm9pZCA9PlxyXG57XHJcbiAgICBsZXQgdGhlbWVCYXNlQ2xhc3MgPSBnZXRUaGVtZUJhc2VDbGFzcyggdGhlbWVDbGFzcyk7XHJcbiAgICB0aGVtZUJhc2VDbGFzcyAmJiBzX3RoZW1lSW5zdGFuY2VNYXAuZGVsZXRlKCB0aGVtZUJhc2VDbGFzcyk7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIENsaWVudC1zaWRlIHJlbmRlcmluZyBpbXBsZW1lbnRhdGlvblxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBTdHlsZSBlbGVtZW50IHRoYXQgZGl2aWRlcyBiZXR3ZWVuIHRoZW1lIGFuZCBub24tdGhlbWUgc3R5bGUgZWxlbWVudHMuIFRoaXMgaXMgbmVlZGVkIHRvIGFsd2F5c1xyXG4gKiBwbGFjZSB0aGVtZSBzdHlsZXMgYmVmb3JlIHRoZSBub24tdGhlbWUgb25lcy5cclxuICovXHJcbmxldCBzX2NsaWVudFRoZW1lUGxhY2Vob2xkZXJFbG06IElNaW1jc3NTdHlsZUVsZW1lbnQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblxyXG4vKipcclxuICogSUQgb2YgdGhlIHN0eWxlIGVsZW1lbnQgdGhhdCBkaXZpZGVzIGJldHdlZW4gdGhlbWUgYW5kIG5vbi10aGVtZSBzdHlsZSBlbGVtZW50cy5cclxuICovXHJcbmNvbnN0IHNfdGhlbWVQbGFjZWhvbGRlckVsbUlEID0gXCJfX21pbWNzc190aGVtZXNfX1wiO1xyXG5cclxuXHJcblxyXG4vLyBJbnNlcnRzIHRoZSBnaXZlbiBydWxlIGludG8gdGhlIGdpdmVuIHBhcmVudCBncm91cGluZyBydWxlIG9yIHN0eWxlc2hlZXQuXHJcbmNvbnN0IGFkZERvbVJ1bGUgPSAocnVsZVRleHQ6IHN0cmluZywgcGFyZW50OiBDU1NTdHlsZVNoZWV0IHwgQ1NTR3JvdXBpbmdSdWxlKTogQ1NTUnVsZSB8IG51bGwgPT5cclxue1xyXG4gICAgdHJ5XHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gcGFyZW50Lmluc2VydFJ1bGUoIHJ1bGVUZXh0LCBwYXJlbnQuY3NzUnVsZXMubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gcGFyZW50LmNzc1J1bGVzW2luZGV4XTtcclxuICAgIH1cclxuICAgIGNhdGNoKCB4KVxyXG4gICAge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoIGBDYW5ub3QgYWRkIENTUyBydWxlICcke3J1bGVUZXh0fSdgLCB4KVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGllbnQtc2lkZSBpbXBsZW1lbnRhdGlvbiBvZiBhY3RpdmF0aW9uIGNvbnRleHQuXHJcbiAqL1xyXG5jbGFzcyBDbGllbnRBY3RpdmF0aW9uQ29udGV4dCBpbXBsZW1lbnRzIElBY3RpdmF0aW9uQ29udGV4dFxyXG57XHJcbiAgICBnZXRUaGVtZVBsYWNlaG9sZGVyKCk6IElNaW1jc3NTdHlsZUVsZW1lbnRcclxuICAgIHtcclxuICAgICAgICBpZiAoIXNfY2xpZW50VGhlbWVQbGFjZWhvbGRlckVsbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBkb21FbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInN0eWxlXCIpO1xyXG4gICAgICAgICAgICBkb21FbG0uaWQgPSBzX3RoZW1lUGxhY2Vob2xkZXJFbG1JRDtcclxuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5pbnNlcnRCZWZvcmUoIGRvbUVsbSwgZG9jdW1lbnQuaGVhZC5maXJzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgIHNfY2xpZW50VGhlbWVQbGFjZWhvbGRlckVsbSA9IG5ldyBDbGllbnRNaW1jc3NTdHlsZUVsZW1lbnQoIGRvbUVsbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc19jbGllbnRUaGVtZVBsYWNlaG9sZGVyRWxtO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVN0eWxlRWxtKCBpZDogc3RyaW5nLCBpbnNlcnRCZWZvcmU/OiBJTWltY3NzU3R5bGVFbGVtZW50KTogSU1pbWNzc1N0eWxlRWxlbWVudFxyXG4gICAge1xyXG4gICAgICAgIGxldCBkb21FbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInN0eWxlXCIpO1xyXG4gICAgICAgIGRvbUVsbS5pZCA9IGlkO1xyXG4gICAgICAgIGRvY3VtZW50LmhlYWQuaW5zZXJ0QmVmb3JlKCBkb21FbG0sIGluc2VydEJlZm9yZSA/IGluc2VydEJlZm9yZS5kb21FbG0gOiBudWxsKTtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudE1pbWNzc1N0eWxlRWxlbWVudCggZG9tRWxtKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENsaWVudC1zaWRlIGltcGxlbWVudGF0aW9uIG9mIGFuIG9iamVjdCB0byB3aGljaCBydWxlcyBjYW4gYmUgYWRkZWQuXHJcbiAqL1xyXG5hYnN0cmFjdCBjbGFzcyBDbGllbnRNaW1jc3NSdWxlQmFnIGltcGxlbWVudHMgSU1pbWNzc1J1bGVCYWdcclxue1xyXG4gICAgY29uc3RydWN0b3IoIHB1YmxpYyBkb21SdWxlQmFnOiBDU1NTdHlsZVNoZWV0IHwgQ1NTR3JvdXBpbmdSdWxlKSB7fVxyXG5cclxuICAgIGFkZCggcnVsZVRleHQ6IHN0cmluZyk6IElNaW1jc3NSdWxlIHwgbnVsbFxyXG4gICAge1xyXG4gICAgICAgIGxldCBjc3NSdWxlID0gYWRkRG9tUnVsZSggcnVsZVRleHQsIHRoaXMuZG9tUnVsZUJhZyk7XHJcbiAgICAgICAgcmV0dXJuIGNzc1J1bGUgPyBuZXcgQ2xpZW50TWltY3NzUnVsZSggY3NzUnVsZSkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEdyb3VwKCBzZWxlY3Rvcjogc3RyaW5nKTogSU1pbWNzc0dyb3VwaW5nUnVsZSB8IG51bGxcclxuICAgIHtcclxuICAgICAgICBsZXQgY3NzUnVsZSA9IGFkZERvbVJ1bGUoIGAke3NlbGVjdG9yfSB7fWAsIHRoaXMuZG9tUnVsZUJhZyk7XHJcbiAgICAgICAgcmV0dXJuIGNzc1J1bGUgPyBuZXcgQ2xpZW50TWltY3NzR3JvdXBpbmdSdWxlKCBjc3NSdWxlKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkS2V5ZnJhbWVzKCBuYW1lOiBzdHJpbmcpOiBJTWltY3NzS2V5ZnJhbWVzUnVsZSB8IG51bGxcclxuICAgIHtcclxuICAgICAgICBsZXQgY3NzUnVsZSA9IGFkZERvbVJ1bGUoIGBAa2V5ZnJhbWVzICR7bmFtZX0ge31gLCB0aGlzLmRvbVJ1bGVCYWcpO1xyXG4gICAgICAgIHJldHVybiBjc3NSdWxlID8gbmV3IENsaWVudE1pbWNzc0tleWZyYW1lc1J1bGUoIGNzc1J1bGUpIDogbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENsaWVudC1zaWRlIGltcGxlbWVudGF0aW9uIG9mIGEgc3R5bGUgZWxlbWVudC5cclxuICovXHJcbmNsYXNzIENsaWVudE1pbWNzc1N0eWxlRWxlbWVudCBleHRlbmRzIENsaWVudE1pbWNzc1J1bGVCYWcgaW1wbGVtZW50cyBJTWltY3NzU3R5bGVFbGVtZW50XHJcbntcclxuICAgIGNvbnN0cnVjdG9yKCBwdWJsaWMgZG9tRWxtOiBIVE1MU3R5bGVFbGVtZW50KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKCBkb21FbG0uc2hlZXQhKVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZSgpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kb21FbG0/LnJlbW92ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2xpZW50LXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYSBiYXNlIGludGVyZmFjZSBmb3IgQ1NTIHJ1bGUuXHJcbiAqL1xyXG5jbGFzcyBDbGllbnRNaW1jc3NSdWxlIGltcGxlbWVudHMgSU1pbWNzc1J1bGVcclxue1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGNzc1J1bGU6IENTU1J1bGUgfCBudWxsKSB7fVxyXG59XHJcblxyXG4vKipcclxuICogQ2xpZW50LXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYSBncm91cGluZyBydWxlIHRvIHdoaWNoIHJ1bGVzIGNhbiBiZSBhZGRlZC5cclxuICovXHJcbmNsYXNzIENsaWVudE1pbWNzc0dyb3VwaW5nUnVsZSBleHRlbmRzIENsaWVudE1pbWNzc1J1bGVCYWcgaW1wbGVtZW50cyBJTWltY3NzR3JvdXBpbmdSdWxlXHJcbntcclxuICAgIGNvbnN0cnVjdG9yKCBwdWJsaWMgY3NzUnVsZTogQ1NTUnVsZSlcclxuICAgIHtcclxuICAgICAgICBzdXBlciggY3NzUnVsZSBhcyBDU1NHcm91cGluZ1J1bGUpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGllbnQtc2lkZSBpbXBsZW1lbnRhdGlvbiBvZiBrZXlmcmFtZXMgcnVsZSB0byB3aGljaCBmcmFtZXMgY2FuIGJlIGFkZGVkLlxyXG4gKi9cclxuY2xhc3MgQ2xpZW50TWltY3NzS2V5ZnJhbWVzUnVsZSBleHRlbmRzIENsaWVudE1pbWNzc1J1bGVcclxue1xyXG4gICAgYWRkRnJhbWUoIGZyYW1lVGV4dDogc3RyaW5nKTogSU1pbWNzc1J1bGUgfCBudWxsXHJcbiAgICB7XHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAodGhpcy5jc3NSdWxlIGFzIENTU0tleWZyYW1lc1J1bGUpLmFwcGVuZFJ1bGUoIGZyYW1lVGV4dCk7XHJcbiAgICAgICAgICAgIGxldCBjc3NGcmFtZVJ1bGUgPSAodGhpcy5jc3NSdWxlIGFzIENTU0tleWZyYW1lc1J1bGUpLmNzc1J1bGVzLml0ZW0oXHJcbiAgICAgICAgICAgICAgICAodGhpcy5jc3NSdWxlIGFzIENTU0tleWZyYW1lc1J1bGUpLmNzc1J1bGVzLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNzc0ZyYW1lUnVsZSA/IG5ldyBDbGllbnRNaW1jc3NSdWxlKCBjc3NGcmFtZVJ1bGUpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goeClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIFwiQ2Fubm90IGFkZCBDU1Mga2V5ZnJhbWUgcnVsZVwiLCB4KVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbi8vIEh5ZHJhdGlvbi1zaWRlIHJlbmRlcmluZyBpbXBsZW1lbnRhdGlvblxyXG4vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBIeWRyYXRpb24tc2lkZSBpbXBsZW1lbnRhdGlvbiBvZiBhY3RpdmF0aW9uIGNvbnRleHQuXHJcbiAqL1xyXG5jbGFzcyBIeWRyYXRpb25BY3RpdmF0aW9uQ29udGV4dCBpbXBsZW1lbnRzIElBY3RpdmF0aW9uQ29udGV4dFxyXG57XHJcbiAgICBnZXRUaGVtZVBsYWNlaG9sZGVyKCk6IElNaW1jc3NTdHlsZUVsZW1lbnRcclxuICAgIHtcclxuICAgICAgICBpZiAoIXNfY2xpZW50VGhlbWVQbGFjZWhvbGRlckVsbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBkb21FbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggc190aGVtZVBsYWNlaG9sZGVyRWxtSUQpIGFzIEhUTUxTdHlsZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmIChkb21FbG0pXHJcbiAgICAgICAgICAgICAgICBzX2NsaWVudFRoZW1lUGxhY2Vob2xkZXJFbG0gPSBuZXcgSHlkcmF0aW9uTWltY3NzU3R5bGVFbGVtZW50KCBkb21FbG0pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiVGhlbWUgcGxhY2Vob2xkZXIgZWxlbWVudCB3YXMgcmVxdWVzdGVkIGJ1dCB3YXMgbm90IGZvdW5kXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNfY2xpZW50VGhlbWVQbGFjZWhvbGRlckVsbTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTdHlsZUVsbSggaWQ6IHN0cmluZywgaW5zZXJ0QmVmb3JlPzogSU1pbWNzc1N0eWxlRWxlbWVudCk6IElNaW1jc3NTdHlsZUVsZW1lbnRcclxuICAgIHtcclxuICAgICAgICBsZXQgZG9tRWxtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGlkKSBhcyBIVE1MU3R5bGVFbGVtZW50O1xyXG4gICAgICAgIGlmIChkb21FbG0pXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgSHlkcmF0aW9uTWltY3NzU3R5bGVFbGVtZW50KCBkb21FbG0pO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBgU3R5bGUgZWxlbWVudCB3aXRoIElEICcke2lkfScgd2FzIHJlcXVlc3RlZCBidXQgd2FzIG5vdCBmb3VuZGApO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogSHlkcmF0aW9uLXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYW4gb2JqZWN0IHRvIHdoaWNoIHJ1bGVzIGNhbiBiZSBhZGRlZC5cclxuICovXHJcbmFic3RyYWN0IGNsYXNzIEh5ZHJhdGlvbk1pbWNzc1J1bGVCYWcgaW1wbGVtZW50cyBJTWltY3NzUnVsZUJhZ1xyXG57XHJcbiAgICBjb25zdHJ1Y3RvciggcHVibGljIGRvbVJ1bGVCYWc6IENTU1N0eWxlU2hlZXQgfCBDU1NHcm91cGluZ1J1bGUpIHt9XHJcblxyXG4gICAgYWRkKCBydWxlVGV4dDogc3RyaW5nKTogSU1pbWNzc1J1bGUgfCBudWxsXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGNzc1J1bGUgPSB0aGlzLmRvbVJ1bGVCYWcuY3NzUnVsZXNbdGhpcy5pbmRleCsrXTtcclxuICAgICAgICByZXR1cm4gY3NzUnVsZSA/IG5ldyBIeWRyYXRpb25NaW1jc3NSdWxlKCBjc3NSdWxlKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkR3JvdXAoIHNlbGVjdG9yOiBzdHJpbmcpOiBJTWltY3NzR3JvdXBpbmdSdWxlIHwgbnVsbFxyXG4gICAge1xyXG4gICAgICAgIGxldCBjc3NSdWxlID0gdGhpcy5kb21SdWxlQmFnLmNzc1J1bGVzW3RoaXMuaW5kZXgrK107XHJcbiAgICAgICAgcmV0dXJuIGNzc1J1bGUgPyBuZXcgSHlkcmF0aW9uTWltY3NzR3JvdXBpbmdSdWxlKCBjc3NSdWxlKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkS2V5ZnJhbWVzKCBuYW1lOiBzdHJpbmcpOiBJTWltY3NzS2V5ZnJhbWVzUnVsZSB8IG51bGxcclxuICAgIHtcclxuICAgICAgICBsZXQgY3NzUnVsZSA9IHRoaXMuZG9tUnVsZUJhZy5jc3NSdWxlc1t0aGlzLmluZGV4KytdO1xyXG4gICAgICAgIHJldHVybiBjc3NSdWxlID8gbmV3IEh5ZHJhdGlvbk1pbWNzc0tleWZyYW1lc1J1bGUoIGNzc1J1bGUpIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpbmRleCBvZiB0aGUgcnVsZSBpbiB0aGUgbGlzdCBvZiBydWxlcyB1bmRlciB0aGUgc3R5bGVzaGVldCBvciBncm91cGluZyBydWxlXHJcbiAgICBwcml2YXRlIGluZGV4ID0gMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEh5ZHJhdGlvbi1zaWRlIGltcGxlbWVudGF0aW9uIG9mIGEgc3R5bGUgZWxlbWVudC5cclxuICovXHJcbmNsYXNzIEh5ZHJhdGlvbk1pbWNzc1N0eWxlRWxlbWVudCBleHRlbmRzIEh5ZHJhdGlvbk1pbWNzc1J1bGVCYWcgaW1wbGVtZW50cyBJTWltY3NzU3R5bGVFbGVtZW50XHJcbntcclxuICAgIGNvbnN0cnVjdG9yKCBwdWJsaWMgZG9tRWxtOiBIVE1MU3R5bGVFbGVtZW50KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKCBkb21FbG0uc2hlZXQhKVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZSgpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kb21FbG0/LnJlbW92ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogSHlkcmF0aW9uLXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYSBiYXNlIGludGVyZmFjZSBmb3IgQ1NTIHJ1bGUuXHJcbiAqL1xyXG5jbGFzcyBIeWRyYXRpb25NaW1jc3NSdWxlIGltcGxlbWVudHMgSU1pbWNzc1J1bGVcclxue1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGNzc1J1bGU6IENTU1J1bGUgfCBudWxsKSB7fVxyXG59XHJcblxyXG4vKipcclxuICogSHlkcmF0aW9uLXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYSBncm91cGluZyBydWxlIHRvIHdoaWNoIHJ1bGVzIGNhbiBiZSBhZGRlZC5cclxuICovXHJcbmNsYXNzIEh5ZHJhdGlvbk1pbWNzc0dyb3VwaW5nUnVsZSBleHRlbmRzIEh5ZHJhdGlvbk1pbWNzc1J1bGVCYWcgaW1wbGVtZW50cyBJTWltY3NzR3JvdXBpbmdSdWxlXHJcbntcclxuICAgIGNvbnN0cnVjdG9yKCBwdWJsaWMgY3NzUnVsZTogQ1NTUnVsZSlcclxuICAgIHtcclxuICAgICAgICBzdXBlciggY3NzUnVsZSBhcyBDU1NHcm91cGluZ1J1bGUpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIeWRyYXRpb24tc2lkZSBpbXBsZW1lbnRhdGlvbiBvZiBrZXlmcmFtZXMgcnVsZSB0byB3aGljaCBmcmFtZXMgY2FuIGJlIGFkZGVkLlxyXG4gKi9cclxuY2xhc3MgSHlkcmF0aW9uTWltY3NzS2V5ZnJhbWVzUnVsZSBleHRlbmRzIEh5ZHJhdGlvbk1pbWNzc1J1bGVcclxue1xyXG4gICAgYWRkRnJhbWUoIGZyYW1lVGV4dDogc3RyaW5nKTogSU1pbWNzc1J1bGUgfCBudWxsXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGNzc0ZyYW1lUnVsZSA9ICh0aGlzLmNzc1J1bGUgYXMgQ1NTS2V5ZnJhbWVzUnVsZSkuY3NzUnVsZXNbdGhpcy5pbmRleCsrXTtcclxuICAgICAgICByZXR1cm4gY3NzRnJhbWVSdWxlID8gbmV3IEh5ZHJhdGlvbk1pbWNzc1J1bGUoIGNzc0ZyYW1lUnVsZSkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGluZGV4IG9mIHRoZSBmcmFtZSBpbiB0aGUgbGlzdCBvZiBmcmFtZXMgdW5kZXIgdGhlIGtleWZyYW1lcyBydWxlXHJcbiAgICBwcml2YXRlIGluZGV4ID0gMDtcclxufVxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy9cclxuLy8gU2VydmVyLXNpZGUgcmVuZGVyaW5nIGltcGxlbWVudGF0aW9uXHJcbi8vXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIFNlcnZlci1zaWRlIGltcGxlbWVudGF0aW9uIG9mIGFjdGl2YXRpb24gY29udGV4dC5cclxuICovXHJcbmNsYXNzIFNlcnZlckFjdGl2YXRpb25Db250ZXh0IGltcGxlbWVudHMgSVNlcnZlckFjdGl2YXRpb25Db250ZXh0XHJcbntcclxuICAgIGdldFRoZW1lUGxhY2Vob2xkZXIoKTogSU1pbWNzc1N0eWxlRWxlbWVudFxyXG4gICAge1xyXG4gICAgICAgIGlmICghdGhpcy50aGVtZUVsbSlcclxuICAgICAgICAgICAgdGhpcy5lbG1zLnNwbGljZSggMCwgMCwgdGhpcy50aGVtZUVsbSA9IG5ldyBTZXJ2ZXJNaW1jc3NTdHlsZUVsZW1lbnQoc190aGVtZVBsYWNlaG9sZGVyRWxtSUQpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbWVFbG07XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU3R5bGVFbG0oIGlkOiBzdHJpbmcsIGluc2VydEJlZm9yZT86IElNaW1jc3NTdHlsZUVsZW1lbnQpOiBJTWltY3NzU3R5bGVFbGVtZW50XHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGVsbSA9IG5ldyBTZXJ2ZXJNaW1jc3NTdHlsZUVsZW1lbnQoaWQpO1xyXG4gICAgICAgIGlmIChpbnNlcnRCZWZvcmUpXHJcbiAgICAgICAgICAgIHRoaXMuZWxtcy5zcGxpY2UoIHRoaXMuZWxtcy5pbmRleE9mKCBpbnNlcnRCZWZvcmUgYXMgU2VydmVyTWltY3NzU3R5bGVFbGVtZW50KSwgMCwgZWxtKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuZWxtcy5wdXNoKCBlbG0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZWxtO1xyXG4gICAgfVxyXG5cclxuICAgIHNlcmlhbGl6ZSgpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbG1zLm1hcCggZWxtID0+IGVsbS5zZXJpYWxpemUoKSkuam9pbihcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGVsbXM6IFNlcnZlck1pbWNzc1N0eWxlRWxlbWVudFtdID0gW107XHJcbiAgICBwcml2YXRlIHRoZW1lRWxtPzogU2VydmVyTWltY3NzU3R5bGVFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogU2VydmVyLXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYW4gb2JqZWN0IHRvIHdoaWNoIHJ1bGVzIGNhbiBiZSBhZGRlZC5cclxuICovXHJcbmFic3RyYWN0IGNsYXNzIFNlcnZlck1pbWNzc1J1bGVCYWcgaW1wbGVtZW50cyBJTWltY3NzUnVsZUJhZ1xyXG57XHJcbiAgICBhZGQoIHJ1bGVUZXh0OiBzdHJpbmcpOiBJTWltY3NzUnVsZSB8IG51bGxcclxuICAgIHtcclxuICAgICAgICBsZXQgcnVsZSA9IG5ldyBTZXJ2ZXJNaW1jc3NSdWxlKCBydWxlVGV4dCk7XHJcbiAgICAgICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgICAgIHJldHVybiBydWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEdyb3VwKCBzZWxlY3Rvcjogc3RyaW5nKTogSU1pbWNzc0dyb3VwaW5nUnVsZSB8IG51bGxcclxuICAgIHtcclxuICAgICAgICBsZXQgcnVsZSA9IG5ldyBTZXJ2ZXJNaW1jc3NHcm91cGluZ1J1bGUoIHNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLnJ1bGVzLnB1c2gocnVsZSk7XHJcbiAgICAgICAgcmV0dXJuIHJ1bGU7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkS2V5ZnJhbWVzKCBuYW1lOiBzdHJpbmcpOiBJTWltY3NzS2V5ZnJhbWVzUnVsZSB8IG51bGxcclxuICAgIHtcclxuICAgICAgICBsZXQgcnVsZSA9IG5ldyBTZXJ2ZXJNaW1jc3NLZXlmcmFtZXNSdWxlKCBuYW1lKTtcclxuICAgICAgICB0aGlzLnJ1bGVzLnB1c2gocnVsZSk7XHJcbiAgICAgICAgcmV0dXJuIHJ1bGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2VyaWFsaXplKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJ1bGVzLm1hcCggcnVsZSA9PiBydWxlLnNlcmlhbGl6ZSgpKS5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcnVsZXM6IChTZXJ2ZXJNaW1jc3NSdWxlIHwgU2VydmVyTWltY3NzR3JvdXBpbmdSdWxlIHwgU2VydmVyTWltY3NzS2V5ZnJhbWVzUnVsZSlbXSA9IFtdO1xyXG59XHJcblxyXG4vKipcclxuICogU2VydmVyLXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYSBzdHlsZSBlbGVtZW50LlxyXG4gKi9cclxuY2xhc3MgU2VydmVyTWltY3NzU3R5bGVFbGVtZW50IGV4dGVuZHMgU2VydmVyTWltY3NzUnVsZUJhZyBpbXBsZW1lbnRzIElNaW1jc3NTdHlsZUVsZW1lbnRcclxue1xyXG4gICAgY29uc3RydWN0b3IoIHB1YmxpYyBpZDogc3RyaW5nKSB7IHN1cGVyKCk7IH1cclxuICAgIHB1YmxpYyBkb21FbG06IEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuICAgIHJlbW92ZSgpOiB2b2lkIHt9XHJcblxyXG4gICAgc2VyaWFsaXplKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBgPHN0eWxlIGlkPVwiJHt0aGlzLmlkfVwiPiR7c3VwZXIuc2VyaWFsaXplKCl9PC9zdHlsZT5gO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2VydmVyLXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYSBiYXNlIGludGVyZmFjZSBmb3IgQ1NTIHJ1bGUuXHJcbiAqL1xyXG5jbGFzcyBTZXJ2ZXJNaW1jc3NSdWxlIGltcGxlbWVudHMgSU1pbWNzc1J1bGVcclxue1xyXG4gICAgY29uc3RydWN0b3IoIHB1YmxpYyBydWxlVGV4dDogc3RyaW5nKSB7fVxyXG4gICAgcHVibGljIGNzc1J1bGU6IENTU1J1bGUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBzZXJpYWxpemUoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnVsZVRleHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXJ2ZXItc2lkZSBpbXBsZW1lbnRhdGlvbiBvZiBhIGdyb3VwaW5nIHJ1bGUgdG8gd2hpY2ggcnVsZXMgY2FuIGJlIGFkZGVkLlxyXG4gKi9cclxuY2xhc3MgU2VydmVyTWltY3NzR3JvdXBpbmdSdWxlIGV4dGVuZHMgU2VydmVyTWltY3NzUnVsZUJhZyBpbXBsZW1lbnRzIElNaW1jc3NHcm91cGluZ1J1bGVcclxue1xyXG4gICAgY29uc3RydWN0b3IoIHB1YmxpYyBzZWxlY3Rvcjogc3RyaW5nKSB7IHN1cGVyKCk7IH1cclxuICAgIHB1YmxpYyBjc3NSdWxlOiBDU1NSdWxlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgc2VyaWFsaXplKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLnNlbGVjdG9yfXske3N1cGVyLnNlcmlhbGl6ZSgpfX1gO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2VydmVyLXNpZGUgaW1wbGVtZW50YXRpb24gb2YgYSBrZXlmcmFtZXMgcnVsZSB0byB3aGljaCBmcmFtZXMgY2FuIGJlIGFkZGVkLlxyXG4gKi9cclxuY2xhc3MgU2VydmVyTWltY3NzS2V5ZnJhbWVzUnVsZSBpbXBsZW1lbnRzIElNaW1jc3NLZXlmcmFtZXNSdWxlXHJcbntcclxuICAgIGNvbnN0cnVjdG9yKCBwdWJsaWMgbmFtZTogc3RyaW5nKSB7fVxyXG4gICAgcHVibGljIGNzc1J1bGU6IENTU1J1bGUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBhZGRGcmFtZSggZnJhbWVUZXh0OiBzdHJpbmcpOiBJTWltY3NzUnVsZSB8IG51bGxcclxuICAgIHtcclxuICAgICAgICBsZXQgZnJhbWUgPSBuZXcgU2VydmVyTWltY3NzUnVsZSggZnJhbWVUZXh0KTtcclxuICAgICAgICB0aGlzLmZyYW1lcy5wdXNoKCBmcmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGZyYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHNlcmlhbGl6ZSgpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gYEBrZXlmcmFtZXMgJHt0aGlzLm5hbWV9eyR7dGhpcy5mcmFtZXMubWFwKCBmcmFtZSA9PiBmcmFtZS5zZXJpYWxpemUoKSkuam9pbihcIlwiKX19YDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZyYW1lczogU2VydmVyTWltY3NzUnVsZVtdID0gW107XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENsaWVudCBhY3RpdmF0aW9uIGNvbnRleHQuIEluIHRoZSBjbGllbnQgZW52aXJvbm1lbnQsIGl0IGlzIENsaWVudEFjdGl2YXRpb25Db250ZXh0IGluc3RhbmNlO1xyXG4gKiBpbiB0aGUgc2VydmVyIGVudmlyb25tZW50LCBpdCBpcyB1bmRlZmluZWQuXHJcbiAqL1xyXG5jb25zdCBzX2NsaWVudEFjdGl2YXRpb25Db250ZXh0ID0gZG9jdW1lbnQ/LmhlYWQgPyBuZXcgQ2xpZW50QWN0aXZhdGlvbkNvbnRleHQoKSA6IHVuZGVmaW5lZDtcclxuXHJcbi8qKlxyXG4gKiBBY3RpdmF0aW9uIGNvbnRleHQgdG8gdXNlLiBJbiB0aGUgY2xpZW50IGVudmlyb25tZW50LCBpdCBpcyBieSBkZWZhdWx0IENsaWVudEFjdGl2YXRpb25Db250ZXh0XHJcbiAqIGJ1dCBjYW4gYmUgY2hhbmdlZCAodGVtcG9yYXJpbHkpIHRvIEh5ZHJhdGlvbkFjdGl2YXRpb25Db250ZXh0LiBJbiB0aGUgc2VydmVyIGVudmlyb25tZW50LCBpdFxyXG4gKiBpcyBieSBkZWZhdWx0IHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBjaGFuZ2VkIHRvIFNlcnZlckFjdGl2YXRpb25Db250ZXh0LlxyXG4gKi9cclxubGV0IHNfYWN0aXZhdGlvbkNvbnRleHQ6IElBY3RpdmF0aW9uQ29udGV4dCB8IHVuZGVmaW5lZCA9IHNfY2xpZW50QWN0aXZhdGlvbkNvbnRleHQ7XHJcblxyXG4vKipcclxuICogU2NoZWR1bGVyIHR5cGUgcmVtZW1iZXJlZCB1cG9uIHN0YXJ0aW5nIFNTUiBvciBoeWRyYXRpb24gcHJvY2Vzcy4gVGhpcyB3aWxsIGJlIHVzZWQgdG8gcmVzdG9yZVxyXG4gKiB0aGUgc2NlZHVsZXIgd2hlbiBTU1Igb3IgaHlkcmF0aW9uIHByb2Nlc3MgaXMgc3RvcHBlZC5cclxuICovXHJcbmxldCBzX3JlbWVtYmVyZWRTY2hlZHVsZXJUeXBlOiBudW1iZXIgPSAwO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogU2V0cyBzZXJ2ZXItc2lkZSBhY3RpdmF0aW9uIGNvbnRleHQuIFRocm93cyBhbiBlcnJvciBpZiBub24tZGVmYXVsdCBhY3RpdmF0aW9uIGNvbnRleHQgaXNcclxuICogYWxyZWFkeSBzZXQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc19zdGFydFNTUiA9ICgpOiB2b2lkID0+XHJcbntcclxuICAgIGlmIChzX2FjdGl2YXRpb25Db250ZXh0ICE9PSBzX2NsaWVudEFjdGl2YXRpb25Db250ZXh0KVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNTUiBhbHJlYWR5IHN0YXJ0ZWRcIik7XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgc19hY3RpdmF0aW9uQ29udGV4dCA9IG5ldyBTZXJ2ZXJBY3RpdmF0aW9uQ29udGV4dCgpO1xyXG4gICAgICAgIHNfcmVtZW1iZXJlZFNjaGVkdWxlclR5cGUgPSBzZXREZWZhdWx0U2NoZWR1bGVyKCBTY2hlZHVsZXJUeXBlLlN5bmMpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3RvcHMgc2VydmVyLXNpZGUgYWN0aXZhdGlvbiBmdW5jdGlvbmFsaXR5IGFuZCByZXR1cm5zIGEgc3RyaW5nIHdpdGggc2VyaWFsaXplZCBzdHlsZXMuIFRoZVxyXG4gKiBzdHJpbmcgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBgPGhlYWQ+YCBlbGVtZW50IHVzaW5nIGBpbnNlcnRBZGphY2VudEhUTUwoKWAgbWV0aG9kLlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgU1NSIGhhcyBub3QgYmVlbiBzdGFydGVkLlxyXG4gKiBAcmV0dXJucyBTdHJpbmcgY29udGFpbmluZyBzZXJpYWxpemVkIHN0eWxlc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNfc3RvcFNTUiA9ICgpOiBzdHJpbmcgPT5cclxue1xyXG4gICAgaWYgKCFzX2FjdGl2YXRpb25Db250ZXh0IHx8ICEoc19hY3RpdmF0aW9uQ29udGV4dCBpbnN0YW5jZW9mIFNlcnZlckFjdGl2YXRpb25Db250ZXh0KSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTU1Igbm90IHN0YXJ0ZWRcIik7XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgLy8gcmVzdG9yZSBzY2hlZHVsZXIgdHlwZSBleGlzdGVkIGJlZm9yZSB3ZSBzdGFydGVkIFNTUlxyXG4gICAgICAgIHNldERlZmF1bHRTY2hlZHVsZXIoIHNfcmVtZW1iZXJlZFNjaGVkdWxlclR5cGUpO1xyXG4gICAgICAgIHNfcmVtZW1iZXJlZFNjaGVkdWxlclR5cGUgPSAwO1xyXG5cclxuICAgICAgICBsZXQgcyA9IHNfYWN0aXZhdGlvbkNvbnRleHQuc2VyaWFsaXplKCk7XHJcbiAgICAgICAgc19hY3RpdmF0aW9uQ29udGV4dCA9IHNfY2xpZW50QWN0aXZhdGlvbkNvbnRleHQ7XHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFNldHMgaHlkcmF0aW9uIGFjdGl2YXRpb24gY29udGV4dC4gVGhyb3dzIGFuIGVycm9yIGlmIG5vbi1kZWZhdWx0IGFjdGl2YXRpb24gY29udGV4dCBpc1xyXG4gKiBhbHJlYWR5IHNldC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBzX3N0YXJ0SHlkcmF0aW9uID0gKCk6IHZvaWQgPT5cclxue1xyXG4gICAgaWYgKHNfYWN0aXZhdGlvbkNvbnRleHQgIT09IHNfY2xpZW50QWN0aXZhdGlvbkNvbnRleHQpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSHlkcmF0aW9uIGFscmVhZHkgc3RhcnRlZFwiKTtcclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgICBzX2FjdGl2YXRpb25Db250ZXh0ID0gbmV3IEh5ZHJhdGlvbkFjdGl2YXRpb25Db250ZXh0KCk7XHJcbiAgICAgICAgc19yZW1lbWJlcmVkU2NoZWR1bGVyVHlwZSA9IHNldERlZmF1bHRTY2hlZHVsZXIoIFNjaGVkdWxlclR5cGUuU3luYyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdG9wcyBoeWRyYXRpb24gYWN0aXZhdGlvbiBmdW5jdGlvbmFsaXR5IGFuZCByZXN0b3JlIHRoZSBkZWZhdWx0IGFjdGl2YXRpb24gY29udGV4dC5cclxuICogQHJldHVybnMgU3RyaW5nIGNvbnRhaW5pbmcgc2VyaWFsaXplZCBzdHlsZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzX3N0b3BIeWRyYXRpb24gPSAoKTogdm9pZCA9PlxyXG57XHJcbiAgICBpZiAoIXNfYWN0aXZhdGlvbkNvbnRleHQgfHwgIShzX2FjdGl2YXRpb25Db250ZXh0IGluc3RhbmNlb2YgSHlkcmF0aW9uQWN0aXZhdGlvbkNvbnRleHQpKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkh5ZHJhdGlvbiBub3Qgc3RhcnRlZFwiKTtcclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgICAvLyByZXN0b3JlIHNjaGVkdWxlciB0eXBlIGV4aXN0ZWQgYmVmb3JlIHdlIHN0YXJ0ZWQgU1NSXHJcbiAgICAgICAgc2V0RGVmYXVsdFNjaGVkdWxlciggc19yZW1lbWJlcmVkU2NoZWR1bGVyVHlwZSk7XHJcbiAgICAgICAgc19yZW1lbWJlcmVkU2NoZWR1bGVyVHlwZSA9IDA7XHJcblxyXG4gICAgICAgIHNfYWN0aXZhdGlvbkNvbnRleHQgPSBzX2NsaWVudEFjdGl2YXRpb25Db250ZXh0O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbiIsImltcG9ydCB7XHJcbiAgICBJU3R5bGVSdWxlLCBJVmFyUnVsZSwgRGVwZW5kZW50UnVsZXMsIElOYW1lZEVudGl0eSwgSUNsYXNzUnVsZSwgSUlEUnVsZSwgSVN0eWxlRGVmaW5pdGlvbixcclxuICAgIElQYWdlUnVsZSxcclxuICAgIElQcmVmaXhlZE5hbWVkRW50aXR5XHJcbn0gZnJvbSBcIi4uL2FwaS9SdWxlVHlwZXNcIjtcclxuaW1wb3J0IHtcclxuICAgIEV4dGVuZGVkSVN0eWxlc2V0LCBTdHlsZXNldCwgVmFyVGVtcGxhdGVOYW1lLCBDdXN0b21WYXJfU3R5bGVUeXBlLCBFeHRlbmRlZFZhclZhbHVlLFxyXG4gICAgQ29tYmluZWRTdHlsZXNldCwgUGFyZW50Q2xhc3NUeXBlLCBJU3R5bGVzZXRcclxufSBmcm9tIFwiLi4vYXBpL1N0eWxlc2V0c1wiXHJcbmltcG9ydCB7Q3NzU2VsZWN0b3IsIElQYXJhbWV0ZXJpemVkUHNldWRvRW50aXR5RnVuYywgUGFnZVBzZXVkb0NsYXNzfSBmcm9tIFwiLi4vYXBpL0NvcmVUeXBlc1wiXHJcbmltcG9ydCB7UnVsZSwgSU1pbWNzc1J1bGVCYWd9IGZyb20gXCIuL1J1bGVcIjtcclxuaW1wb3J0IHtjYW1lbFRvRGFzaCwgZmRvMnMsIHN5bVYyU30gZnJvbSBcIi4uL2ltcGwvVXRpbHNcIjtcclxuaW1wb3J0IHtzMnMsIHNwMnN9IGZyb20gXCIuLi9pbXBsL1N0eWxlSW1wbFwiXHJcbmltcG9ydCB7Z2V0QWN0aXZhdG9yfSBmcm9tIFwiLi4vaW1wbC9TY2hlZHVsaW5nSW1wbFwiO1xyXG5pbXBvcnQge3NlbGVjdG9yMnN9IGZyb20gXCIuLi9pbXBsL0NvcmVJbXBsXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgU3R5bGVSdWxlIGNsYXNzIGlzIHVzZWQgYXMgYSBiYXNlIGNsYXNzIGZvciBydWxlcyB0aGF0IGNvbnRhaW4gYSBzdHlsZSBydWxlLiBUaGlzIGNsYXNzXHJcbiAqIGltcGxlbWVudHMgdGhlIHBhcnNpbmcgb2YgdGhlIENvbWJpbmVkU3R5bGVzZXQgb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0eWxlUnVsZSBleHRlbmRzIFJ1bGUgaW1wbGVtZW50cyBJU3R5bGVSdWxlXHJcbntcclxuXHQvLyBUaGUgc3R5bGVzZXQgY2FuIGJlIGFuIENvbWJpbmVkU3R5bGVzZXQgZm9yIG1hbnkgcnVsZXM7IGhvd2V2ZXIsIGZvciBzb21lIGl0IGlzIGp1c3RcclxuXHQvLyBvZiB0aGUgU3R5bGVzZXQgdHlwZS5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCBpbnB1dFN0eWxlc2V0PzogU3R5bGVzZXQgfCBTdHlsZXNldFtdKVxyXG5cdHtcclxuXHRcdHN1cGVyKHNkKTtcclxuXHJcblx0XHR0aGlzLnN0eWxlc2V0ID0ge307XHJcblx0XHR0aGlzLmRlcGVuZGVudFJ1bGVzID0ge307XHJcblxyXG5cdFx0aWYgKGlucHV0U3R5bGVzZXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSggaW5wdXRTdHlsZXNldCkpXHJcbiAgICAgICAgICAgICAgICBpbnB1dFN0eWxlc2V0LmZvckVhY2goIHYgPT4gdGhpcy5wYXJzZSggc2QsIHYpKTtcclxuICAgICAgICAgICAgZWxzZVxyXG5cdFx0XHQgICAgdGhpcy5wYXJzZSggc2QsIGlucHV0U3R5bGVzZXQpO1xyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBhbGxvd3MgdGhlIG9iamVjdCB0byBwYXJ0aWNwYXRlIGluIFwidjJzXCIgc2VyaWFsaXphdGlvbi4gV2hlbmV2ZXIgdGhlXHJcbiAgICAgKiBTdHlsZVJ1bGUtZGVyaXZlZCBvYmplY3QgaXMgZW5jb3VudGVyZWQgYnkgdGhlIGB2MnNgIGZ1bmN0aW9uLCB0aGUgcnVsZSdzIHNlbGVjdG9yIHdpbGwgYmVcclxuICAgICAqIHVzZWQuXHJcbiAgICAgKi9cclxuICAgIFtzeW1WMlNdKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGB0b1N0cmluZygpYCBtZXRob2QgaXMgdXNlZCB3aGVuZXZlciB0aGVyZSBpcyB0aGUgbmVlZCB0byBjb252ZXJ0IHRoZSBvYmplY3QgdG8gc3RyaW5nLlxyXG4gICAgICogSW4gYHYyc2AgY29udGV4dCwgdGhlIGB0b1N0cmluZygpYCBtZXRob2QgaGFzIGxvd2VyIHByZWNlZGVuY2UgdGhhbiB0aGUgYHN5bVYyU2AgcHJvcGVydHlcclxuICAgICAqIGFuZCB0aGlzIGFsbG93cyB0aGUgYHRvU3RyaW5nKClgIHRvIGJlIG92ZXJyaWRkZW4gaW4gZGVyaXZlZCBjbGFzc2VzIHdpdGhvdXQgY2hhbmdpbmcgdGhlXHJcbiAgICAgKiBgc3lWMlNgIGZ1bmN0aW9uYWxpdHkuIEZvciBleGFtcGxlLCB0aGUgYHRvU3RyaW5nKClgIGZvciBjbGFzcyBhbmQgSUQgcnVsZXMgd2lsbCByZXR1cm5cclxuICAgICAqIHRoZSBjbGFzIGFuZCBJRCBuYW1lcyAod2l0aG91dCB0aGUgcHJlZml4ZXMpIHJlc3BlY3RpdmVseSwgd2hpbGUgdGhlIGJhc2ljICh0aGlzKVxyXG4gICAgICogaW1wbGVtZW50YXRpb24gcmV0dXJucyB0aGUgc2VsZWN0b3IgdGV4dC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDsgfVxyXG5cclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIEdvZXMgb3ZlciBwcm9wZXJ0aWVzIGluIHRoZSBnaXZlbiBzdHlsZXNldCBhbmQgcGFyc2VzIHRoZW0gaW50byBwcm9wZXIgc3R5bGVzZXQsIHNldCBvZlxyXG5cdCAqIGltcG9ydGFudCBwcm9wZXJ0aWVzIGFuZCBkZXBlbmRlbnQgcnVsZXMuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBwYXJzZSggc2Q6IElTdHlsZURlZmluaXRpb24sIGlucHV0U3R5bGVzZXQ6IFN0eWxlc2V0KTogdm9pZFxyXG5cdHtcclxuXHRcdGZvciggbGV0IHByb3BOYW1lIGluIGlucHV0U3R5bGVzZXQpXHJcblx0XHR7XHJcblx0XHRcdGxldCBwcm9wVmFsID0gaW5wdXRTdHlsZXNldFtwcm9wTmFtZV07XHJcbiAgICAgICAgICAgIGlmIChwcm9wVmFsID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgZWxzZSBpZiAocHJvcE5hbWUgPT09IFwiK1wiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgaXMgYSBzaW5nbGUgU3R5bGVSdWxlIG9yIGFuIGFycmF5IG9mIFN0eWxlUnVsZXMgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cclxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnRSdWxlcyA9IHByb3BWYWwgaW5zdGFuY2VvZiBTdHlsZVJ1bGUgPyBbcHJvcFZhbF0gOiBwcm9wVmFsIGFzIFN0eWxlUnVsZVtdO1xyXG4gICAgICAgICAgICAgICAgZm9yKCBsZXQgcGFyZW50IG9mIHBhcmVudFJ1bGVzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlU3R5bGVzZXRzKCB0aGlzLnN0eWxlc2V0LCBwYXJlbnQuc3R5bGVzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29weURlcFJ1bGVzKCBwYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BOYW1lID09PSBcIi0tXCIpXHJcbiAgICAgICAgICAgICAgICBtZXJnZUN1c3RvbVByb3BzKCB0aGlzLnN0eWxlc2V0LCBwcm9wVmFsIGFzIEN1c3RvbVZhcl9TdHlsZVR5cGVbXSk7XHJcblx0XHRcdGVsc2UgaWYgKHByb3BOYW1lLnN0YXJ0c1dpdGgoXCI6XCIpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly8gaWYgdGhlIHZhbHVlIGlzIGFuIGFycmF5LCB0aGVuIHRoaXMgaXMgYW4gYXJyYXkgb2YgdHVwbGVzIHJlcHJlc2VudGluZ1xyXG5cdFx0XHRcdC8vIHBhcmFtZXRlcmlzZWQgcHNldWRvIGVudGl0aWVzIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGlzIHRoZSBwYXJhbWV0ZXIgdmFsdWVcclxuXHRcdFx0XHQvLyAoc3RyaW5nKSBhbmQgdGhlIHNlY29uZCB0aGUgQ29tYmluZWRTdHlsZXNldC4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgaXMganVzdCBhXHJcblx0XHRcdFx0Ly8gQ29tYmluZWRTdHlsZXNldC5cclxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsKSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0aGlzLmRlcGVuZGVudFJ1bGVzW3Byb3BOYW1lXSA9IHByb3BWYWwubWFwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodHVwbGU6IFthbnksIENvbWJpbmVkU3R5bGVzZXQgfCBDb21iaW5lZFN0eWxlc2V0W11dKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERlcFJ1bGUoc2QsIHByb3BOYW1lLCB0dXBsZVswXSwgdHVwbGVbMV0sIHRoaXMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dGhpcy5kZXBlbmRlbnRSdWxlc1twcm9wTmFtZV0gPSBuZXcgRGVwUnVsZSggc2QsIFwiJlwiICsgcHJvcE5hbWUsIHVuZGVmaW5lZCxcclxuXHRcdFx0XHRcdFx0cHJvcFZhbCBhcyBDb21iaW5lZFN0eWxlc2V0LCB0aGlzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmIChwcm9wTmFtZS5pbmNsdWRlcyhcIiZcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIHZhbHVlIGlzIGFuIGFycmF5IG9mIHR3by1lbGVtZW50IHR1cGxlcyB3aXRoIHNlbGVjdG9yIGFuZCBzdHlsZXNldFxyXG4gICAgICAgICAgICAgICAgbGV0IHR1cGxlcyA9IHByb3BWYWwgYXMgW0Nzc1NlbGVjdG9yLCBDb21iaW5lZFN0eWxlc2V0IHwgQ29tYmluZWRTdHlsZXNldFtdXVtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR1cGxlcy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVwZW5kZW50UnVsZXNbcHJvcE5hbWVdID0gdHVwbGVzLm1hcCggdHVwbGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3U2VsZWN0b3IgPSBwcm9wTmFtZSA9PT0gXCImXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHVwbGVbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcHJvcE5hbWUuc3RhcnRzV2l0aChcIiZcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFtwcm9wTmFtZSwgdHVwbGVbMF1dXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbdHVwbGVbMF0sIHByb3BOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZXBSdWxlKCBzZCwgbmV3U2VsZWN0b3IsIHVuZGVmaW5lZCwgdHVwbGVbMV0sIHRoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHRcdFx0ZWxzZSBpZiAodGhpcy5wYXJzZVNQKCBwcm9wTmFtZSwgcHJvcFZhbCkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyB0aGlzIGlzIGEgcmVndWxhciBDU1MgcHJvcGVydHk6IGNvcHkgdGhlIHByb3BlcnR5IHZhbHVlIHRvIG91ciBpbnRlcm5hbCBzdHlsZXNldFxyXG4gICAgICAgICAgICAgICAgbWVyZ2VQcm9wVmFsdWVzKCB0aGlzLnN0eWxlc2V0LCBwcm9wTmFtZSwgcHJvcFZhbClcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvLyBQcm9jZXNzZXMgdGhlIGdpdmVuIHJ1bGUuXHJcblx0cHVibGljIHByb2Nlc3MoIHJ1bGVOYW1lOiBzdHJpbmcgfCBudWxsKTogdm9pZFxyXG5cdHtcclxuICAgICAgICB0aGlzLmZvckVhY2hEZXBSdWxlKCAoZGVwUnVsZTogRGVwUnVsZSkgPT4gZGVwUnVsZS5wcm9jZXNzKCBudWxsKSk7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8vIENvbnZlcnRzIHRoZSBydWxlIHRvIENTUyBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBydWxlLlxyXG5cdHB1YmxpYyB0b0NzcygpOiBzdHJpbmdcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5zZWxlY3RvclRleHQgKyBzMnMoIHRoaXMuc3R5bGVzZXQpO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvLyBJbnNlcnRzIHRoaXMgcnVsZSBpbnRvIHRoZSBnaXZlbiBwYXJlbnQgcnVsZSBvciBzdHlsZXNoZWV0LlxyXG5cdHB1YmxpYyBpbnNlcnQoIHJ1bGVCYWc6IElNaW1jc3NSdWxlQmFnKTogdm9pZFxyXG5cdHtcclxuXHRcdGlmIChPYmplY3Qua2V5cyh0aGlzLnN0eWxlc2V0KS5sZW5ndGggPiAwKVxyXG5cdFx0XHR0aGlzLmNzc1J1bGUgPSBydWxlQmFnLmFkZCggdGhpcy50b0NzcygpKT8uY3NzUnVsZSBhcyBDU1NTdHlsZVJ1bGU7XHJcblxyXG4gICAgICAgIC8vIGluc2VydCBkZXBlbmRlbnQgcnVsZXMgdW5kZXIgdGhlIHNhbWUgcGFyZW50XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoRGVwUnVsZSggKGRlcFJ1bGU6IERlcFJ1bGUpID0+IGRlcFJ1bGUuaW5zZXJ0KCBydWxlQmFnKSk7XHJcblx0fVxyXG5cclxuXHQvLyBDbGVycyB0aGUgQ1NTIHJ1bGUgb2JqZWN0LlxyXG5cdHB1YmxpYyBjbGVhcigpOiB2b2lkXHJcblx0e1xyXG5cdFx0c3VwZXIuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgLy8gY2xlYXIgZGVwZW5kZW50IHJ1bGVzXHJcbiAgICAgICAgdGhpcy5mb3JFYWNoRGVwUnVsZSggKGRlcFJ1bGU6IERlcFJ1bGUpID0+IGRlcFJ1bGUuY2xlYXIoKSk7XHJcblx0fVxyXG5cclxuXHQvLyBJbnZva2UgdGhlIGdpdmVuIGZ1bmN0aW9uIGZvciBlYWNoIG9mIHRoZSBkZXBlbmRlbnQgcnVsZXMuXHJcblx0cHJpdmF0ZSBmb3JFYWNoRGVwUnVsZSggZnVuYzogKGRlcFJ1bGU6IERlcFJ1bGUpID0+IHZvaWQpOiB2b2lkXHJcblx0e1xyXG5cdFx0Zm9yKCBsZXQgcHJvcE5hbWUgaW4gdGhpcy5kZXBlbmRlbnRSdWxlcylcclxuXHRcdHtcclxuXHRcdFx0bGV0IHByb3BWYWwgPSB0aGlzLmRlcGVuZGVudFJ1bGVzW3Byb3BOYW1lXSBhcyBEZXBSdWxlIHwgRGVwUnVsZVtdO1xyXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsKSlcclxuICAgICAgICAgICAgICAgIGZvciggbGV0IGRlcFJ1bGUgb2YgcHJvcFZhbCkgZnVuYyggZGVwUnVsZSk7XHJcblx0XHRcdGVsc2VcclxuICAgICAgICAgICAgICAgIGZ1bmMoIHByb3BWYWwpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvKiogQ1NTIHJ1bGUgc2VsZWN0b3Igc3RyaW5nICovXHJcblx0cHVibGljIGdldCBzZWxlY3RvclRleHQoKTogc3RyaW5nXHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuX3NlbCA9PSBudWxsKVxyXG5cdFx0XHR0aGlzLl9zZWwgPSB0aGlzLmdldFNlbCgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9zZWw7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8vIENvcGllcyBkZXBlbmRlbnQgcnVsZXMgZnJvbSBhbm90aGVyIHN0eWxlIHJ1bGUgb2JqZWN0LlxyXG5cdHByb3RlY3RlZCBjb3B5RGVwUnVsZXMoIHNyYzogU3R5bGVSdWxlKTogdm9pZFxyXG5cdHtcclxuICAgICAgICBsZXQgc3JzRGVwUnVsZXMgPSBzcmMuZGVwZW5kZW50UnVsZXM7XHJcbiAgICAgICAgbGV0IHRoaXNEZXBSdWxlcyA9IHRoaXMuZGVwZW5kZW50UnVsZXM7XHJcblx0XHRmb3IoIGxldCBwcm9wTmFtZSBpbiBzcnNEZXBSdWxlcylcclxuXHRcdHtcclxuXHRcdFx0bGV0IHNyY1J1bGVPckFyciA9IHNyc0RlcFJ1bGVzW3Byb3BOYW1lXSBhcyBEZXBSdWxlIHwgRGVwUnVsZVtdO1xyXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShzcmNSdWxlT3JBcnIpKVxyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3JjUnVsZU9yQXJyLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRoaXNBcnIgPSB0aGlzRGVwUnVsZXNbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpc0FycilcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0RlcFJ1bGVzW3Byb3BOYW1lXSA9IHRoaXNBcnIgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKCBsZXQgc3JjRGVwUnVsZSBvZiBzcmNSdWxlT3JBcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNBcnIucHVzaCggc3JjRGVwUnVsZS5jbG9uZSggdGhpcykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR0aGlzRGVwUnVsZXNbcHJvcE5hbWVdID0gc3JjUnVsZU9yQXJyLmNsb25lKCB0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHJcblx0Ly8gUmV0dXJucyB0aGUgc2VsZWN0b3IgcGFydCBvZiB0aGUgc3R5bGUgcnVsZS5cclxuXHRwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0U2VsKCk6IHN0cmluZztcclxuXHJcbiAgICAvLyBBbGxvd3MgdGhlIGRlcml2ZWQgY2xhc3NlcyB0byBwcm9jZXNzIHN0eWxlIHByb3BlcnRpZXMgdGhhdCB0aGUgU3R5bGVSdWxlIGRvZXNuJ3Qga25vdyBhYm91dC5cclxuICAgIC8vIElmIGZhbHNlIGlzIHJldHVybmVkLCB0aGUgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgc3R5bGVzZXQuXHJcblx0cHJvdGVjdGVkIHBhcnNlU1AoIHByb3BOYW1lOiBzdHJpbmcsIHByb3BWYWw6IGFueSk6IGJvb2xlYW4geyByZXR1cm4gdHJ1ZTsgfVxyXG5cclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkZHMvcmVwbGFjZXMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBDU1MgcHJvcGVydHkgaW4gdGhpcyBydWxlLlxyXG5cdCAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIENTUyBwcm9wZXJ0eS5cclxuXHQgKiBAcGFyYW0gdmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBDU1MgcHJvcGVydHkuXHJcblx0ICogQHBhcmFtIGltcG9ydGFudCBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0byBzZXQgdGhlIFwiIWltcG9ydGFudFwiIGZsYWcgb24gdGhlIHByb3BlcnR5IHZhbHVlLlxyXG5cdCAqIEBwYXJhbSBzY2hlZHVsZXJUeXBlIElEIG9mIGEgcmVnaXN0ZXJlZCBzY2hlZHVsZXIgdHlwZSB0aGF0IGlzIHVzZWQgdG8gd3JpdGUgdGhlIHByb3BlcnR5XHJcblx0ICogdmFsdWUgdG8gdGhlIERPTS4gSWYgdW5kZWZpbmVkLCB0aGUgY3VycmVudCBkZWZhdWx0IHNjaGVkdWxlciB3aWxsIGJlIHVzZWQuXHJcblx0ICovXHJcbiAgICBwdWJsaWMgc2V0UHJvcDxLIGV4dGVuZHMga2V5b2YgSVN0eWxlc2V0PiggbmFtZTogSywgdmFsdWU6IEV4dGVuZGVkSVN0eWxlc2V0W0tdIHwgbnVsbCxcclxuICAgICAgICBpbXBvcnRhbnQ/OiBib29sZWFuLCBzY2hlZHVsZXJUeXBlPzogbnVtYmVyKTogdm9pZFxyXG5cdHtcclxuXHRcdC8vIGZpcnN0IHNldC9yZW1vdmUgdGhlIHZhbHVlIGluIG91ciBpbnRlcm5hbCBzdHlsZXNldCBvYmplY3RcclxuXHRcdGlmICh2YWx1ZSA9PSBudWxsKVxyXG5cdFx0XHRkZWxldGUgdGhpcy5zdHlsZXNldFtuYW1lXTtcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhpcy5zdHlsZXNldFtuYW1lXSA9IGltcG9ydGFudCA/IHsgXCIhXCI6IHZhbHVlIGFzIGFueSB9IDogdmFsdWUgYXMgYW55O1xyXG5cclxuXHRcdC8vIHNlY29uZCwgaWYgQ1NTUnVsZSBhbHJlZHkgZXhpc3RzLCBzZXQvcmVtb3ZlIHRoZSBwcm9wZXJ0eSB2YWx1ZSB0aGVyZVxyXG5cdFx0aWYgKHRoaXMuY3NzUnVsZSlcclxuICAgICAgICB7XHJcblx0XHQgICAgZ2V0QWN0aXZhdG9yKHNjaGVkdWxlclR5cGUpLnVwZGF0ZVN0eWxlKCB0aGlzLmNzc1J1bGUsIGNhbWVsVG9EYXNoKCBuYW1lKSxcclxuICAgICAgICAgICAgICAgIHZhbHVlID09IG51bGwgPyBudWxsIDogc3AycyggbmFtZSwgdmFsdWUpLCBpbXBvcnRhbnQpO1xyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG5cclxuXHJcblx0LyoqXHJcblx0ICogQWRkcy9yZXBsYWNlcyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIGN1c3RvbSBDU1MgcHJvcGVydHkgaW4gdGhpcyBydWxlLlxyXG5cdCAqIEBwYXJhbSB2YXJPYmogSVZhclJ1bGUgb2JqZWN0IGRlZmluaW5nIGEgY3VzdG9tIENTUyBwcm9wZXJ0eS5cclxuXHQgKiBAcGFyYW0gdmFyVmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBjdXN0b20gQ1NTIHByb3BlcnR5LlxyXG5cdCAqIEBwYXJhbSBpbXBvcnRhbnQgRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gc2V0IHRoZSBcIiFpbXBvcnRhbnRcIiBmbGFnIG9uIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cclxuXHQgKiBAcGFyYW0gc2NoZWR1bGVyVHlwZSBJRCBvZiBhIHJlZ2lzdGVyZWQgc2NoZWR1bGVyIHR5cGUgdGhhdCBpcyB1c2VkIHRvIHdyaXRlIHRoZSBwcm9wZXJ0eVxyXG5cdCAqIHZhbHVlIHRvIHRoZSBET00uIElmIHVuZGVmaW5lZCwgdGhlIGN1cnJlbnQgZGVmYXVsdCBzY2hlZHVsZXIgd2lsbCBiZSB1c2VkLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzZXRDdXN0b21Qcm9wPEsgZXh0ZW5kcyBWYXJUZW1wbGF0ZU5hbWU+KCB2YXJPYmo6IElWYXJSdWxlPEs+LCB2YWx1ZTogRXh0ZW5kZWRWYXJWYWx1ZTxLPiB8IG51bGwsXHJcblx0XHRpbXBvcnRhbnQ/OiBib29sZWFuLCBzY2hlZHVsZXJUeXBlPzogbnVtYmVyKTogdm9pZFxyXG5cdHtcclxuXHRcdGlmICghdmFyT2JqKVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0Ly8gZmlyc3Qgc2V0L3JlbW92ZSB0aGUgdmFsdWUgaW4gb3VyIGludGVybmFsIHN0eWxlc2V0IG9iamVjdFxyXG5cdFx0bGV0IGN1cnJDdXN0b21Qcm9wcyA9IHRoaXMuc3R5bGVzZXRbXCItLVwiXSBhcyBDdXN0b21WYXJfU3R5bGVUeXBlW107XHJcblx0XHRpZiAoY3VyckN1c3RvbVByb3BzIHx8IHZhbHVlICE9IG51bGwpXHJcblx0XHR7XHJcblx0XHRcdGlmICh2YWx1ZSA9PSBudWxsKVxyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBjdXJyQ3VzdG9tUHJvcHMuZmluZEluZGV4KCBpdGVtID0+IGl0ZW1bMF0gPT09IHZhck9iaik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMClcclxuICAgICAgICAgICAgICAgICAgICBjdXJyQ3VzdG9tUHJvcHMuc3BsaWNlKCBpbmRleCwgMSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoIWN1cnJDdXN0b21Qcm9wcylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVzZXRbXCItLVwiXSA9IFtbdmFyT2JqLCB2YWx1ZV1dO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IGN1cnJDdXN0b21Qcm9wcy5maW5kSW5kZXgoIGl0ZW0gPT4gaXRlbVswXSA9PT0gdmFyT2JqKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJDdXN0b21Qcm9wc1tpbmRleF1bMV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBjdXJyQ3VzdG9tUHJvcHMucHVzaCggW3Zhck9iaiwgdmFsdWVdKTtcclxuICAgICAgICAgICAgfVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHNlY29uZCwgaWYgQ1NTUnVsZSBhbHJlZHkgZXhpc3RzLCBzZXQvcmVtb3ZlIHRoZSBwcm9wZXJ0eSB2YWx1ZSB0aGVyZVxyXG5cdFx0aWYgKHRoaXMuY3NzUnVsZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldEFjdGl2YXRvcihzY2hlZHVsZXJUeXBlKS51cGRhdGVTdHlsZSggdGhpcy5jc3NSdWxlLCB2YXJPYmouY3NzTmFtZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlID09IG51bGwgPyBudWxsIDogc3AycyggdmFyT2JqLnRlbXBsYXRlLCB2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICBpbXBvcnRhbnQpO1xyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG5cclxuXHJcblx0LyoqIFNPTSBzdHlsZSBydWxlICovXHJcblx0cHVibGljIGNzc1J1bGU6IENTU1N0eWxlUnVsZTtcclxuXHJcblx0LyoqXHJcblx0ICogT2JqZWN0IGNvbnRhaW5pbmcgZGVwZW5kZW50IHJ1bGVzLiBQcm9wZXJ0eSBuYW1lcyBhcmUgdGFrZW4gZnJvbSBzcGVjaWFsIHByb3BlcnRpZXNcclxuXHQgKiBvZiB0aGUgQ29tYmluZWRTdHlsZXNldC4gVGhpcyBvYmplY3QgYWxsb3dzIGNhbGxlcnMgdG8gYWNjZXNzIGRlcGVuZGVudCBydWxlcyB0byBjaGFuZ2VcclxuXHQgKiBzdHlsZSBwcm9wZXJ0eSB2YWx1ZXMgcHJvZ3JhbW1hdGljYWxseS5cclxuXHQgKi9cclxuXHRwdWJsaWMgZGVwZW5kZW50UnVsZXM6IERlcGVuZGVudFJ1bGVzO1xyXG5cclxuXHQvLyBSZXN1bHRhbnQgb2JqZWN0IGRlZmluaW5nIHByb3BlcnRpZXMgdG8gYmUgaW5zZXJ0ZWQgaW50byBET00uXHJcblx0cHJvdGVjdGVkIHN0eWxlc2V0OiBTdHlsZXNldDtcclxuXHJcblx0Ly8gU2VsZWN0b3Igc3RyaW5nIGNhY2hlZCBhZnRlciBpdCBpcyBmaXJzdCBvYnRhaW5lZC4gTmVlZGVkIHRvIG5vdCBpbnZva2UgZ2V0U2VsZWN0b3JTdHJpbmdcclxuXHQvLyBtdWx0aXBsZSB0aW1lcyBpbiB0aGUgcHJlc2VuY2Ugb2YgZGVwZW5kZW50IHJ1bGVzLlxyXG5cdHByaXZhdGUgX3NlbDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBEZXBlbmRlbnRSdWxlIGNsYXNzIGRlc2NyaWJlcyBhIHN0eWxlc2V0IHRoYXQgZGVwZW5kcyBvbiB0aGUgY29udGFpbmluZyBzdHlsZSBydWxlLiBUaGlzXHJcbiAqIGlzIHVzZWQgZm9yIHBzZXVkbyBjbGFzc2VzLCBwc2V1ZG8gZWxlbWVudHMsIGNvbWJpbmF0b3JzIGFuZCBvdGhlciBzZWxlY3RvcnMgdGhhdCBjb21iaW5lIHRoZVxyXG4gKiBjb250YWluaW5nIHJ1bGUncyBzZWxlY3RvciB3aXRoIGFkZGl0aW9uYWwgc2VsZWN0b3IgaXRlbXMuXHJcbiAqL1xyXG5jbGFzcyBEZXBSdWxlIGV4dGVuZHMgU3R5bGVSdWxlXHJcbntcclxuXHQvLyBmb3IgcmVndWxhciBzZWxlY3RvcnMsIHBzZXVkbyBjbGFzc2VzIGFuZCBwc2V1ZG8gZWxlbWVudHMsIHRoZSBzZWxlY3RvciBhbHJlYWR5IGNvbnRhaW5zXHJcblx0Ly8gdGhlIGFtcGVyc2FuZCBhbmQgdGhlIHNlbGVjdG9yUGFyYW0gaXMgdW5kZWZpbmVkLiBGb3IgcGFyYW1ldGVyaXplZCBwc2V1ZG8gY2xhc3NlcywgcHNldWRvXHJcblx0Ly8gZWxlbWVudHMgYW5kIGNvbWJpbmF0b3JzLCB0aGUgc2VsZWN0b3JQYXJhbSBpcyBkZWZpbmVkIGFuZCB0aGUgc2VsZWN0b3IgaXMganVzdCB0aGUgZW50aXR5XHJcblx0Ly8gbmFtZS5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCBzZWxlY3RvcjogQ3NzU2VsZWN0b3IsIHBhcmFtPzogYW55LCBzdHlsZXNldD86IENvbWJpbmVkU3R5bGVzZXQgfCBDb21iaW5lZFN0eWxlc2V0W10sXHJcblx0XHRwYXJlbnQ/OiBTdHlsZVJ1bGUpXHJcblx0e1xyXG5cdFx0c3VwZXIoIHNkLCBzdHlsZXNldCk7XHJcblx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcblx0XHR0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLnBhcmFtID0gcGFyYW07XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8vIENyZWF0ZXMgYSBjb3B5IG9mIHRoZSBydWxlIGJ1dCB3aXRoIG5ldyBwYXJlbnQgKGNvbnRhaW5pbmcgcnVsZSkuXHJcblx0cHVibGljIGNsb25lKCBjb250YWluaW5nUnVsZTogU3R5bGVSdWxlKTogRGVwUnVsZVxyXG5cdHtcclxuXHRcdGxldCBuZXdSdWxlID0gbmV3IERlcFJ1bGUoIHRoaXMuc2QsIHRoaXMuc2VsZWN0b3IsIHRoaXMucGFyYW0sIHVuZGVmaW5lZCwgY29udGFpbmluZ1J1bGUpO1xyXG5cclxuICAgICAgICAvLyB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgb24gYSBuZXdseSBjcmVhdGVkIG9iamVjdCBzbyB3ZSBkb24ndCBoYXZlIGFueSBwcm9wZXJ0aWVzIGluXHJcblx0XHQvLyBvdXIgb3duIHN0eWxlc2V0IHlldFxyXG5cdFx0bWVyZ2VTdHlsZXNldHMoIG5ld1J1bGUuc3R5bGVzZXQsIHRoaXMuc3R5bGVzZXQpO1xyXG5cdFx0bmV3UnVsZS5jb3B5RGVwUnVsZXMoIHRoaXMpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3UnVsZTtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0Ly8gUmV0dXJucyB0aGUgc2VsZWN0b3IgcGFydCBvZiB0aGUgc3R5bGUgcnVsZS5cclxuXHRwdWJsaWMgZ2V0U2VsKCk6IHN0cmluZ1xyXG5cdHtcclxuXHRcdGxldCBwYXJlbnRTZWxlY3RvciA9IHRoaXMucGFyZW50IS5zZWxlY3RvclRleHQ7XHJcblx0XHRpZiAodGhpcy5wYXJhbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIHRoZSBcInBhcmFtXCIgdmFsdWUgaXMgb25seSBzZXQgZm9yIHBhcmFtZXRlcml6ZWQgcHNldWRvIGVudGl0aWVzLCBzbyB3ZSBjb252ZXJ0IGl0IHRvXHJcbiAgICAgICAgICAgIC8vIHRoZSBcImZ1bmNcIiBvYmplY3QgZm9ybS4gV2UgYWxzbyBrbm93IHRoYXQgdGhlIHNlbGVjdG9yIGlzIGEgc3RyaW5nIC0gbmFtZSBvZiB0aGUgZW50aXR5LlxyXG5cdFx0XHRyZXR1cm4gYCR7cGFyZW50U2VsZWN0b3J9JHtmZG8ycyh7Zm46IHRoaXMuc2VsZWN0b3IgYXMgc3RyaW5nLCBwOiB0aGlzLnBhcmFtfSBhcyBJUGFyYW1ldGVyaXplZFBzZXVkb0VudGl0eUZ1bmM8YW55Pil9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBjb252ZXJ0IHNlbGVjdG9yIHRvIHN0cmluZy5cclxuXHRcdFx0bGV0IHNlbGVjdG9yID0gc2VsZWN0b3IycyggdGhpcy5zZWxlY3Rvcik7XHJcblxyXG5cdFx0XHQvLyBpZiB0aGUgc2VsZWN0b3Igc3RyaW5nIGRvZXNuJ3QgaGF2ZSBhbnkgb2NjdXJyZW5jZXMgb2YgdGhlIGFtcGVyc2FuZCBzeW1ib2wsIHdlXHJcblx0XHRcdC8vIHNpbXBseSBhcHBlbmQgdGhlIHNlbGVjdG9yIHRvIHRoZSBwYXJlbnQgc2VsZWN0b3I7IG90aGVyd2lzZSwgd2UgcmVwbGFjZSBhbGxcclxuXHRcdFx0Ly8gb2NjdXJyZW5jZXMgb2YgdGhlIGFtcGVyc2FuZCBzeW1ib2wgaW4gdGhlIHNlbGVjdG9yIHN0cmluZyB3aXRoIHRoZSBzZWxlY3RvclxyXG5cdFx0XHQvLyBzdHJpbmcgb2YgdGhlIHBhcmVudCBydWxlLlxyXG5cdFx0XHRyZXR1cm4gc2VsZWN0b3IuaW5kZXhPZiggXCImXCIpIDwgMFxyXG5cdFx0XHRcdD8gYCR7cGFyZW50U2VsZWN0b3J9JHtzZWxlY3Rvcn1gXHJcblx0XHRcdFx0OiBzZWxlY3Rvci5yZXBsYWNlKCAvJi9nLCBwYXJlbnRTZWxlY3Rvcik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8vIFBhcmVudCBzdHlsZSBydWxlIG9mIHdoaWNoIHRoaXMgcnVsZSBpcyBkZXBlbmRlbnQuXHJcblx0cHVibGljIHBhcmVudD86IFN0eWxlUnVsZTtcclxuXHJcblx0Ly8gUGFydGlhbCBzZWxlY3RvciB0aGF0IHNob3VsZCBiZSBhcHBlbmRlZCB0byB0aGUgcGFyZW50IHNlbGVjdG9yLlxyXG5cdHByaXZhdGUgc2VsZWN0b3I6IENzc1NlbGVjdG9yO1xyXG5cclxuXHQvLyBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciB0aGUgc2VsZWN0b3IgLSB1c2VkIGZvciBwYXJhbWV0ZXJpemVkIHBzZXVkbyBjbGFzc2VzIGFuZCBlbGVtZW50cy5cclxuXHRwcml2YXRlIHBhcmFtPzogYW55O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgQWJzdHJhY3RSdWxlIGNsYXNzIGRlc2NyaWJlcyBhIHN0eWxlc2V0IHRoYXQgY2FuIG9ubHkgYmUgdXNlZCBhcyBhIGJhc2UgZm9yIG90aGVyIHN0eWxlXHJcbiAqIHJ1bGVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFic3RyYWN0UnVsZSBleHRlbmRzIFN0eWxlUnVsZVxyXG57XHJcblx0Ly8gT3ZlcnJpZGVzIHRoZSBTdHlsZVJ1bGUncyBpbXBsZW1lbnRhdGlvbiB0byBkbyBub3RoaW5nLiBObyBDU1NTdHlsZVJ1bGUgaXMgY3JlYXRlZCBmb3JcclxuXHQvLyBhYnN0cmFjdCBydWxlcy5cclxuXHRwdWJsaWMgaW5zZXJ0KCBydWxlQmFnOiBJTWltY3NzUnVsZUJhZyk6IHZvaWQge31cclxuXHJcblx0Ly8gT3ZlcnJpZGVzIHRoZSBTdHlsZVJ1bGUncyBpbXBsZW1lbnRhdGlvbiB0byBkbyBub3RoaW5nLlxyXG5cdHB1YmxpYyBjbGVhcigpOiB2b2lkIHt9XHJcblxyXG4gICAgLy8gUmV0dXJucyB0aGUgc2VsZWN0b3IgcGFydCBvZiB0aGUgc3R5bGUgcnVsZS5cclxuXHRwdWJsaWMgZ2V0U2VsKCk6IHN0cmluZyB7IHJldHVybiBcIlwiOyB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBOYW1lZFN0eWxlUnVsZSBjbGFzcyBpcyBhIGJhc2UgZm9yIHN0eWxlIHJ1bGUgY2xhc3NlcyB0aGF0IGFyZSBhbHNvIG5hbWVkIGVudGl0aWVzIC0gc3VjaFxyXG4gKiBhcyBjbGFzcyBydWxlIGFuZCBJRCBydWxlLlxyXG4gKi9cclxuYWJzdHJhY3QgY2xhc3MgTmFtZWRTdHlsZVJ1bGUgZXh0ZW5kcyBTdHlsZVJ1bGUgaW1wbGVtZW50cyBJUHJlZml4ZWROYW1lZEVudGl0eVxyXG57XHJcblx0cHVibGljIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbiwgc3R5bGVzZXQ/OiBDb21iaW5lZFN0eWxlc2V0IHwgQ29tYmluZWRTdHlsZXNldFtdLFxyXG4gICAgICAgIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElOYW1lZEVudGl0eSlcclxuXHR7XHJcblx0XHRzdXBlciggc2QsIHN0eWxlc2V0KTtcclxuXHRcdHRoaXMubmFtZU92ZXJyaWRlID0gbmFtZU92ZXJyaWRlO1xyXG5cdH1cclxuXHJcblx0Ly8gUHJvY2Vzc2VzIHRoZSBnaXZlbiBydWxlLlxyXG5cdHB1YmxpYyBwcm9jZXNzKCBydWxlTmFtZTogc3RyaW5nIHwgbnVsbCk6IHZvaWRcclxuXHR7XHJcblx0XHRzdXBlci5wcm9jZXNzKCBydWxlTmFtZSk7XHJcblxyXG5cdFx0dGhpcy5uYW1lID0gdGhpcy5yYy5nZXRTY29wZWROYW1lKCBydWxlTmFtZSwgdGhpcy5uYW1lT3ZlcnJpZGUpO1xyXG4gICAgICAgIHRoaXMuY3NzTmFtZSA9IHRoaXMucHJlZml4ICsgdGhpcy5uYW1lO1xyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJucyB0aGUgc2VsZWN0b3IgcGFydCBvZiB0aGUgc3R5bGUgcnVsZS5cclxuXHRwdWJsaWMgZ2V0U2VsKCk6IHN0cmluZ1xyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmNzc05hbWU7XHJcblx0fVxyXG5cclxuXHQvLyBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgdG9TdHJpbmcgbWV0aG9kIHJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHJ1bGUgKHdpdGhvdXQgdGhlIENTUyBwcmVmaXgpLlxyXG5cdHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmdcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5uYW1lO1xyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJucyBwcmVmaXggdGhhdCBpcyBwdXQgYmVmb3JlIHRoZSBlbnRpdHkgbmFtZSB0byBjcmVhdGUgYSBDU1MgbmFtZSB1c2VkIGluIHN0eWxlIHJ1bGVcclxuXHQvLyBzZWxlY3RvcnMuXHJcblx0cHVibGljIHByZWZpeDogXCIuXCIgfCBcIiNcIjtcclxuXHJcblx0LyoqXHJcblx0ICogUnVsZSdzIG5hbWUgLSB0aGlzIGlzIGEgdW5pcXVlIG5hbWUgdGhhdCBpcyBhc3NpZ25lZCBieSB0aGUgTWltY3NzIGluZnJhc3R1Y3R1cmUuIFRoaXMgbmFtZVxyXG5cdCAqIGRvZXNuJ3QgaGF2ZSB0aGUgcHJlZml4IHRoYXQgaXMgdXNlZCB3aGVuIHJlZmVycmluZyB0byBjbGFzc2VzICguKSwgSURzICgjKSBhbmQgY3VzdG9tIENTU1xyXG5cdCAqIHByb3BlcnRpZXMgKC0tKS5cclxuXHQgKi9cclxuXHRwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG5cclxuXHQvKipcclxuXHQgKiBSdWxlJ3MgbmFtZSAtIHRoaXMgaXMgYSBuYW1lIHRoYXQgaGFzIHRoZSBwcmVmaXggdGhhdCBpcyB1c2VkIHdoZW4gcmVmZXJyaW5nIHRvIGNsYXNzZXMgKC4pLFxyXG5cdCAqIElEcyAoIykgYW5kIGN1c3RvbSBDU1MgcHJvcGVydGllcyAoLS0pLiBGb3IgYW5pbWF0aW9ucywgdGhpcyBuYW1lIGlzIHRoZSBzYW1lIGFzIGluIHRoZVxyXG5cdCAqIGBuYW1lYCBwcm9wZXJ0eS5cclxuXHQgKi9cclxuXHRwdWJsaWMgY3NzTmFtZTogc3RyaW5nO1xyXG5cclxuXHQvLyBOYW1lIG9yIG5hbWVkIG9iamVjdCB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBhIG5hbWUgZm9yIHRoaXMgcnVsZS4gSWYgdGhpcyBwcm9wZXJ0eVxyXG5cdC8vIGlzIG5vdCBkZWZpbmVkLCB0aGUgbmFtZSB3aWxsIGJlIHVuaXF1ZWx5IGdlbmVyYXRlZC5cclxuXHRwcm90ZWN0ZWQgbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSU5hbWVkRW50aXR5O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgQ2xhc3NSdWxlIGNsYXNzIGRlc2NyaWJlcyBhIHN0eWxlc2V0IHRoYXQgYXBwbGllcyB0byBlbGVtZW50cyBpZGVudGlmaWVkIGJ5IGEgQ1NTIGNsYXNzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsYXNzUnVsZSBleHRlbmRzIE5hbWVkU3R5bGVSdWxlIGltcGxlbWVudHMgSUNsYXNzUnVsZSwgSVByZWZpeGVkTmFtZWRFbnRpdHlcclxue1xyXG5cdC8vIFByZWZpeCBmb3IgQ1NTIGNsYXNzZXMuXHJcblx0cHVibGljIHByZWZpeDogXCIuXCIgPSBcIi5cIjtcclxuXHJcbiAgICAvLyBBbGxvd3MgdGhlIGRlcml2ZWQgY2xhc3NlcyB0byBwcm9jZXNzIHN0eWxlIHByb3BlcnRpZXMgdGhhdCB0aGUgU3R5bGVSdWxlIGRvZXNuJ3Qga25vdyBhYm91dC5cclxuICAgIC8vIElmIHJldHVybnMgZmFsc2UsIHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBuYW1lIHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBzdHlsZXNldC5cclxuXHRwcm90ZWN0ZWQgcGFyc2VTUCggcHJvcE5hbWU6IHN0cmluZywgcHJvcFZhbDogYW55KTogYm9vbGVhblxyXG4gICAge1xyXG4gICAgICAgIGlmIChwcm9wTmFtZSA9PSBcIisrXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcnVsZXMgPSBwcm9wVmFsIGFzIFBhcmVudENsYXNzVHlwZSB8IFBhcmVudENsYXNzVHlwZVtdO1xyXG4gICAgICAgICAgICBpZiAocnVsZXMpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudHMgPSBBcnJheS5pc0FycmF5KHJ1bGVzKSA/IHJ1bGVzIDogW3J1bGVzXTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdXBlci5wYXJzZVNQKCBwcm9wTmFtZSwgcHJvcFZhbCk7XHJcbiAgICB9XHJcblxyXG5cdC8vIFByb2Nlc3NlcyB0aGUgZ2l2ZW4gcnVsZS5cclxuXHRwdWJsaWMgcHJvY2VzcyggcnVsZU5hbWU6IHN0cmluZyB8IG51bGwpOiB2b2lkXHJcblx0e1xyXG5cdFx0c3VwZXIucHJvY2VzcyggcnVsZU5hbWUpO1xyXG5cclxuICAgICAgICAvLyBieSBub3cgb3VyIG5hbWUgYW5kIGNzc05hbWUgcHJvcGVydGllcyBoYXZlIGJlZW4gc2V0IHRvIHJlZmxlY3QgYSBzaW5nbGUgbmFtZS4gTm93XHJcbiAgICAgICAgLy8gbG9vayBhdCB0aGUgcGFyZW50IGNsYXNzIHJ1ZXMgZGVmaW5lZCB1c2luZyB0aGUgXCIrK1wiIHByb3BlcnR5IGFuZCB0YWtlIG5hbWVzIGZyb20gdGhlXHJcbiAgICAgICAgLy8gcmVmZXJlbmNlZCBjbGFzcyBydWxlcyBhbmQgYXBwZW5kIHRoZW0gdG8gdGhlIG5hbWUuXHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50cylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSArPSBcIiBcIiArIHRoaXMucGFyZW50cy5tYXAoIHYgPT4gdHlwZW9mIHYgPT09IFwic3RyaW5nXCIgPyB2IDogdi5uYW1lKS5qb2luKFwiIFwiKTtcclxuICAgICAgICAgICAgdGhpcy5jc3NOYW1lID0gXCIuXCIgKyB0aGlzLm5hbWUucmVwbGFjZSggLyAvZywgXCIuXCIpO1xyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG4gICAgLy8gcmVtZW1iZXJlZCB2YWx1ZSBvZiB0aGUgXCIrK1wiIHByb3BlcnR5IG9mIHRoZSBpbnB1dCBzdHlsZXNldFxyXG4gICAgcHJpdmF0ZSBwYXJlbnRzPzogUGFyZW50Q2xhc3NUeXBlW107XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBJRFJ1bGUgY2xhc3MgZGVzY3JpYmVzIGEgc3R5bGVzZXQgdGhhdCBhcHBsaWVzIHRvIGVsZW1lbnRzIGlkZW50aWZpZWQgYnkgYW4gSUQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSURSdWxlIGV4dGVuZHMgTmFtZWRTdHlsZVJ1bGUgaW1wbGVtZW50cyBJSURSdWxlLCBJUHJlZml4ZWROYW1lZEVudGl0eVxyXG57XHJcblx0Ly8gUHJlZml4IGZvciBDU1MgZWxlbWVudCBpZGVudGlmaWVycy5cclxuXHRwdWJsaWMgcHJlZml4OiBcIiNcIiA9IFwiI1wiO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgU2VsZWN0b3JSdWxlIHR5cGUgZGVzY3JpYmVzIGEgc3R5bGVzZXQgdGhhdCBhcHBsaWVzIHRvIGVsZW1lbnRzIGlkZW50aWZpZWQgYnkgYSBDU1Mgc2VsZWN0b3IuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VsZWN0b3JSdWxlIGV4dGVuZHMgU3R5bGVSdWxlXHJcbntcclxuXHRwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCBzZWxlY3RvcjogQ3NzU2VsZWN0b3IsXHJcbiAgICAgICAgc3R5bGVzZXQ/OiBDb21iaW5lZFN0eWxlc2V0IHwgQ29tYmluZWRTdHlsZXNldFtdKVxyXG5cdHtcclxuXHRcdHN1cGVyKCBzZCwgc3R5bGVzZXQpO1xyXG5cdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJucyB0aGUgc2VsZWN0b3IgcGFydCBvZiB0aGUgc3R5bGUgcnVsZS5cclxuXHRwdWJsaWMgZ2V0U2VsKCk6IHN0cmluZ1xyXG5cdHtcclxuXHRcdHJldHVybiBzZWxlY3RvcjJzKCB0aGlzLnNlbGVjdG9yKTtcclxuXHR9XHJcblxyXG5cdC8vIHNlbGVjdG9yIG9iamVjdCBmb3IgdGhpcyBydWxlLlxyXG5cdHByaXZhdGUgc2VsZWN0b3I6IENzc1NlbGVjdG9yO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgUGFnZVJ1bGUgY2xhc3MgcmVwcmVzZW50cyB0aGUgQ1NTIEBwYWdlIHJ1bGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGFnZVJ1bGUgZXh0ZW5kcyBTdHlsZVJ1bGUgaW1wbGVtZW50cyBJUGFnZVJ1bGVcclxue1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbiwgcHNldWRvQ2xhc3M/OiBQYWdlUHNldWRvQ2xhc3MsIHN0eWxlPzogU3R5bGVzZXQpXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIoIHNkLCBzdHlsZSk7XHJcbiAgICAgICAgdGhpcy5wc2V1ZG9DbGFzcyA9IHBzZXVkb0NsYXNzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybnMgdGhlIHNlbGVjdG9yIHBhcnQgb2YgdGhlIHN0eWxlIHJ1bGUuXHJcbiAgICBwdWJsaWMgZ2V0U2VsKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBgQHBhZ2UgJHt0aGlzLnBzZXVkb0NsYXNzID8gdGhpcy5wc2V1ZG9DbGFzcyA6IFwiXCJ9YDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogU09NIHBhZ2UgcnVsZSAqL1xyXG4gICAgcHVibGljIGNzc1J1bGU6IENTU1BhZ2VSdWxlO1xyXG5cclxuICAgIC8qKiBPcHRpb25hbCBuYW1lIG9mIHRoZSBwYWdlIHBzZXVkbyBzdHlsZSAoZS5nLiBcIlwiOmZpcnN0XCIpICovXHJcbiAgICBwdWJsaWMgcHNldWRvQ2xhc3M/OiBQYWdlUHNldWRvQ2xhc3M7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIE1lcmdlcyBwcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBzdHlsZXNldCB0byB0aGUgdGFyZ2V0IHN0eWxlc2V0LiBBbGwgcmVndWxhciBwcm9wZXJ0aWVzIGFyZVxyXG4gKiByZXBsYWNlZC4gVGhlIFwiLS1cIiBwcm9wZXJ0eSBnZXRzIHNwZWNpYWwgdHJlYXRtZW50IGJlY2F1c2UgaXQgaXMgYW4gYXJyYXkuXHJcbiAqIEBwYXJhbSB0YXJnZXQgVGFyZ2V0IFN0eWxlc2V0IG9iamVjdCAtIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZDtcclxuICogQHBhcmFtIHNvdXJjZSBTb3VyY2UgU3R5bGVzZXQgb2JqZWN0IC0gY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLlxyXG4gKiBAcGFyYW0gc291cmNlXHJcbiAqL1xyXG5jb25zdCBtZXJnZVN0eWxlc2V0cyA9ICh0YXJnZXQ6IFN0eWxlc2V0LCBzb3VyY2U6IFN0eWxlc2V0KTogdm9pZCA9PlxyXG57XHJcbiAgICAvLyBjb3B5IGFsbCBvdGhlciBwcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZVxyXG4gICAgaWYgKE9iamVjdC5rZXlzKHRhcmdldCkubGVuZ3RoID09PSAwKVxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oIHRhcmdldCwgc291cmNlKTtcclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgICBmb3IoIGxldCBwcm9wTmFtZSBpbiBzb3VyY2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAocHJvcE5hbWUgPT09IFwiLS1cIilcclxuICAgICAgICAgICAgICAgIG1lcmdlQ3VzdG9tUHJvcHMoIHRhcmdldCwgc291cmNlW3Byb3BOYW1lXSEpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBtZXJnZVByb3BWYWx1ZXMoIHRhcmdldCwgcHJvcE5hbWUsIHNvdXJjZVtwcm9wTmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogTWVyZ2VzIFwiLS1cIiBwcm9wZXJ0eSBmcm9tIHRoZSBzb3VyY2Ugc3R5bGVzZXQgdG8gdGhlIHRhcmdldCBzdHlsZXNldC5cclxuICovXHJcbmNvbnN0IG1lcmdlQ3VzdG9tUHJvcHMgPSAodGFyZ2V0OiBTdHlsZXNldCwgc291cmNlVmFyczogQ3VzdG9tVmFyX1N0eWxlVHlwZVtdKTogdm9pZCA9PlxyXG57XHJcbiAgICBsZXQgdGFyZ2V0VmFycyA9IHRhcmdldFtcIi0tXCJdO1xyXG4gICAgdGFyZ2V0W1wiLS1cIl0gPSAhdGFyZ2V0VmFycyA/IHNvdXJjZVZhcnMuc2xpY2UoKSA6IHRhcmdldFZhcnMuY29uY2F0KCBzb3VyY2VWYXJzKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBNZXJnZXMgdmFsdWVzIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBmcm9tIHRoZSBzb3VyY2Ugc3R5bGVzZXQgdG8gdGhlIHRhcmdldCBzdHlsZXNldC4gTm90ZSB0aGF0XHJcbiAqIGJvdGggc291cmNlIG9yIHRhcmdldCB2YWx1ZSBjYW4gYmUgZWl0aGVyIHNpbmdsZSB2YWx1ZSBvciBhbiBvYmplY3Qgd2l0aCB0aGUgYFwiW11cImAgcHJvcGVydHlcclxuICogdGhhdCBjb250YWlucyBtdWx0aXBsZSB2YWx1ZXMuXHJcbiAqIEBwYXJhbSB0YXJnZXQgVGFyZ2V0IFN0eWxlc2V0IG9iamVjdCAtIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC5cclxuICogQHBhcmFtIHByb3BOYW1lIE5hbWUgb2YgdGhlIHByb3BlcnR5LlxyXG4gKiBAcGFyYW0gc291cmNlVmFsIFZhbHVlIGZyb20gdGhlIHNvdXJjZSBzdHlsZXNldCB0byBtZXJnZSB3aXRoIHRoZSB0YXJnZXQgdmFsdWUgLSBjYW5ub3QgYmUgbnVsbFxyXG4gKiBvciB1bmRlZmluZWQuXHJcbiAqL1xyXG5jb25zdCBtZXJnZVByb3BWYWx1ZXMgPSAodGFyZ2V0OiBTdHlsZXNldCwgcHJvcE5hbWU6IHN0cmluZywgc291cmNlVmFsOiBhbnkpOiB2b2lkID0+XHJcbntcclxuICAgIGxldCB0YXJnZXRWYWwgPSB0YXJnZXRbcHJvcE5hbWVdO1xyXG4gICAgaWYgKHRhcmdldFZhbCA9PSBudWxsKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGlmIHByb3BlcnR5IGRvZXNuJ3QgZXhpc3QgaW4gdGhlIHRhcmdldCBvciBpdHMgdmFsdWUgaXMgbnVsbCBvciB1bmRlZmluZWQsIGp1c3RcclxuICAgICAgICAvLyB0YWtlIHRoZSBzb3VyY2UncyB2YWx1ZVxyXG4gICAgICAgIHRhcmdldFtwcm9wTmFtZV0gPSBzb3VyY2VWYWw7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHRhcmdldEFycmF5OiBhbnlbXSA9IHRhcmdldFZhbFtcIltdXCJdO1xyXG4gICAgICAgIGlmICghdGFyZ2V0QXJyYXkpXHJcbiAgICAgICAgICAgIHRhcmdldFtwcm9wTmFtZV0gPSB7IFwiW11cIjogdGFyZ2V0QXJyYXkgPSBbdGFyZ2V0VmFsXSB9O1xyXG5cclxuICAgICAgICBsZXQgc291cmNlQXJyYXk6IGFueVtdID0gc291cmNlVmFsW1wiW11cIl07XHJcbiAgICAgICAgaWYgKCFzb3VyY2VBcnJheSlcclxuICAgICAgICAgICAgdGFyZ2V0QXJyYXkucHVzaCggc291cmNlVmFsKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRhcmdldEFycmF5LnB1c2goIC4uLnNvdXJjZUFycmF5KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7SVZhclJ1bGUsIElDb25zdFJ1bGUsIElTdHlsZURlZmluaXRpb259IGZyb20gXCIuLi9hcGkvUnVsZVR5cGVzXCJcclxuaW1wb3J0IHtWYXJUZW1wbGF0ZU5hbWUsIEV4dGVuZGVkVmFyVmFsdWUsIElTeW50YXhUeXBlU3R5bGVzZXR9IGZyb20gXCIuLi9hcGkvU3R5bGVzZXRzXCJcclxuaW1wb3J0IHtzcDJzfSBmcm9tIFwiLi4vaW1wbC9TdHlsZUltcGxcIlxyXG5pbXBvcnQge0lNaW1jc3NSdWxlQmFnLCBSdWxlLCBSdWxlTGlrZX0gZnJvbSBcIi4vUnVsZVwiO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIFZhckJhc2VSdWxlIGNsYXNzIGNvbnRhaW5zIGZ1bmN0aW9uYWxpdHkgY29tbW9uIGZvciBWYXJSdWxlIGNsYXNzIGRlc2NyaWJpbmcgYSBjdXN0b20gQ1NTXHJcbiAqIHByb3BlcnR5IGRlZmluaXRpb24gaW4gdGhlIGA6cm9vdGAgcnVsZSBhbmQgZm9yIFByb3BlcnR5UnVsZSBjbGFzcyBkZXNjcmliaW5nIHRoZSBgQHByb3BlcnR5YFxyXG4gKiBhdC1ydWxlLlxyXG4gKi9cclxuYWJzdHJhY3QgY2xhc3MgVmFyQmFzZVJ1bGU8SyBleHRlbmRzIFZhclRlbXBsYXRlTmFtZSA9IGFueT4gZXh0ZW5kcyBSdWxlIGltcGxlbWVudHMgSVZhclJ1bGU8Sz5cclxue1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCBzZDogSVN0eWxlRGVmaW5pdGlvbiwgdGVtcGxhdGU6IEssIHZhbHVlPzogRXh0ZW5kZWRWYXJWYWx1ZTxLPiwgbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSVZhclJ1bGU8Sz4pXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIoc2QpO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5uYW1lT3ZlcnJpZGUgPSBuYW1lT3ZlcnJpZGU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIHRoZSBvYmplY3QgaXMgc3BlY2lmaWVkIGFzIGEgdmFsdWUgb2YgYSBzdHlsZSBwcm9wZXJ0eS5cclxuICAgIC8vIFdlIHJldHVybiB0aGUgdmFyKC0tbmFtZSkgZXhwcmVzc2lvbi5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gYHZhcigke3RoaXMuY3NzTmFtZX0pYDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcm9jZXNzZXMgdGhlIGdpdmVuIHJ1bGUuXHJcbiAgICBwdWJsaWMgcHJvY2VzcyggcnVsZU5hbWU6IHN0cmluZyB8IG51bGwpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5yYy5nZXRTY29wZWROYW1lKCBydWxlTmFtZSwgdGhpcy5uYW1lT3ZlcnJpZGUpO1xyXG4gICAgICAgIHRoaXMuY3NzTmFtZSA9IFwiLS1cIiArIHRoaXMubmFtZTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VmFsdWUoKTogRXh0ZW5kZWRWYXJWYWx1ZTxLPlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlITtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgbmV3IHZhbHVlIG9mIHRoaXMgY3VzdG9tIENTUyBwcm9wZXJ0eS5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgZm9yIHRoZSBDU1MgcHJvcGVydHkuXHJcbiAgICAgKiBAcGFyYW0gc2NoZWR1bGVyVHlwZSBJRCBvZiBhIHJlZ2lzdGVyZWQgc2NoZWR1bGVyIHR5cGUgdGhhdCBpcyB1c2VkIHRvIHdyaXRlIHRoZSBwcm9wZXJ0eVxyXG4gICAgICogdmFsdWUgdG8gdGhlIERPTS4gSWYgdW5kZWZpbmVkLCB0aGUgY3VycmVudCBkZWZhdWx0IHNjaGVkdWxlciB3aWxsIGJlIHVzZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRWYWx1ZSggdmFsdWU6IEV4dGVuZGVkVmFyVmFsdWU8Sz4sIHNjaGVkdWxlclR5cGU/OiBudW1iZXIpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLnJjKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGltcG9ydGFudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgXCIhXCIgaW4gKHZhbHVlIGFzIGFueSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGltcG9ydGFudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlW1wiIVwiXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yYy5zZXRWYXJWYWx1ZSggdGhpcy5jc3NOYW1lLFxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgID8gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIDogc3AycyggdGhpcy50ZW1wbGF0ZSwgdmFsdWUpLCBpbXBvcnRhbnQsIHNjaGVkdWxlclR5cGUpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gTmFtZSBvZiBhIG5vbi1jdXN0b20gQ1NTIHByb3BlcnR5IHdob3NlIHR5cGUgZGV0ZXJtaW5lcyB0aGUgdHlwZSBvZiB0aGUgY3VzdG9tIHByb3BlcnR5IHZhbHVlLlxyXG4gICAgcHVibGljIHRlbXBsYXRlOiBLO1xyXG5cclxuXHQvLyBQcmVmaXggZm9yIENTUyBjbGFzc2VzLlxyXG5cdHB1YmxpYyBwcmVmaXg6IFwiLS1cIiA9IFwiLS1cIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJ1bGUncyBuYW1lIC0gdGhpcyBpcyBhIHVuaXF1ZSBuYW1lIHRoYXQgaXMgYXNzaWduZWQgYnkgdGhlIE1pbWNzcyBpbmZyYXN0dWN0dXJlLiBUaGlzIG5hbWVcclxuICAgICAqIGRvZXNuJ3QgaGF2ZSB0aGUgcHJlZml4IHRoYXQgaXMgdXNlZCB3aGVuIHJlZmVycmluZyB0byBjbGFzc2VzICguKSwgSURzICgjKSBhbmQgY3VzdG9tIENTU1xyXG4gICAgICogcHJvcGVydGllcyAoLS0pLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3VzdG9tIENTUyBwcm9wZXJ0eSBuYW1lIHByZWZpeGVkIHdpdGggYFwiLS1cImAuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjc3NOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgLy8gVmFsdWUgb2YgdGhlIGN1c3RvbSBDU1MgcHJvcGVydHkuXHJcbiAgICBwcm90ZWN0ZWQgdmFsdWU/OiBFeHRlbmRlZFZhclZhbHVlPEs+O1xyXG5cclxuICAgIC8vIE5hbWUgb3IgbmFtZWQgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIGEgbmFtZSBmb3IgdGhpcyBydWxlLiBJZiB0aGlzIHByb3BlcnR5XHJcbiAgICAvLyBpcyBub3QgZGVmaW5lZCwgdGhlIG5hbWUgd2lsbCBiZSB1bmlxdWVseSBnZW5lcmF0ZWQuXHJcbiAgICBwcm90ZWN0ZWQgbmFtZU92ZXJyaWRlPzogc3RyaW5nIHwgSVZhclJ1bGU8Sz47XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBWYXJSdWxlIGNsYXNzIGRlc2NyaWJlcyBhIGN1c3RvbSBDU1MgcHJvcGVydHkuIFZhclJ1bGUgaXMgbm90IGEgcmVhbCBDU1MgcnVsZTsgaG93ZXZlciwgaW5cclxuICogbWFueSBhc3BlY3RzIGl0IHJlcGVhdHMgdGhlIFJ1bGUncyBmdW5jdGlvbmFsaXR5LiBJbiBwYXJ0aWN1bGFyIGl0IGhhcyB0aGUgcHJvY2VzcyBmdW5jdGlvbiB0aGF0XHJcbiAqIGFsbG93cyBpdCB0byBvYnRhaW4gYW4gYWN0dWFsIG5hbWUsIHdoaWNoIHdpbGwgYmUgdXNlZCB3aGVuIGRlZmluaW5nIGFuZCB1c2luZyB0aGlzIGN1c3RvbVxyXG4gKiBwcm9wZXJ0eSBpbiBDU1MuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmFyUnVsZTxLIGV4dGVuZHMgVmFyVGVtcGxhdGVOYW1lID0gYW55PiBleHRlbmRzIFZhckJhc2VSdWxlPEs+XHJcbntcclxuXHRwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCB0ZW1wbGF0ZTogSywgdmFsdWU/OiBFeHRlbmRlZFZhclZhbHVlPEs+LFxyXG4gICAgICAgIG5hbWVPdmVycmlkZT86IHN0cmluZyB8IElWYXJSdWxlPEs+KVxyXG5cdHtcclxuICAgICAgICBzdXBlciggc2QsIHRlbXBsYXRlLCB2YWx1ZSwgbmFtZU92ZXJyaWRlKTtcclxuXHR9XHJcblxyXG5cclxuICAgIC8vIEluc2VydHMgdGhpcyBydWxlIGludG8gdGhlIGdpdmVuIHBhcmVudCBydWxlIG9yIHN0eWxlc2hlZXQuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZVxyXG4gICAgLy8gc3R5bGUgZGVmaW5pdGlvbiBjbGFzcywgdG8gd2hpY2ggdGhpcyBydWxlIGJlbG9uZ3MsIGlzIGFjdGl2YXRlZC5cclxuICAgIHB1YmxpYyBpbnNlcnQoIHJ1bGVCYWc6IElNaW1jc3NSdWxlQmFnKTogdm9pZCB7fVxyXG5cclxuXHJcblxyXG5cdC8vIENvbnZlcnRzIHRoZSBydWxlIHRvIENTUyBzdHJpbmcuXHJcblx0cHVibGljIHRvQ3NzKCk6IHN0cmluZyB8IG51bGxcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy52YWx1ZSA9PSBudWxsID8gbnVsbCA6IGAke3RoaXMuY3NzTmFtZX06ICR7c3AycyggdGhpcy50ZW1wbGF0ZSwgdGhpcy52YWx1ZSl9YDtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBQcm9wZXJ0eVJ1bGUgY2xhc3MgZGVzY3JpYmVzIHRoZSBgQHByb3BlcnR5YCBhdC1ydWxlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFByb3BlcnR5UnVsZTxLIGV4dGVuZHMga2V5b2YgSVN5bnRheFR5cGVTdHlsZXNldCA9IGFueSwgVCBleHRlbmRzIEsgfCBbc3RyaW5nXSA9IGFueT4gZXh0ZW5kcyBWYXJCYXNlUnVsZTxLPlxyXG57XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCBzeW50YXg6IFQsIGluaXRWYWx1ZT86IEV4dGVuZGVkVmFyVmFsdWU8Sz4sIGluaGVyaXRzOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICBuYW1lT3ZlcnJpZGU/OiBzdHJpbmcgfCBJVmFyUnVsZTxLPilcclxuICAgIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzeW50YXgpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3VwZXIoIHNkLCBcIipcIiBhcyBLLCBpbml0VmFsdWUsIG5hbWVPdmVycmlkZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3ludGF4ID0gc3ludGF4WzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdXBlciggc2QsIHN5bnRheCBhcyBLLCBpbml0VmFsdWUsIG5hbWVPdmVycmlkZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3ludGF4ID0gc3ludGF4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbmhlcml0cyA9IGluaGVyaXRzO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cdC8vIEluc2VydHMgdGhpcyBydWxlIGludG8gdGhlIGdpdmVuIHBhcmVudCBydWxlIG9yIHN0eWxlc2hlZXQuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZVxyXG5cdC8vIHN0eWxlIGRlZmluaXRpb24gY2xhc3MsIHRvIHdoaWNoIHRoaXMgcnVsZSBiZWxvbmdzLCBpcyBhY3RpdmF0ZWQuXHJcblx0cHVibGljIGluc2VydCggcnVsZUJhZzogSU1pbWNzc1J1bGVCYWcpOiB2b2lkXHJcbiAgICB7XHJcblx0XHRsZXQgcnVsZVRleHQgPSBgQHByb3BlcnR5ICR7dGhpcy5jc3NOYW1lfXtzeW50YXg6JyR7dGhpcy5zeW50YXh9JztgICtcclxuICAgICAgICAgICAgYGluaGVyaXRzOiR7dGhpcy5pbmhlcml0c307aW5pdGlhbC12YWx1ZToke3NwMnMoIHRoaXMudGVtcGxhdGUsIHRoaXMudmFsdWUpfTt9YDtcclxuXHJcbiAgICAgICAgdGhpcy5jc3NSdWxlID0gcnVsZUJhZy5hZGQoIHJ1bGVUZXh0KT8uY3NzUnVsZSBhcyBDU1NSdWxlO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cdC8vIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBjdXN0b20gcHJvcGVydHkgcmVnaXN0cmF0aW9uIGluaGVyaXRzIGJ5IGRlZmF1bHQuXHJcblx0cHJpdmF0ZSBzeW50YXg6IHN0cmluZztcclxuXHJcblx0Ly8gRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGN1c3RvbSBwcm9wZXJ0eSByZWdpc3RyYXRpb24gaW5oZXJpdHMgYnkgZGVmYXVsdC5cclxuXHRwcml2YXRlIGluaGVyaXRzOiBib29sZWFuO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgSUNvbnN0UnVsZSBpbnRlcmZhY2UgcmVwcmVzZW50cyBhIFwiY29uc3RhbnRcIiB0aGF0IGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoZSB0eXBlIGRlZmluZWQgYnlcclxuICogdGhlIGB0ZW1wbGF0ZWAgcGFyYW1ldGVyIGNhbiBiZSB1c2VkLiBUaGVzZSBhcmUgY2FsbGVkIGNvbnN0YW50cywgYmVjYXVzZSB0aGV5IHByb3ZpZGUgdGhlXHJcbiAqIGNvbnZlbmllbnQgYW5kIGxpZ2h0d2VpZ2h0IHdheSBvZiBkZWZpbmluZyB2YWx1ZXMgdGhhdCBhcmUgdW5jaGFuZ2VkIGR1cmluZyB0aGUgYXBwbGljYXRpb25cclxuICogbGlmZXRpbWUuIEFsdGhvdWdoIGNvbnN0YW50cyBhcmUgZGVmaW5lZCB2ZXJ5IHNpbWlsYXJseSB0byBjdXN0b20gcHJvcGVydGllcyAoc2VlIHRoZVxyXG4gKiBbW0lWYXJSdWxlXV0gZnVuY3Rpb24pLCB0aGV5IGNhbm5vdCBwYXJ0aWNpcGF0ZSBpbiB0aGUgY2FzY2FkZSBhbmQgY2Fubm90IGJlIHJlZGVmaW5lZCB1bmRlclxyXG4gKiBlbGVtZW50cy4gQ29uc3RhbnQgY2FuLCBob3dldmVyLCB1c2UgYW55IGV4cHJlc3Npb24gdGhhdCBzYXRpc2ZpZXMgdGhlIHR5cGUgZGVmaW5lZCBieSB0aGVcclxuICogYHRlbXBsYXRlYCBwYXJhbWV0ZXIgaW5jbHVkaW5nIG90aGVyIGNvbnN0YW50cywgY3VzdG9tIHByb3BlcnRpZXMgYW5kIGZ1bmN0aW9ucy5cclxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhpcyBpbnRlcmZhY2UgYXJlIHJldHVybmVkIGZyb20gdGhlIFtbJGNvbnN0XV0gZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29uc3RSdWxlPEsgZXh0ZW5kcyBWYXJUZW1wbGF0ZU5hbWUgPSBhbnk+IGV4dGVuZHMgUnVsZUxpa2UgaW1wbGVtZW50cyBJQ29uc3RSdWxlPEs+XHJcbntcclxuXHRwdWJsaWMgY29uc3RydWN0b3IoIHNkOiBJU3R5bGVEZWZpbml0aW9uLCB0ZW1wbGF0ZTogSywgdmFsdWU/OiBFeHRlbmRlZFZhclZhbHVlPEs+KVxyXG5cdHtcclxuICAgICAgICBzdXBlcihzZCk7XHJcblx0XHR0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5zID0gc3AycyggdGVtcGxhdGUsIHZhbHVlKTtcclxuXHR9XHJcblxyXG5cclxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIHRoZSBvYmplY3QgaXMgc3BlY2lmaWVkIGFzIGEgdmFsdWUgb2YgYSBzdHlsZSBwcm9wZXJ0eS5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5zOyB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuXHQgKiBHZXRzIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuXHJcblx0ICovXHJcbiAgICBwdWJsaWMgZ2V0VmFsdWUoKTogRXh0ZW5kZWRWYXJWYWx1ZTxLPlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cdC8vIE5hbWUgb2YgYSBub24tY3VzdG9tIENTUyBwcm9wZXJ0eSB3aG9zZSB0eXBlIGRldGVybWluZXMgdGhlIHR5cGUgb2YgdGhlIGN1c3RvbSBwcm9wZXJ0eSB2YWx1ZS5cclxuXHRwdWJsaWMgdGVtcGxhdGU6IEs7XHJcblxyXG5cdC8vIENvbnN0YW50J3MgdmFsdWUgYXMgYSBzdHJpbmcuXHJcblx0cHJpdmF0ZSB2YWx1ZT86IEV4dGVuZGVkVmFyVmFsdWU8Sz47XHJcblxyXG5cdC8vIENvbnN0YW50J3MgdmFsdWUgYXMgYSBzdHJpbmcuXHJcblx0cHJpdmF0ZSBzOiBzdHJpbmc7XHJcbn1cclxuXHJcblxyXG5cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBUeXBlIGRlZmluaXRpb25zIGZvciBtaW1jc3NcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS9Db3JlVHlwZXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vYXBpL051bWVyaWNUeXBlc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9hcGkvQ29sb3JUeXBlc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9hcGkvQ291bnRlclR5cGVzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS9TaGFwZVR5cGVzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS9Gb250VHlwZXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vYXBpL01lZGlhVHlwZXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vYXBpL1J1bGVUeXBlc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9hcGkvU2NoZWR1bGluZ1R5cGVzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS9TdHlsZVR5cGVzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS9TdHlsZXNldHNcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS9Db3JlQVBJXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS9OdW1lcmljQVBJXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS9Db2xvckFQSVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9hcGkvU2hhcGVBUElcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vYXBpL1J1bGVBUElcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vYXBpL1NjaGVkdWxpbmdBUElcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vYXBpL1N0eWxlQVBJXCI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==